name: Creator Hub CI

on:
  workflow_call:
    inputs:
      inspector-package-url:
        description: "Uploaded inspector package url"
        required: false
        type: string
        default: latest

concurrency:
  group: creator-hub-${{ github.ref }}
  cancel-in-progress: true

env:
  WORKING_DIRECTORY: packages/@dcl/creator-hub

jobs:
  build:
    name: build
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    env:
      WORKING_DIRECTORY: packages/@dcl/creator-hub
      PRODUCTION: ${{ github.ref == 'refs/heads/main' && !github.event.pull_request.number }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install @dcl/inspector@branch package
        run: npm install "${{ secrets.SDK_TEAM_S3_BASE_URL }}/${{ inputs.inspector-package-url }}"
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - name: 'Install dependencies'
        run: npm ci
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - name: 'Build'
        run: echo MODE=$MODE && npm run build
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"
          MODE: ${{ env.PRODUCTION == 'true' && 'production' || 'development' }}
          VITE_SEGMENT_CREATORS_HUB_API_KEY: ${{ secrets.VITE_SEGMENT_CREATORS_HUB_API_KEY }}
          VITE_SEGMENT_INSPECTOR_API_KEY: ${{ secrets.VITE_SEGMENT_INSPECTOR_API_KEY }}
          VITE_ALLOWED_EXTERNAL_ORIGINS: ${{ secrets.VITE_ALLOWED_EXTERNAL_ORIGINS }}
          # Sentry AUTH Token
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      # Remove all Creator Hub pre-releases and their tags to ensure semantic versioning works correctly.
      # By cleaning up all pre-releases, we ensure the semantic action will use the most recent stable release
      # as the baseline for calculating the next version. This is necessary because pre-releases can interfere
      # with the semantic action's version calculation.
      - name: Remove all Creator Hub pre-releases and their tags
        if: ${{ env.PRODUCTION == 'true' }}
        shell: bash
        run: |
          echo "🔍 Finding all Creator Hub pre-releases..."

          # Get all releases with creator-hub-v prefix and check which are pre-releases
          PRERELEASE_TAGS=$(gh release list --limit 100 | grep '^creator-hub-v' | while read -r line; do
            TAG=$(echo "$line" | awk '{print $1}')
            IS_PRERELEASE=$(gh release view "$TAG" --json isPrerelease --jq '.isPrerelease' 2>/dev/null || echo "false")
            if [[ "$IS_PRERELEASE" == "true" ]]; then
              echo "$TAG"
            fi
          done)

          if [[ -z "$PRERELEASE_TAGS" ]]; then
            echo "✅ No Creator Hub pre-releases found to delete."
            exit 0
          fi

          echo "📋 Found the following pre-releases to delete:"
          echo "$PRERELEASE_TAGS"
          echo ""

          # Delete each pre-release and its tag
          echo "$PRERELEASE_TAGS" | while read -r TAG; do
            if [[ -n "$TAG" ]]; then
              echo "🗑️  Deleting pre-release: $TAG"
              gh release delete "$TAG" --yes || echo "⚠️  Failed to delete release $TAG"

              echo "🏷️  Deleting tag from remote: $TAG"
              git push --delete origin "$TAG" || echo "⚠️  Failed to delete remote tag $TAG"

              echo "🏷️  Deleting tag locally: $TAG"
              git tag -d "$TAG" || echo "⚠️  Failed to delete local tag $TAG"

              echo "✅ Completed cleanup for $TAG"
              echo ""
            fi
          done

          echo "🎉 Finished cleaning up all Creator Hub pre-releases!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump latest release version
        id: new_version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "creator-hub-v"
          version_format: ${major}.${minor}.${patch}
          major_pattern: "/^(major|breaking).+/"
          minor_pattern: "/^(minor|feat).+/"
          bump_each_commit: false
          bump_each_commit_patch_pattern: "/^(patch|fix).+/"
          search_commit_body: true
          user_format_type: "json"
          change_path: "packages/@dcl/creator-hub packages/@dcl/inspector"

      # Download 'SSLcom/esigner-codesign' to a folder called 'esigner-codesign' inside creator-hub package
      - name: Checkout esigner-codesign repository (Windows)
        if: ${{ env.PRODUCTION == 'true' && matrix.os == 'windows-latest' }}
        uses: actions/checkout@v3
        with:
          repository: 'SSLcom/esigner-codesign'
          path: ${{ env.WORKING_DIRECTORY }}/esigner-codesign

      - name: Compile artifacts ${{ env.PRODUCTION == 'true' && 'and upload them to github release' || '' }}
        # I use this action because it is capable of retrying multiple times if there are any issues with the distribution server
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 60
          max_attempts: 6
          retry_wait_seconds: 15
          retry_on: error
          shell: 'bash'
          command: npx electron-builder --project ${{ env.WORKING_DIRECTORY }} --config electron-builder.cjs --config.extraMetadata.version=${{ steps.new_version.outputs.new_version }} ${{ matrix.os == 'macos-latest' && format('--config.mac.notarize={0}', true) || '' }} --publish ${{ env.PRODUCTION == 'true' && 'always' || 'never' }}
        env:
          # Disable hard links to avoid issues with npm
          USE_HARD_LINKS: false
          # Code Signing params
          # See https://www.electron.build/code-signing
          CSC_LINK: ${{ secrets.MACOS_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
          # Notarization params
          # See https://www.electron.build/configuration/mac#NotarizeNotaryOptions
          APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
          # Publishing artifacts
          GH_TOKEN: ${{ secrets.github_token }} # GitHub token, automatically provided (No need to define this secret in the repo settings)
          EP_PRE_RELEASE: true # Publish as pre-release
          # The following are the parameters required by the esigner-codesign action to work, we must explicitly pass in even the optional ones since we're not using the action directly, but from the checked out repo
          CODE_SIGN_SCRIPT_PATH: ${{ matrix.os == 'windows-latest' && format('{0}\\esigner-codesign\\dist\\index.js', github.workspace) || '' }}
          INPUT_COMMAND: "sign"
          INPUT_FILE_PATH: "${{ github.workspace }}\\dist\\Decentraland Creator Hub-${{ steps.new_version.outputs.new_version }}-win-x64.exe"
          INPUT_OVERRIDE: "true"
          INPUT_MALWARE_BLOCK: "false"
          INPUT_CLEAN_LOGS: "false"
          INPUT_JVM_MAX_MEMORY: "1024M"
          INPUT_ENVIRONMENT_NAME: "PROD"
          INPUT_USERNAME: ${{ secrets.ES_USERNAME }}
          INPUT_PASSWORD: ${{ secrets.ES_PASSWORD }}
          INPUT_TOTP_SECRET: ${{ secrets.ES_TOTP_SECRET }}
          INPUT_CREDENTIAL_ID: ${{ secrets.WINDOWS_CREDENTIAL_ID_SIGNER }}

      - name: Move artifacts to upload folder
        if: ${{ env.PRODUCTION == 'false' }}
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: sh -c 'mkdir dist/upload && cp dist/*.dmg dist/*.exe dist/upload 2> /dev/null || :'

      - name: Upload to S3
        if: ${{ env.PRODUCTION == 'false' }}
        id: upload
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.SDK_TEAM_AWS_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SDK_TEAM_AWS_SECRET }}
        run: |
          npx @dcl/cdn-uploader@next --bucket ${{ secrets.SDK_TEAM_S3_BUCKET }} --local-folder dist/upload --bucket-folder creator-hub/branch/${{ github.head_ref }}

      - name: Set specific windows instructions
        if: ${{ env.PRODUCTION == 'false' && matrix.os == 'windows-latest' }}
        id: windows-instructions
        shell: bash
        run: |
          echo "list<<EOF" >> $GITHUB_ENV
          echo "[win-x64](${{ secrets.SDK_TEAM_S3_BASE_URL }}/creator-hub/branch/${{ github.head_ref }}/Decentraland%20Creator%20Hub-${{ steps.new_version.outputs.new_version }}-win-x64.exe)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Set specific macos instructions
        if: ${{ env.PRODUCTION == 'false' && matrix.os == 'macos-latest' }}
        id: macos-instructions
        run: |
          echo "list<<EOF" >> $GITHUB_ENV
          echo "[mac-x64](${{ secrets.SDK_TEAM_S3_BASE_URL }}/creator-hub/branch/${{ github.head_ref }}/Decentraland%20Creator%20Hub-${{ steps.new_version.outputs.new_version }}-mac-x64.dmg)" >> $GITHUB_ENV
          echo "[mac-arm64](${{ secrets.SDK_TEAM_S3_BASE_URL }}/creator-hub/branch/${{ github.head_ref }}/Decentraland%20Creator%20Hub-${{ steps.new_version.outputs.new_version }}-mac-arm64.dmg)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          content=$(cat ./.github/workflows/creator-hub-macos-instructions.md)
          echo "macos-instructions<<EOF" >> $GITHUB_ENV
          echo "$content" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Find Comment
        if: ${{ env.PRODUCTION == 'false' }}
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Test this pull request on ${{ matrix.os }}

      - name: Create or update comment
        if: ${{ env.PRODUCTION == 'false' }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            # Test this pull request on ${{ matrix.os }}
            #### Download the correct version for your architecture:
              ${{ env.list }}

              ${{ env.macos-instructions }}
          edit-mode: replace

      - name: Generate Creator Hub release notes
        id: release_notes
        if: ${{ env.PRODUCTION == 'true' }}
        run: |
          # Get commits since last version that affect Creator Hub and Inspector
          COMMITS=$(git log creator-hub-v${{ steps.new_version.outputs.previous_version }}..HEAD --oneline --no-merges --pretty=format:"%H|%s|%an|%ae" -- packages/@dcl/creator-hub packages/@dcl/inspector)

          # Initialize release notes
          echo "## Creator Hub v${{ steps.new_version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "### Changes:" >> release_notes.md
          echo "" >> release_notes.md

          # Process each commit and categorize by package
          declare -A creator_hub_commits
          declare -A inspector_commits

          while IFS='|' read -r commit_hash commit_msg author_name author_email; do
            if [[ -n "$commit_hash" ]]; then
              # Check which files were changed in this commit
              CHANGED_FILES=$(git show --name-only --pretty=format: $commit_hash)

              # Categorize commit based on changed files
              AFFECTS_CREATOR_HUB=$(echo "$CHANGED_FILES" | grep -c "packages/@dcl/creator-hub" || true)
              AFFECTS_INSPECTOR=$(echo "$CHANGED_FILES" | grep -c "packages/@dcl/inspector" || true)

              echo "Processing commit: $commit_hash"

              # Try to get PR number from commit
              PR_INFO=$(gh api repos/${{ github.repository }}/commits/$commit_hash/pulls --jq '.[0] | select(. != null) | {number: .number, html_url: .html_url}' 2>/dev/null || echo "null")

              # Get GitHub username from email
              GITHUB_USER=$(gh api search/users?q="$author_email+in:email" --jq '.items[0].login // empty' 2>/dev/null || echo "")

              # Format author link
              if [[ -n "$GITHUB_USER" ]]; then
                AUTHOR_LINK="[$author_name](https://github.com/$GITHUB_USER)"
              else
                AUTHOR_LINK="$author_name"
              fi

              # Format PR link if available
              if [[ "$PR_INFO" != "null" ]] && [[ -n "$PR_INFO" ]]; then
                PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
                PR_URL=$(echo "$PR_INFO" | jq -r '.html_url')
                PR_LINK=" in [#$PR_NUMBER]($PR_URL)"
              else
                PR_LINK=""
              fi

              # Format the commit entry
              COMMIT_ENTRY="- $commit_msg by $AUTHOR_LINK$PR_LINK"

              # Add to appropriate section(s)
              if [[ $AFFECTS_CREATOR_HUB -gt 0 ]]; then
                creator_hub_commits["$commit_hash"]="$COMMIT_ENTRY"
              fi
              if [[ $AFFECTS_INSPECTOR -gt 0 ]]; then
                inspector_commits["$commit_hash"]="$COMMIT_ENTRY"
              fi
            fi
          done <<< "$COMMITS"

          # Write Creator Hub changes
          if [[ ${#creator_hub_commits[@]} -gt 0 ]]; then
            echo "#### Creator Hub Changes:" >> release_notes.md
            echo "" >> release_notes.md
            for commit_hash in "${!creator_hub_commits[@]}"; do
              echo "${creator_hub_commits[$commit_hash]}" >> release_notes.md
            done
            echo "" >> release_notes.md
          fi

          # Write Inspector changes
          if [[ ${#inspector_commits[@]} -gt 0 ]]; then
            echo "#### Inspector Changes:" >> release_notes.md
            echo "" >> release_notes.md
            for commit_hash in "${!inspector_commits[@]}"; do
              echo "${inspector_commits[$commit_hash]}" >> release_notes.md
            done
          fi

          # Output the release notes content for use in other steps
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          cat release_notes.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display generated release notes
        if: ${{ env.PRODUCTION == 'true' }}
        run: |
          echo "${{ env.RELEASE_NOTES }}"
