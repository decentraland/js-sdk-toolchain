{"version":3,"file":"game.js","sources":["../../../../../packages/@dcl/ecs/node_modules/@protobufjs/aspromise/index.js","../../../../../packages/@dcl/ecs/node_modules/@protobufjs/base64/index.js","../../../../../packages/@dcl/ecs/node_modules/@protobufjs/eventemitter/index.js","../../../../../packages/@dcl/ecs/node_modules/@protobufjs/float/index.js","../../../../../packages/@dcl/ecs/node_modules/@protobufjs/inquire/index.js","../../../../../packages/@dcl/ecs/node_modules/@protobufjs/utf8/index.js","../../../../../packages/@dcl/ecs/node_modules/@protobufjs/pool/index.js","../../../../../packages/@dcl/ecs/node_modules/protobufjs/src/util/longbits.js","../../../../../packages/@dcl/ecs/node_modules/protobufjs/src/util/minimal.js","../../../../../packages/@dcl/ecs/node_modules/protobufjs/src/writer.js","../../../../../packages/@dcl/ecs/node_modules/protobufjs/src/writer_buffer.js","../../../../../packages/@dcl/ecs/node_modules/protobufjs/src/reader.js","../../../../../packages/@dcl/ecs/node_modules/protobufjs/src/reader_buffer.js","../../../../../packages/@dcl/ecs/node_modules/protobufjs/src/rpc/service.js","../../../../../packages/@dcl/ecs/node_modules/protobufjs/src/rpc.js","../../../../../packages/@dcl/ecs/node_modules/protobufjs/src/roots.js","../../../../../packages/@dcl/ecs/node_modules/protobufjs/src/index-minimal.js","../../../../../packages/@dcl/ecs/node_modules/protobufjs/minimal.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/animator.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/Animator.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/audio_source.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/AudioSource.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/audio_stream.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/AudioStream.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_attach.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/AvatarAttach.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/common/vectors.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_modifier_area.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/AvatarModifierArea.gen.js","../../../../../packages/@dcl/ecs/node_modules/long/src/long.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/common/colors.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_shape.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/AvatarShape.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/billboard.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/Billboard.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/camera_mode.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/CameraMode.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/camera_mode_area.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/CameraModeArea.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/gltf_container.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/GltfContainer.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/common/texture.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/material.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/Material.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_collider.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/MeshCollider.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_renderer.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/MeshRenderer.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/nft_shape.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/NftShape.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/raycast_result.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_events_result.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/PointerEventsResult.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_hover_feedback.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/PointerHoverFeedback.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_lock.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/PointerLock.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/raycast.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/Raycast.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/RaycastResult.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/text_shape.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/TextShape.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/ui_background.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/UiBackground.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/ui_text.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/UiText.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/ui_transform.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/UiTransform.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/visibility_component.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/VisibilityComponent.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/index.gen.js","../../../../../packages/@dcl/ecs/dist/components/legacy/Transform.js","../../../../../packages/@dcl/ecs/dist/components/extended/Animator.js","../../../../../packages/@dcl/ecs/dist/components/extended/MeshCollider.js","../../../../../packages/@dcl/ecs/dist/components/extended/MeshRenderer.js","../../../../../packages/@dcl/ecs/dist/components/extended/Material.js","../../../../../packages/@dcl/ecs/dist/components/index.js","../../../../../packages/@dcl/ecs/dist/schemas/Array.js","../../../../../packages/@dcl/ecs/dist/schemas/basic/Boolean.js","../../../../../packages/@dcl/ecs/dist/schemas/basic/Enum.js","../../../../../packages/@dcl/ecs/dist/schemas/basic/Float.js","../../../../../packages/@dcl/ecs/dist/schemas/basic/Integer.js","../../../../../packages/@dcl/ecs/dist/schemas/basic/String.js","../../../../../packages/@dcl/ecs/dist/schemas/custom/Color3.js","../../../../../packages/@dcl/ecs/dist/schemas/custom/Color4.js","../../../../../packages/@dcl/ecs/dist/schemas/custom/Entity.js","../../../../../packages/@dcl/ecs/dist/schemas/custom/Quaternion.js","../../../../../packages/@dcl/ecs/dist/schemas/custom/Vector3.js","../../../../../packages/@dcl/ecs/dist/schemas/Map.js","../../../../../packages/@dcl/ecs/dist/schemas/Optional.js","../../../../../packages/@dcl/ecs/dist/schemas/index.js","../../../../../packages/@dcl/ecs/node_modules/@dcl/crdt/dist/types.js","../../../../../packages/@dcl/ecs/node_modules/@dcl/crdt/dist/index.js","../../../../../packages/@dcl/ecs/dist/serialization/ByteBuffer/index.js","../../../../../packages/@dcl/ecs/dist/serialization/wireMessage.js","../../../../../packages/@dcl/ecs/dist/serialization/crdt/componentOperation.js","../../../../../packages/@dcl/ecs/dist/engine/entity-utils.js","../../../../../packages/@dcl/ecs/dist/systems/crdt/index.js","../../../../../packages/@dcl/ecs/dist/engine/readonly.js","../../../../../packages/@dcl/ecs/dist/engine/component.js","../../../../../packages/@dcl/ecs/dist/engine/entity.js","../../../../../packages/@dcl/ecs/dist/engine/systems.js","../../../../../packages/@dcl/ecs/dist/engine/index.js","../../../../../packages/@dcl/ecs/dist/systems/async-task.js","../../../../../packages/@dcl/ecs/dist/components/generated/ids.gen.js","../../../../../packages/@dcl/ecs/dist/systems/crdt/transports/rendererTransport.js","../../../../../packages/@dcl/ecs/dist/systems/events.js","../../../../../packages/@dcl/ecs/dist/engine/input.js","../../../../../packages/@dcl/ecs/dist/runtime/initialization/index.js","../../../../../packages/@dcl/ecs/dist/components/generated/global.namespace.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/common/camera_type.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/common/input_action.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/common/texts.gen.js","../../../../../packages/@dcl/ecs/dist/components/generated/global.gen.js","../../../../../packages/@dcl/react-ecs/dist/index.js","../../../../../packages/@dcl/sdk/dist/temp-fp/Observable.js","../../../../../packages/@dcl/sdk/dist/observables.js","../../../../../packages/@dcl/sdk/dist/index.js","../src/ui.tsx","../src/index.ts"],"sourcesContent":["\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","/* eslint-disable */\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBAnimator() {\n    return { states: [] };\n}\n/**\n * Internal\n */\nexport const PBAnimator = {\n    encode(message, writer = _m0.Writer.create()) {\n        for (const v of message.states) {\n            PBAnimationState.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBAnimator();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.states.push(PBAnimationState.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBasePBAnimationState() {\n    return {\n        name: '',\n        clip: '',\n        playing: undefined,\n        weight: undefined,\n        speed: undefined,\n        loop: undefined,\n        shouldReset: undefined\n    };\n}\n/**\n * Internal\n */\nexport const PBAnimationState = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.name !== '') {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.clip !== '') {\n            writer.uint32(18).string(message.clip);\n        }\n        if (message.playing !== undefined) {\n            writer.uint32(24).bool(message.playing);\n        }\n        if (message.weight !== undefined) {\n            writer.uint32(37).float(message.weight);\n        }\n        if (message.speed !== undefined) {\n            writer.uint32(45).float(message.speed);\n        }\n        if (message.loop !== undefined) {\n            writer.uint32(48).bool(message.loop);\n        }\n        if (message.shouldReset !== undefined) {\n            writer.uint32(56).bool(message.shouldReset);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBAnimationState();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.clip = reader.string();\n                    break;\n                case 3:\n                    message.playing = reader.bool();\n                    break;\n                case 4:\n                    message.weight = reader.float();\n                    break;\n                case 5:\n                    message.speed = reader.float();\n                    break;\n                case 6:\n                    message.loop = reader.bool();\n                    break;\n                case 7:\n                    message.shouldReset = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBAnimator } from './pb/decentraland/sdk/components/animator.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1042;\n/**\n *\n */\nexport const AnimatorSchema = {\n    serialize(value, builder) {\n        const writer = PBAnimator.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBAnimator.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBAnimator.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBAudioSource() {\n    return { playing: undefined, volume: undefined, loop: undefined, pitch: undefined, audioClipUrl: '' };\n}\n/**\n * Internal\n */\nexport const PBAudioSource = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.playing !== undefined) {\n            writer.uint32(8).bool(message.playing);\n        }\n        if (message.volume !== undefined) {\n            writer.uint32(21).float(message.volume);\n        }\n        if (message.loop !== undefined) {\n            writer.uint32(24).bool(message.loop);\n        }\n        if (message.pitch !== undefined) {\n            writer.uint32(37).float(message.pitch);\n        }\n        if (message.audioClipUrl !== '') {\n            writer.uint32(42).string(message.audioClipUrl);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBAudioSource();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.playing = reader.bool();\n                    break;\n                case 2:\n                    message.volume = reader.float();\n                    break;\n                case 3:\n                    message.loop = reader.bool();\n                    break;\n                case 4:\n                    message.pitch = reader.float();\n                    break;\n                case 5:\n                    message.audioClipUrl = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBAudioSource } from './pb/decentraland/sdk/components/audio_source.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1020;\n/**\n *\n */\nexport const AudioSourceSchema = {\n    serialize(value, builder) {\n        const writer = PBAudioSource.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBAudioSource.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBAudioSource.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBAudioStream() {\n    return { playing: undefined, volume: undefined, url: '' };\n}\n/**\n * Internal\n */\nexport const PBAudioStream = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.playing !== undefined) {\n            writer.uint32(8).bool(message.playing);\n        }\n        if (message.volume !== undefined) {\n            writer.uint32(21).float(message.volume);\n        }\n        if (message.url !== '') {\n            writer.uint32(26).string(message.url);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBAudioStream();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.playing = reader.bool();\n                    break;\n                case 2:\n                    message.volume = reader.float();\n                    break;\n                case 3:\n                    message.url = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBAudioStream } from './pb/decentraland/sdk/components/audio_stream.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1021;\n/**\n *\n */\nexport const AudioStreamSchema = {\n    serialize(value, builder) {\n        const writer = PBAudioStream.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBAudioStream.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBAudioStream.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nexport var AvatarAnchorPointType;\n(function (AvatarAnchorPointType) {\n    AvatarAnchorPointType[AvatarAnchorPointType[\"AAPT_POSITION\"] = 0] = \"AAPT_POSITION\";\n    AvatarAnchorPointType[AvatarAnchorPointType[\"AAPT_NAME_TAG\"] = 1] = \"AAPT_NAME_TAG\";\n    AvatarAnchorPointType[AvatarAnchorPointType[\"AAPT_LEFT_HAND\"] = 2] = \"AAPT_LEFT_HAND\";\n    AvatarAnchorPointType[AvatarAnchorPointType[\"AAPT_RIGHT_HAND\"] = 3] = \"AAPT_RIGHT_HAND\";\n})(AvatarAnchorPointType || (AvatarAnchorPointType = {}));\nfunction createBasePBAvatarAttach() {\n    return { avatarId: '', anchorPointId: 0 };\n}\n/**\n * Internal\n */\nexport const PBAvatarAttach = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.avatarId !== '') {\n            writer.uint32(10).string(message.avatarId);\n        }\n        if (message.anchorPointId !== 0) {\n            writer.uint32(16).int32(message.anchorPointId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBAvatarAttach();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.avatarId = reader.string();\n                    break;\n                case 2:\n                    message.anchorPointId = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBAvatarAttach } from './pb/decentraland/sdk/components/avatar_attach.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1073;\n/**\n *\n */\nexport const AvatarAttachSchema = {\n    serialize(value, builder) {\n        const writer = PBAvatarAttach.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBAvatarAttach.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBAvatarAttach.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.common';\nfunction createBasePosition() {\n    return { x: 0, y: 0, z: 0 };\n}\n/**\n * Internal\n */\nexport const Position = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.x !== 0) {\n            writer.uint32(13).float(message.x);\n        }\n        if (message.y !== 0) {\n            writer.uint32(21).float(message.y);\n        }\n        if (message.z !== 0) {\n            writer.uint32(29).float(message.z);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePosition();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.x = reader.float();\n                    break;\n                case 2:\n                    message.y = reader.float();\n                    break;\n                case 3:\n                    message.z = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBaseVector3() {\n    return { x: 0, y: 0, z: 0 };\n}\n/**\n * Internal\n */\nexport const Vector3 = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.x !== 0) {\n            writer.uint32(13).float(message.x);\n        }\n        if (message.y !== 0) {\n            writer.uint32(21).float(message.y);\n        }\n        if (message.z !== 0) {\n            writer.uint32(29).float(message.z);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVector3();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.x = reader.float();\n                    break;\n                case 2:\n                    message.y = reader.float();\n                    break;\n                case 3:\n                    message.z = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBaseVector2() {\n    return { x: 0, y: 0 };\n}\n/**\n * Internal\n */\nexport const Vector2 = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.x !== 0) {\n            writer.uint32(13).float(message.x);\n        }\n        if (message.y !== 0) {\n            writer.uint32(21).float(message.y);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVector2();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.x = reader.float();\n                    break;\n                case 2:\n                    message.y = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","/* eslint-disable */\nimport { Vector3 } from '../../common/vectors.gen';\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nexport var AvatarModifierType;\n(function (AvatarModifierType) {\n    AvatarModifierType[AvatarModifierType[\"AMT_HIDE_AVATARS\"] = 0] = \"AMT_HIDE_AVATARS\";\n    AvatarModifierType[AvatarModifierType[\"AMT_DISABLE_PASSPORTS\"] = 1] = \"AMT_DISABLE_PASSPORTS\";\n})(AvatarModifierType || (AvatarModifierType = {}));\nfunction createBasePBAvatarModifierArea() {\n    return { area: undefined, excludeIds: [], modifiers: [] };\n}\n/**\n * Internal\n */\nexport const PBAvatarModifierArea = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.area !== undefined) {\n            Vector3.encode(message.area, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.excludeIds) {\n            writer.uint32(18).string(v);\n        }\n        writer.uint32(26).fork();\n        for (const v of message.modifiers) {\n            writer.int32(v);\n        }\n        writer.ldelim();\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBAvatarModifierArea();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.area = Vector3.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.excludeIds.push(reader.string());\n                    break;\n                case 3:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.modifiers.push(reader.int32());\n                        }\n                    }\n                    else {\n                        message.modifiers.push(reader.int32());\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBAvatarModifierArea } from './pb/decentraland/sdk/components/avatar_modifier_area.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1070;\n/**\n *\n */\nexport const AvatarModifierAreaSchema = {\n    serialize(value, builder) {\n        const writer = PBAvatarModifierArea.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBAvatarModifierArea.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBAvatarModifierArea.decode(new Uint8Array());\n    }\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/* eslint-disable */\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.common';\nfunction createBaseColor3() {\n    return { r: 0, g: 0, b: 0 };\n}\n/**\n * Internal\n */\nexport const Color3 = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.r !== 0) {\n            writer.uint32(13).float(message.r);\n        }\n        if (message.g !== 0) {\n            writer.uint32(21).float(message.g);\n        }\n        if (message.b !== 0) {\n            writer.uint32(29).float(message.b);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseColor3();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.r = reader.float();\n                    break;\n                case 2:\n                    message.g = reader.float();\n                    break;\n                case 3:\n                    message.b = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBaseColor4() {\n    return { r: 0, g: 0, b: 0, a: 0 };\n}\n/**\n * Internal\n */\nexport const Color4 = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.r !== 0) {\n            writer.uint32(13).float(message.r);\n        }\n        if (message.g !== 0) {\n            writer.uint32(21).float(message.g);\n        }\n        if (message.b !== 0) {\n            writer.uint32(29).float(message.b);\n        }\n        if (message.a !== 0) {\n            writer.uint32(37).float(message.a);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseColor4();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.r = reader.float();\n                    break;\n                case 2:\n                    message.g = reader.float();\n                    break;\n                case 3:\n                    message.b = reader.float();\n                    break;\n                case 4:\n                    message.a = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","/* eslint-disable */\nimport Long from 'long';\nimport { Color3 } from '../../common/colors.gen';\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBAvatarShape() {\n    return {\n        id: '',\n        name: undefined,\n        bodyShape: undefined,\n        skinColor: undefined,\n        hairColor: undefined,\n        eyeColor: undefined,\n        expressionTriggerId: undefined,\n        expressionTriggerTimestamp: undefined,\n        talking: undefined,\n        wearables: [],\n        emotes: []\n    };\n}\n/**\n * Internal\n */\nexport const PBAvatarShape = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.id !== '') {\n            writer.uint32(10).string(message.id);\n        }\n        if (message.name !== undefined) {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.bodyShape !== undefined) {\n            writer.uint32(26).string(message.bodyShape);\n        }\n        if (message.skinColor !== undefined) {\n            Color3.encode(message.skinColor, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.hairColor !== undefined) {\n            Color3.encode(message.hairColor, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.eyeColor !== undefined) {\n            Color3.encode(message.eyeColor, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.expressionTriggerId !== undefined) {\n            writer.uint32(58).string(message.expressionTriggerId);\n        }\n        if (message.expressionTriggerTimestamp !== undefined) {\n            writer.uint32(64).int64(message.expressionTriggerTimestamp);\n        }\n        if (message.talking !== undefined) {\n            writer.uint32(72).bool(message.talking);\n        }\n        for (const v of message.wearables) {\n            writer.uint32(82).string(v);\n        }\n        for (const v of message.emotes) {\n            writer.uint32(90).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBAvatarShape();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.bodyShape = reader.string();\n                    break;\n                case 4:\n                    message.skinColor = Color3.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.hairColor = Color3.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.eyeColor = Color3.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.expressionTriggerId = reader.string();\n                    break;\n                case 8:\n                    message.expressionTriggerTimestamp = longToNumber(reader.int64());\n                    break;\n                case 9:\n                    message.talking = reader.bool();\n                    break;\n                case 10:\n                    message.wearables.push(reader.string());\n                    break;\n                case 11:\n                    message.emotes.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== 'undefined')\n        return globalThis;\n    if (typeof self !== 'undefined')\n        return self;\n    if (typeof window !== 'undefined')\n        return window;\n    if (typeof global !== 'undefined')\n        return global;\n    throw 'Unable to locate global object';\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER');\n    }\n    return long.toNumber();\n}\nif (_m0.util.Long !== Long) {\n    _m0.util.Long = Long;\n    _m0.configure();\n}\n","import { PBAvatarShape } from './pb/decentraland/sdk/components/avatar_shape.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1080;\n/**\n *\n */\nexport const AvatarShapeSchema = {\n    serialize(value, builder) {\n        const writer = PBAvatarShape.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBAvatarShape.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBAvatarShape.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nexport var BillboardMode;\n(function (BillboardMode) {\n    BillboardMode[BillboardMode[\"BM_ALL_AXES\"] = 0] = \"BM_ALL_AXES\";\n    BillboardMode[BillboardMode[\"BM_Y_AXE\"] = 1] = \"BM_Y_AXE\";\n})(BillboardMode || (BillboardMode = {}));\nfunction createBasePBBillboard() {\n    return { billboardMode: undefined, oppositeDirection: undefined };\n}\n/**\n * Internal\n */\nexport const PBBillboard = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.billboardMode !== undefined) {\n            writer.uint32(8).int32(message.billboardMode);\n        }\n        if (message.oppositeDirection !== undefined) {\n            writer.uint32(16).bool(message.oppositeDirection);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBBillboard();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.billboardMode = reader.int32();\n                    break;\n                case 2:\n                    message.oppositeDirection = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBBillboard } from './pb/decentraland/sdk/components/billboard.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1090;\n/**\n *\n */\nexport const BillboardSchema = {\n    serialize(value, builder) {\n        const writer = PBBillboard.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBBillboard.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBBillboard.decode(new Uint8Array());\n    }\n};\n","import _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBCameraMode() {\n    return { mode: 0 };\n}\n/**\n * Internal\n */\nexport const PBCameraMode = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.mode !== 0) {\n            writer.uint32(8).int32(message.mode);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBCameraMode();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.mode = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBCameraMode } from './pb/decentraland/sdk/components/camera_mode.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1072;\n/**\n *\n */\nexport const CameraModeSchema = {\n    serialize(value, builder) {\n        const writer = PBCameraMode.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBCameraMode.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBCameraMode.decode(new Uint8Array());\n    }\n};\n","import { Vector3 } from '../../common/vectors.gen';\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBCameraModeArea() {\n    return { area: undefined, mode: 0 };\n}\n/**\n * Internal\n */\nexport const PBCameraModeArea = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.area !== undefined) {\n            Vector3.encode(message.area, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.mode !== 0) {\n            writer.uint32(16).int32(message.mode);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBCameraModeArea();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.area = Vector3.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.mode = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBCameraModeArea } from './pb/decentraland/sdk/components/camera_mode_area.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1071;\n/**\n *\n */\nexport const CameraModeAreaSchema = {\n    serialize(value, builder) {\n        const writer = PBCameraModeArea.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBCameraModeArea.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBCameraModeArea.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBGltfContainer() {\n    return { src: '' };\n}\n/**\n * Internal\n */\nexport const PBGltfContainer = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.src !== '') {\n            writer.uint32(10).string(message.src);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBGltfContainer();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.src = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBGltfContainer } from './pb/decentraland/sdk/components/gltf_container.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1041;\n/**\n *\n */\nexport const GltfContainerSchema = {\n    serialize(value, builder) {\n        const writer = PBGltfContainer.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBGltfContainer.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBGltfContainer.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.common';\nexport var TextureWrapMode;\n(function (TextureWrapMode) {\n    TextureWrapMode[TextureWrapMode[\"TWM_REPEAT\"] = 0] = \"TWM_REPEAT\";\n    TextureWrapMode[TextureWrapMode[\"TWM_CLAMP\"] = 1] = \"TWM_CLAMP\";\n    TextureWrapMode[TextureWrapMode[\"TWM_MIRROR\"] = 2] = \"TWM_MIRROR\";\n    TextureWrapMode[TextureWrapMode[\"TWM_MIRROR_ONCE\"] = 3] = \"TWM_MIRROR_ONCE\";\n})(TextureWrapMode || (TextureWrapMode = {}));\nexport var TextureFilterMode;\n(function (TextureFilterMode) {\n    TextureFilterMode[TextureFilterMode[\"TFM_POINT\"] = 0] = \"TFM_POINT\";\n    TextureFilterMode[TextureFilterMode[\"TFM_BILINEAR\"] = 1] = \"TFM_BILINEAR\";\n    TextureFilterMode[TextureFilterMode[\"TFM_TRILINEAR\"] = 2] = \"TFM_TRILINEAR\";\n})(TextureFilterMode || (TextureFilterMode = {}));\nfunction createBaseTexture() {\n    return { src: '', wrapMode: undefined, filterMode: undefined };\n}\n/**\n * Internal\n */\nexport const Texture = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.src !== '') {\n            writer.uint32(10).string(message.src);\n        }\n        if (message.wrapMode !== undefined) {\n            writer.uint32(16).int32(message.wrapMode);\n        }\n        if (message.filterMode !== undefined) {\n            writer.uint32(24).int32(message.filterMode);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTexture();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.src = reader.string();\n                    break;\n                case 2:\n                    message.wrapMode = reader.int32();\n                    break;\n                case 3:\n                    message.filterMode = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBaseAvatarTexture() {\n    return { userId: '', wrapMode: undefined, filterMode: undefined };\n}\n/**\n * Internal\n */\nexport const AvatarTexture = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.userId !== '') {\n            writer.uint32(10).string(message.userId);\n        }\n        if (message.wrapMode !== undefined) {\n            writer.uint32(16).int32(message.wrapMode);\n        }\n        if (message.filterMode !== undefined) {\n            writer.uint32(24).int32(message.filterMode);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAvatarTexture();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.userId = reader.string();\n                    break;\n                case 2:\n                    message.wrapMode = reader.int32();\n                    break;\n                case 3:\n                    message.filterMode = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBaseTextureUnion() {\n    return { tex: undefined };\n}\n/**\n * Internal\n */\nexport const TextureUnion = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.tex?.$case === 'texture') {\n            Texture.encode(message.tex.texture, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.tex?.$case === 'avatarTexture') {\n            AvatarTexture.encode(message.tex.avatarTexture, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTextureUnion();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.tex = { $case: 'texture', texture: Texture.decode(reader, reader.uint32()) };\n                    break;\n                case 2:\n                    message.tex = { $case: 'avatarTexture', avatarTexture: AvatarTexture.decode(reader, reader.uint32()) };\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","/* eslint-disable */\nimport { TextureUnion } from '../../common/texture.gen';\nimport { Color3 } from '../../common/colors.gen';\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nexport var MaterialTransparencyMode;\n(function (MaterialTransparencyMode) {\n    MaterialTransparencyMode[MaterialTransparencyMode[\"MTM_OPAQUE\"] = 0] = \"MTM_OPAQUE\";\n    MaterialTransparencyMode[MaterialTransparencyMode[\"MTM_ALPHA_TEST\"] = 1] = \"MTM_ALPHA_TEST\";\n    MaterialTransparencyMode[MaterialTransparencyMode[\"MTM_ALPHA_BLEND\"] = 2] = \"MTM_ALPHA_BLEND\";\n    MaterialTransparencyMode[MaterialTransparencyMode[\"MTM_ALPHA_TEST_AND_ALPHA_BLEND\"] = 3] = \"MTM_ALPHA_TEST_AND_ALPHA_BLEND\";\n    MaterialTransparencyMode[MaterialTransparencyMode[\"MTM_AUTO\"] = 4] = \"MTM_AUTO\";\n})(MaterialTransparencyMode || (MaterialTransparencyMode = {}));\nfunction createBasePBMaterial() {\n    return { material: undefined };\n}\n/**\n * Internal\n */\nexport const PBMaterial = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.material?.$case === 'unlit') {\n            PBMaterial_UnlitMaterial.encode(message.material.unlit, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.material?.$case === 'pbr') {\n            PBMaterial_PbrMaterial.encode(message.material.pbr, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBMaterial();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.material = { $case: 'unlit', unlit: PBMaterial_UnlitMaterial.decode(reader, reader.uint32()) };\n                    break;\n                case 2:\n                    message.material = { $case: 'pbr', pbr: PBMaterial_PbrMaterial.decode(reader, reader.uint32()) };\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBasePBMaterial_UnlitMaterial() {\n    return { texture: undefined, alphaTest: undefined, castShadows: undefined };\n}\n/**\n * Internal\n */\nexport const PBMaterial_UnlitMaterial = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.texture !== undefined) {\n            TextureUnion.encode(message.texture, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.alphaTest !== undefined) {\n            writer.uint32(21).float(message.alphaTest);\n        }\n        if (message.castShadows !== undefined) {\n            writer.uint32(24).bool(message.castShadows);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBMaterial_UnlitMaterial();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.texture = TextureUnion.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.alphaTest = reader.float();\n                    break;\n                case 3:\n                    message.castShadows = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBasePBMaterial_PbrMaterial() {\n    return {\n        texture: undefined,\n        alphaTest: undefined,\n        castShadows: undefined,\n        alphaTexture: undefined,\n        emissiveTexture: undefined,\n        bumpTexture: undefined,\n        albedoColor: undefined,\n        emissiveColor: undefined,\n        reflectivityColor: undefined,\n        transparencyMode: undefined,\n        metallic: undefined,\n        roughness: undefined,\n        glossiness: undefined,\n        specularIntensity: undefined,\n        emissiveIntensity: undefined,\n        directIntensity: undefined\n    };\n}\n/**\n * Internal\n */\nexport const PBMaterial_PbrMaterial = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.texture !== undefined) {\n            TextureUnion.encode(message.texture, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.alphaTest !== undefined) {\n            writer.uint32(21).float(message.alphaTest);\n        }\n        if (message.castShadows !== undefined) {\n            writer.uint32(24).bool(message.castShadows);\n        }\n        if (message.alphaTexture !== undefined) {\n            TextureUnion.encode(message.alphaTexture, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.emissiveTexture !== undefined) {\n            TextureUnion.encode(message.emissiveTexture, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.bumpTexture !== undefined) {\n            TextureUnion.encode(message.bumpTexture, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.albedoColor !== undefined) {\n            Color3.encode(message.albedoColor, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.emissiveColor !== undefined) {\n            Color3.encode(message.emissiveColor, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.reflectivityColor !== undefined) {\n            Color3.encode(message.reflectivityColor, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.transparencyMode !== undefined) {\n            writer.uint32(80).int32(message.transparencyMode);\n        }\n        if (message.metallic !== undefined) {\n            writer.uint32(93).float(message.metallic);\n        }\n        if (message.roughness !== undefined) {\n            writer.uint32(101).float(message.roughness);\n        }\n        if (message.glossiness !== undefined) {\n            writer.uint32(109).float(message.glossiness);\n        }\n        if (message.specularIntensity !== undefined) {\n            writer.uint32(117).float(message.specularIntensity);\n        }\n        if (message.emissiveIntensity !== undefined) {\n            writer.uint32(125).float(message.emissiveIntensity);\n        }\n        if (message.directIntensity !== undefined) {\n            writer.uint32(133).float(message.directIntensity);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBMaterial_PbrMaterial();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.texture = TextureUnion.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.alphaTest = reader.float();\n                    break;\n                case 3:\n                    message.castShadows = reader.bool();\n                    break;\n                case 4:\n                    message.alphaTexture = TextureUnion.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.emissiveTexture = TextureUnion.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.bumpTexture = TextureUnion.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.albedoColor = Color3.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.emissiveColor = Color3.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.reflectivityColor = Color3.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.transparencyMode = reader.int32();\n                    break;\n                case 11:\n                    message.metallic = reader.float();\n                    break;\n                case 12:\n                    message.roughness = reader.float();\n                    break;\n                case 13:\n                    message.glossiness = reader.float();\n                    break;\n                case 14:\n                    message.specularIntensity = reader.float();\n                    break;\n                case 15:\n                    message.emissiveIntensity = reader.float();\n                    break;\n                case 16:\n                    message.directIntensity = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBMaterial } from './pb/decentraland/sdk/components/material.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1017;\n/**\n *\n */\nexport const MaterialSchema = {\n    serialize(value, builder) {\n        const writer = PBMaterial.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBMaterial.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBMaterial.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nexport var ColliderLayer;\n(function (ColliderLayer) {\n    ColliderLayer[ColliderLayer[\"CL_NONE\"] = 0] = \"CL_NONE\";\n    ColliderLayer[ColliderLayer[\"CL_POINTER\"] = 1] = \"CL_POINTER\";\n    ColliderLayer[ColliderLayer[\"CL_PHYSICS\"] = 2] = \"CL_PHYSICS\";\n})(ColliderLayer || (ColliderLayer = {}));\nfunction createBasePBMeshCollider() {\n    return { collisionMask: undefined, mesh: undefined };\n}\n/**\n * Internal\n */\nexport const PBMeshCollider = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.collisionMask !== undefined) {\n            writer.uint32(8).int32(message.collisionMask);\n        }\n        if (message.mesh?.$case === 'box') {\n            PBMeshCollider_BoxMesh.encode(message.mesh.box, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.mesh?.$case === 'sphere') {\n            PBMeshCollider_SphereMesh.encode(message.mesh.sphere, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.mesh?.$case === 'cylinder') {\n            PBMeshCollider_CylinderMesh.encode(message.mesh.cylinder, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.mesh?.$case === 'plane') {\n            PBMeshCollider_PlaneMesh.encode(message.mesh.plane, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBMeshCollider();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.collisionMask = reader.int32();\n                    break;\n                case 2:\n                    message.mesh = { $case: 'box', box: PBMeshCollider_BoxMesh.decode(reader, reader.uint32()) };\n                    break;\n                case 3:\n                    message.mesh = { $case: 'sphere', sphere: PBMeshCollider_SphereMesh.decode(reader, reader.uint32()) };\n                    break;\n                case 4:\n                    message.mesh = { $case: 'cylinder', cylinder: PBMeshCollider_CylinderMesh.decode(reader, reader.uint32()) };\n                    break;\n                case 5:\n                    message.mesh = { $case: 'plane', plane: PBMeshCollider_PlaneMesh.decode(reader, reader.uint32()) };\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBasePBMeshCollider_BoxMesh() {\n    return {};\n}\n/**\n * Internal\n */\nexport const PBMeshCollider_BoxMesh = {\n    encode(_, writer = _m0.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBMeshCollider_BoxMesh();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBasePBMeshCollider_CylinderMesh() {\n    return { radiusTop: undefined, radiusBottom: undefined };\n}\n/**\n * Internal\n */\nexport const PBMeshCollider_CylinderMesh = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.radiusTop !== undefined) {\n            writer.uint32(13).float(message.radiusTop);\n        }\n        if (message.radiusBottom !== undefined) {\n            writer.uint32(21).float(message.radiusBottom);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBMeshCollider_CylinderMesh();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.radiusTop = reader.float();\n                    break;\n                case 2:\n                    message.radiusBottom = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBasePBMeshCollider_PlaneMesh() {\n    return {};\n}\n/**\n * Internal\n */\nexport const PBMeshCollider_PlaneMesh = {\n    encode(_, writer = _m0.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBMeshCollider_PlaneMesh();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBasePBMeshCollider_SphereMesh() {\n    return {};\n}\n/**\n * Internal\n */\nexport const PBMeshCollider_SphereMesh = {\n    encode(_, writer = _m0.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBMeshCollider_SphereMesh();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBMeshCollider } from './pb/decentraland/sdk/components/mesh_collider.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1019;\n/**\n *\n */\nexport const MeshColliderSchema = {\n    serialize(value, builder) {\n        const writer = PBMeshCollider.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBMeshCollider.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBMeshCollider.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBMeshRenderer() {\n    return { mesh: undefined };\n}\n/**\n * Internal\n */\nexport const PBMeshRenderer = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.mesh?.$case === 'box') {\n            PBMeshRenderer_BoxMesh.encode(message.mesh.box, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.mesh?.$case === 'sphere') {\n            PBMeshRenderer_SphereMesh.encode(message.mesh.sphere, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.mesh?.$case === 'cylinder') {\n            PBMeshRenderer_CylinderMesh.encode(message.mesh.cylinder, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.mesh?.$case === 'plane') {\n            PBMeshRenderer_PlaneMesh.encode(message.mesh.plane, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBMeshRenderer();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.mesh = { $case: 'box', box: PBMeshRenderer_BoxMesh.decode(reader, reader.uint32()) };\n                    break;\n                case 2:\n                    message.mesh = { $case: 'sphere', sphere: PBMeshRenderer_SphereMesh.decode(reader, reader.uint32()) };\n                    break;\n                case 3:\n                    message.mesh = { $case: 'cylinder', cylinder: PBMeshRenderer_CylinderMesh.decode(reader, reader.uint32()) };\n                    break;\n                case 4:\n                    message.mesh = { $case: 'plane', plane: PBMeshRenderer_PlaneMesh.decode(reader, reader.uint32()) };\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBasePBMeshRenderer_BoxMesh() {\n    return { uvs: [] };\n}\n/**\n * Internal\n */\nexport const PBMeshRenderer_BoxMesh = {\n    encode(message, writer = _m0.Writer.create()) {\n        writer.uint32(10).fork();\n        for (const v of message.uvs) {\n            writer.float(v);\n        }\n        writer.ldelim();\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBMeshRenderer_BoxMesh();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.uvs.push(reader.float());\n                        }\n                    }\n                    else {\n                        message.uvs.push(reader.float());\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBasePBMeshRenderer_CylinderMesh() {\n    return { radiusTop: undefined, radiusBottom: undefined };\n}\n/**\n * Internal\n */\nexport const PBMeshRenderer_CylinderMesh = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.radiusTop !== undefined) {\n            writer.uint32(13).float(message.radiusTop);\n        }\n        if (message.radiusBottom !== undefined) {\n            writer.uint32(21).float(message.radiusBottom);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBMeshRenderer_CylinderMesh();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.radiusTop = reader.float();\n                    break;\n                case 2:\n                    message.radiusBottom = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBasePBMeshRenderer_PlaneMesh() {\n    return { uvs: [] };\n}\n/**\n * Internal\n */\nexport const PBMeshRenderer_PlaneMesh = {\n    encode(message, writer = _m0.Writer.create()) {\n        writer.uint32(10).fork();\n        for (const v of message.uvs) {\n            writer.float(v);\n        }\n        writer.ldelim();\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBMeshRenderer_PlaneMesh();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.uvs.push(reader.float());\n                        }\n                    }\n                    else {\n                        message.uvs.push(reader.float());\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBasePBMeshRenderer_SphereMesh() {\n    return {};\n}\n/**\n * Internal\n */\nexport const PBMeshRenderer_SphereMesh = {\n    encode(_, writer = _m0.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBMeshRenderer_SphereMesh();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBMeshRenderer } from './pb/decentraland/sdk/components/mesh_renderer.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1018;\n/**\n *\n */\nexport const MeshRendererSchema = {\n    serialize(value, builder) {\n        const writer = PBMeshRenderer.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBMeshRenderer.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBMeshRenderer.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport { Color3 } from '../../common/colors.gen';\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nexport var NftFrameType;\n(function (NftFrameType) {\n    NftFrameType[NftFrameType[\"NFT_CLASSIC\"] = 0] = \"NFT_CLASSIC\";\n    NftFrameType[NftFrameType[\"NFT_BAROQUE_ORNAMENT\"] = 1] = \"NFT_BAROQUE_ORNAMENT\";\n    NftFrameType[NftFrameType[\"NFT_DIAMOND_ORNAMENT\"] = 2] = \"NFT_DIAMOND_ORNAMENT\";\n    NftFrameType[NftFrameType[\"NFT_MINIMAL_WIDE\"] = 3] = \"NFT_MINIMAL_WIDE\";\n    NftFrameType[NftFrameType[\"NFT_MINIMAL_GREY\"] = 4] = \"NFT_MINIMAL_GREY\";\n    NftFrameType[NftFrameType[\"NFT_BLOCKY\"] = 5] = \"NFT_BLOCKY\";\n    NftFrameType[NftFrameType[\"NFT_GOLD_EDGES\"] = 6] = \"NFT_GOLD_EDGES\";\n    NftFrameType[NftFrameType[\"NFT_GOLD_CARVED\"] = 7] = \"NFT_GOLD_CARVED\";\n    NftFrameType[NftFrameType[\"NFT_GOLD_WIDE\"] = 8] = \"NFT_GOLD_WIDE\";\n    NftFrameType[NftFrameType[\"NFT_GOLD_ROUNDED\"] = 9] = \"NFT_GOLD_ROUNDED\";\n    NftFrameType[NftFrameType[\"NFT_METAL_MEDIUM\"] = 10] = \"NFT_METAL_MEDIUM\";\n    NftFrameType[NftFrameType[\"NFT_METAL_WIDE\"] = 11] = \"NFT_METAL_WIDE\";\n    NftFrameType[NftFrameType[\"NFT_METAL_SLIM\"] = 12] = \"NFT_METAL_SLIM\";\n    NftFrameType[NftFrameType[\"NFT_METAL_ROUNDED\"] = 13] = \"NFT_METAL_ROUNDED\";\n    NftFrameType[NftFrameType[\"NFT_PINS\"] = 14] = \"NFT_PINS\";\n    NftFrameType[NftFrameType[\"NFT_MINIMAL_BLACK\"] = 15] = \"NFT_MINIMAL_BLACK\";\n    NftFrameType[NftFrameType[\"NFT_MINIMAL_WHITE\"] = 16] = \"NFT_MINIMAL_WHITE\";\n    NftFrameType[NftFrameType[\"NFT_TAPE\"] = 17] = \"NFT_TAPE\";\n    NftFrameType[NftFrameType[\"NFT_WOOD_SLIM\"] = 18] = \"NFT_WOOD_SLIM\";\n    NftFrameType[NftFrameType[\"NFT_WOOD_WIDE\"] = 19] = \"NFT_WOOD_WIDE\";\n    NftFrameType[NftFrameType[\"NFT_WOOD_TWIGS\"] = 20] = \"NFT_WOOD_TWIGS\";\n    NftFrameType[NftFrameType[\"NFT_CANVAS\"] = 21] = \"NFT_CANVAS\";\n    NftFrameType[NftFrameType[\"NFT_NONE\"] = 22] = \"NFT_NONE\";\n})(NftFrameType || (NftFrameType = {}));\nfunction createBasePBNftShape() {\n    return { src: '', style: undefined, color: undefined };\n}\n/**\n * Internal\n */\nexport const PBNftShape = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.src !== '') {\n            writer.uint32(10).string(message.src);\n        }\n        if (message.style !== undefined) {\n            writer.uint32(16).int32(message.style);\n        }\n        if (message.color !== undefined) {\n            Color3.encode(message.color, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBNftShape();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.src = reader.string();\n                    break;\n                case 2:\n                    message.style = reader.int32();\n                    break;\n                case 3:\n                    message.color = Color3.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBNftShape } from './pb/decentraland/sdk/components/nft_shape.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1040;\n/**\n *\n */\nexport const NftShapeSchema = {\n    serialize(value, builder) {\n        const writer = PBNftShape.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBNftShape.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBNftShape.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport Long from 'long';\nimport { Vector3 } from '../../common/vectors.gen';\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBRaycastResult() {\n    return { timestamp: 0, origin: undefined, direction: undefined, hits: [] };\n}\n/**\n * Internal\n */\nexport const PBRaycastResult = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.timestamp !== 0) {\n            writer.uint32(8).int32(message.timestamp);\n        }\n        if (message.origin !== undefined) {\n            Vector3.encode(message.origin, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.direction !== undefined) {\n            Vector3.encode(message.direction, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.hits) {\n            RaycastHit.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBRaycastResult();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.timestamp = reader.int32();\n                    break;\n                case 2:\n                    message.origin = Vector3.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.direction = Vector3.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.hits.push(RaycastHit.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBaseRaycastHit() {\n    return {\n        position: undefined,\n        origin: undefined,\n        direction: undefined,\n        normalHit: undefined,\n        length: 0,\n        meshName: undefined,\n        entityId: undefined\n    };\n}\n/**\n * Internal\n */\nexport const RaycastHit = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.position !== undefined) {\n            Vector3.encode(message.position, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.origin !== undefined) {\n            Vector3.encode(message.origin, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.direction !== undefined) {\n            Vector3.encode(message.direction, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.normalHit !== undefined) {\n            Vector3.encode(message.normalHit, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.length !== 0) {\n            writer.uint32(45).float(message.length);\n        }\n        if (message.meshName !== undefined) {\n            writer.uint32(50).string(message.meshName);\n        }\n        if (message.entityId !== undefined) {\n            writer.uint32(56).int64(message.entityId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRaycastHit();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.position = Vector3.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.origin = Vector3.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.direction = Vector3.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.normalHit = Vector3.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.length = reader.float();\n                    break;\n                case 6:\n                    message.meshName = reader.string();\n                    break;\n                case 7:\n                    message.entityId = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== 'undefined')\n        return globalThis;\n    if (typeof self !== 'undefined')\n        return self;\n    if (typeof window !== 'undefined')\n        return window;\n    if (typeof global !== 'undefined')\n        return global;\n    throw 'Unable to locate global object';\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER');\n    }\n    return long.toNumber();\n}\nif (_m0.util.Long !== Long) {\n    _m0.util.Long = Long;\n    _m0.configure();\n}\n","import { RaycastHit } from './raycast_result.gen';\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBPointerEventsResult() {\n    return { commands: [] };\n}\n/**\n * Internal\n */\nexport const PBPointerEventsResult = {\n    encode(message, writer = _m0.Writer.create()) {\n        for (const v of message.commands) {\n            PBPointerEventsResult_PointerCommand.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBPointerEventsResult();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.commands.push(PBPointerEventsResult_PointerCommand.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBasePBPointerEventsResult_PointerCommand() {\n    return { button: 0, hit: undefined, state: 0, timestamp: 0, analog: undefined };\n}\n/**\n * Internal\n */\nexport const PBPointerEventsResult_PointerCommand = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.button !== 0) {\n            writer.uint32(8).int32(message.button);\n        }\n        if (message.hit !== undefined) {\n            RaycastHit.encode(message.hit, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.state !== 0) {\n            writer.uint32(32).int32(message.state);\n        }\n        if (message.timestamp !== 0) {\n            writer.uint32(40).int32(message.timestamp);\n        }\n        if (message.analog !== undefined) {\n            writer.uint32(53).float(message.analog);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBPointerEventsResult_PointerCommand();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.button = reader.int32();\n                    break;\n                case 2:\n                    message.hit = RaycastHit.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.state = reader.int32();\n                    break;\n                case 5:\n                    message.timestamp = reader.int32();\n                    break;\n                case 6:\n                    message.analog = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBPointerEventsResult } from './pb/decentraland/sdk/components/pointer_events_result.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1063;\n/**\n *\n */\nexport const PointerEventsResultSchema = {\n    serialize(value, builder) {\n        const writer = PBPointerEventsResult.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBPointerEventsResult.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBPointerEventsResult.decode(new Uint8Array());\n    }\n};\n","import _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nexport var PointerEventType;\n(function (PointerEventType) {\n    PointerEventType[PointerEventType[\"PET_UP\"] = 0] = \"PET_UP\";\n    PointerEventType[PointerEventType[\"PET_DOWN\"] = 1] = \"PET_DOWN\";\n    PointerEventType[PointerEventType[\"PET_HOVER_ENTER\"] = 2] = \"PET_HOVER_ENTER\";\n    PointerEventType[PointerEventType[\"PET_HOVER_LEAVE\"] = 3] = \"PET_HOVER_LEAVE\";\n})(PointerEventType || (PointerEventType = {}));\nfunction createBasePBPointerHoverFeedback() {\n    return { pointerEvents: [] };\n}\n/**\n * Internal\n */\nexport const PBPointerHoverFeedback = {\n    encode(message, writer = _m0.Writer.create()) {\n        for (const v of message.pointerEvents) {\n            PBPointerHoverFeedback_Entry.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBPointerHoverFeedback();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.pointerEvents.push(PBPointerHoverFeedback_Entry.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBasePBPointerHoverFeedback_Info() {\n    return { button: undefined, hoverText: undefined, maxDistance: undefined, showFeedback: undefined };\n}\n/**\n * Internal\n */\nexport const PBPointerHoverFeedback_Info = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.button !== undefined) {\n            writer.uint32(8).int32(message.button);\n        }\n        if (message.hoverText !== undefined) {\n            writer.uint32(18).string(message.hoverText);\n        }\n        if (message.maxDistance !== undefined) {\n            writer.uint32(29).float(message.maxDistance);\n        }\n        if (message.showFeedback !== undefined) {\n            writer.uint32(32).bool(message.showFeedback);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBPointerHoverFeedback_Info();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.button = reader.int32();\n                    break;\n                case 2:\n                    message.hoverText = reader.string();\n                    break;\n                case 3:\n                    message.maxDistance = reader.float();\n                    break;\n                case 4:\n                    message.showFeedback = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\nfunction createBasePBPointerHoverFeedback_Entry() {\n    return { eventType: 0, eventInfo: undefined };\n}\n/**\n * Internal\n */\nexport const PBPointerHoverFeedback_Entry = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.eventType !== 0) {\n            writer.uint32(8).int32(message.eventType);\n        }\n        if (message.eventInfo !== undefined) {\n            PBPointerHoverFeedback_Info.encode(message.eventInfo, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBPointerHoverFeedback_Entry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.eventType = reader.int32();\n                    break;\n                case 2:\n                    message.eventInfo = PBPointerHoverFeedback_Info.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBPointerHoverFeedback } from './pb/decentraland/sdk/components/pointer_hover_feedback.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1062;\n/**\n *\n */\nexport const PointerHoverFeedbackSchema = {\n    serialize(value, builder) {\n        const writer = PBPointerHoverFeedback.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBPointerHoverFeedback.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBPointerHoverFeedback.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBPointerLock() {\n    return { isPointerLocked: false };\n}\n/**\n * Internal\n */\nexport const PBPointerLock = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.isPointerLocked === true) {\n            writer.uint32(8).bool(message.isPointerLocked);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBPointerLock();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.isPointerLocked = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBPointerLock } from './pb/decentraland/sdk/components/pointer_lock.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1074;\n/**\n *\n */\nexport const PointerLockSchema = {\n    serialize(value, builder) {\n        const writer = PBPointerLock.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBPointerLock.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBPointerLock.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport { Vector3 } from '../../common/vectors.gen';\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nexport var RaycastQueryType;\n(function (RaycastQueryType) {\n    RaycastQueryType[RaycastQueryType[\"RQT_HIT_FIRST\"] = 0] = \"RQT_HIT_FIRST\";\n    RaycastQueryType[RaycastQueryType[\"RQT_QUERY_ALL\"] = 1] = \"RQT_QUERY_ALL\";\n})(RaycastQueryType || (RaycastQueryType = {}));\nfunction createBasePBRaycast() {\n    return { origin: undefined, direction: undefined, maxDistance: 0, queryType: 0 };\n}\n/**\n * Internal\n */\nexport const PBRaycast = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.origin !== undefined) {\n            Vector3.encode(message.origin, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.direction !== undefined) {\n            Vector3.encode(message.direction, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.maxDistance !== 0) {\n            writer.uint32(37).float(message.maxDistance);\n        }\n        if (message.queryType !== 0) {\n            writer.uint32(40).int32(message.queryType);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBRaycast();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 2:\n                    message.origin = Vector3.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.direction = Vector3.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.maxDistance = reader.float();\n                    break;\n                case 5:\n                    message.queryType = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBRaycast } from './pb/decentraland/sdk/components/raycast.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1067;\n/**\n *\n */\nexport const RaycastSchema = {\n    serialize(value, builder) {\n        const writer = PBRaycast.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBRaycast.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBRaycast.decode(new Uint8Array());\n    }\n};\n","import { PBRaycastResult } from './pb/decentraland/sdk/components/raycast_result.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1068;\n/**\n *\n */\nexport const RaycastResultSchema = {\n    serialize(value, builder) {\n        const writer = PBRaycastResult.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBRaycastResult.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBRaycastResult.decode(new Uint8Array());\n    }\n};\n","import { Color3, Color4 } from '../../common/colors.gen';\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBTextShape() {\n    return {\n        text: '',\n        font: undefined,\n        fontSize: undefined,\n        fontAutoSize: undefined,\n        textAlign: undefined,\n        width: undefined,\n        height: undefined,\n        paddingTop: undefined,\n        paddingRight: undefined,\n        paddingBottom: undefined,\n        paddingLeft: undefined,\n        lineSpacing: undefined,\n        lineCount: undefined,\n        textWrapping: undefined,\n        shadowBlur: undefined,\n        shadowOffsetX: undefined,\n        shadowOffsetY: undefined,\n        outlineWidth: undefined,\n        shadowColor: undefined,\n        outlineColor: undefined,\n        textColor: undefined\n    };\n}\n/**\n * Internal\n */\nexport const PBTextShape = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.text !== '') {\n            writer.uint32(10).string(message.text);\n        }\n        if (message.font !== undefined) {\n            writer.uint32(16).int32(message.font);\n        }\n        if (message.fontSize !== undefined) {\n            writer.uint32(29).float(message.fontSize);\n        }\n        if (message.fontAutoSize !== undefined) {\n            writer.uint32(32).bool(message.fontAutoSize);\n        }\n        if (message.textAlign !== undefined) {\n            writer.uint32(40).int32(message.textAlign);\n        }\n        if (message.width !== undefined) {\n            writer.uint32(53).float(message.width);\n        }\n        if (message.height !== undefined) {\n            writer.uint32(61).float(message.height);\n        }\n        if (message.paddingTop !== undefined) {\n            writer.uint32(69).float(message.paddingTop);\n        }\n        if (message.paddingRight !== undefined) {\n            writer.uint32(77).float(message.paddingRight);\n        }\n        if (message.paddingBottom !== undefined) {\n            writer.uint32(85).float(message.paddingBottom);\n        }\n        if (message.paddingLeft !== undefined) {\n            writer.uint32(93).float(message.paddingLeft);\n        }\n        if (message.lineSpacing !== undefined) {\n            writer.uint32(101).float(message.lineSpacing);\n        }\n        if (message.lineCount !== undefined) {\n            writer.uint32(104).int32(message.lineCount);\n        }\n        if (message.textWrapping !== undefined) {\n            writer.uint32(112).bool(message.textWrapping);\n        }\n        if (message.shadowBlur !== undefined) {\n            writer.uint32(125).float(message.shadowBlur);\n        }\n        if (message.shadowOffsetX !== undefined) {\n            writer.uint32(133).float(message.shadowOffsetX);\n        }\n        if (message.shadowOffsetY !== undefined) {\n            writer.uint32(141).float(message.shadowOffsetY);\n        }\n        if (message.outlineWidth !== undefined) {\n            writer.uint32(149).float(message.outlineWidth);\n        }\n        if (message.shadowColor !== undefined) {\n            Color3.encode(message.shadowColor, writer.uint32(154).fork()).ldelim();\n        }\n        if (message.outlineColor !== undefined) {\n            Color3.encode(message.outlineColor, writer.uint32(162).fork()).ldelim();\n        }\n        if (message.textColor !== undefined) {\n            Color4.encode(message.textColor, writer.uint32(170).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBTextShape();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.text = reader.string();\n                    break;\n                case 2:\n                    message.font = reader.int32();\n                    break;\n                case 3:\n                    message.fontSize = reader.float();\n                    break;\n                case 4:\n                    message.fontAutoSize = reader.bool();\n                    break;\n                case 5:\n                    message.textAlign = reader.int32();\n                    break;\n                case 6:\n                    message.width = reader.float();\n                    break;\n                case 7:\n                    message.height = reader.float();\n                    break;\n                case 8:\n                    message.paddingTop = reader.float();\n                    break;\n                case 9:\n                    message.paddingRight = reader.float();\n                    break;\n                case 10:\n                    message.paddingBottom = reader.float();\n                    break;\n                case 11:\n                    message.paddingLeft = reader.float();\n                    break;\n                case 12:\n                    message.lineSpacing = reader.float();\n                    break;\n                case 13:\n                    message.lineCount = reader.int32();\n                    break;\n                case 14:\n                    message.textWrapping = reader.bool();\n                    break;\n                case 15:\n                    message.shadowBlur = reader.float();\n                    break;\n                case 16:\n                    message.shadowOffsetX = reader.float();\n                    break;\n                case 17:\n                    message.shadowOffsetY = reader.float();\n                    break;\n                case 18:\n                    message.outlineWidth = reader.float();\n                    break;\n                case 19:\n                    message.shadowColor = Color3.decode(reader, reader.uint32());\n                    break;\n                case 20:\n                    message.outlineColor = Color3.decode(reader, reader.uint32());\n                    break;\n                case 21:\n                    message.textColor = Color4.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBTextShape } from './pb/decentraland/sdk/components/text_shape.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1030;\n/**\n *\n */\nexport const TextShapeSchema = {\n    serialize(value, builder) {\n        const writer = PBTextShape.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBTextShape.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBTextShape.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport { Color4 } from '../../common/colors.gen';\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBUiBackground() {\n    return { backgroundColor: undefined };\n}\n/**\n * Internal\n */\nexport const PBUiBackground = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.backgroundColor !== undefined) {\n            Color4.encode(message.backgroundColor, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBUiBackground();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.backgroundColor = Color4.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBUiBackground } from './pb/decentraland/sdk/components/ui_background.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1053;\n/**\n *\n */\nexport const UiBackgroundSchema = {\n    serialize(value, builder) {\n        const writer = PBUiBackground.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBUiBackground.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBUiBackground.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport { Color4 } from '../../common/colors.gen';\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBUiText() {\n    return { value: '', color: undefined, textAlign: undefined, font: undefined, fontSize: undefined };\n}\n/**\n * Internal\n */\nexport const PBUiText = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.value !== '') {\n            writer.uint32(10).string(message.value);\n        }\n        if (message.color !== undefined) {\n            Color4.encode(message.color, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.textAlign !== undefined) {\n            writer.uint32(24).int32(message.textAlign);\n        }\n        if (message.font !== undefined) {\n            writer.uint32(32).int32(message.font);\n        }\n        if (message.fontSize !== undefined) {\n            writer.uint32(40).int32(message.fontSize);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBUiText();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.value = reader.string();\n                    break;\n                case 2:\n                    message.color = Color4.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.textAlign = reader.int32();\n                    break;\n                case 4:\n                    message.font = reader.int32();\n                    break;\n                case 5:\n                    message.fontSize = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBUiText } from './pb/decentraland/sdk/components/ui_text.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1052;\n/**\n *\n */\nexport const UiTextSchema = {\n    serialize(value, builder) {\n        const writer = PBUiText.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBUiText.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBUiText.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nexport var YGPositionType;\n(function (YGPositionType) {\n    YGPositionType[YGPositionType[\"YGPT_RELATIVE\"] = 0] = \"YGPT_RELATIVE\";\n    YGPositionType[YGPositionType[\"YGPT_ABSOLUTE\"] = 1] = \"YGPT_ABSOLUTE\";\n})(YGPositionType || (YGPositionType = {}));\nexport var YGAlign;\n(function (YGAlign) {\n    YGAlign[YGAlign[\"YGA_AUTO\"] = 0] = \"YGA_AUTO\";\n    YGAlign[YGAlign[\"YGA_FLEX_START\"] = 1] = \"YGA_FLEX_START\";\n    YGAlign[YGAlign[\"YGA_CENTER\"] = 2] = \"YGA_CENTER\";\n    YGAlign[YGAlign[\"YGA_FLEX_END\"] = 3] = \"YGA_FLEX_END\";\n    YGAlign[YGAlign[\"YGA_STRETCH\"] = 4] = \"YGA_STRETCH\";\n    YGAlign[YGAlign[\"YGA_BASELINE\"] = 5] = \"YGA_BASELINE\";\n    YGAlign[YGAlign[\"YGA_SPACE_BETWEEN\"] = 6] = \"YGA_SPACE_BETWEEN\";\n    YGAlign[YGAlign[\"YGA_SPACE_AROUND\"] = 7] = \"YGA_SPACE_AROUND\";\n})(YGAlign || (YGAlign = {}));\nexport var YGUnit;\n(function (YGUnit) {\n    YGUnit[YGUnit[\"YGU_UNDEFINED\"] = 0] = \"YGU_UNDEFINED\";\n    YGUnit[YGUnit[\"YGU_POINT\"] = 1] = \"YGU_POINT\";\n    YGUnit[YGUnit[\"YGU_PERCENT\"] = 2] = \"YGU_PERCENT\";\n    YGUnit[YGUnit[\"YGU_AUTO\"] = 3] = \"YGU_AUTO\";\n})(YGUnit || (YGUnit = {}));\nexport var YGFlexDirection;\n(function (YGFlexDirection) {\n    YGFlexDirection[YGFlexDirection[\"YGFD_ROW\"] = 0] = \"YGFD_ROW\";\n    YGFlexDirection[YGFlexDirection[\"YGFD_COLUMN\"] = 1] = \"YGFD_COLUMN\";\n    YGFlexDirection[YGFlexDirection[\"YGFD_COLUMN_REVERSE\"] = 2] = \"YGFD_COLUMN_REVERSE\";\n    YGFlexDirection[YGFlexDirection[\"YGFD_ROW_REVERSE\"] = 3] = \"YGFD_ROW_REVERSE\";\n})(YGFlexDirection || (YGFlexDirection = {}));\nexport var YGWrap;\n(function (YGWrap) {\n    YGWrap[YGWrap[\"YGW_NO_WRAP\"] = 0] = \"YGW_NO_WRAP\";\n    YGWrap[YGWrap[\"YGW_WRAP\"] = 1] = \"YGW_WRAP\";\n    YGWrap[YGWrap[\"YGW_WRAP_REVERSE\"] = 2] = \"YGW_WRAP_REVERSE\";\n})(YGWrap || (YGWrap = {}));\nexport var YGJustify;\n(function (YGJustify) {\n    YGJustify[YGJustify[\"YGJ_FLEX_START\"] = 0] = \"YGJ_FLEX_START\";\n    YGJustify[YGJustify[\"YGJ_CENTER\"] = 1] = \"YGJ_CENTER\";\n    YGJustify[YGJustify[\"YGJ_FLEX_END\"] = 2] = \"YGJ_FLEX_END\";\n    YGJustify[YGJustify[\"YGJ_SPACE_BETWEEN\"] = 3] = \"YGJ_SPACE_BETWEEN\";\n    YGJustify[YGJustify[\"YGJ_SPACE_AROUND\"] = 4] = \"YGJ_SPACE_AROUND\";\n    YGJustify[YGJustify[\"YGJ_SPACE_EVENLY\"] = 5] = \"YGJ_SPACE_EVENLY\";\n})(YGJustify || (YGJustify = {}));\nexport var YGOverflow;\n(function (YGOverflow) {\n    YGOverflow[YGOverflow[\"YGO_VISIBLE\"] = 0] = \"YGO_VISIBLE\";\n    YGOverflow[YGOverflow[\"YGO_HIDDEN\"] = 1] = \"YGO_HIDDEN\";\n    YGOverflow[YGOverflow[\"YGO_SCROLL\"] = 2] = \"YGO_SCROLL\";\n})(YGOverflow || (YGOverflow = {}));\nexport var YGDisplay;\n(function (YGDisplay) {\n    YGDisplay[YGDisplay[\"YGD_FLEX\"] = 0] = \"YGD_FLEX\";\n    YGDisplay[YGDisplay[\"YGD_NONE\"] = 1] = \"YGD_NONE\";\n})(YGDisplay || (YGDisplay = {}));\nexport var YGEdge;\n(function (YGEdge) {\n    YGEdge[YGEdge[\"YGE_LEFT\"] = 0] = \"YGE_LEFT\";\n    YGEdge[YGEdge[\"YGE_TOP\"] = 1] = \"YGE_TOP\";\n    YGEdge[YGEdge[\"YGE_RIGHT\"] = 2] = \"YGE_RIGHT\";\n    YGEdge[YGEdge[\"YGE_BOTTOM\"] = 3] = \"YGE_BOTTOM\";\n    YGEdge[YGEdge[\"YGE_START\"] = 4] = \"YGE_START\";\n    YGEdge[YGEdge[\"YGE_END\"] = 5] = \"YGE_END\";\n    YGEdge[YGEdge[\"YGE_HORIZONTAL\"] = 6] = \"YGE_HORIZONTAL\";\n    YGEdge[YGEdge[\"YGE_VERTICAL\"] = 7] = \"YGE_VERTICAL\";\n    YGEdge[YGEdge[\"YGE_ALL\"] = 8] = \"YGE_ALL\";\n})(YGEdge || (YGEdge = {}));\nfunction createBasePBUiTransform() {\n    return {\n        parent: 0,\n        rightOf: 0,\n        alignContent: undefined,\n        alignItems: undefined,\n        flexWrap: undefined,\n        flexShrink: undefined,\n        positionType: 0,\n        alignSelf: 0,\n        flexDirection: 0,\n        justifyContent: 0,\n        overflow: 0,\n        display: 0,\n        flexBasisUnit: 0,\n        flexBasis: 0,\n        flexGrow: 0,\n        widthUnit: 0,\n        width: 0,\n        heightUnit: 0,\n        height: 0,\n        minWidthUnit: 0,\n        minWidth: 0,\n        minHeightUnit: 0,\n        minHeight: 0,\n        maxWidthUnit: 0,\n        maxWidth: 0,\n        maxHeightUnit: 0,\n        maxHeight: 0,\n        positionLeftUnit: 0,\n        positionLeft: 0,\n        positionTopUnit: 0,\n        positionTop: 0,\n        positionRightUnit: 0,\n        positionRight: 0,\n        positionBottomUnit: 0,\n        positionBottom: 0,\n        marginLeftUnit: 0,\n        marginLeft: 0,\n        marginTopUnit: 0,\n        marginTop: 0,\n        marginRightUnit: 0,\n        marginRight: 0,\n        marginBottomUnit: 0,\n        marginBottom: 0,\n        paddingLeftUnit: 0,\n        paddingLeft: 0,\n        paddingTopUnit: 0,\n        paddingTop: 0,\n        paddingRightUnit: 0,\n        paddingRight: 0,\n        paddingBottomUnit: 0,\n        paddingBottom: 0\n    };\n}\n/**\n * Internal\n */\nexport const PBUiTransform = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.parent !== 0) {\n            writer.uint32(8).int32(message.parent);\n        }\n        if (message.rightOf !== 0) {\n            writer.uint32(16).int32(message.rightOf);\n        }\n        if (message.alignContent !== undefined) {\n            writer.uint32(24).int32(message.alignContent);\n        }\n        if (message.alignItems !== undefined) {\n            writer.uint32(32).int32(message.alignItems);\n        }\n        if (message.flexWrap !== undefined) {\n            writer.uint32(40).int32(message.flexWrap);\n        }\n        if (message.flexShrink !== undefined) {\n            writer.uint32(53).float(message.flexShrink);\n        }\n        if (message.positionType !== 0) {\n            writer.uint32(56).int32(message.positionType);\n        }\n        if (message.alignSelf !== 0) {\n            writer.uint32(64).int32(message.alignSelf);\n        }\n        if (message.flexDirection !== 0) {\n            writer.uint32(72).int32(message.flexDirection);\n        }\n        if (message.justifyContent !== 0) {\n            writer.uint32(80).int32(message.justifyContent);\n        }\n        if (message.overflow !== 0) {\n            writer.uint32(88).int32(message.overflow);\n        }\n        if (message.display !== 0) {\n            writer.uint32(96).int32(message.display);\n        }\n        if (message.flexBasisUnit !== 0) {\n            writer.uint32(104).int32(message.flexBasisUnit);\n        }\n        if (message.flexBasis !== 0) {\n            writer.uint32(117).float(message.flexBasis);\n        }\n        if (message.flexGrow !== 0) {\n            writer.uint32(125).float(message.flexGrow);\n        }\n        if (message.widthUnit !== 0) {\n            writer.uint32(128).int32(message.widthUnit);\n        }\n        if (message.width !== 0) {\n            writer.uint32(141).float(message.width);\n        }\n        if (message.heightUnit !== 0) {\n            writer.uint32(144).int32(message.heightUnit);\n        }\n        if (message.height !== 0) {\n            writer.uint32(157).float(message.height);\n        }\n        if (message.minWidthUnit !== 0) {\n            writer.uint32(160).int32(message.minWidthUnit);\n        }\n        if (message.minWidth !== 0) {\n            writer.uint32(173).float(message.minWidth);\n        }\n        if (message.minHeightUnit !== 0) {\n            writer.uint32(176).int32(message.minHeightUnit);\n        }\n        if (message.minHeight !== 0) {\n            writer.uint32(189).float(message.minHeight);\n        }\n        if (message.maxWidthUnit !== 0) {\n            writer.uint32(192).int32(message.maxWidthUnit);\n        }\n        if (message.maxWidth !== 0) {\n            writer.uint32(205).float(message.maxWidth);\n        }\n        if (message.maxHeightUnit !== 0) {\n            writer.uint32(208).int32(message.maxHeightUnit);\n        }\n        if (message.maxHeight !== 0) {\n            writer.uint32(221).float(message.maxHeight);\n        }\n        if (message.positionLeftUnit !== 0) {\n            writer.uint32(224).int32(message.positionLeftUnit);\n        }\n        if (message.positionLeft !== 0) {\n            writer.uint32(237).float(message.positionLeft);\n        }\n        if (message.positionTopUnit !== 0) {\n            writer.uint32(240).int32(message.positionTopUnit);\n        }\n        if (message.positionTop !== 0) {\n            writer.uint32(253).float(message.positionTop);\n        }\n        if (message.positionRightUnit !== 0) {\n            writer.uint32(256).int32(message.positionRightUnit);\n        }\n        if (message.positionRight !== 0) {\n            writer.uint32(269).float(message.positionRight);\n        }\n        if (message.positionBottomUnit !== 0) {\n            writer.uint32(272).int32(message.positionBottomUnit);\n        }\n        if (message.positionBottom !== 0) {\n            writer.uint32(285).float(message.positionBottom);\n        }\n        if (message.marginLeftUnit !== 0) {\n            writer.uint32(288).int32(message.marginLeftUnit);\n        }\n        if (message.marginLeft !== 0) {\n            writer.uint32(301).float(message.marginLeft);\n        }\n        if (message.marginTopUnit !== 0) {\n            writer.uint32(304).int32(message.marginTopUnit);\n        }\n        if (message.marginTop !== 0) {\n            writer.uint32(317).float(message.marginTop);\n        }\n        if (message.marginRightUnit !== 0) {\n            writer.uint32(320).int32(message.marginRightUnit);\n        }\n        if (message.marginRight !== 0) {\n            writer.uint32(333).float(message.marginRight);\n        }\n        if (message.marginBottomUnit !== 0) {\n            writer.uint32(336).int32(message.marginBottomUnit);\n        }\n        if (message.marginBottom !== 0) {\n            writer.uint32(349).float(message.marginBottom);\n        }\n        if (message.paddingLeftUnit !== 0) {\n            writer.uint32(352).int32(message.paddingLeftUnit);\n        }\n        if (message.paddingLeft !== 0) {\n            writer.uint32(365).float(message.paddingLeft);\n        }\n        if (message.paddingTopUnit !== 0) {\n            writer.uint32(368).int32(message.paddingTopUnit);\n        }\n        if (message.paddingTop !== 0) {\n            writer.uint32(381).float(message.paddingTop);\n        }\n        if (message.paddingRightUnit !== 0) {\n            writer.uint32(384).int32(message.paddingRightUnit);\n        }\n        if (message.paddingRight !== 0) {\n            writer.uint32(397).float(message.paddingRight);\n        }\n        if (message.paddingBottomUnit !== 0) {\n            writer.uint32(400).int32(message.paddingBottomUnit);\n        }\n        if (message.paddingBottom !== 0) {\n            writer.uint32(413).float(message.paddingBottom);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBUiTransform();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.parent = reader.int32();\n                    break;\n                case 2:\n                    message.rightOf = reader.int32();\n                    break;\n                case 3:\n                    message.alignContent = reader.int32();\n                    break;\n                case 4:\n                    message.alignItems = reader.int32();\n                    break;\n                case 5:\n                    message.flexWrap = reader.int32();\n                    break;\n                case 6:\n                    message.flexShrink = reader.float();\n                    break;\n                case 7:\n                    message.positionType = reader.int32();\n                    break;\n                case 8:\n                    message.alignSelf = reader.int32();\n                    break;\n                case 9:\n                    message.flexDirection = reader.int32();\n                    break;\n                case 10:\n                    message.justifyContent = reader.int32();\n                    break;\n                case 11:\n                    message.overflow = reader.int32();\n                    break;\n                case 12:\n                    message.display = reader.int32();\n                    break;\n                case 13:\n                    message.flexBasisUnit = reader.int32();\n                    break;\n                case 14:\n                    message.flexBasis = reader.float();\n                    break;\n                case 15:\n                    message.flexGrow = reader.float();\n                    break;\n                case 16:\n                    message.widthUnit = reader.int32();\n                    break;\n                case 17:\n                    message.width = reader.float();\n                    break;\n                case 18:\n                    message.heightUnit = reader.int32();\n                    break;\n                case 19:\n                    message.height = reader.float();\n                    break;\n                case 20:\n                    message.minWidthUnit = reader.int32();\n                    break;\n                case 21:\n                    message.minWidth = reader.float();\n                    break;\n                case 22:\n                    message.minHeightUnit = reader.int32();\n                    break;\n                case 23:\n                    message.minHeight = reader.float();\n                    break;\n                case 24:\n                    message.maxWidthUnit = reader.int32();\n                    break;\n                case 25:\n                    message.maxWidth = reader.float();\n                    break;\n                case 26:\n                    message.maxHeightUnit = reader.int32();\n                    break;\n                case 27:\n                    message.maxHeight = reader.float();\n                    break;\n                case 28:\n                    message.positionLeftUnit = reader.int32();\n                    break;\n                case 29:\n                    message.positionLeft = reader.float();\n                    break;\n                case 30:\n                    message.positionTopUnit = reader.int32();\n                    break;\n                case 31:\n                    message.positionTop = reader.float();\n                    break;\n                case 32:\n                    message.positionRightUnit = reader.int32();\n                    break;\n                case 33:\n                    message.positionRight = reader.float();\n                    break;\n                case 34:\n                    message.positionBottomUnit = reader.int32();\n                    break;\n                case 35:\n                    message.positionBottom = reader.float();\n                    break;\n                case 36:\n                    message.marginLeftUnit = reader.int32();\n                    break;\n                case 37:\n                    message.marginLeft = reader.float();\n                    break;\n                case 38:\n                    message.marginTopUnit = reader.int32();\n                    break;\n                case 39:\n                    message.marginTop = reader.float();\n                    break;\n                case 40:\n                    message.marginRightUnit = reader.int32();\n                    break;\n                case 41:\n                    message.marginRight = reader.float();\n                    break;\n                case 42:\n                    message.marginBottomUnit = reader.int32();\n                    break;\n                case 43:\n                    message.marginBottom = reader.float();\n                    break;\n                case 44:\n                    message.paddingLeftUnit = reader.int32();\n                    break;\n                case 45:\n                    message.paddingLeft = reader.float();\n                    break;\n                case 46:\n                    message.paddingTopUnit = reader.int32();\n                    break;\n                case 47:\n                    message.paddingTop = reader.float();\n                    break;\n                case 48:\n                    message.paddingRightUnit = reader.int32();\n                    break;\n                case 49:\n                    message.paddingRight = reader.float();\n                    break;\n                case 50:\n                    message.paddingBottomUnit = reader.int32();\n                    break;\n                case 51:\n                    message.paddingBottom = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBUiTransform } from './pb/decentraland/sdk/components/ui_transform.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1050;\n/**\n *\n */\nexport const UiTransformSchema = {\n    serialize(value, builder) {\n        const writer = PBUiTransform.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBUiTransform.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBUiTransform.decode(new Uint8Array());\n    }\n};\n","/* eslint-disable */\nimport _m0 from 'protobufjs/minimal';\nconst protobufPackage = 'decentraland.sdk.components';\nfunction createBasePBVisibilityComponent() {\n    return { visible: undefined };\n}\n/**\n * Internal\n */\nexport const PBVisibilityComponent = {\n    encode(message, writer = _m0.Writer.create()) {\n        if (message.visible !== undefined) {\n            writer.uint32(8).bool(message.visible);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePBVisibilityComponent();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.visible = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n};\n","import { PBVisibilityComponent } from './pb/decentraland/sdk/components/visibility_component.gen';\n/**\n *\n */\nexport const COMPONENT_ID = 1081;\n/**\n *\n */\nexport const VisibilityComponentSchema = {\n    serialize(value, builder) {\n        const writer = PBVisibilityComponent.encode(value);\n        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n        builder.writeBuffer(buffer, false);\n    },\n    deserialize(reader) {\n        return PBVisibilityComponent.decode(reader.buffer(), reader.remainingBytes());\n    },\n    create() {\n        // TODO: this is a hack.\n        return PBVisibilityComponent.decode(new Uint8Array());\n    }\n};\n","import * as AnimatorSchema from './Animator.gen';\nimport * as AudioSourceSchema from './AudioSource.gen';\nimport * as AudioStreamSchema from './AudioStream.gen';\nimport * as AvatarAttachSchema from './AvatarAttach.gen';\nimport * as AvatarModifierAreaSchema from './AvatarModifierArea.gen';\nimport * as AvatarShapeSchema from './AvatarShape.gen';\nimport * as BillboardSchema from './Billboard.gen';\nimport * as CameraModeSchema from './CameraMode.gen';\nimport * as CameraModeAreaSchema from './CameraModeArea.gen';\nimport * as GltfContainerSchema from './GltfContainer.gen';\nimport * as MaterialSchema from './Material.gen';\nimport * as MeshColliderSchema from './MeshCollider.gen';\nimport * as MeshRendererSchema from './MeshRenderer.gen';\nimport * as NftShapeSchema from './NftShape.gen';\nimport * as PointerEventsResultSchema from './PointerEventsResult.gen';\nimport * as PointerHoverFeedbackSchema from './PointerHoverFeedback.gen';\nimport * as PointerLockSchema from './PointerLock.gen';\nimport * as RaycastSchema from './Raycast.gen';\nimport * as RaycastResultSchema from './RaycastResult.gen';\nimport * as TextShapeSchema from './TextShape.gen';\nimport * as UiBackgroundSchema from './UiBackground.gen';\nimport * as UiTextSchema from './UiText.gen';\nimport * as UiTransformSchema from './UiTransform.gen';\nimport * as VisibilityComponentSchema from './VisibilityComponent.gen';\nexport * from './pb/decentraland/sdk/components/animator.gen';\nexport * from './pb/decentraland/sdk/components/audio_source.gen';\nexport * from './pb/decentraland/sdk/components/audio_stream.gen';\nexport * from './pb/decentraland/sdk/components/avatar_attach.gen';\nexport * from './pb/decentraland/sdk/components/avatar_modifier_area.gen';\nexport * from './pb/decentraland/sdk/components/avatar_shape.gen';\nexport * from './pb/decentraland/sdk/components/billboard.gen';\nexport * from './pb/decentraland/sdk/components/camera_mode.gen';\nexport * from './pb/decentraland/sdk/components/camera_mode_area.gen';\nexport * from './pb/decentraland/sdk/components/gltf_container.gen';\nexport * from './pb/decentraland/sdk/components/material.gen';\nexport * from './pb/decentraland/sdk/components/mesh_collider.gen';\nexport * from './pb/decentraland/sdk/components/mesh_renderer.gen';\nexport * from './pb/decentraland/sdk/components/nft_shape.gen';\nexport * from './pb/decentraland/sdk/components/pointer_events_result.gen';\nexport * from './pb/decentraland/sdk/components/pointer_hover_feedback.gen';\nexport * from './pb/decentraland/sdk/components/pointer_lock.gen';\nexport * from './pb/decentraland/sdk/components/raycast.gen';\nexport * from './pb/decentraland/sdk/components/raycast_result.gen';\nexport * from './pb/decentraland/sdk/components/text_shape.gen';\nexport * from './pb/decentraland/sdk/components/ui_background.gen';\nexport * from './pb/decentraland/sdk/components/ui_text.gen';\nexport * from './pb/decentraland/sdk/components/ui_transform.gen';\nexport * from './pb/decentraland/sdk/components/visibility_component.gen';\nexport function defineLibraryComponents({ defineComponentFromSchema }) {\n    return {\n        Animator: defineComponentFromSchema(AnimatorSchema.AnimatorSchema, AnimatorSchema.COMPONENT_ID),\n        AudioSource: defineComponentFromSchema(AudioSourceSchema.AudioSourceSchema, AudioSourceSchema.COMPONENT_ID),\n        AudioStream: defineComponentFromSchema(AudioStreamSchema.AudioStreamSchema, AudioStreamSchema.COMPONENT_ID),\n        AvatarAttach: defineComponentFromSchema(AvatarAttachSchema.AvatarAttachSchema, AvatarAttachSchema.COMPONENT_ID),\n        AvatarModifierArea: defineComponentFromSchema(AvatarModifierAreaSchema.AvatarModifierAreaSchema, AvatarModifierAreaSchema.COMPONENT_ID),\n        AvatarShape: defineComponentFromSchema(AvatarShapeSchema.AvatarShapeSchema, AvatarShapeSchema.COMPONENT_ID),\n        Billboard: defineComponentFromSchema(BillboardSchema.BillboardSchema, BillboardSchema.COMPONENT_ID),\n        CameraMode: defineComponentFromSchema(CameraModeSchema.CameraModeSchema, CameraModeSchema.COMPONENT_ID),\n        CameraModeArea: defineComponentFromSchema(CameraModeAreaSchema.CameraModeAreaSchema, CameraModeAreaSchema.COMPONENT_ID),\n        GltfContainer: defineComponentFromSchema(GltfContainerSchema.GltfContainerSchema, GltfContainerSchema.COMPONENT_ID),\n        Material: defineComponentFromSchema(MaterialSchema.MaterialSchema, MaterialSchema.COMPONENT_ID),\n        MeshCollider: defineComponentFromSchema(MeshColliderSchema.MeshColliderSchema, MeshColliderSchema.COMPONENT_ID),\n        MeshRenderer: defineComponentFromSchema(MeshRendererSchema.MeshRendererSchema, MeshRendererSchema.COMPONENT_ID),\n        NftShape: defineComponentFromSchema(NftShapeSchema.NftShapeSchema, NftShapeSchema.COMPONENT_ID),\n        PointerEventsResult: defineComponentFromSchema(PointerEventsResultSchema.PointerEventsResultSchema, PointerEventsResultSchema.COMPONENT_ID),\n        PointerHoverFeedback: defineComponentFromSchema(PointerHoverFeedbackSchema.PointerHoverFeedbackSchema, PointerHoverFeedbackSchema.COMPONENT_ID),\n        PointerLock: defineComponentFromSchema(PointerLockSchema.PointerLockSchema, PointerLockSchema.COMPONENT_ID),\n        Raycast: defineComponentFromSchema(RaycastSchema.RaycastSchema, RaycastSchema.COMPONENT_ID),\n        RaycastResult: defineComponentFromSchema(RaycastResultSchema.RaycastResultSchema, RaycastResultSchema.COMPONENT_ID),\n        TextShape: defineComponentFromSchema(TextShapeSchema.TextShapeSchema, TextShapeSchema.COMPONENT_ID),\n        UiBackground: defineComponentFromSchema(UiBackgroundSchema.UiBackgroundSchema, UiBackgroundSchema.COMPONENT_ID),\n        UiText: defineComponentFromSchema(UiTextSchema.UiTextSchema, UiTextSchema.COMPONENT_ID),\n        UiTransform: defineComponentFromSchema(UiTransformSchema.UiTransformSchema, UiTransformSchema.COMPONENT_ID),\n        VisibilityComponent: defineComponentFromSchema(VisibilityComponentSchema.VisibilityComponentSchema, VisibilityComponentSchema.COMPONENT_ID),\n    };\n}\n","/**\n * @internal\n */\nexport const COMPONENT_ID = 1;\n/** @internal */\nexport const TRANSFORM_LENGTH = 44;\n/** @internal */\nexport const TransformSchema = {\n    serialize(value, builder) {\n        const ptr = builder.incrementWriteOffset(TRANSFORM_LENGTH);\n        builder.setFloat32(ptr, value.position.x);\n        builder.setFloat32(ptr + 4, value.position.y);\n        builder.setFloat32(ptr + 8, value.position.z);\n        builder.setFloat32(ptr + 12, value.rotation.x);\n        builder.setFloat32(ptr + 16, value.rotation.y);\n        builder.setFloat32(ptr + 20, value.rotation.z);\n        builder.setFloat32(ptr + 24, value.rotation.w);\n        builder.setFloat32(ptr + 28, value.scale.x);\n        builder.setFloat32(ptr + 32, value.scale.y);\n        builder.setFloat32(ptr + 36, value.scale.z);\n        builder.setUint32(ptr + 40, value.parent || 0);\n    },\n    deserialize(reader) {\n        const ptr = reader.incrementReadOffset(TRANSFORM_LENGTH);\n        return {\n            position: {\n                x: reader.getFloat32(ptr),\n                y: reader.getFloat32(ptr + 4),\n                z: reader.getFloat32(ptr + 8)\n            },\n            rotation: {\n                x: reader.getFloat32(ptr + 12),\n                y: reader.getFloat32(ptr + 16),\n                z: reader.getFloat32(ptr + 20),\n                w: reader.getFloat32(ptr + 24)\n            },\n            scale: {\n                x: reader.getFloat32(ptr + 28),\n                y: reader.getFloat32(ptr + 32),\n                z: reader.getFloat32(ptr + 36)\n            },\n            parent: reader.getUint32(ptr + 40)\n        };\n    },\n    create() {\n        return {\n            position: { x: 0, y: 0, z: 0 },\n            scale: { x: 1, y: 1, z: 1 },\n            rotation: { x: 0, y: 0, z: 0, w: 1 }\n        };\n    }\n};\nexport function defineTransformComponent({ defineComponentFromSchema }) {\n    return defineComponentFromSchema(TransformSchema, COMPONENT_ID);\n}\n","import * as AnimatorSchema from './../generated/Animator.gen';\nexport function defineAnimatorComponent(engine) {\n    const Animator = engine.getComponent(AnimatorSchema.COMPONENT_ID);\n    /**\n     * @returns The tuple [animator, clip]\n     */\n    function getClipAndAnimator(entity, name) {\n        const anim = Animator.getMutableOrNull(entity);\n        if (!anim)\n            return [null, null];\n        const state = anim.states.find((item) => item.name === name || item.clip === name);\n        if (!state)\n            return [anim, null];\n        return [anim, state];\n    }\n    return {\n        ...Animator,\n        getClipOrNull(entity, name) {\n            const [_, state] = getClipAndAnimator(entity, name);\n            return state;\n        },\n        getClip(entity, name) {\n            const [animator, state] = getClipAndAnimator(entity, name);\n            if (!animator) {\n                throw new Error(`There is no Animator found in the entity ${entity}`);\n            }\n            if (!state) {\n                throw new Error(`The Animator component of ${entity} has no the state ${name}`);\n            }\n            return state;\n        },\n        playSingleAnimation(entity, name, shouldReset = true) {\n            const [animator, state] = getClipAndAnimator(entity, name);\n            if (!animator || !state)\n                return false;\n            // Reset all other animations\n            for (const state of animator.states) {\n                state.playing = false;\n                state.shouldReset = true;\n            }\n            state.playing = true;\n            state.shouldReset = shouldReset;\n            return true;\n        },\n        stopAllAnimations(entity, resetCursor = true) {\n            // Get the mutable to modifying\n            const animator = Animator.getMutableOrNull(entity);\n            if (!animator)\n                return false;\n            // Reset all other animations\n            for (const state of animator.states) {\n                state.playing = false;\n                state.shouldReset = resetCursor;\n            }\n            return true;\n        }\n    };\n}\n","import * as MeshColliderSchema from './../generated/MeshCollider.gen';\nexport function defineMeshColliderComponent(engine) {\n    const MeshCollider = engine.getComponent(MeshColliderSchema.COMPONENT_ID);\n    function getCollisionMask(layers) {\n        if (Array.isArray(layers)) {\n            return layers\n                .map((item) => item)\n                .reduce((prev, item) => prev | item, 0);\n        }\n        else if (layers) {\n            return layers;\n        }\n    }\n    return {\n        ...MeshCollider,\n        setBox(entity, colliderLayers) {\n            MeshCollider.createOrReplace(entity, {\n                mesh: { $case: 'box', box: {} },\n                collisionMask: getCollisionMask(colliderLayers)\n            });\n        },\n        setPlane(entity, colliderLayers) {\n            MeshCollider.createOrReplace(entity, {\n                mesh: { $case: 'plane', plane: {} },\n                collisionMask: getCollisionMask(colliderLayers)\n            });\n        },\n        setCylinder(entity, radiusBottom, radiusTop, colliderLayers) {\n            MeshCollider.createOrReplace(entity, {\n                mesh: { $case: 'cylinder', cylinder: { radiusBottom, radiusTop } },\n                collisionMask: getCollisionMask(colliderLayers)\n            });\n        },\n        setSphere(entity, colliderLayers) {\n            MeshCollider.createOrReplace(entity, {\n                mesh: { $case: 'sphere', sphere: {} },\n                collisionMask: getCollisionMask(colliderLayers)\n            });\n        }\n    };\n}\n","import * as MeshRendererSchema from './../generated/MeshRenderer.gen';\nexport function defineMeshRendererComponent(engine) {\n    const MeshRenderer = engine.getComponent(MeshRendererSchema.COMPONENT_ID);\n    return {\n        ...MeshRenderer,\n        setBox(entity, uvs) {\n            MeshRenderer.createOrReplace(entity, {\n                mesh: { $case: 'box', box: { uvs: uvs || [] } }\n            });\n        },\n        setPlane(entity, uvs) {\n            MeshRenderer.createOrReplace(entity, {\n                mesh: { $case: 'plane', plane: { uvs: uvs || [] } }\n            });\n        },\n        setCylinder(entity, radiusBottom, radiusTop) {\n            MeshRenderer.createOrReplace(entity, {\n                mesh: { $case: 'cylinder', cylinder: { radiusBottom, radiusTop } }\n            });\n        },\n        setSphere(entity) {\n            MeshRenderer.createOrReplace(entity, {\n                mesh: { $case: 'sphere', sphere: {} }\n            });\n        }\n    };\n}\n","import * as MaterialSchema from '../generated/Material.gen';\nconst TextureHelper = {\n    Common(texture) {\n        return {\n            tex: {\n                $case: 'texture',\n                texture\n            }\n        };\n    },\n    Avatar(avatarTexture) {\n        return {\n            tex: {\n                $case: 'avatarTexture',\n                avatarTexture\n            }\n        };\n    }\n};\nexport function defineMaterialComponent(engine) {\n    const Material = engine.getComponent(MaterialSchema.COMPONENT_ID);\n    return {\n        ...Material,\n        Texture: TextureHelper,\n        setBasicMaterial(entity, material) {\n            Material.createOrReplace(entity, {\n                material: {\n                    $case: 'unlit',\n                    unlit: material\n                }\n            });\n        },\n        setPbrMaterial(entity, material) {\n            Material.createOrReplace(entity, {\n                material: {\n                    $case: 'pbr',\n                    pbr: material\n                }\n            });\n        }\n    };\n}\n","import { defineLibraryComponents } from './generated/index.gen';\nimport { defineTransformComponent } from './legacy/Transform';\nimport { defineAnimatorComponent } from './extended/Animator';\nimport { defineMeshColliderComponent } from './extended/MeshCollider';\nimport { defineMeshRendererComponent } from './extended/MeshRenderer';\nimport { defineMaterialComponent } from './extended/Material';\nexport function defineSdkComponents(engine) {\n    const autogeneratedComponents = defineLibraryComponents(engine);\n    return {\n        ...autogeneratedComponents,\n        Material: defineMaterialComponent(engine),\n        Animator: defineAnimatorComponent(engine),\n        MeshRenderer: defineMeshRendererComponent(engine),\n        MeshCollider: defineMeshColliderComponent(engine),\n        Transform: defineTransformComponent(engine)\n    };\n}\n","/**\n * @public\n */\nexport function IArray(type) {\n    return {\n        serialize(value, builder) {\n            builder.writeUint32(value.length);\n            for (const item of value) {\n                type.serialize(item, builder);\n            }\n        },\n        deserialize(reader) {\n            const newArray = [];\n            const length = reader.readUint32();\n            for (let index = 0; index < length; index++) {\n                newArray.push(type.deserialize(reader));\n            }\n            return newArray;\n        },\n        create() {\n            return [];\n        }\n    };\n}\n","/**\n * @public\n */\nexport const Bool = {\n    serialize(value, builder) {\n        builder.writeInt8(value ? 1 : 0);\n    },\n    deserialize(reader) {\n        return reader.readInt8() === 1;\n    },\n    create() {\n        return false;\n    }\n};\n","/**\n * @public\n */\nexport function IEnum(type) {\n    return {\n        serialize(value, builder) {\n            type.serialize(value, builder);\n        },\n        deserialize(reader) {\n            return type.deserialize(reader);\n        },\n        create() {\n            return type.create();\n        }\n    };\n}\n","/**\n * @public\n */\nexport const Float32 = {\n    serialize(value, builder) {\n        builder.writeFloat32(value);\n    },\n    deserialize(reader) {\n        return reader.readFloat32();\n    },\n    create() {\n        return 0.0;\n    }\n};\n/**\n * @public\n */\nexport const Float64 = {\n    serialize(value, builder) {\n        builder.writeFloat64(value);\n    },\n    deserialize(reader) {\n        return reader.readFloat64();\n    },\n    create() {\n        return 0.0;\n    }\n};\n","/**\n * @public\n */\nexport const Int64 = {\n    serialize(value, builder) {\n        builder.writeInt64(BigInt(value));\n    },\n    deserialize(reader) {\n        return Number(reader.readInt64());\n    },\n    create() {\n        return 0;\n    }\n};\n/**\n * @public\n */\nexport const Int32 = {\n    serialize(value, builder) {\n        builder.writeInt32(value);\n    },\n    deserialize(reader) {\n        return reader.readInt32();\n    },\n    create() {\n        return 0;\n    }\n};\n/**\n * @public\n */\nexport const Int16 = {\n    serialize(value, builder) {\n        builder.writeInt16(value);\n    },\n    deserialize(reader) {\n        return reader.readInt16();\n    },\n    create() {\n        return 0;\n    }\n};\n/**\n * @public\n */\nexport const Int8 = {\n    serialize(value, builder) {\n        builder.writeInt8(value);\n    },\n    deserialize(reader) {\n        return reader.readInt8();\n    },\n    create() {\n        return 0;\n    }\n};\n","/**\n * @public\n */\nexport const FlatString = {\n    serialize(value, builder) {\n        builder.writeBuffer(new TextEncoder().encode(value));\n    },\n    deserialize(reader) {\n        return new TextDecoder().decode(reader.readBuffer());\n    },\n    create() {\n        return '';\n    }\n};\n/**\n * @public\n */\nexport const EcsString = FlatString;\n","/**\n * @public\n */\nexport const Color3Schema = {\n    serialize(value, builder) {\n        builder.writeFloat32(value.r);\n        builder.writeFloat32(value.g);\n        builder.writeFloat32(value.b);\n    },\n    deserialize(reader) {\n        return {\n            r: reader.readFloat32(),\n            g: reader.readFloat32(),\n            b: reader.readFloat32()\n        };\n    },\n    create() {\n        return { r: 0, g: 0, b: 0 };\n    }\n};\n","/**\n * @public\n */\nexport const Color4Schema = {\n    serialize(value, builder) {\n        builder.writeFloat32(value.r);\n        builder.writeFloat32(value.g);\n        builder.writeFloat32(value.b);\n        builder.writeFloat32(value.a);\n    },\n    deserialize(reader) {\n        return {\n            r: reader.readFloat32(),\n            g: reader.readFloat32(),\n            b: reader.readFloat32(),\n            a: reader.readFloat32()\n        };\n    },\n    create() {\n        return { r: 0, g: 0, b: 0, a: 0 };\n    }\n};\n","/**\n * @public\n */\nexport const EntitySchema = {\n    serialize(value, builder) {\n        builder.writeInt32(value);\n    },\n    deserialize(reader) {\n        return reader.readInt32();\n    },\n    create() {\n        return 0;\n    }\n};\n","/**\n * @public\n */\nexport const QuaternionSchema = {\n    serialize(value, builder) {\n        builder.writeFloat32(value.x);\n        builder.writeFloat32(value.y);\n        builder.writeFloat32(value.z);\n        builder.writeFloat32(value.w);\n    },\n    deserialize(reader) {\n        return {\n            x: reader.readFloat32(),\n            y: reader.readFloat32(),\n            z: reader.readFloat32(),\n            w: reader.readFloat32()\n        };\n    },\n    create() {\n        return { x: 0, y: 0, z: 0, w: 0 };\n    }\n};\n","/**\n * @public\n */\nexport const Vector3Schema = {\n    serialize(value, builder) {\n        builder.writeFloat32(value.x);\n        builder.writeFloat32(value.y);\n        builder.writeFloat32(value.z);\n    },\n    deserialize(reader) {\n        return {\n            x: reader.readFloat32(),\n            y: reader.readFloat32(),\n            z: reader.readFloat32()\n        };\n    },\n    create() {\n        return { x: 0, y: 0, z: 0 };\n    }\n};\n","/**\n * @public\n */\nexport function IMap(spec) {\n    return {\n        serialize(value, builder) {\n            for (const key in spec) {\n                // TODO: as any\n                spec[key].serialize(value[key], builder);\n            }\n        },\n        deserialize(reader) {\n            const newValue = {};\n            for (const key in spec) {\n                // TODO: as any\n                ;\n                newValue[key] = spec[key].deserialize(reader);\n            }\n            return newValue;\n        },\n        create() {\n            const newValue = {};\n            for (const key in spec) {\n                // TODO: as any\n                ;\n                newValue[key] = spec[key].create();\n            }\n            return newValue;\n        }\n    };\n}\n","/**\n * @public\n */\nexport function IOptional(spec) {\n    return {\n        serialize(value, builder) {\n            if (value) {\n                builder.writeInt8(1);\n                spec.serialize(value, builder);\n            }\n            else {\n                builder.writeInt8(0);\n            }\n        },\n        deserialize(reader) {\n            const exists = reader.readInt8();\n            if (exists) {\n                return spec.deserialize(reader);\n            }\n        },\n        create() {\n            return undefined;\n        }\n    };\n}\n","import { IArray } from './Array';\nimport { Bool } from './basic/Boolean';\nimport { IEnum } from './basic/Enum';\nimport { Float32, Float64 } from './basic/Float';\nimport { Int16, Int32, Int8, Int64 as iInt64 } from './basic/Integer';\nimport { EcsString } from './basic/String';\nimport { Color3Schema } from './custom/Color3';\nimport { Color4Schema } from './custom/Color4';\nimport { EntitySchema } from './custom/Entity';\nimport { QuaternionSchema } from './custom/Quaternion';\nimport { Vector3Schema } from './custom/Vector3';\nimport { IMap } from './Map';\nimport { IOptional } from './Optional';\n/**\n * @public\n */\nexport var Schemas;\n(function (Schemas) {\n    Schemas.Boolean = Bool;\n    Schemas.String = EcsString;\n    Schemas.Float = Float32;\n    Schemas.Double = Float64;\n    Schemas.Byte = Int8;\n    Schemas.Short = Int16;\n    Schemas.Int = Int32;\n    Schemas.Int64 = iInt64;\n    Schemas.Number = Float32;\n    Schemas.Vector3 = Vector3Schema;\n    Schemas.Quaternion = QuaternionSchema;\n    Schemas.Color3 = Color3Schema;\n    Schemas.Color4 = Color4Schema;\n    Schemas.Entity = EntitySchema;\n    Schemas.Enum = IEnum;\n    Schemas.Array = IArray;\n    Schemas.Map = IMap;\n    Schemas.Optional = IOptional;\n})(Schemas || (Schemas = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3RydWN0IG9mIHRoZSBtZXNzYWdlIHRoYXQncyBiZWluZyB0cmFuc2ZlcmVkIGJldHdlZW4gY2xpZW50cy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgTWVzc2FnZTxUID0gdW5rbm93bj4gPSB7XG4gIGtleTE6IG51bWJlclxuICBrZXkyOiBudW1iZXJcbiAgdGltZXN0YW1wOiBudW1iZXJcbiAgZGF0YTogVCB8IG51bGxcbn1cblxuLyoqXG4gKiBQYXlsb2FkIHRoYXQgaXRzIGJlaW5nIHN0b3JlZCBpbiB0aGUgc3RhdGUuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFBheWxvYWQ8VCA9IHVua25vd24+ID0ge1xuICB0aW1lc3RhbXA6IG51bWJlclxuICBkYXRhOiBUIHwgbnVsbFxufVxuXG4vKipcbiAqIExvY2FsIHN0YXRlXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFN0YXRlPFQgPSB1bmtub3duPiA9IE1hcDxudW1iZXIsIE1hcDxudW1iZXIsIFBheWxvYWQ8VD4gfCBudWxsPj5cblxuLyoqXG4gKiBDUkRUIHJldHVybiB0eXBlXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIENSRFQ8VCA9IHVua25vd24+ID0ge1xuICBjcmVhdGVFdmVudChrZXkxOiBudW1iZXIsIGtleTI6IG51bWJlciwgZGF0YTogVCB8IG51bGwpOiBNZXNzYWdlPFQ+XG4gIHByb2Nlc3NNZXNzYWdlKG1lc3NhZ2U6IE1lc3NhZ2U8VD4pOiBNZXNzYWdlPFQ+XG4gIGdldFN0YXRlKCk6IFN0YXRlPFQ+XG59XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crdtProtocol = exports.stateIterator = exports.sameData = void 0;\n__exportStar(require(\"./types\"), exports);\nconst globalBuffer = globalThis.Buffer;\n/**\n * Compare raw data.\n * @internal\n */\nfunction sameData(a, b) {\n    // At reference level\n    if (a === b)\n        return true;\n    if (a instanceof Uint8Array && b instanceof Uint8Array) {\n        if (a.byteLength !== b.byteLength) {\n            return false;\n        }\n        for (let i = 0; i < a.byteLength; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (globalBuffer) {\n        if (a instanceof globalBuffer && b instanceof globalBuffer) {\n            // Deep level\n            return a.equals(b);\n        }\n    }\n    return false;\n}\nexports.sameData = sameData;\n/**\n * State iterator\n * @internal\n */\nfunction* stateIterator(state) {\n    for (const [key1, value1] of state.entries()) {\n        for (const [key2, value2] of value1.entries()) {\n            yield [key1, key2, value2];\n        }\n    }\n}\nexports.stateIterator = stateIterator;\n/**\n * @public\n * CRDT protocol.\n * Stores the latest state, and decides whenever we have\n * to process and store the new data in case its an update, or\n * to discard and send our local value cause remote it's outdated.\n */\nfunction crdtProtocol() {\n    /**\n     * Local state where we store the latest lamport timestamp\n     * and the raw data value\n     * @internal\n     */\n    const state = new Map();\n    /**\n     * We should call this fn in order to update the state\n     * @internal\n     */\n    function updateState(key1, key2, data, remoteTimestamp) {\n        const key1Value = state.get(key1);\n        const timestamp = Math.max(remoteTimestamp, key1Value?.get(key2)?.timestamp || 0);\n        if (key1Value) {\n            key1Value.set(key2, { timestamp, data });\n        }\n        else {\n            const newKey1Value = new Map();\n            newKey1Value.set(key2, { timestamp, data });\n            state.set(key1, newKey1Value);\n        }\n        return { timestamp, data };\n    }\n    /**\n     * Create an event for the specified key and store the new data and\n     * lamport timestmap incremented by one in the state.\n     * @public\n     */\n    function createEvent(key1, key2, data) {\n        // Increment the timestamp\n        const timestamp = (state.get(key1)?.get(key2)?.timestamp || 0) + 1;\n        updateState(key1, key2, data, timestamp);\n        return { key1, key2, data, timestamp };\n    }\n    /**\n     * Process the received message only if the lamport number recieved is higher\n     * than the stored one. If its lower, we spread it to the network to correct the peer.\n     * If they are equal, the bigger raw data wins.\n  \n     * Returns the recieved data if the lamport number was bigger than ours.\n     * If it was an outdated message, then we return void\n     * @public\n     */\n    function processMessage(message) {\n        const { key1, key2, data, timestamp } = message;\n        const current = state.get(key1)?.get(key2);\n        // The received message is > than our current value, update our state.\n        if (!current || current.timestamp < timestamp) {\n            updateState(key1, key2, data, timestamp);\n            return message;\n        }\n        // Outdated Message. Resend our state message through the wire.\n        if (current.timestamp > timestamp) {\n            return {\n                key1,\n                key2,\n                data: current.data,\n                timestamp: current.timestamp\n            };\n        }\n        // Same data, same timestamp. Weirdo echo message.\n        if (sameData(current.data, data)) {\n            return message;\n        }\n        // Race condition, same timestamp diff data.\n        function compareData(current, data) {\n            return current > data;\n        }\n        if (compareData(current.data, data)) {\n            return {\n                key1,\n                key2,\n                data: current.data,\n                timestamp: current.timestamp\n            };\n        }\n        updateState(key1, key2, data, timestamp).data;\n        return message;\n    }\n    /**\n     * Returns the current state\n     * @public\n     */\n    function getState() {\n        return state;\n    }\n    return {\n        createEvent,\n        processMessage,\n        getState\n    };\n}\nexports.crdtProtocol = crdtProtocol;\n//# sourceMappingURL=data:application/json;base64,","/**\n * Take the max between currentSize and intendedSize and then plus 1024. Then,\n *  find the next nearer multiple of 1024.\n * @param currentSize - number\n * @param intendedSize - number\n * @returns the calculated number\n */\nfunction getNextSize(currentSize, intendedSize) {\n    const minNewSize = Math.max(currentSize, intendedSize) + 1024;\n    return Math.ceil(minNewSize / 1024) * 1024;\n}\nconst defaultInitialCapacity = 10240;\n/**\n * ByteBuffer is a wrapper of DataView which also adds a read and write offset.\n *  Also in a write operation it resizes the buffer is being used if it needs.\n *\n * - Use read and write function to generate or consume data.\n * - Use set and get only if you are sure that you're doing.\n */\nexport function createByteBuffer(options = {}) {\n    const initialROffset = options.reading?.currentOffset || 0;\n    let initialBuffer = null;\n    let initialWOffset = 0;\n    if (options.writing) {\n        initialBuffer = options.writing.buffer;\n        if (options.writing.currentOffset) {\n            initialWOffset = options.writing.currentOffset;\n        }\n    }\n    else if (options.reading) {\n        initialBuffer = options.reading.buffer;\n        initialWOffset = options.reading.length || options.reading.buffer.length;\n    }\n    else {\n        initialBuffer = new Uint8Array(options.initialCapacity || defaultInitialCapacity);\n    }\n    let buffer = initialBuffer;\n    let view = new DataView(buffer.buffer, buffer.byteOffset);\n    let woffset = initialWOffset;\n    let roffset = initialROffset;\n    /**\n     * Increement the write offset and resize the buffer if it needs.\n     */\n    const woAdd = (amount) => {\n        if (woffset + amount > buffer.byteLength) {\n            const newsize = getNextSize(buffer.byteLength, woffset + amount);\n            const newBuffer = new Uint8Array(newsize);\n            newBuffer.set(buffer);\n            buffer = newBuffer;\n            view = new DataView(buffer.buffer);\n        }\n        woffset += amount;\n        return woffset - amount;\n    };\n    /**\n     * Increment the read offset and throw an error if it's trying to read\n     *  outside the bounds.\n     */\n    const roAdd = (amount) => {\n        if (roffset + amount > woffset) {\n            throw new Error('Outside of the bounds of writen data.');\n        }\n        roffset += amount;\n        return roffset - amount;\n    };\n    return {\n        buffer() {\n            return buffer;\n        },\n        bufferLength() {\n            return buffer.length;\n        },\n        resetBuffer() {\n            roffset = 0;\n            woffset = 0;\n        },\n        currentReadOffset() {\n            return roffset;\n        },\n        currentWriteOffset() {\n            return woffset;\n        },\n        incrementReadOffset(amount) {\n            return roAdd(amount);\n        },\n        remainingBytes() {\n            return woffset - roffset;\n        },\n        readFloat32() {\n            return view.getFloat32(roAdd(4));\n        },\n        readFloat64() {\n            return view.getFloat64(roAdd(8));\n        },\n        readInt8() {\n            return view.getInt8(roAdd(1));\n        },\n        readInt16() {\n            return view.getInt16(roAdd(2));\n        },\n        readInt32() {\n            return view.getInt32(roAdd(4));\n        },\n        readInt64() {\n            return view.getBigInt64(roAdd(8));\n        },\n        readUint8() {\n            return view.getUint8(roAdd(1));\n        },\n        readUint16() {\n            return view.getUint16(roAdd(2));\n        },\n        readUint32() {\n            return view.getUint32(roAdd(4));\n        },\n        readUint64() {\n            return view.getBigUint64(roAdd(8));\n        },\n        readBuffer() {\n            const length = view.getUint32(roAdd(4));\n            return buffer.subarray(roAdd(length), roAdd(0));\n        },\n        incrementWriteOffset(amount) {\n            return woAdd(amount);\n        },\n        size() {\n            return woffset;\n        },\n        toBinary() {\n            return buffer.subarray(0, woffset);\n        },\n        toCopiedBinary() {\n            return new Uint8Array(this.toBinary());\n        },\n        writeBuffer(value, writeLength = true) {\n            if (writeLength) {\n                this.writeUint32(value.byteLength);\n            }\n            const o = woAdd(value.byteLength);\n            buffer.set(value, o);\n        },\n        writeFloat32(value) {\n            const o = woAdd(4);\n            view.setFloat32(o, value);\n        },\n        writeFloat64(value) {\n            const o = woAdd(8);\n            view.setFloat64(o, value);\n        },\n        writeInt8(value) {\n            const o = woAdd(1);\n            view.setInt8(o, value);\n        },\n        writeInt16(value) {\n            const o = woAdd(2);\n            view.setInt16(o, value);\n        },\n        writeInt32(value) {\n            const o = woAdd(4);\n            view.setInt32(o, value);\n        },\n        writeInt64(value) {\n            const o = woAdd(8);\n            view.setBigInt64(o, value);\n        },\n        writeUint8(value) {\n            const o = woAdd(1);\n            view.setUint8(o, value);\n        },\n        writeUint16(value) {\n            const o = woAdd(2);\n            view.setUint16(o, value);\n        },\n        writeUint32(value) {\n            const o = woAdd(4);\n            view.setUint32(o, value);\n        },\n        writeUint64(value) {\n            const o = woAdd(8);\n            view.setBigUint64(o, value);\n        },\n        // Dataview Proxy\n        getFloat32(offset) {\n            return view.getFloat32(offset);\n        },\n        getFloat64(offset) {\n            return view.getFloat64(offset);\n        },\n        getInt8(offset) {\n            return view.getInt8(offset);\n        },\n        getInt16(offset) {\n            return view.getInt16(offset);\n        },\n        getInt32(offset) {\n            return view.getInt32(offset);\n        },\n        getInt64(offset) {\n            return view.getBigInt64(offset);\n        },\n        getUint8(offset) {\n            return view.getUint8(offset);\n        },\n        getUint16(offset) {\n            return view.getUint16(offset);\n        },\n        getUint32(offset) {\n            return view.getUint32(offset);\n        },\n        getUint64(offset) {\n            return view.getBigUint64(offset);\n        },\n        setFloat32(offset, value) {\n            view.setFloat32(offset, value);\n        },\n        setFloat64(offset, value) {\n            view.setFloat64(offset, value);\n        },\n        setInt8(offset, value) {\n            view.setInt8(offset, value);\n        },\n        setInt16(offset, value) {\n            view.setInt16(offset, value);\n        },\n        setInt32(offset, value) {\n            view.setInt32(offset, value);\n        },\n        setInt64(offset, value) {\n            view.setBigInt64(offset, value);\n        },\n        setUint8(offset, value) {\n            view.setUint8(offset, value);\n        },\n        setUint16(offset, value) {\n            view.setUint16(offset, value);\n        },\n        setUint32(offset, value) {\n            view.setUint32(offset, value);\n        },\n        setUint64(offset, value) {\n            view.setBigUint64(offset, value);\n        }\n    };\n}\n","/**\n * The wire message is the top-level message that can be packed\n *  inside it can contain a data with another structure or protocol\n *\n * Each wire message has three primitive property that it'll never change\n *   ---> length        uint32 (message size up to 4,294,967,295)\n *   ---> version       uint32 (for now just a number which is zero)\n *   ---> message type  uint32\n * The length indicates how many bytes are above self, the version in\n * combination with message type defines the set of handlers that will be\n * available to process the message\n *\n */\nexport var WireMessage;\n(function (WireMessage) {\n    let Enum;\n    (function (Enum) {\n        Enum[Enum[\"RESERVED\"] = 0] = \"RESERVED\";\n        // Component Operation\n        Enum[Enum[\"PUT_COMPONENT\"] = 1] = \"PUT_COMPONENT\";\n        Enum[Enum[\"DELETE_COMPONENT\"] = 2] = \"DELETE_COMPONENT\";\n        Enum[Enum[\"MAX_MESSAGE_TYPE\"] = 3] = \"MAX_MESSAGE_TYPE\";\n    })(Enum = WireMessage.Enum || (WireMessage.Enum = {}));\n    WireMessage.HEADER_LENGTH = 8;\n    /**\n     * Validate if the message incoming is completed\n     * @param buf - ByteBuffer\n     */\n    function validate(buf) {\n        const rem = buf.remainingBytes();\n        if (rem < WireMessage.HEADER_LENGTH) {\n            return false;\n        }\n        const messageLength = buf.getUint32(buf.currentReadOffset());\n        if (rem < messageLength) {\n            return false;\n        }\n        return true;\n    }\n    WireMessage.validate = validate;\n    function readHeader(buf) {\n        if (!validate(buf)) {\n            return null;\n        }\n        return {\n            length: buf.readUint32(),\n            type: buf.readUint32()\n        };\n    }\n    WireMessage.readHeader = readHeader;\n})(WireMessage || (WireMessage = {}));\nexport default WireMessage;\n","import WireMessage from '../wireMessage';\nexport var ComponentOperation;\n(function (ComponentOperation) {\n    ComponentOperation.MESSAGE_HEADER_LENGTH = 20;\n    /**\n     * Call this function for an optimal writing data passing the ByteBuffer\n     *  already allocated\n     */\n    function write(type, entity, timestamp, componentDefinition, buf) {\n        // reserve the beginning\n        const startMessageOffset = buf.incrementWriteOffset(WireMessage.HEADER_LENGTH + ComponentOperation.MESSAGE_HEADER_LENGTH);\n        // write body\n        if (type === WireMessage.Enum.PUT_COMPONENT) {\n            componentDefinition.writeToByteBuffer(entity, buf);\n        }\n        const messageLength = buf.size() - startMessageOffset;\n        // Write WireMessage header\n        buf.setUint32(startMessageOffset, messageLength);\n        buf.setUint32(startMessageOffset + 4, type);\n        // Write ComponentOperation header\n        buf.setUint32(startMessageOffset + 8, entity);\n        buf.setUint32(startMessageOffset + 12, componentDefinition._id);\n        buf.setUint64(startMessageOffset + 16, BigInt(timestamp));\n        buf.setUint32(startMessageOffset + 24, messageLength - ComponentOperation.MESSAGE_HEADER_LENGTH - WireMessage.HEADER_LENGTH);\n    }\n    ComponentOperation.write = write;\n    function read(buf) {\n        const header = WireMessage.readHeader(buf);\n        if (!header) {\n            return null;\n        }\n        const common = {\n            ...header,\n            entity: buf.readUint32(),\n            componentId: buf.readInt32(),\n            timestamp: Number(buf.readUint64())\n        };\n        if (header.type === WireMessage.Enum.DELETE_COMPONENT) {\n            return common;\n        }\n        return {\n            ...common,\n            data: buf.readBuffer()\n        };\n    }\n    ComponentOperation.read = read;\n})(ComponentOperation || (ComponentOperation = {}));\n","export var EntityUtils;\n(function (EntityUtils) {\n    EntityUtils.MAX_ENTITIES = 0xffffffff;\n    EntityUtils.DYNAMIC_ENTITIES_START_AT = 100e3;\n    EntityUtils.RESERVED_STATIC_ENTITIES = 512;\n    EntityUtils.RESERVED_ENTITIES_RANGE = [\n        0,\n        EntityUtils.RESERVED_STATIC_ENTITIES - 1\n    ];\n    EntityUtils.STATIC_ENTITIES_RANGE = [\n        EntityUtils.RESERVED_STATIC_ENTITIES,\n        EntityUtils.DYNAMIC_ENTITIES_START_AT - 1\n    ];\n    EntityUtils.DYNAMIC_ENTITIES_RANGE = [\n        EntityUtils.DYNAMIC_ENTITIES_START_AT,\n        EntityUtils.MAX_ENTITIES\n    ];\n    function isInRange(entity, range) {\n        return entity >= range[0] && entity <= range[1];\n    }\n    function isDynamicEntity(entity) {\n        return isInRange(entity, EntityUtils.DYNAMIC_ENTITIES_RANGE);\n    }\n    EntityUtils.isDynamicEntity = isDynamicEntity;\n    function isStaticEntity(entity) {\n        return isInRange(entity, EntityUtils.STATIC_ENTITIES_RANGE);\n    }\n    EntityUtils.isStaticEntity = isStaticEntity;\n    function isReservedEntity(entity) {\n        return isInRange(entity, EntityUtils.RESERVED_ENTITIES_RANGE);\n    }\n    EntityUtils.isReservedEntity = isReservedEntity;\n})(EntityUtils || (EntityUtils = {}));\nexport default EntityUtils;\n","import { crdtProtocol } from '@dcl/crdt';\nimport { createByteBuffer } from '../../serialization/ByteBuffer';\nimport { ComponentOperation as Message } from '../../serialization/crdt/componentOperation';\nimport WireMessage from '../../serialization/wireMessage';\nexport function crdtSceneSystem(engine) {\n    const transports = [];\n    // CRDT Client\n    const crdtClient = crdtProtocol();\n    // Messages that we received at transport.onMessage waiting to be processed\n    const receivedMessages = [];\n    // Messages already processed by the engine but that we need to broadcast to other transports.\n    const transportMessages = [];\n    // Map of entities already processed at least once\n    /**\n     *\n     * @param transportType tranport id to identiy messages\n     * @returns a function to process received messages\n     */\n    function parseChunkMessage(transportType) {\n        /**\n         * Receives a chunk of binary messages and stores all the valid\n         * Component Operation Messages at messages queue\n         * @param chunkMessage A chunk of binary messages\n         */\n        return function parseChunkMessage(chunkMessage) {\n            const buffer = createByteBuffer({\n                reading: { buffer: chunkMessage, currentOffset: 0 }\n            });\n            while (WireMessage.validate(buffer)) {\n                const offset = buffer.currentReadOffset();\n                const message = Message.read(buffer);\n                const { type, entity, componentId, data, timestamp } = message;\n                receivedMessages.push({\n                    type,\n                    entity,\n                    componentId,\n                    data,\n                    timestamp,\n                    transportType,\n                    messageBuffer: buffer\n                        .buffer()\n                        .subarray(offset, buffer.currentReadOffset())\n                });\n            }\n        };\n    }\n    /**\n     * Return and clear the messaes queue\n     * @returns messages recieved by the transport to process on the next tick\n     */\n    function getMessages(value) {\n        const messagesToProcess = Array.from(value);\n        value.length = 0;\n        return messagesToProcess;\n    }\n    /**\n     * This fn will be called on every tick.\n     * Process all the messages queue received by the transport\n     */\n    function receiveMessages() {\n        const messagesToProcess = getMessages(receivedMessages);\n        for (const transport of transports) {\n            const buffer = createByteBuffer();\n            for (const message of messagesToProcess) {\n                const { data, timestamp, componentId, entity, type } = message;\n                const crdtMessage = {\n                    key1: entity,\n                    key2: componentId,\n                    data: data || null,\n                    timestamp: timestamp\n                };\n                const component = engine.getComponent(componentId);\n                const current = crdtClient.processMessage(crdtMessage);\n                // CRDT outdated message. Resend this message through the wire\n                if (crdtMessage !== current) {\n                    const type = component.has(entity)\n                        ? WireMessage.Enum.PUT_COMPONENT\n                        : WireMessage.Enum.DELETE_COMPONENT;\n                    Message.write(type, entity, current.timestamp, component, buffer);\n                }\n                else {\n                    // Process CRDT Message\n                    if (type === WireMessage.Enum.DELETE_COMPONENT) {\n                        component.deleteFrom(entity);\n                    }\n                    else {\n                        const opts = {\n                            reading: { buffer: message.data, currentOffset: 0 }\n                        };\n                        const bb = createByteBuffer(opts);\n                        // Update engine component\n                        component.upsertFromBinary(message.entity, bb);\n                        component.clearDirty();\n                    }\n                    // Add message to transport queue to be processed by others transports\n                    transportMessages.push(message);\n                }\n            }\n            if (buffer.size()) {\n                transport.send(buffer.toBinary());\n            }\n        }\n    }\n    /**\n     * Iterates the dirty map and generates crdt messages to be send\n     * @param dirtyMap a map of { entities: [componentId] }\n     */\n    function createMessages(dirtyMap) {\n        // CRDT Messages will be the merge between the recieved transport messages and the new crdt messages\n        const crdtMessages = getMessages(transportMessages);\n        const buffer = createByteBuffer();\n        for (const [entity, componentsId] of dirtyMap) {\n            for (const componentId of componentsId) {\n                const component = engine.getComponent(componentId);\n                const entityComponent = component.has(entity)\n                    ? component.toBinary(entity).toBinary()\n                    : null;\n                const event = crdtClient.createEvent(entity, componentId, entityComponent);\n                const offset = buffer.currentWriteOffset();\n                const type = component.has(entity)\n                    ? WireMessage.Enum.PUT_COMPONENT\n                    : WireMessage.Enum.DELETE_COMPONENT;\n                const transportMessage = {\n                    type,\n                    componentId,\n                    entity,\n                    timestamp: event.timestamp\n                };\n                if (transports.some((t) => t.filter(transportMessage))) {\n                    Message.write(type, entity, event.timestamp, component, buffer);\n                    crdtMessages.push({\n                        ...transportMessage,\n                        messageBuffer: buffer\n                            .buffer()\n                            .subarray(offset, buffer.currentWriteOffset())\n                    });\n                }\n            }\n        }\n        // Send messages to transports\n        const transportBuffer = createByteBuffer();\n        for (const transport of transports) {\n            transportBuffer.resetBuffer();\n            for (const message of crdtMessages) {\n                if (transport.filter(message)) {\n                    transportBuffer.writeBuffer(message.messageBuffer, false);\n                }\n            }\n            if (transportBuffer.size()) {\n                transport.send(transportBuffer.toBinary());\n            }\n            else {\n                transport.send(new Uint8Array([]));\n            }\n        }\n    }\n    function addTransport(transport) {\n        transports.push(transport);\n        transport.onmessage = parseChunkMessage(transport.type);\n    }\n    return {\n        createMessages,\n        receiveMessages,\n        addTransport\n    };\n}\n","/**\n * @internal\n */\nexport function deepReadonly(val) {\n    return Object.freeze({ ...val });\n}\n","import { createByteBuffer } from '../serialization/ByteBuffer';\nimport { deepReadonly } from './readonly';\nexport function defineComponent(componentId, spec, constructorDefault\n// meta: { syncFlags }\n) {\n    const data = new Map();\n    const dirtyIterator = new Set();\n    const defaultBuffer = createByteBuffer();\n    if (constructorDefault) {\n        spec.serialize(constructorDefault, defaultBuffer);\n    }\n    function getDefaultValue() {\n        if (constructorDefault) {\n            return spec.deserialize(createByteBuffer({\n                writing: {\n                    buffer: defaultBuffer.buffer(),\n                    currentOffset: defaultBuffer.currentWriteOffset()\n                }\n            }));\n        }\n        else {\n            return spec.create();\n        }\n    }\n    function prefillValue(value) {\n        return { ...getDefaultValue(), ...value };\n    }\n    return {\n        _id: componentId,\n        default: function () {\n            return getDefaultValue();\n        },\n        isDirty: function (entity) {\n            return dirtyIterator.has(entity);\n        },\n        has: function (entity) {\n            return data.has(entity);\n        },\n        deleteFrom: function (entity) {\n            const component = data.get(entity);\n            data.delete(entity);\n            dirtyIterator.add(entity);\n            return component || null;\n        },\n        getOrNull: function (entity) {\n            const component = data.get(entity);\n            return component ? deepReadonly(component) : null;\n        },\n        get: function (entity) {\n            const component = data.get(entity);\n            if (!component) {\n                throw new Error(`[getFrom] Component ${componentId} for ${entity} not found`);\n            }\n            return deepReadonly(component);\n        },\n        create: function (entity, value) {\n            const component = data.get(entity);\n            if (component) {\n                throw new Error(`[create] Component ${componentId} for ${entity} already exists`);\n            }\n            const usedValue = value === undefined ? getDefaultValue() : prefillValue(value);\n            data.set(entity, usedValue);\n            dirtyIterator.add(entity);\n            return usedValue;\n        },\n        createOrReplace: function (entity, value) {\n            const usedValue = value === undefined ? getDefaultValue() : prefillValue(value);\n            data.set(entity, usedValue);\n            dirtyIterator.add(entity);\n            return usedValue;\n        },\n        getMutableOrNull: function (entity) {\n            const component = data.get(entity);\n            if (!component) {\n                return null;\n            }\n            dirtyIterator.add(entity);\n            return component;\n        },\n        getMutable: function (entity) {\n            const component = this.getMutableOrNull(entity);\n            if (component === null) {\n                throw new Error(`[mutable] Component ${componentId} for ${entity} not found`);\n            }\n            return component;\n        },\n        iterator: function* () {\n            for (const [entity, component] of data) {\n                yield [entity, component];\n            }\n        },\n        dirtyIterator: function* () {\n            for (const entity of dirtyIterator) {\n                yield entity;\n            }\n        },\n        toBinary(entity) {\n            const component = data.get(entity);\n            if (!component) {\n                throw new Error(`[toBinary] Component ${componentId} for ${entity} not found`);\n            }\n            const writeBuffer = createByteBuffer();\n            spec.serialize(component, writeBuffer);\n            return writeBuffer;\n        },\n        writeToByteBuffer(entity, buffer) {\n            const component = data.get(entity);\n            if (!component) {\n                throw new Error(`[writeToByteBuffer] Component ${componentId} for ${entity} not found`);\n            }\n            spec.serialize(component, buffer);\n        },\n        updateFromBinary(entity, buffer) {\n            const component = data.get(entity);\n            if (!component) {\n                throw new Error(`[updateFromBinary] Component ${componentId} for ${entity} not found`);\n            }\n            return this.upsertFromBinary(entity, buffer);\n        },\n        upsertFromBinary(entity, buffer) {\n            const newValue = spec.deserialize(buffer);\n            data.set(entity, newValue);\n            dirtyIterator.add(entity);\n            return newValue;\n        },\n        clearDirty: function () {\n            dirtyIterator.clear();\n        }\n    };\n}\n","import { EntityUtils } from './entity-utils';\nexport function EntityContainer() {\n    const staticEntity = Entity(EntityUtils.STATIC_ENTITIES_RANGE);\n    const dynamicEntity = Entity(EntityUtils.DYNAMIC_ENTITIES_RANGE);\n    return {\n        generateEntity(dynamic = false) {\n            if (dynamic) {\n                return dynamicEntity.generateEntity();\n            }\n            else {\n                return staticEntity.generateEntity();\n            }\n        },\n        removeEntity(entity) {\n            return (staticEntity.removeEntity(entity) || dynamicEntity.removeEntity(entity));\n        },\n        entityExists(entity) {\n            return (EntityUtils.isReservedEntity(entity) ||\n                staticEntity.getExistingEntities().has(entity) ||\n                dynamicEntity.getExistingEntities().has(entity));\n        },\n        getExistingEntities() {\n            return new Set([\n                ...staticEntity.getExistingEntities(),\n                ...dynamicEntity.getExistingEntities()\n            ]);\n        }\n    };\n}\nfunction Entity(range) {\n    function createEntity(entity) {\n        return entity;\n    }\n    let entityCounter = range[0];\n    const usedEntities = new Set();\n    function generateEntity() {\n        if (entityCounter >= range[1]) {\n            throw new Error(`It fails trying to generate an entity out of range [${range[0]}, ${range[1]}].`);\n        }\n        const entity = createEntity(entityCounter);\n        entityCounter++;\n        usedEntities.add(entity);\n        return entity;\n    }\n    function removeEntity(entity) {\n        return usedEntities.delete(entity);\n    }\n    return {\n        getExistingEntities() {\n            return new Set(usedEntities);\n        },\n        generateEntity,\n        removeEntity\n    };\n}\n","export const SYSTEMS_REGULAR_PRIORITY = 100e3;\nexport function SystemContainer() {\n    const systems = [];\n    function sort() {\n        systems.sort((a, b) => b.priority - a.priority);\n    }\n    function add(fn, priority, name) {\n        if (systems.find((item) => item.fn === fn)) {\n            throw new Error('System already added');\n        }\n        else if (name && systems.find((item) => item.name === name)) {\n            throw new Error('System name already used');\n        }\n        systems.push({\n            fn,\n            priority,\n            name\n        });\n        sort();\n    }\n    function remove(selector) {\n        let index = -1;\n        if (typeof selector === 'string') {\n            index = systems.findIndex((item) => item.name === selector);\n        }\n        else {\n            index = systems.findIndex((item) => item.fn === selector);\n        }\n        if (index === -1) {\n            return false;\n        }\n        systems.splice(index, 1);\n        sort();\n        return true;\n    }\n    return {\n        add,\n        remove,\n        getSystems() {\n            return systems;\n        }\n    };\n}\n","import { defineSdkComponents } from '../components';\nimport { Schemas } from '../schemas';\nimport { crdtSceneSystem } from '../systems/crdt';\nimport { defineComponent as defComponent } from './component';\nimport { EntityContainer } from './entity';\nimport { SystemContainer, SYSTEMS_REGULAR_PRIORITY } from './systems';\nexport * from './readonly';\nexport * from './types';\nfunction preEngine() {\n    const entityContainer = EntityContainer();\n    const componentsDefinition = new Map();\n    const systems = SystemContainer();\n    function addSystem(fn, priority = SYSTEMS_REGULAR_PRIORITY, name) {\n        systems.add(fn, priority, name);\n    }\n    function removeSystem(selector) {\n        return systems.remove(selector);\n    }\n    function addEntity(dynamic = false) {\n        // entitiesCompnonent.set(entity, new Set())\n        const entity = entityContainer.generateEntity(dynamic);\n        return entity;\n    }\n    function entityExists(entity) {\n        return entityContainer.entityExists(entity);\n    }\n    function addDynamicEntity() {\n        return addEntity(true);\n    }\n    function removeEntity(entity) {\n        for (const [, component] of componentsDefinition) {\n            if (component.has(entity)) {\n                component.deleteFrom(entity);\n            }\n        }\n        return entityContainer.removeEntity(entity);\n    }\n    function defineComponentFromSchema(spec, componentId, constructorDefault) {\n        if (componentsDefinition.get(componentId)) {\n            throw new Error(`Component ${componentId} already declared`);\n        }\n        const newComponent = defComponent(componentId, spec, constructorDefault);\n        componentsDefinition.set(componentId, newComponent);\n        return newComponent;\n    }\n    function defineComponent(spec, componentId, constructorDefault) {\n        return defineComponentFromSchema(Schemas.Map(spec), componentId, constructorDefault);\n    }\n    function getComponent(componentId) {\n        const component = componentsDefinition.get(componentId);\n        if (!component) {\n            throw new Error(`Component ${componentId} not found. You need to declare the components at the beginnig of the engine declaration`);\n        }\n        return component;\n    }\n    function* getEntitiesWith(...components) {\n        for (const [entity, ...groupComp] of getComponentDefGroup(...components)) {\n            yield [entity, ...groupComp.map((c) => c.get(entity))];\n        }\n    }\n    function* getComponentDefGroup(...args) {\n        const [firstComponentDef, ...componentDefinitions] = args;\n        for (const [entity] of firstComponentDef.iterator()) {\n            let matches = true;\n            for (const componentDef of componentDefinitions) {\n                if (!componentDef.has(entity)) {\n                    matches = false;\n                    break;\n                }\n            }\n            if (matches) {\n                yield [entity, ...args];\n            }\n        }\n    }\n    function getSystems() {\n        return systems.getSystems();\n    }\n    function removeComponentDefinition(componentId) {\n        componentsDefinition.delete(componentId);\n    }\n    return {\n        entityExists,\n        componentsDefinition,\n        addEntity,\n        addDynamicEntity,\n        removeEntity,\n        addSystem,\n        getSystems,\n        removeSystem,\n        defineComponent,\n        defineComponentFromSchema,\n        getEntitiesWith,\n        getComponent,\n        removeComponentDefinition\n    };\n}\n/**\n * @public\n */\nexport function Engine({ transports } = {}) {\n    const engine = preEngine();\n    const crdtSystem = crdtSceneSystem(engine);\n    const baseComponents = defineSdkComponents(engine);\n    if (transports) {\n        for (const tranport of transports) {\n            crdtSystem.addTransport(tranport);\n        }\n    }\n    function update(dt) {\n        crdtSystem.receiveMessages();\n        for (const system of engine.getSystems()) {\n            system.fn(dt);\n        }\n        // TODO: Perf tip\n        // Should we add some dirtyIteratorSet at engine level so we dont have\n        // to iterate all the component definitions to get the dirty ones ?\n        const dirtySet = new Map();\n        for (const [componentId, definition] of engine.componentsDefinition) {\n            for (const entity of definition.dirtyIterator()) {\n                if (!dirtySet.has(entity)) {\n                    dirtySet.set(entity, new Set());\n                }\n                dirtySet.get(entity).add(componentId);\n            }\n        }\n        crdtSystem.createMessages(dirtySet);\n        for (const [_componentId, definition] of engine.componentsDefinition) {\n            definition.clearDirty();\n        }\n    }\n    function* getTreeEntityArray(firstEntity, proccesedEntities) {\n        // This avoid infinite loop when there is a cyclic parenting\n        if (proccesedEntities.find((value) => firstEntity === value))\n            return;\n        proccesedEntities.push(firstEntity);\n        for (const [entity, value] of engine.getEntitiesWith(baseComponents.Transform)) {\n            if (value.parent === firstEntity) {\n                yield* getTreeEntityArray(entity, proccesedEntities);\n            }\n        }\n        yield firstEntity;\n    }\n    function removeEntityWithChildren(firstEntity) {\n        for (const entity of getTreeEntityArray(firstEntity, [])) {\n            engine.removeEntity(entity);\n        }\n    }\n    return {\n        addEntity: engine.addEntity,\n        addDynamicEntity: engine.addDynamicEntity,\n        removeEntity: engine.removeEntity,\n        removeEntityWithChildren,\n        addSystem: engine.addSystem,\n        removeSystem: engine.removeSystem,\n        // TODO: fix this type\n        defineComponent: engine.defineComponent,\n        defineComponentFromSchema: engine.defineComponentFromSchema,\n        getEntitiesWith: engine.getEntitiesWith,\n        getComponent: engine.getComponent,\n        removeComponentDefinition: engine.removeComponentDefinition,\n        update,\n        RootEntity: 0,\n        PlayerEntity: 1,\n        CameraEntity: 2,\n        baseComponents,\n        entityExists: engine.entityExists,\n        addTransport: crdtSystem.addTransport\n    };\n}\n","function getAndClean(value) {\n    const messagesToProcess = Array.from(value);\n    value.length = 0;\n    return messagesToProcess;\n}\nexport function taskSystem(engine) {\n    const tasks = [];\n    async function runTask(task) {\n        try {\n            const resp = await task();\n            return resp;\n        }\n        catch (e) {\n            throw e;\n            // TODO: dcl.error(`executeTask: FAILED. ${e.toString()}`, e)\n        }\n    }\n    function executeTasks() {\n        for (const task of getAndClean(tasks)) {\n            runTask(task).catch(() => { });\n        }\n    }\n    engine.addSystem(executeTasks);\n    return {\n        executeTask(task) {\n            tasks.push(task);\n        }\n    };\n}\n","/** @public */\nexport var ECSComponentIDs;\n(function (ECSComponentIDs) {\n    ECSComponentIDs[ECSComponentIDs[\"Transform\"] = 1] = \"Transform\";\n    ECSComponentIDs[ECSComponentIDs[\"Animator\"] = 1042] = \"Animator\";\n    ECSComponentIDs[ECSComponentIDs[\"AudioSource\"] = 1020] = \"AudioSource\";\n    ECSComponentIDs[ECSComponentIDs[\"AudioStream\"] = 1021] = \"AudioStream\";\n    ECSComponentIDs[ECSComponentIDs[\"AvatarAttach\"] = 1073] = \"AvatarAttach\";\n    ECSComponentIDs[ECSComponentIDs[\"AvatarModifierArea\"] = 1070] = \"AvatarModifierArea\";\n    ECSComponentIDs[ECSComponentIDs[\"AvatarShape\"] = 1080] = \"AvatarShape\";\n    ECSComponentIDs[ECSComponentIDs[\"Billboard\"] = 1090] = \"Billboard\";\n    ECSComponentIDs[ECSComponentIDs[\"CameraMode\"] = 1072] = \"CameraMode\";\n    ECSComponentIDs[ECSComponentIDs[\"CameraModeArea\"] = 1071] = \"CameraModeArea\";\n    ECSComponentIDs[ECSComponentIDs[\"GltfContainer\"] = 1041] = \"GltfContainer\";\n    ECSComponentIDs[ECSComponentIDs[\"Material\"] = 1017] = \"Material\";\n    ECSComponentIDs[ECSComponentIDs[\"MeshCollider\"] = 1019] = \"MeshCollider\";\n    ECSComponentIDs[ECSComponentIDs[\"MeshRenderer\"] = 1018] = \"MeshRenderer\";\n    ECSComponentIDs[ECSComponentIDs[\"NftShape\"] = 1040] = \"NftShape\";\n    ECSComponentIDs[ECSComponentIDs[\"PointerEventsResult\"] = 1063] = \"PointerEventsResult\";\n    ECSComponentIDs[ECSComponentIDs[\"PointerHoverFeedback\"] = 1062] = \"PointerHoverFeedback\";\n    ECSComponentIDs[ECSComponentIDs[\"PointerLock\"] = 1074] = \"PointerLock\";\n    ECSComponentIDs[ECSComponentIDs[\"Raycast\"] = 1067] = \"Raycast\";\n    ECSComponentIDs[ECSComponentIDs[\"RaycastResult\"] = 1068] = \"RaycastResult\";\n    ECSComponentIDs[ECSComponentIDs[\"TextShape\"] = 1030] = \"TextShape\";\n    ECSComponentIDs[ECSComponentIDs[\"UiBackground\"] = 1053] = \"UiBackground\";\n    ECSComponentIDs[ECSComponentIDs[\"UiText\"] = 1052] = \"UiText\";\n    ECSComponentIDs[ECSComponentIDs[\"UiTransform\"] = 1050] = \"UiTransform\";\n    ECSComponentIDs[ECSComponentIDs[\"VisibilityComponent\"] = 1081] = \"VisibilityComponent\";\n})(ECSComponentIDs || (ECSComponentIDs = {}));\n","import { ECSComponentIDs } from '../../../components/generated/ids.gen';\nconst componentIds = Object.values(ECSComponentIDs)\n    .filter((a) => typeof a === 'number')\n    .map(Number);\nexport function createRendererTransport() {\n    if (typeof require === 'undefined') {\n        // TODO: replace with new rpc\n        throw new Error('Cannot create createRendererTransport without global dcl object');\n    }\n    const engineApi = require('~system/EngineApi');\n    async function sendToRenderer(message) {\n        const response = await engineApi.crdtSendToRenderer({ data: new Uint8Array(message) });\n        if (response && response.data && response.data.length) {\n            if (rendererTransport.onmessage) {\n                for (const byteArray of response.data) {\n                    rendererTransport.onmessage(byteArray);\n                }\n            }\n        }\n    }\n    const type = 'renderer';\n    const rendererTransport = {\n        type,\n        send(message) {\n            sendToRenderer(message).catch(() => { debugger; });\n        },\n        filter(message) {\n            // Echo message, ignore them\n            if (message.transportType === type) {\n                return false;\n            }\n            // Only send renderer components (Proto Generated)\n            if (!componentIds.includes(message.componentId)) {\n                return false;\n            }\n            return !!message;\n        }\n    };\n    return rendererTransport;\n}\n","import { engine } from '../runtime/initialization';\nexport var EventsSystem;\n(function (EventsSystem) {\n    let EventType;\n    (function (EventType) {\n        EventType[EventType[\"Click\"] = 0] = \"Click\";\n        EventType[EventType[\"Down\"] = 1] = \"Down\";\n        EventType[EventType[\"Up\"] = 2] = \"Up\";\n    })(EventType || (EventType = {}));\n    const getDefaultOpts = (opts = {}) => ({\n        button: 3 /* InputAction.IA_ANY */,\n        hoverText: 'Interact',\n        maxDistance: 100,\n        ...opts\n    });\n    const eventsMap = new Map();\n    function getEvent(entity) {\n        return (eventsMap.get(entity) || eventsMap.set(entity, new Map()).get(entity));\n    }\n    function setHoverFeedback(entity, type, opts) {\n        const { PointerHoverFeedback } = engine.baseComponents;\n        if (opts.hoverText) {\n            const pointerEvent = PointerHoverFeedback.getMutableOrNull(entity) ||\n                PointerHoverFeedback.create(entity);\n            pointerEvent.pointerEvents.push({\n                eventType: type,\n                eventInfo: {\n                    button: opts.button,\n                    showFeedback: true,\n                    hoverText: opts.hoverText,\n                    maxDistance: opts.maxDistance\n                }\n            });\n        }\n    }\n    function removeHoverFeedback(entity, type, button) {\n        const { PointerHoverFeedback } = engine.baseComponents;\n        const pointerEvent = PointerHoverFeedback.getMutableOrNull(entity);\n        if (!pointerEvent)\n            return;\n        pointerEvent.pointerEvents = pointerEvent.pointerEvents.filter((pointer) => !(pointer.eventInfo?.button === button && pointer.eventType === type));\n    }\n    function getPointerEvent(eventType) {\n        if (eventType === EventType.Up) {\n            return 0 /* PointerEventType.PET_UP */;\n        }\n        return 1 /* PointerEventType.PET_DOWN */;\n    }\n    function removeEvent(entity, type) {\n        const event = getEvent(entity);\n        const pointerEvent = event.get(type);\n        if (pointerEvent?.opts.hoverText) {\n            removeHoverFeedback(entity, getPointerEvent(type), pointerEvent.opts.button);\n        }\n        event.delete(type);\n    }\n    /**\n     * @internal\n     * Remove the callback for onClick event\n     * @param entity Entity where the callback was attached\n     */\n    function removeOnClick(entity) {\n        removeEvent(entity, EventType.Click);\n    }\n    EventsSystem.removeOnClick = removeOnClick;\n    /**\n     * @public\n     * Remove the callback for onPointerDown event\n     * @param entity Entity where the callback was attached\n     */\n    function removeOnPointerDown(entity) {\n        removeEvent(entity, EventType.Down);\n    }\n    EventsSystem.removeOnPointerDown = removeOnPointerDown;\n    /**\n     * @public\n     * Remove the callback for onPointerUp event\n     * @param entity Entity where the callback was attached\n     */\n    function removeOnPointerUp(entity) {\n        removeEvent(entity, EventType.Up);\n    }\n    EventsSystem.removeOnPointerUp = removeOnPointerUp;\n    /**\n     * @internal\n     * Execute callback when the user clicks the entity.\n     * @param entity Entity to attach the callback\n     * @param cb Function to execute when onPointerDown fires\n     * @param opts Opts to trigger Feedback and Button\n     */\n    function onClick(entity, cb, opts) {\n        const options = getDefaultOpts(opts);\n        // Clear previous event with over feedback included\n        removeEvent(entity, EventType.Click);\n        // Set new event\n        getEvent(entity).set(EventType.Click, { cb, opts: options });\n        setHoverFeedback(entity, 1 /* PointerEventType.PET_DOWN */, options);\n    }\n    EventsSystem.onClick = onClick;\n    /**\n     * @public\n     * Execute callback when the user press the InputButton pointing at the entity\n     * @param entity Entity to attach the callback\n     * @param cb Function to execute when click fires\n     * @param opts Opts to trigger Feedback and Button\n     */\n    function onPointerDown(entity, cb, opts) {\n        const options = getDefaultOpts(opts);\n        removeEvent(entity, EventType.Down);\n        getEvent(entity).set(EventType.Down, { cb, opts: options });\n        setHoverFeedback(entity, 1 /* PointerEventType.PET_DOWN */, options);\n    }\n    EventsSystem.onPointerDown = onPointerDown;\n    /**\n     * @public\n     * Execute callback when the user releases the InputButton pointing at the entity\n     * @param entity Entity to attach the callback\n     * @param cb Function to execute when click fires\n     * @param opts Opts to trigger Feedback and Button\n     */\n    function onPointerUp(entity, cb, opts) {\n        const options = getDefaultOpts(opts);\n        removeEvent(entity, EventType.Up);\n        getEvent(entity).set(EventType.Up, { cb, opts: options });\n        setHoverFeedback(entity, 0 /* PointerEventType.PET_UP */, options);\n    }\n    EventsSystem.onPointerUp = onPointerUp;\n    // @internal\n    function update(Input) {\n        return function () {\n            for (const [entity, event] of eventsMap) {\n                if (!engine.entityExists(entity)) {\n                    eventsMap.delete(entity);\n                    continue;\n                }\n                for (const [eventType, { cb, opts }] of event) {\n                    if (eventType === EventType.Click) {\n                        const command = Input.getClick(opts.button, entity);\n                        if (command)\n                            void cb(command.up);\n                    }\n                    if (eventType === EventType.Down || eventType === EventType.Up) {\n                        const command = Input.getInputCommand(opts.button, getPointerEvent(eventType), entity);\n                        if (command) {\n                            void cb(command);\n                        }\n                    }\n                }\n            }\n        };\n    }\n    EventsSystem.update = update;\n})(EventsSystem || (EventsSystem = {}));\n","import { Schemas } from '../schemas';\nconst InputCommands = [\n    0 /* InputAction.IA_POINTER */,\n    1 /* InputAction.IA_PRIMARY */,\n    2 /* InputAction.IA_SECONDARY */,\n    4 /* InputAction.IA_FORWARD */,\n    5 /* InputAction.IA_BACKWARD */,\n    6 /* InputAction.IA_RIGHT */,\n    7 /* InputAction.IA_LEFT */,\n    8 /* InputAction.IA_JUMP */,\n    9 /* InputAction.IA_WALK */,\n    10 /* InputAction.IA_ACTION_3 */,\n    11 /* InputAction.IA_ACTION_4 */,\n    12 /* InputAction.IA_ACTION_5 */,\n    13 /* InputAction.IA_ACTION_6 */\n];\nconst InternalInputStateSchema = {\n    timestampLastUpdate: Schemas.Number,\n    currentTimestamp: Schemas.Number,\n    buttonState: Schemas.Array(Schemas.Map({\n        value: Schemas.Boolean,\n        ts: Schemas.Number\n    }))\n};\nconst InternalInputStateComponentId = 1500;\nconst TimestampUpdateSystemPriority = 1 << 20;\nconst ButtonStateUpdateSystemPriority = 0;\nexport function createInput(engine) {\n    const InternalInputStateComponent = engine.defineComponent(InternalInputStateSchema, InternalInputStateComponentId);\n    InternalInputStateComponent.create(engine.RootEntity, {\n        buttonState: Array.from({ length: InputCommands.length }, () => ({\n            ts: 0,\n            value: false\n        }))\n    });\n    function timestampUpdateSystem() {\n        const state = InternalInputStateComponent.get(engine.RootEntity);\n        if (state.currentTimestamp > state.timestampLastUpdate) {\n            InternalInputStateComponent.getMutable(engine.RootEntity).timestampLastUpdate = state.currentTimestamp;\n        }\n    }\n    function buttonStateUpdateSystem() {\n        const component = engine.baseComponents.PointerEventsResult.getOrNull(engine.RootEntity);\n        if (!component)\n            return;\n        const state = InternalInputStateComponent.getMutable(engine.RootEntity);\n        for (const command of component.commands) {\n            if (command.timestamp > state.buttonState[command.button].ts) {\n                if (command.state === 1 /* PointerEventType.PET_DOWN */) {\n                    state.buttonState[command.button].value = true;\n                }\n                else if (command.state === 0 /* PointerEventType.PET_UP */) {\n                    state.buttonState[command.button].value = false;\n                }\n            }\n        }\n    }\n    engine.addSystem(buttonStateUpdateSystem, ButtonStateUpdateSystemPriority);\n    engine.addSystem(timestampUpdateSystem, TimestampUpdateSystemPriority);\n    function getClick(inputAction, entity) {\n        if (inputAction !== 3 /* InputAction.IA_ANY */) {\n            return findClick(inputAction, entity);\n        }\n        for (const input of InputCommands) {\n            const cmd = findClick(input, entity);\n            if (cmd)\n                return cmd;\n        }\n        return null;\n    }\n    function findClick(inputAction, entity) {\n        const component = engine.baseComponents.PointerEventsResult.getOrNull(engine.RootEntity);\n        if (!component)\n            return null;\n        const commands = component.commands;\n        // We search the last DOWN command sorted by timestamp\n        const down = findLastAction(commands, 1 /* PointerEventType.PET_DOWN */, inputAction, entity);\n        // We search the last UP command sorted by timestamp\n        if (!down)\n            return null;\n        const up = findLastAction(commands, 0 /* PointerEventType.PET_UP */, inputAction, entity);\n        if (!up)\n            return null;\n        const state = InternalInputStateComponent.get(engine.RootEntity);\n        // If the DOWN command has happen before the UP commands, it means that that a clicked has happen\n        if (down.timestamp < up.timestamp &&\n            up.timestamp > state.timestampLastUpdate) {\n            InternalInputStateComponent.getMutable(engine.RootEntity).currentTimestamp = Math.max(up.timestamp, state.currentTimestamp);\n            return { up, down };\n        }\n        return null;\n    }\n    function getInputCommand(inputAction, pointerEventType, entity) {\n        if (inputAction !== 3 /* InputAction.IA_ANY */) {\n            return findInputCommand(inputAction, pointerEventType, entity);\n        }\n        for (const input of InputCommands) {\n            const cmd = findInputCommand(input, pointerEventType, entity);\n            if (cmd)\n                return cmd;\n        }\n        return null;\n    }\n    function findInputCommand(inputAction, pointerEventType, entity) {\n        const component = engine.baseComponents.PointerEventsResult.getOrNull(engine.RootEntity);\n        if (!component)\n            return null;\n        // We search the last pointer Event command sorted by timestamp\n        const command = findLastAction(component.commands, pointerEventType, inputAction, entity);\n        if (!command)\n            return null;\n        const state = InternalInputStateComponent.get(engine.RootEntity);\n        if (command.timestamp > state.timestampLastUpdate) {\n            InternalInputStateComponent.getMutable(engine.RootEntity).currentTimestamp = Math.max(command.timestamp, state.currentTimestamp);\n            return command;\n        }\n        else {\n            return null;\n        }\n    }\n    function isClicked(inputAction, entity) {\n        return getClick(inputAction, entity) !== null;\n    }\n    function isTriggered(inputAction, pointerEventType, entity) {\n        return getInputCommand(inputAction, pointerEventType, entity) !== null;\n    }\n    function isPressed(inputAction) {\n        return InternalInputStateComponent.get(engine.RootEntity).buttonState[inputAction].value;\n    }\n    return {\n        // @public\n        isPressed,\n        // @internal\n        getClick,\n        // @public\n        getInputCommand,\n        // @internal\n        isClicked,\n        // @public\n        isTriggered\n    };\n}\nfunction findLastAction(commands, pointerEventType, inputAction, entity) {\n    let commandToReturn = undefined;\n    for (const command of commands) {\n        if (command.button === inputAction &&\n            command.state === pointerEventType &&\n            (!entity || (command.hit && entity === command.hit.entityId))) {\n            if (!commandToReturn || command.timestamp >= commandToReturn.timestamp)\n                commandToReturn = command;\n        }\n    }\n    return commandToReturn;\n}\n","/**\n * @alpha * This file initialization is an alpha one. This is based on the old-ecs\n * init and it'll be changing.\n */\nimport { Engine } from '../../engine';\nimport { taskSystem } from '../../systems/async-task';\nimport { createRendererTransport } from '../../systems/crdt/transports/rendererTransport';\nimport { EventsSystem } from '../../systems/events';\nimport { createInput } from './../../engine/input';\nconst rendererTransport = createRendererTransport();\nexport const engine = Engine({\n    transports: [rendererTransport]\n});\n// INPUT Manager\n/**\n * @public\n */\nexport const Input = createInput(engine);\n/**\n * @public\n * Execute async task\n */\nexport const executeTask = taskSystem(engine).executeTask;\nexport { EventsSystem };\nengine.addSystem(EventsSystem.update(Input));\n","import { engine } from '../../runtime/initialization';\n/** @public */\nexport var Components;\n(function (Components) {\n    /** @public */\n    Components.Transform = engine.baseComponents.Transform;\n    /** @public */\n    Components.Animator = engine.baseComponents.Animator;\n    /** @public */\n    Components.AudioSource = engine.baseComponents.AudioSource;\n    /** @public */\n    Components.AudioStream = engine.baseComponents.AudioStream;\n    /** @public */\n    Components.AvatarAttach = engine.baseComponents.AvatarAttach;\n    /** @public */\n    Components.AvatarModifierArea = engine.baseComponents.AvatarModifierArea;\n    /** @public */\n    Components.AvatarShape = engine.baseComponents.AvatarShape;\n    /** @public */\n    Components.Billboard = engine.baseComponents.Billboard;\n    /** @public */\n    Components.CameraMode = engine.baseComponents.CameraMode;\n    /** @public */\n    Components.CameraModeArea = engine.baseComponents.CameraModeArea;\n    /** @public */\n    Components.GltfContainer = engine.baseComponents.GltfContainer;\n    /** @public */\n    Components.Material = engine.baseComponents.Material;\n    /** @public */\n    Components.MeshCollider = engine.baseComponents.MeshCollider;\n    /** @public */\n    Components.MeshRenderer = engine.baseComponents.MeshRenderer;\n    /** @public */\n    Components.NftShape = engine.baseComponents.NftShape;\n    /** @public */\n    Components.PointerEventsResult = engine.baseComponents.PointerEventsResult;\n    /** @public */\n    Components.PointerHoverFeedback = engine.baseComponents.PointerHoverFeedback;\n    /** @public */\n    Components.PointerLock = engine.baseComponents.PointerLock;\n    /** @public */\n    Components.Raycast = engine.baseComponents.Raycast;\n    /** @public */\n    Components.RaycastResult = engine.baseComponents.RaycastResult;\n    /** @public */\n    Components.TextShape = engine.baseComponents.TextShape;\n    /** @public */\n    Components.UiBackground = engine.baseComponents.UiBackground;\n    /** @public */\n    Components.UiText = engine.baseComponents.UiText;\n    /** @public */\n    Components.UiTransform = engine.baseComponents.UiTransform;\n    /** @public */\n    Components.VisibilityComponent = engine.baseComponents.VisibilityComponent;\n})(Components || (Components = {}));\n","/* eslint-disable */\nconst protobufPackage = 'decentraland.sdk.components.common';\nexport var CameraType;\n(function (CameraType) {\n    CameraType[CameraType[\"CT_FIRST_PERSON\"] = 0] = \"CT_FIRST_PERSON\";\n    CameraType[CameraType[\"CT_THIRD_PERSON\"] = 1] = \"CT_THIRD_PERSON\";\n})(CameraType || (CameraType = {}));\n","/* eslint-disable */\nconst protobufPackage = 'decentraland.sdk.components.common';\nexport var InputAction;\n(function (InputAction) {\n    InputAction[InputAction[\"IA_POINTER\"] = 0] = \"IA_POINTER\";\n    InputAction[InputAction[\"IA_PRIMARY\"] = 1] = \"IA_PRIMARY\";\n    InputAction[InputAction[\"IA_SECONDARY\"] = 2] = \"IA_SECONDARY\";\n    InputAction[InputAction[\"IA_ANY\"] = 3] = \"IA_ANY\";\n    InputAction[InputAction[\"IA_FORWARD\"] = 4] = \"IA_FORWARD\";\n    InputAction[InputAction[\"IA_BACKWARD\"] = 5] = \"IA_BACKWARD\";\n    InputAction[InputAction[\"IA_RIGHT\"] = 6] = \"IA_RIGHT\";\n    InputAction[InputAction[\"IA_LEFT\"] = 7] = \"IA_LEFT\";\n    InputAction[InputAction[\"IA_JUMP\"] = 8] = \"IA_JUMP\";\n    InputAction[InputAction[\"IA_WALK\"] = 9] = \"IA_WALK\";\n    InputAction[InputAction[\"IA_ACTION_3\"] = 10] = \"IA_ACTION_3\";\n    InputAction[InputAction[\"IA_ACTION_4\"] = 11] = \"IA_ACTION_4\";\n    InputAction[InputAction[\"IA_ACTION_5\"] = 12] = \"IA_ACTION_5\";\n    InputAction[InputAction[\"IA_ACTION_6\"] = 13] = \"IA_ACTION_6\";\n})(InputAction || (InputAction = {}));\n","/* eslint-disable */\nconst protobufPackage = 'decentraland.sdk.components.common';\nexport var TextAlignMode;\n(function (TextAlignMode) {\n    TextAlignMode[TextAlignMode[\"TAM_TOP_LEFT\"] = 0] = \"TAM_TOP_LEFT\";\n    TextAlignMode[TextAlignMode[\"TAM_TOP_CENTER\"] = 1] = \"TAM_TOP_CENTER\";\n    TextAlignMode[TextAlignMode[\"TAM_TOP_RIGHT\"] = 2] = \"TAM_TOP_RIGHT\";\n    TextAlignMode[TextAlignMode[\"TAM_MIDDLE_LEFT\"] = 3] = \"TAM_MIDDLE_LEFT\";\n    TextAlignMode[TextAlignMode[\"TAM_MIDDLE_CENTER\"] = 4] = \"TAM_MIDDLE_CENTER\";\n    TextAlignMode[TextAlignMode[\"TAM_MIDDLE_RIGHT\"] = 5] = \"TAM_MIDDLE_RIGHT\";\n    TextAlignMode[TextAlignMode[\"TAM_BOTTOM_LEFT\"] = 6] = \"TAM_BOTTOM_LEFT\";\n    TextAlignMode[TextAlignMode[\"TAM_BOTTOM_CENTER\"] = 7] = \"TAM_BOTTOM_CENTER\";\n    TextAlignMode[TextAlignMode[\"TAM_BOTTOM_RIGHT\"] = 8] = \"TAM_BOTTOM_RIGHT\";\n})(TextAlignMode || (TextAlignMode = {}));\nexport var Font;\n(function (Font) {\n    Font[Font[\"F_LIBERATION_SANS\"] = 0] = \"F_LIBERATION_SANS\";\n    Font[Font[\"F_SANS_SERIF\"] = 1] = \"F_SANS_SERIF\";\n})(Font || (Font = {}));\n","import { engine } from '../../runtime/initialization';\n/** @public */\nexport const Transform = engine.baseComponents.Transform;\n/** @public */\nexport const Animator = engine.baseComponents.Animator;\n/** @public */\nexport const AudioSource = engine.baseComponents.AudioSource;\n/** @public */\nexport const AudioStream = engine.baseComponents.AudioStream;\n/** @public */\nexport const AvatarAttach = engine.baseComponents.AvatarAttach;\n/** @public */\nexport const AvatarModifierArea = engine.baseComponents.AvatarModifierArea;\n/** @public */\nexport const AvatarShape = engine.baseComponents.AvatarShape;\n/** @public */\nexport const Billboard = engine.baseComponents.Billboard;\n/** @public */\nexport const CameraMode = engine.baseComponents.CameraMode;\n/** @public */\nexport const CameraModeArea = engine.baseComponents.CameraModeArea;\n/** @public */\nexport const GltfContainer = engine.baseComponents.GltfContainer;\n/** @public */\nexport const Material = engine.baseComponents.Material;\n/** @public */\nexport const MeshCollider = engine.baseComponents.MeshCollider;\n/** @public */\nexport const MeshRenderer = engine.baseComponents.MeshRenderer;\n/** @public */\nexport const NftShape = engine.baseComponents.NftShape;\n/** @public */\nexport const PointerEventsResult = engine.baseComponents.PointerEventsResult;\n/** @public */\nexport const PointerHoverFeedback = engine.baseComponents.PointerHoverFeedback;\n/** @public */\nexport const PointerLock = engine.baseComponents.PointerLock;\n/** @public */\nexport const Raycast = engine.baseComponents.Raycast;\n/** @public */\nexport const RaycastResult = engine.baseComponents.RaycastResult;\n/** @public */\nexport const TextShape = engine.baseComponents.TextShape;\n/** @public */\nexport const UiBackground = engine.baseComponents.UiBackground;\n/** @public */\nexport const UiText = engine.baseComponents.UiText;\n/** @public */\nexport const UiTransform = engine.baseComponents.UiTransform;\n/** @public */\nexport const VisibilityComponent = engine.baseComponents.VisibilityComponent;\n","import { engine } from '@dcl/ecs';\n\nvar react = {exports: {}};\n\nvar react_development = {exports: {}};\n\n/**\n * @license React\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredReact_development;\n\nfunction requireReact_development () {\n\tif (hasRequiredReact_development) return react_development.exports;\n\thasRequiredReact_development = 1;\n\t(function (module, exports) {\n\n\t\t{\n\t\t  (function() {\n\n\t\t/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\t\tif (\n\t\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n\t\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n\t\t    'function'\n\t\t) {\n\t\t  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n\t\t}\n\t\t          var ReactVersion = '18.2.0';\n\n\t\t// ATTENTION\n\t\t// When adding new symbols to this file,\n\t\t// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\t\t// The Symbol used to tag the ReactElement-like types.\n\t\tvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\n\t\tvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\n\t\tvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\n\t\tvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\n\t\tvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\n\t\tvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\n\t\tvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\n\t\tvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\n\t\tvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\n\t\tvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\n\t\tvar REACT_MEMO_TYPE = Symbol.for('react.memo');\n\t\tvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\n\t\tvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\n\t\tvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n\t\tvar FAUX_ITERATOR_SYMBOL = '@@iterator';\n\t\tfunction getIteratorFn(maybeIterable) {\n\t\t  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n\t\t    return null;\n\t\t  }\n\n\t\t  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n\t\t  if (typeof maybeIterator === 'function') {\n\t\t    return maybeIterator;\n\t\t  }\n\n\t\t  return null;\n\t\t}\n\n\t\t/**\n\t\t * Keeps track of the current dispatcher.\n\t\t */\n\t\tvar ReactCurrentDispatcher = {\n\t\t  /**\n\t\t   * @internal\n\t\t   * @type {ReactComponent}\n\t\t   */\n\t\t  current: null\n\t\t};\n\n\t\t/**\n\t\t * Keeps track of the current batch's configuration such as how long an update\n\t\t * should suspend for if it needs to.\n\t\t */\n\t\tvar ReactCurrentBatchConfig = {\n\t\t  transition: null\n\t\t};\n\n\t\tvar ReactCurrentActQueue = {\n\t\t  current: null,\n\t\t  // Used to reproduce behavior of `batchedUpdates` in legacy mode.\n\t\t  isBatchingLegacy: false,\n\t\t  didScheduleLegacyUpdate: false\n\t\t};\n\n\t\t/**\n\t\t * Keeps track of the current owner.\n\t\t *\n\t\t * The current owner is the component who should own any components that are\n\t\t * currently being constructed.\n\t\t */\n\t\tvar ReactCurrentOwner = {\n\t\t  /**\n\t\t   * @internal\n\t\t   * @type {ReactComponent}\n\t\t   */\n\t\t  current: null\n\t\t};\n\n\t\tvar ReactDebugCurrentFrame = {};\n\t\tvar currentExtraStackFrame = null;\n\t\tfunction setExtraStackFrame(stack) {\n\t\t  {\n\t\t    currentExtraStackFrame = stack;\n\t\t  }\n\t\t}\n\n\t\t{\n\t\t  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {\n\t\t    {\n\t\t      currentExtraStackFrame = stack;\n\t\t    }\n\t\t  }; // Stack implementation injected by the current renderer.\n\n\n\t\t  ReactDebugCurrentFrame.getCurrentStack = null;\n\n\t\t  ReactDebugCurrentFrame.getStackAddendum = function () {\n\t\t    var stack = ''; // Add an extra top frame while an element is being validated\n\n\t\t    if (currentExtraStackFrame) {\n\t\t      stack += currentExtraStackFrame;\n\t\t    } // Delegate to the injected renderer-specific implementation\n\n\n\t\t    var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n\t\t    if (impl) {\n\t\t      stack += impl() || '';\n\t\t    }\n\n\t\t    return stack;\n\t\t  };\n\t\t}\n\n\t\t// -----------------------------------------------------------------------------\n\n\t\tvar enableScopeAPI = false; // Experimental Create Event Handle API.\n\t\tvar enableCacheElement = false;\n\t\tvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\n\t\tvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n\t\t// stuff. Intended to enable React core members to more easily debug scheduling\n\t\t// issues in DEV builds.\n\n\t\tvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\n\t\tvar ReactSharedInternals = {\n\t\t  ReactCurrentDispatcher: ReactCurrentDispatcher,\n\t\t  ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n\t\t  ReactCurrentOwner: ReactCurrentOwner\n\t\t};\n\n\t\t{\n\t\t  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;\n\t\t  ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;\n\t\t}\n\n\t\t// by calls to these methods by a Babel plugin.\n\t\t//\n\t\t// In PROD (or in packages without access to React internals),\n\t\t// they are left as they are instead.\n\n\t\tfunction warn(format) {\n\t\t  {\n\t\t    {\n\t\t      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t\t        args[_key - 1] = arguments[_key];\n\t\t      }\n\n\t\t      printWarning('warn', format, args);\n\t\t    }\n\t\t  }\n\t\t}\n\t\tfunction error(format) {\n\t\t  {\n\t\t    {\n\t\t      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t\t        args[_key2 - 1] = arguments[_key2];\n\t\t      }\n\n\t\t      printWarning('error', format, args);\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tfunction printWarning(level, format, args) {\n\t\t  // When changing this logic, you might want to also\n\t\t  // update consoleWithStackDev.www.js as well.\n\t\t  {\n\t\t    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\t\t    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n\t\t    if (stack !== '') {\n\t\t      format += '%s';\n\t\t      args = args.concat([stack]);\n\t\t    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n\t\t    var argsWithFormat = args.map(function (item) {\n\t\t      return String(item);\n\t\t    }); // Careful: RN currently depends on this prefix\n\n\t\t    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n\t\t    // breaks IE9: https://github.com/facebook/react/issues/13610\n\t\t    // eslint-disable-next-line react-internal/no-production-logging\n\n\t\t    Function.prototype.apply.call(console[level], console, argsWithFormat);\n\t\t  }\n\t\t}\n\n\t\tvar didWarnStateUpdateForUnmountedComponent = {};\n\n\t\tfunction warnNoop(publicInstance, callerName) {\n\t\t  {\n\t\t    var _constructor = publicInstance.constructor;\n\t\t    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n\t\t    var warningKey = componentName + \".\" + callerName;\n\n\t\t    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n\t\t      return;\n\t\t    }\n\n\t\t    error(\"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n\n\t\t    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n\t\t  }\n\t\t}\n\t\t/**\n\t\t * This is the abstract API for an update queue.\n\t\t */\n\n\n\t\tvar ReactNoopUpdateQueue = {\n\t\t  /**\n\t\t   * Checks whether or not this composite component is mounted.\n\t\t   * @param {ReactClass} publicInstance The instance we want to test.\n\t\t   * @return {boolean} True if mounted, false otherwise.\n\t\t   * @protected\n\t\t   * @final\n\t\t   */\n\t\t  isMounted: function (publicInstance) {\n\t\t    return false;\n\t\t  },\n\n\t\t  /**\n\t\t   * Forces an update. This should only be invoked when it is known with\n\t\t   * certainty that we are **not** in a DOM transaction.\n\t\t   *\n\t\t   * You may want to call this when you know that some deeper aspect of the\n\t\t   * component's state has changed but `setState` was not called.\n\t\t   *\n\t\t   * This will not invoke `shouldComponentUpdate`, but it will invoke\n\t\t   * `componentWillUpdate` and `componentDidUpdate`.\n\t\t   *\n\t\t   * @param {ReactClass} publicInstance The instance that should rerender.\n\t\t   * @param {?function} callback Called after component is updated.\n\t\t   * @param {?string} callerName name of the calling function in the public API.\n\t\t   * @internal\n\t\t   */\n\t\t  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n\t\t    warnNoop(publicInstance, 'forceUpdate');\n\t\t  },\n\n\t\t  /**\n\t\t   * Replaces all of the state. Always use this or `setState` to mutate state.\n\t\t   * You should treat `this.state` as immutable.\n\t\t   *\n\t\t   * There is no guarantee that `this.state` will be immediately updated, so\n\t\t   * accessing `this.state` after calling this method may return the old value.\n\t\t   *\n\t\t   * @param {ReactClass} publicInstance The instance that should rerender.\n\t\t   * @param {object} completeState Next state.\n\t\t   * @param {?function} callback Called after component is updated.\n\t\t   * @param {?string} callerName name of the calling function in the public API.\n\t\t   * @internal\n\t\t   */\n\t\t  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n\t\t    warnNoop(publicInstance, 'replaceState');\n\t\t  },\n\n\t\t  /**\n\t\t   * Sets a subset of the state. This only exists because _pendingState is\n\t\t   * internal. This provides a merging strategy that is not available to deep\n\t\t   * properties which is confusing. TODO: Expose pendingState or don't use it\n\t\t   * during the merge.\n\t\t   *\n\t\t   * @param {ReactClass} publicInstance The instance that should rerender.\n\t\t   * @param {object} partialState Next partial state to be merged with state.\n\t\t   * @param {?function} callback Called after component is updated.\n\t\t   * @param {?string} Name of the calling function in the public API.\n\t\t   * @internal\n\t\t   */\n\t\t  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n\t\t    warnNoop(publicInstance, 'setState');\n\t\t  }\n\t\t};\n\n\t\tvar assign = Object.assign;\n\n\t\tvar emptyObject = {};\n\n\t\t{\n\t\t  Object.freeze(emptyObject);\n\t\t}\n\t\t/**\n\t\t * Base class helpers for the updating state of a component.\n\t\t */\n\n\n\t\tfunction Component(props, context, updater) {\n\t\t  this.props = props;\n\t\t  this.context = context; // If a component has string refs, we will assign a different object later.\n\n\t\t  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n\t\t  // renderer.\n\n\t\t  this.updater = updater || ReactNoopUpdateQueue;\n\t\t}\n\n\t\tComponent.prototype.isReactComponent = {};\n\t\t/**\n\t\t * Sets a subset of the state. Always use this to mutate\n\t\t * state. You should treat `this.state` as immutable.\n\t\t *\n\t\t * There is no guarantee that `this.state` will be immediately updated, so\n\t\t * accessing `this.state` after calling this method may return the old value.\n\t\t *\n\t\t * There is no guarantee that calls to `setState` will run synchronously,\n\t\t * as they may eventually be batched together.  You can provide an optional\n\t\t * callback that will be executed when the call to setState is actually\n\t\t * completed.\n\t\t *\n\t\t * When a function is provided to setState, it will be called at some point in\n\t\t * the future (not synchronously). It will be called with the up to date\n\t\t * component arguments (state, props, context). These values can be different\n\t\t * from this.* because your function may be called after receiveProps but before\n\t\t * shouldComponentUpdate, and this new state, props, and context will not yet be\n\t\t * assigned to this.\n\t\t *\n\t\t * @param {object|function} partialState Next partial state or function to\n\t\t *        produce next partial state to be merged with current state.\n\t\t * @param {?function} callback Called after state is updated.\n\t\t * @final\n\t\t * @protected\n\t\t */\n\n\t\tComponent.prototype.setState = function (partialState, callback) {\n\t\t  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {\n\t\t    throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');\n\t\t  }\n\n\t\t  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n\t\t};\n\t\t/**\n\t\t * Forces an update. This should only be invoked when it is known with\n\t\t * certainty that we are **not** in a DOM transaction.\n\t\t *\n\t\t * You may want to call this when you know that some deeper aspect of the\n\t\t * component's state has changed but `setState` was not called.\n\t\t *\n\t\t * This will not invoke `shouldComponentUpdate`, but it will invoke\n\t\t * `componentWillUpdate` and `componentDidUpdate`.\n\t\t *\n\t\t * @param {?function} callback Called after update is complete.\n\t\t * @final\n\t\t * @protected\n\t\t */\n\n\n\t\tComponent.prototype.forceUpdate = function (callback) {\n\t\t  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n\t\t};\n\t\t/**\n\t\t * Deprecated APIs. These APIs used to exist on classic React classes but since\n\t\t * we would like to deprecate them, we're not going to move them over to this\n\t\t * modern base class. Instead, we define a getter that warns if it's accessed.\n\t\t */\n\n\n\t\t{\n\t\t  var deprecatedAPIs = {\n\t\t    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n\t\t    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n\t\t  };\n\n\t\t  var defineDeprecationWarning = function (methodName, info) {\n\t\t    Object.defineProperty(Component.prototype, methodName, {\n\t\t      get: function () {\n\t\t        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n\n\t\t        return undefined;\n\t\t      }\n\t\t    });\n\t\t  };\n\n\t\t  for (var fnName in deprecatedAPIs) {\n\t\t    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n\t\t      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tfunction ComponentDummy() {}\n\n\t\tComponentDummy.prototype = Component.prototype;\n\t\t/**\n\t\t * Convenience component with default shallow equality check for sCU.\n\t\t */\n\n\t\tfunction PureComponent(props, context, updater) {\n\t\t  this.props = props;\n\t\t  this.context = context; // If a component has string refs, we will assign a different object later.\n\n\t\t  this.refs = emptyObject;\n\t\t  this.updater = updater || ReactNoopUpdateQueue;\n\t\t}\n\n\t\tvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\n\t\tpureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n\t\tassign(pureComponentPrototype, Component.prototype);\n\t\tpureComponentPrototype.isPureReactComponent = true;\n\n\t\t// an immutable object with a single mutable value\n\t\tfunction createRef() {\n\t\t  var refObject = {\n\t\t    current: null\n\t\t  };\n\n\t\t  {\n\t\t    Object.seal(refObject);\n\t\t  }\n\n\t\t  return refObject;\n\t\t}\n\n\t\tvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\n\t\tfunction isArray(a) {\n\t\t  return isArrayImpl(a);\n\t\t}\n\n\t\t/*\n\t\t * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n\t\t * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n\t\t *\n\t\t * The functions in this module will throw an easier-to-understand,\n\t\t * easier-to-debug exception with a clear errors message message explaining the\n\t\t * problem. (Instead of a confusing exception thrown inside the implementation\n\t\t * of the `value` object).\n\t\t */\n\t\t// $FlowFixMe only called in DEV, so void return is not possible.\n\t\tfunction typeName(value) {\n\t\t  {\n\t\t    // toStringTag is needed for namespaced types like Temporal.Instant\n\t\t    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n\t\t    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n\t\t    return type;\n\t\t  }\n\t\t} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\n\t\tfunction willCoercionThrow(value) {\n\t\t  {\n\t\t    try {\n\t\t      testStringCoercion(value);\n\t\t      return false;\n\t\t    } catch (e) {\n\t\t      return true;\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tfunction testStringCoercion(value) {\n\t\t  // If you ended up here by following an exception call stack, here's what's\n\t\t  // happened: you supplied an object or symbol value to React (as a prop, key,\n\t\t  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n\t\t  // coerce it to a string using `'' + value`, an exception was thrown.\n\t\t  //\n\t\t  // The most common types that will cause this exception are `Symbol` instances\n\t\t  // and Temporal objects like `Temporal.Instant`. But any object that has a\n\t\t  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n\t\t  // exception. (Library authors do this to prevent users from using built-in\n\t\t  // numeric operators like `+` or comparison operators like `>=` because custom\n\t\t  // methods are needed to perform accurate arithmetic or comparison.)\n\t\t  //\n\t\t  // To fix the problem, coerce this object or symbol value to a string before\n\t\t  // passing it to React. The most reliable way is usually `String(value)`.\n\t\t  //\n\t\t  // To find which value is throwing, check the browser or debugger console.\n\t\t  // Before this exception was thrown, there should be `console.error` output\n\t\t  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n\t\t  // problem and how that type was used: key, atrribute, input value prop, etc.\n\t\t  // In most cases, this console output also shows the component and its\n\t\t  // ancestor components where the exception happened.\n\t\t  //\n\t\t  // eslint-disable-next-line react-internal/safe-string-coercion\n\t\t  return '' + value;\n\t\t}\n\t\tfunction checkKeyStringCoercion(value) {\n\t\t  {\n\t\t    if (willCoercionThrow(value)) {\n\t\t      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n\t\t      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tfunction getWrappedName(outerType, innerType, wrapperName) {\n\t\t  var displayName = outerType.displayName;\n\n\t\t  if (displayName) {\n\t\t    return displayName;\n\t\t  }\n\n\t\t  var functionName = innerType.displayName || innerType.name || '';\n\t\t  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n\t\t} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\n\t\tfunction getContextName(type) {\n\t\t  return type.displayName || 'Context';\n\t\t} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\n\t\tfunction getComponentNameFromType(type) {\n\t\t  if (type == null) {\n\t\t    // Host root, text node or just invalid type.\n\t\t    return null;\n\t\t  }\n\n\t\t  {\n\t\t    if (typeof type.tag === 'number') {\n\t\t      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n\t\t    }\n\t\t  }\n\n\t\t  if (typeof type === 'function') {\n\t\t    return type.displayName || type.name || null;\n\t\t  }\n\n\t\t  if (typeof type === 'string') {\n\t\t    return type;\n\t\t  }\n\n\t\t  switch (type) {\n\t\t    case REACT_FRAGMENT_TYPE:\n\t\t      return 'Fragment';\n\n\t\t    case REACT_PORTAL_TYPE:\n\t\t      return 'Portal';\n\n\t\t    case REACT_PROFILER_TYPE:\n\t\t      return 'Profiler';\n\n\t\t    case REACT_STRICT_MODE_TYPE:\n\t\t      return 'StrictMode';\n\n\t\t    case REACT_SUSPENSE_TYPE:\n\t\t      return 'Suspense';\n\n\t\t    case REACT_SUSPENSE_LIST_TYPE:\n\t\t      return 'SuspenseList';\n\n\t\t  }\n\n\t\t  if (typeof type === 'object') {\n\t\t    switch (type.$$typeof) {\n\t\t      case REACT_CONTEXT_TYPE:\n\t\t        var context = type;\n\t\t        return getContextName(context) + '.Consumer';\n\n\t\t      case REACT_PROVIDER_TYPE:\n\t\t        var provider = type;\n\t\t        return getContextName(provider._context) + '.Provider';\n\n\t\t      case REACT_FORWARD_REF_TYPE:\n\t\t        return getWrappedName(type, type.render, 'ForwardRef');\n\n\t\t      case REACT_MEMO_TYPE:\n\t\t        var outerName = type.displayName || null;\n\n\t\t        if (outerName !== null) {\n\t\t          return outerName;\n\t\t        }\n\n\t\t        return getComponentNameFromType(type.type) || 'Memo';\n\n\t\t      case REACT_LAZY_TYPE:\n\t\t        {\n\t\t          var lazyComponent = type;\n\t\t          var payload = lazyComponent._payload;\n\t\t          var init = lazyComponent._init;\n\n\t\t          try {\n\t\t            return getComponentNameFromType(init(payload));\n\t\t          } catch (x) {\n\t\t            return null;\n\t\t          }\n\t\t        }\n\n\t\t      // eslint-disable-next-line no-fallthrough\n\t\t    }\n\t\t  }\n\n\t\t  return null;\n\t\t}\n\n\t\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\t\tvar RESERVED_PROPS = {\n\t\t  key: true,\n\t\t  ref: true,\n\t\t  __self: true,\n\t\t  __source: true\n\t\t};\n\t\tvar specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n\n\t\t{\n\t\t  didWarnAboutStringRefs = {};\n\t\t}\n\n\t\tfunction hasValidRef(config) {\n\t\t  {\n\t\t    if (hasOwnProperty.call(config, 'ref')) {\n\t\t      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n\t\t      if (getter && getter.isReactWarning) {\n\t\t        return false;\n\t\t      }\n\t\t    }\n\t\t  }\n\n\t\t  return config.ref !== undefined;\n\t\t}\n\n\t\tfunction hasValidKey(config) {\n\t\t  {\n\t\t    if (hasOwnProperty.call(config, 'key')) {\n\t\t      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n\t\t      if (getter && getter.isReactWarning) {\n\t\t        return false;\n\t\t      }\n\t\t    }\n\t\t  }\n\n\t\t  return config.key !== undefined;\n\t\t}\n\n\t\tfunction defineKeyPropWarningGetter(props, displayName) {\n\t\t  var warnAboutAccessingKey = function () {\n\t\t    {\n\t\t      if (!specialPropKeyWarningShown) {\n\t\t        specialPropKeyWarningShown = true;\n\n\t\t        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n\t\t      }\n\t\t    }\n\t\t  };\n\n\t\t  warnAboutAccessingKey.isReactWarning = true;\n\t\t  Object.defineProperty(props, 'key', {\n\t\t    get: warnAboutAccessingKey,\n\t\t    configurable: true\n\t\t  });\n\t\t}\n\n\t\tfunction defineRefPropWarningGetter(props, displayName) {\n\t\t  var warnAboutAccessingRef = function () {\n\t\t    {\n\t\t      if (!specialPropRefWarningShown) {\n\t\t        specialPropRefWarningShown = true;\n\n\t\t        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n\t\t      }\n\t\t    }\n\t\t  };\n\n\t\t  warnAboutAccessingRef.isReactWarning = true;\n\t\t  Object.defineProperty(props, 'ref', {\n\t\t    get: warnAboutAccessingRef,\n\t\t    configurable: true\n\t\t  });\n\t\t}\n\n\t\tfunction warnIfStringRefCannotBeAutoConverted(config) {\n\t\t  {\n\t\t    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n\t\t      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n\t\t      if (!didWarnAboutStringRefs[componentName]) {\n\t\t        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);\n\n\t\t        didWarnAboutStringRefs[componentName] = true;\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t}\n\t\t/**\n\t\t * Factory method to create a new React element. This no longer adheres to\n\t\t * the class pattern, so do not use new to call it. Also, instanceof check\n\t\t * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n\t\t * if something is a React Element.\n\t\t *\n\t\t * @param {*} type\n\t\t * @param {*} props\n\t\t * @param {*} key\n\t\t * @param {string|object} ref\n\t\t * @param {*} owner\n\t\t * @param {*} self A *temporary* helper to detect places where `this` is\n\t\t * different from the `owner` when React.createElement is called, so that we\n\t\t * can warn. We want to get rid of owner and replace string `ref`s with arrow\n\t\t * functions, and as long as `this` and owner are the same, there will be no\n\t\t * change in behavior.\n\t\t * @param {*} source An annotation object (added by a transpiler or otherwise)\n\t\t * indicating filename, line number, and/or other information.\n\t\t * @internal\n\t\t */\n\n\n\t\tvar ReactElement = function (type, key, ref, self, source, owner, props) {\n\t\t  var element = {\n\t\t    // This tag allows us to uniquely identify this as a React Element\n\t\t    $$typeof: REACT_ELEMENT_TYPE,\n\t\t    // Built-in properties that belong on the element\n\t\t    type: type,\n\t\t    key: key,\n\t\t    ref: ref,\n\t\t    props: props,\n\t\t    // Record the component responsible for creating this element.\n\t\t    _owner: owner\n\t\t  };\n\n\t\t  {\n\t\t    // The validation flag is currently mutative. We put it on\n\t\t    // an external backing store so that we can freeze the whole object.\n\t\t    // This can be replaced with a WeakMap once they are implemented in\n\t\t    // commonly used development environments.\n\t\t    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n\t\t    // the validation flag non-enumerable (where possible, which should\n\t\t    // include every environment we run tests in), so the test framework\n\t\t    // ignores it.\n\n\t\t    Object.defineProperty(element._store, 'validated', {\n\t\t      configurable: false,\n\t\t      enumerable: false,\n\t\t      writable: true,\n\t\t      value: false\n\t\t    }); // self and source are DEV only properties.\n\n\t\t    Object.defineProperty(element, '_self', {\n\t\t      configurable: false,\n\t\t      enumerable: false,\n\t\t      writable: false,\n\t\t      value: self\n\t\t    }); // Two elements created in two different places should be considered\n\t\t    // equal for testing purposes and therefore we hide it from enumeration.\n\n\t\t    Object.defineProperty(element, '_source', {\n\t\t      configurable: false,\n\t\t      enumerable: false,\n\t\t      writable: false,\n\t\t      value: source\n\t\t    });\n\n\t\t    if (Object.freeze) {\n\t\t      Object.freeze(element.props);\n\t\t      Object.freeze(element);\n\t\t    }\n\t\t  }\n\n\t\t  return element;\n\t\t};\n\t\t/**\n\t\t * Create and return a new ReactElement of the given type.\n\t\t * See https://reactjs.org/docs/react-api.html#createelement\n\t\t */\n\n\t\tfunction createElement(type, config, children) {\n\t\t  var propName; // Reserved names are extracted\n\n\t\t  var props = {};\n\t\t  var key = null;\n\t\t  var ref = null;\n\t\t  var self = null;\n\t\t  var source = null;\n\n\t\t  if (config != null) {\n\t\t    if (hasValidRef(config)) {\n\t\t      ref = config.ref;\n\n\t\t      {\n\t\t        warnIfStringRefCannotBeAutoConverted(config);\n\t\t      }\n\t\t    }\n\n\t\t    if (hasValidKey(config)) {\n\t\t      {\n\t\t        checkKeyStringCoercion(config.key);\n\t\t      }\n\n\t\t      key = '' + config.key;\n\t\t    }\n\n\t\t    self = config.__self === undefined ? null : config.__self;\n\t\t    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n\t\t    for (propName in config) {\n\t\t      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n\t\t        props[propName] = config[propName];\n\t\t      }\n\t\t    }\n\t\t  } // Children can be more than one argument, and those are transferred onto\n\t\t  // the newly allocated props object.\n\n\n\t\t  var childrenLength = arguments.length - 2;\n\n\t\t  if (childrenLength === 1) {\n\t\t    props.children = children;\n\t\t  } else if (childrenLength > 1) {\n\t\t    var childArray = Array(childrenLength);\n\n\t\t    for (var i = 0; i < childrenLength; i++) {\n\t\t      childArray[i] = arguments[i + 2];\n\t\t    }\n\n\t\t    {\n\t\t      if (Object.freeze) {\n\t\t        Object.freeze(childArray);\n\t\t      }\n\t\t    }\n\n\t\t    props.children = childArray;\n\t\t  } // Resolve default props\n\n\n\t\t  if (type && type.defaultProps) {\n\t\t    var defaultProps = type.defaultProps;\n\n\t\t    for (propName in defaultProps) {\n\t\t      if (props[propName] === undefined) {\n\t\t        props[propName] = defaultProps[propName];\n\t\t      }\n\t\t    }\n\t\t  }\n\n\t\t  {\n\t\t    if (key || ref) {\n\t\t      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n\t\t      if (key) {\n\t\t        defineKeyPropWarningGetter(props, displayName);\n\t\t      }\n\n\t\t      if (ref) {\n\t\t        defineRefPropWarningGetter(props, displayName);\n\t\t      }\n\t\t    }\n\t\t  }\n\n\t\t  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\t\t}\n\t\tfunction cloneAndReplaceKey(oldElement, newKey) {\n\t\t  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n\t\t  return newElement;\n\t\t}\n\t\t/**\n\t\t * Clone and return a new ReactElement using element as the starting point.\n\t\t * See https://reactjs.org/docs/react-api.html#cloneelement\n\t\t */\n\n\t\tfunction cloneElement(element, config, children) {\n\t\t  if (element === null || element === undefined) {\n\t\t    throw new Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n\t\t  }\n\n\t\t  var propName; // Original props are copied\n\n\t\t  var props = assign({}, element.props); // Reserved names are extracted\n\n\t\t  var key = element.key;\n\t\t  var ref = element.ref; // Self is preserved since the owner is preserved.\n\n\t\t  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n\t\t  // transpiler, and the original source is probably a better indicator of the\n\t\t  // true owner.\n\n\t\t  var source = element._source; // Owner will be preserved, unless ref is overridden\n\n\t\t  var owner = element._owner;\n\n\t\t  if (config != null) {\n\t\t    if (hasValidRef(config)) {\n\t\t      // Silently steal the ref from the parent.\n\t\t      ref = config.ref;\n\t\t      owner = ReactCurrentOwner.current;\n\t\t    }\n\n\t\t    if (hasValidKey(config)) {\n\t\t      {\n\t\t        checkKeyStringCoercion(config.key);\n\t\t      }\n\n\t\t      key = '' + config.key;\n\t\t    } // Remaining properties override existing props\n\n\n\t\t    var defaultProps;\n\n\t\t    if (element.type && element.type.defaultProps) {\n\t\t      defaultProps = element.type.defaultProps;\n\t\t    }\n\n\t\t    for (propName in config) {\n\t\t      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n\t\t        if (config[propName] === undefined && defaultProps !== undefined) {\n\t\t          // Resolve default props\n\t\t          props[propName] = defaultProps[propName];\n\t\t        } else {\n\t\t          props[propName] = config[propName];\n\t\t        }\n\t\t      }\n\t\t    }\n\t\t  } // Children can be more than one argument, and those are transferred onto\n\t\t  // the newly allocated props object.\n\n\n\t\t  var childrenLength = arguments.length - 2;\n\n\t\t  if (childrenLength === 1) {\n\t\t    props.children = children;\n\t\t  } else if (childrenLength > 1) {\n\t\t    var childArray = Array(childrenLength);\n\n\t\t    for (var i = 0; i < childrenLength; i++) {\n\t\t      childArray[i] = arguments[i + 2];\n\t\t    }\n\n\t\t    props.children = childArray;\n\t\t  }\n\n\t\t  return ReactElement(element.type, key, ref, self, source, owner, props);\n\t\t}\n\t\t/**\n\t\t * Verifies the object is a ReactElement.\n\t\t * See https://reactjs.org/docs/react-api.html#isvalidelement\n\t\t * @param {?object} object\n\t\t * @return {boolean} True if `object` is a ReactElement.\n\t\t * @final\n\t\t */\n\n\t\tfunction isValidElement(object) {\n\t\t  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n\t\t}\n\n\t\tvar SEPARATOR = '.';\n\t\tvar SUBSEPARATOR = ':';\n\t\t/**\n\t\t * Escape and wrap key so it is safe to use as a reactid\n\t\t *\n\t\t * @param {string} key to be escaped.\n\t\t * @return {string} the escaped key.\n\t\t */\n\n\t\tfunction escape(key) {\n\t\t  var escapeRegex = /[=:]/g;\n\t\t  var escaperLookup = {\n\t\t    '=': '=0',\n\t\t    ':': '=2'\n\t\t  };\n\t\t  var escapedString = key.replace(escapeRegex, function (match) {\n\t\t    return escaperLookup[match];\n\t\t  });\n\t\t  return '$' + escapedString;\n\t\t}\n\t\t/**\n\t\t * TODO: Test that a single child and an array with one item have the same key\n\t\t * pattern.\n\t\t */\n\n\n\t\tvar didWarnAboutMaps = false;\n\t\tvar userProvidedKeyEscapeRegex = /\\/+/g;\n\n\t\tfunction escapeUserProvidedKey(text) {\n\t\t  return text.replace(userProvidedKeyEscapeRegex, '$&/');\n\t\t}\n\t\t/**\n\t\t * Generate a key string that identifies a element within a set.\n\t\t *\n\t\t * @param {*} element A element that could contain a manual key.\n\t\t * @param {number} index Index that is used if a manual key is not provided.\n\t\t * @return {string}\n\t\t */\n\n\n\t\tfunction getElementKey(element, index) {\n\t\t  // Do some typechecking here since we call this blindly. We want to ensure\n\t\t  // that we don't block potential future ES APIs.\n\t\t  if (typeof element === 'object' && element !== null && element.key != null) {\n\t\t    // Explicit key\n\t\t    {\n\t\t      checkKeyStringCoercion(element.key);\n\t\t    }\n\n\t\t    return escape('' + element.key);\n\t\t  } // Implicit key determined by the index in the set\n\n\n\t\t  return index.toString(36);\n\t\t}\n\n\t\tfunction mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n\t\t  var type = typeof children;\n\n\t\t  if (type === 'undefined' || type === 'boolean') {\n\t\t    // All of the above are perceived as null.\n\t\t    children = null;\n\t\t  }\n\n\t\t  var invokeCallback = false;\n\n\t\t  if (children === null) {\n\t\t    invokeCallback = true;\n\t\t  } else {\n\t\t    switch (type) {\n\t\t      case 'string':\n\t\t      case 'number':\n\t\t        invokeCallback = true;\n\t\t        break;\n\n\t\t      case 'object':\n\t\t        switch (children.$$typeof) {\n\t\t          case REACT_ELEMENT_TYPE:\n\t\t          case REACT_PORTAL_TYPE:\n\t\t            invokeCallback = true;\n\t\t        }\n\n\t\t    }\n\t\t  }\n\n\t\t  if (invokeCallback) {\n\t\t    var _child = children;\n\t\t    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n\t\t    // so that it's consistent if the number of children grows:\n\n\t\t    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n\n\t\t    if (isArray(mappedChild)) {\n\t\t      var escapedChildKey = '';\n\n\t\t      if (childKey != null) {\n\t\t        escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n\t\t      }\n\n\t\t      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {\n\t\t        return c;\n\t\t      });\n\t\t    } else if (mappedChild != null) {\n\t\t      if (isValidElement(mappedChild)) {\n\t\t        {\n\t\t          // The `if` statement here prevents auto-disabling of the safe\n\t\t          // coercion ESLint rule, so we must manually disable it below.\n\t\t          // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n\t\t          if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {\n\t\t            checkKeyStringCoercion(mappedChild.key);\n\t\t          }\n\t\t        }\n\n\t\t        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n\t\t        // traverseAllChildren used to do for objects as children\n\t\t        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n\t\t        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number\n\t\t        // eslint-disable-next-line react-internal/safe-string-coercion\n\t\t        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);\n\t\t      }\n\n\t\t      array.push(mappedChild);\n\t\t    }\n\n\t\t    return 1;\n\t\t  }\n\n\t\t  var child;\n\t\t  var nextName;\n\t\t  var subtreeCount = 0; // Count of children found in the current subtree.\n\n\t\t  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n\t\t  if (isArray(children)) {\n\t\t    for (var i = 0; i < children.length; i++) {\n\t\t      child = children[i];\n\t\t      nextName = nextNamePrefix + getElementKey(child, i);\n\t\t      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n\t\t    }\n\t\t  } else {\n\t\t    var iteratorFn = getIteratorFn(children);\n\n\t\t    if (typeof iteratorFn === 'function') {\n\t\t      var iterableChildren = children;\n\n\t\t      {\n\t\t        // Warn about using Maps as children\n\t\t        if (iteratorFn === iterableChildren.entries) {\n\t\t          if (!didWarnAboutMaps) {\n\t\t            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n\t\t          }\n\n\t\t          didWarnAboutMaps = true;\n\t\t        }\n\t\t      }\n\n\t\t      var iterator = iteratorFn.call(iterableChildren);\n\t\t      var step;\n\t\t      var ii = 0;\n\n\t\t      while (!(step = iterator.next()).done) {\n\t\t        child = step.value;\n\t\t        nextName = nextNamePrefix + getElementKey(child, ii++);\n\t\t        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n\t\t      }\n\t\t    } else if (type === 'object') {\n\t\t      // eslint-disable-next-line react-internal/safe-string-coercion\n\t\t      var childrenString = String(children);\n\t\t      throw new Error(\"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n\t\t    }\n\t\t  }\n\n\t\t  return subtreeCount;\n\t\t}\n\n\t\t/**\n\t\t * Maps children that are typically specified as `props.children`.\n\t\t *\n\t\t * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n\t\t *\n\t\t * The provided mapFunction(child, index) will be called for each\n\t\t * leaf child.\n\t\t *\n\t\t * @param {?*} children Children tree container.\n\t\t * @param {function(*, int)} func The map function.\n\t\t * @param {*} context Context for mapFunction.\n\t\t * @return {object} Object containing the ordered map of results.\n\t\t */\n\t\tfunction mapChildren(children, func, context) {\n\t\t  if (children == null) {\n\t\t    return children;\n\t\t  }\n\n\t\t  var result = [];\n\t\t  var count = 0;\n\t\t  mapIntoArray(children, result, '', '', function (child) {\n\t\t    return func.call(context, child, count++);\n\t\t  });\n\t\t  return result;\n\t\t}\n\t\t/**\n\t\t * Count the number of children that are typically specified as\n\t\t * `props.children`.\n\t\t *\n\t\t * See https://reactjs.org/docs/react-api.html#reactchildrencount\n\t\t *\n\t\t * @param {?*} children Children tree container.\n\t\t * @return {number} The number of children.\n\t\t */\n\n\n\t\tfunction countChildren(children) {\n\t\t  var n = 0;\n\t\t  mapChildren(children, function () {\n\t\t    n++; // Don't return anything\n\t\t  });\n\t\t  return n;\n\t\t}\n\n\t\t/**\n\t\t * Iterates through children that are typically specified as `props.children`.\n\t\t *\n\t\t * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n\t\t *\n\t\t * The provided forEachFunc(child, index) will be called for each\n\t\t * leaf child.\n\t\t *\n\t\t * @param {?*} children Children tree container.\n\t\t * @param {function(*, int)} forEachFunc\n\t\t * @param {*} forEachContext Context for forEachContext.\n\t\t */\n\t\tfunction forEachChildren(children, forEachFunc, forEachContext) {\n\t\t  mapChildren(children, function () {\n\t\t    forEachFunc.apply(this, arguments); // Don't return anything.\n\t\t  }, forEachContext);\n\t\t}\n\t\t/**\n\t\t * Flatten a children object (typically specified as `props.children`) and\n\t\t * return an array with appropriately re-keyed children.\n\t\t *\n\t\t * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n\t\t */\n\n\n\t\tfunction toArray(children) {\n\t\t  return mapChildren(children, function (child) {\n\t\t    return child;\n\t\t  }) || [];\n\t\t}\n\t\t/**\n\t\t * Returns the first child in a collection of children and verifies that there\n\t\t * is only one child in the collection.\n\t\t *\n\t\t * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n\t\t *\n\t\t * The current implementation of this function assumes that a single child gets\n\t\t * passed without a wrapper, but the purpose of this helper function is to\n\t\t * abstract away the particular structure of children.\n\t\t *\n\t\t * @param {?object} children Child collection structure.\n\t\t * @return {ReactElement} The first and only `ReactElement` contained in the\n\t\t * structure.\n\t\t */\n\n\n\t\tfunction onlyChild(children) {\n\t\t  if (!isValidElement(children)) {\n\t\t    throw new Error('React.Children.only expected to receive a single React element child.');\n\t\t  }\n\n\t\t  return children;\n\t\t}\n\n\t\tfunction createContext(defaultValue) {\n\t\t  // TODO: Second argument used to be an optional `calculateChangedBits`\n\t\t  // function. Warn to reserve for future use?\n\t\t  var context = {\n\t\t    $$typeof: REACT_CONTEXT_TYPE,\n\t\t    // As a workaround to support multiple concurrent renderers, we categorize\n\t\t    // some renderers as primary and others as secondary. We only expect\n\t\t    // there to be two concurrent renderers at most: React Native (primary) and\n\t\t    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n\t\t    // Secondary renderers store their context values on separate fields.\n\t\t    _currentValue: defaultValue,\n\t\t    _currentValue2: defaultValue,\n\t\t    // Used to track how many concurrent renderers this context currently\n\t\t    // supports within in a single renderer. Such as parallel server rendering.\n\t\t    _threadCount: 0,\n\t\t    // These are circular\n\t\t    Provider: null,\n\t\t    Consumer: null,\n\t\t    // Add these to use same hidden class in VM as ServerContext\n\t\t    _defaultValue: null,\n\t\t    _globalName: null\n\t\t  };\n\t\t  context.Provider = {\n\t\t    $$typeof: REACT_PROVIDER_TYPE,\n\t\t    _context: context\n\t\t  };\n\t\t  var hasWarnedAboutUsingNestedContextConsumers = false;\n\t\t  var hasWarnedAboutUsingConsumerProvider = false;\n\t\t  var hasWarnedAboutDisplayNameOnConsumer = false;\n\n\t\t  {\n\t\t    // A separate object, but proxies back to the original context object for\n\t\t    // backwards compatibility. It has a different $$typeof, so we can properly\n\t\t    // warn for the incorrect usage of Context as a Consumer.\n\t\t    var Consumer = {\n\t\t      $$typeof: REACT_CONTEXT_TYPE,\n\t\t      _context: context\n\t\t    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n\t\t    Object.defineProperties(Consumer, {\n\t\t      Provider: {\n\t\t        get: function () {\n\t\t          if (!hasWarnedAboutUsingConsumerProvider) {\n\t\t            hasWarnedAboutUsingConsumerProvider = true;\n\n\t\t            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n\t\t          }\n\n\t\t          return context.Provider;\n\t\t        },\n\t\t        set: function (_Provider) {\n\t\t          context.Provider = _Provider;\n\t\t        }\n\t\t      },\n\t\t      _currentValue: {\n\t\t        get: function () {\n\t\t          return context._currentValue;\n\t\t        },\n\t\t        set: function (_currentValue) {\n\t\t          context._currentValue = _currentValue;\n\t\t        }\n\t\t      },\n\t\t      _currentValue2: {\n\t\t        get: function () {\n\t\t          return context._currentValue2;\n\t\t        },\n\t\t        set: function (_currentValue2) {\n\t\t          context._currentValue2 = _currentValue2;\n\t\t        }\n\t\t      },\n\t\t      _threadCount: {\n\t\t        get: function () {\n\t\t          return context._threadCount;\n\t\t        },\n\t\t        set: function (_threadCount) {\n\t\t          context._threadCount = _threadCount;\n\t\t        }\n\t\t      },\n\t\t      Consumer: {\n\t\t        get: function () {\n\t\t          if (!hasWarnedAboutUsingNestedContextConsumers) {\n\t\t            hasWarnedAboutUsingNestedContextConsumers = true;\n\n\t\t            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n\t\t          }\n\n\t\t          return context.Consumer;\n\t\t        }\n\t\t      },\n\t\t      displayName: {\n\t\t        get: function () {\n\t\t          return context.displayName;\n\t\t        },\n\t\t        set: function (displayName) {\n\t\t          if (!hasWarnedAboutDisplayNameOnConsumer) {\n\t\t            warn('Setting `displayName` on Context.Consumer has no effect. ' + \"You should set it directly on the context with Context.displayName = '%s'.\", displayName);\n\n\t\t            hasWarnedAboutDisplayNameOnConsumer = true;\n\t\t          }\n\t\t        }\n\t\t      }\n\t\t    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n\t\t    context.Consumer = Consumer;\n\t\t  }\n\n\t\t  {\n\t\t    context._currentRenderer = null;\n\t\t    context._currentRenderer2 = null;\n\t\t  }\n\n\t\t  return context;\n\t\t}\n\n\t\tvar Uninitialized = -1;\n\t\tvar Pending = 0;\n\t\tvar Resolved = 1;\n\t\tvar Rejected = 2;\n\n\t\tfunction lazyInitializer(payload) {\n\t\t  if (payload._status === Uninitialized) {\n\t\t    var ctor = payload._result;\n\t\t    var thenable = ctor(); // Transition to the next state.\n\t\t    // This might throw either because it's missing or throws. If so, we treat it\n\t\t    // as still uninitialized and try again next time. Which is the same as what\n\t\t    // happens if the ctor or any wrappers processing the ctor throws. This might\n\t\t    // end up fixing it if the resolution was a concurrency bug.\n\n\t\t    thenable.then(function (moduleObject) {\n\t\t      if (payload._status === Pending || payload._status === Uninitialized) {\n\t\t        // Transition to the next state.\n\t\t        var resolved = payload;\n\t\t        resolved._status = Resolved;\n\t\t        resolved._result = moduleObject;\n\t\t      }\n\t\t    }, function (error) {\n\t\t      if (payload._status === Pending || payload._status === Uninitialized) {\n\t\t        // Transition to the next state.\n\t\t        var rejected = payload;\n\t\t        rejected._status = Rejected;\n\t\t        rejected._result = error;\n\t\t      }\n\t\t    });\n\n\t\t    if (payload._status === Uninitialized) {\n\t\t      // In case, we're still uninitialized, then we're waiting for the thenable\n\t\t      // to resolve. Set it as pending in the meantime.\n\t\t      var pending = payload;\n\t\t      pending._status = Pending;\n\t\t      pending._result = thenable;\n\t\t    }\n\t\t  }\n\n\t\t  if (payload._status === Resolved) {\n\t\t    var moduleObject = payload._result;\n\n\t\t    {\n\t\t      if (moduleObject === undefined) {\n\t\t        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n\t\t        'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\\n\\n\" + 'Did you accidentally put curly braces around the import?', moduleObject);\n\t\t      }\n\t\t    }\n\n\t\t    {\n\t\t      if (!('default' in moduleObject)) {\n\t\t        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n\t\t        'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\", moduleObject);\n\t\t      }\n\t\t    }\n\n\t\t    return moduleObject.default;\n\t\t  } else {\n\t\t    throw payload._result;\n\t\t  }\n\t\t}\n\n\t\tfunction lazy(ctor) {\n\t\t  var payload = {\n\t\t    // We use these fields to store the result.\n\t\t    _status: Uninitialized,\n\t\t    _result: ctor\n\t\t  };\n\t\t  var lazyType = {\n\t\t    $$typeof: REACT_LAZY_TYPE,\n\t\t    _payload: payload,\n\t\t    _init: lazyInitializer\n\t\t  };\n\n\t\t  {\n\t\t    // In production, this would just set it on the object.\n\t\t    var defaultProps;\n\t\t    var propTypes; // $FlowFixMe\n\n\t\t    Object.defineProperties(lazyType, {\n\t\t      defaultProps: {\n\t\t        configurable: true,\n\t\t        get: function () {\n\t\t          return defaultProps;\n\t\t        },\n\t\t        set: function (newDefaultProps) {\n\t\t          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n\t\t          defaultProps = newDefaultProps; // Match production behavior more closely:\n\t\t          // $FlowFixMe\n\n\t\t          Object.defineProperty(lazyType, 'defaultProps', {\n\t\t            enumerable: true\n\t\t          });\n\t\t        }\n\t\t      },\n\t\t      propTypes: {\n\t\t        configurable: true,\n\t\t        get: function () {\n\t\t          return propTypes;\n\t\t        },\n\t\t        set: function (newPropTypes) {\n\t\t          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n\t\t          propTypes = newPropTypes; // Match production behavior more closely:\n\t\t          // $FlowFixMe\n\n\t\t          Object.defineProperty(lazyType, 'propTypes', {\n\t\t            enumerable: true\n\t\t          });\n\t\t        }\n\t\t      }\n\t\t    });\n\t\t  }\n\n\t\t  return lazyType;\n\t\t}\n\n\t\tfunction forwardRef(render) {\n\t\t  {\n\t\t    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n\t\t      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n\t\t    } else if (typeof render !== 'function') {\n\t\t      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n\t\t    } else {\n\t\t      if (render.length !== 0 && render.length !== 2) {\n\t\t        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');\n\t\t      }\n\t\t    }\n\n\t\t    if (render != null) {\n\t\t      if (render.defaultProps != null || render.propTypes != null) {\n\t\t        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');\n\t\t      }\n\t\t    }\n\t\t  }\n\n\t\t  var elementType = {\n\t\t    $$typeof: REACT_FORWARD_REF_TYPE,\n\t\t    render: render\n\t\t  };\n\n\t\t  {\n\t\t    var ownName;\n\t\t    Object.defineProperty(elementType, 'displayName', {\n\t\t      enumerable: false,\n\t\t      configurable: true,\n\t\t      get: function () {\n\t\t        return ownName;\n\t\t      },\n\t\t      set: function (name) {\n\t\t        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n\t\t        // because the component may be used elsewhere.\n\t\t        // But it's nice for anonymous functions to inherit the name,\n\t\t        // so that our component-stack generation logic will display their frames.\n\t\t        // An anonymous function generally suggests a pattern like:\n\t\t        //   React.forwardRef((props, ref) => {...});\n\t\t        // This kind of inner function is not used elsewhere so the side effect is okay.\n\n\t\t        if (!render.name && !render.displayName) {\n\t\t          render.displayName = name;\n\t\t        }\n\t\t      }\n\t\t    });\n\t\t  }\n\n\t\t  return elementType;\n\t\t}\n\n\t\tvar REACT_MODULE_REFERENCE;\n\n\t\t{\n\t\t  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n\t\t}\n\n\t\tfunction isValidElementType(type) {\n\t\t  if (typeof type === 'string' || typeof type === 'function') {\n\t\t    return true;\n\t\t  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n\t\t  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n\t\t    return true;\n\t\t  }\n\n\t\t  if (typeof type === 'object' && type !== null) {\n\t\t    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n\t\t    // types supported by any Flight configuration anywhere since\n\t\t    // we don't know which Flight build this will end up being used\n\t\t    // with.\n\t\t    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n\t\t      return true;\n\t\t    }\n\t\t  }\n\n\t\t  return false;\n\t\t}\n\n\t\tfunction memo(type, compare) {\n\t\t  {\n\t\t    if (!isValidElementType(type)) {\n\t\t      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n\t\t    }\n\t\t  }\n\n\t\t  var elementType = {\n\t\t    $$typeof: REACT_MEMO_TYPE,\n\t\t    type: type,\n\t\t    compare: compare === undefined ? null : compare\n\t\t  };\n\n\t\t  {\n\t\t    var ownName;\n\t\t    Object.defineProperty(elementType, 'displayName', {\n\t\t      enumerable: false,\n\t\t      configurable: true,\n\t\t      get: function () {\n\t\t        return ownName;\n\t\t      },\n\t\t      set: function (name) {\n\t\t        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n\t\t        // because the component may be used elsewhere.\n\t\t        // But it's nice for anonymous functions to inherit the name,\n\t\t        // so that our component-stack generation logic will display their frames.\n\t\t        // An anonymous function generally suggests a pattern like:\n\t\t        //   React.memo((props) => {...});\n\t\t        // This kind of inner function is not used elsewhere so the side effect is okay.\n\n\t\t        if (!type.name && !type.displayName) {\n\t\t          type.displayName = name;\n\t\t        }\n\t\t      }\n\t\t    });\n\t\t  }\n\n\t\t  return elementType;\n\t\t}\n\n\t\tfunction resolveDispatcher() {\n\t\t  var dispatcher = ReactCurrentDispatcher.current;\n\n\t\t  {\n\t\t    if (dispatcher === null) {\n\t\t      error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n\t\t    }\n\t\t  } // Will result in a null access error if accessed outside render phase. We\n\t\t  // intentionally don't throw our own error because this is in a hot path.\n\t\t  // Also helps ensure this is inlined.\n\n\n\t\t  return dispatcher;\n\t\t}\n\t\tfunction useContext(Context) {\n\t\t  var dispatcher = resolveDispatcher();\n\n\t\t  {\n\t\t    // TODO: add a more generic warning for invalid values.\n\t\t    if (Context._context !== undefined) {\n\t\t      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n\t\t      // and nobody should be using this in existing code.\n\n\t\t      if (realContext.Consumer === Context) {\n\t\t        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n\t\t      } else if (realContext.Provider === Context) {\n\t\t        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n\t\t      }\n\t\t    }\n\t\t  }\n\n\t\t  return dispatcher.useContext(Context);\n\t\t}\n\t\tfunction useState(initialState) {\n\t\t  var dispatcher = resolveDispatcher();\n\t\t  return dispatcher.useState(initialState);\n\t\t}\n\t\tfunction useReducer(reducer, initialArg, init) {\n\t\t  var dispatcher = resolveDispatcher();\n\t\t  return dispatcher.useReducer(reducer, initialArg, init);\n\t\t}\n\t\tfunction useRef(initialValue) {\n\t\t  var dispatcher = resolveDispatcher();\n\t\t  return dispatcher.useRef(initialValue);\n\t\t}\n\t\tfunction useEffect(create, deps) {\n\t\t  var dispatcher = resolveDispatcher();\n\t\t  return dispatcher.useEffect(create, deps);\n\t\t}\n\t\tfunction useInsertionEffect(create, deps) {\n\t\t  var dispatcher = resolveDispatcher();\n\t\t  return dispatcher.useInsertionEffect(create, deps);\n\t\t}\n\t\tfunction useLayoutEffect(create, deps) {\n\t\t  var dispatcher = resolveDispatcher();\n\t\t  return dispatcher.useLayoutEffect(create, deps);\n\t\t}\n\t\tfunction useCallback(callback, deps) {\n\t\t  var dispatcher = resolveDispatcher();\n\t\t  return dispatcher.useCallback(callback, deps);\n\t\t}\n\t\tfunction useMemo(create, deps) {\n\t\t  var dispatcher = resolveDispatcher();\n\t\t  return dispatcher.useMemo(create, deps);\n\t\t}\n\t\tfunction useImperativeHandle(ref, create, deps) {\n\t\t  var dispatcher = resolveDispatcher();\n\t\t  return dispatcher.useImperativeHandle(ref, create, deps);\n\t\t}\n\t\tfunction useDebugValue(value, formatterFn) {\n\t\t  {\n\t\t    var dispatcher = resolveDispatcher();\n\t\t    return dispatcher.useDebugValue(value, formatterFn);\n\t\t  }\n\t\t}\n\t\tfunction useTransition() {\n\t\t  var dispatcher = resolveDispatcher();\n\t\t  return dispatcher.useTransition();\n\t\t}\n\t\tfunction useDeferredValue(value) {\n\t\t  var dispatcher = resolveDispatcher();\n\t\t  return dispatcher.useDeferredValue(value);\n\t\t}\n\t\tfunction useId() {\n\t\t  var dispatcher = resolveDispatcher();\n\t\t  return dispatcher.useId();\n\t\t}\n\t\tfunction useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n\t\t  var dispatcher = resolveDispatcher();\n\t\t  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n\t\t}\n\n\t\t// Helpers to patch console.logs to avoid logging during side-effect free\n\t\t// replaying on render function. This currently only patches the object\n\t\t// lazily which won't cover if the log function was extracted eagerly.\n\t\t// We could also eagerly patch the method.\n\t\tvar disabledDepth = 0;\n\t\tvar prevLog;\n\t\tvar prevInfo;\n\t\tvar prevWarn;\n\t\tvar prevError;\n\t\tvar prevGroup;\n\t\tvar prevGroupCollapsed;\n\t\tvar prevGroupEnd;\n\n\t\tfunction disabledLog() {}\n\n\t\tdisabledLog.__reactDisabledLog = true;\n\t\tfunction disableLogs() {\n\t\t  {\n\t\t    if (disabledDepth === 0) {\n\t\t      /* eslint-disable react-internal/no-production-logging */\n\t\t      prevLog = console.log;\n\t\t      prevInfo = console.info;\n\t\t      prevWarn = console.warn;\n\t\t      prevError = console.error;\n\t\t      prevGroup = console.group;\n\t\t      prevGroupCollapsed = console.groupCollapsed;\n\t\t      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n\t\t      var props = {\n\t\t        configurable: true,\n\t\t        enumerable: true,\n\t\t        value: disabledLog,\n\t\t        writable: true\n\t\t      }; // $FlowFixMe Flow thinks console is immutable.\n\n\t\t      Object.defineProperties(console, {\n\t\t        info: props,\n\t\t        log: props,\n\t\t        warn: props,\n\t\t        error: props,\n\t\t        group: props,\n\t\t        groupCollapsed: props,\n\t\t        groupEnd: props\n\t\t      });\n\t\t      /* eslint-enable react-internal/no-production-logging */\n\t\t    }\n\n\t\t    disabledDepth++;\n\t\t  }\n\t\t}\n\t\tfunction reenableLogs() {\n\t\t  {\n\t\t    disabledDepth--;\n\n\t\t    if (disabledDepth === 0) {\n\t\t      /* eslint-disable react-internal/no-production-logging */\n\t\t      var props = {\n\t\t        configurable: true,\n\t\t        enumerable: true,\n\t\t        writable: true\n\t\t      }; // $FlowFixMe Flow thinks console is immutable.\n\n\t\t      Object.defineProperties(console, {\n\t\t        log: assign({}, props, {\n\t\t          value: prevLog\n\t\t        }),\n\t\t        info: assign({}, props, {\n\t\t          value: prevInfo\n\t\t        }),\n\t\t        warn: assign({}, props, {\n\t\t          value: prevWarn\n\t\t        }),\n\t\t        error: assign({}, props, {\n\t\t          value: prevError\n\t\t        }),\n\t\t        group: assign({}, props, {\n\t\t          value: prevGroup\n\t\t        }),\n\t\t        groupCollapsed: assign({}, props, {\n\t\t          value: prevGroupCollapsed\n\t\t        }),\n\t\t        groupEnd: assign({}, props, {\n\t\t          value: prevGroupEnd\n\t\t        })\n\t\t      });\n\t\t      /* eslint-enable react-internal/no-production-logging */\n\t\t    }\n\n\t\t    if (disabledDepth < 0) {\n\t\t      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\n\t\tvar prefix;\n\t\tfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n\t\t  {\n\t\t    if (prefix === undefined) {\n\t\t      // Extract the VM specific prefix used by each line.\n\t\t      try {\n\t\t        throw Error();\n\t\t      } catch (x) {\n\t\t        var match = x.stack.trim().match(/\\n( *(at )?)/);\n\t\t        prefix = match && match[1] || '';\n\t\t      }\n\t\t    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n\t\t    return '\\n' + prefix + name;\n\t\t  }\n\t\t}\n\t\tvar reentry = false;\n\t\tvar componentFrameCache;\n\n\t\t{\n\t\t  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\t\t  componentFrameCache = new PossiblyWeakMap();\n\t\t}\n\n\t\tfunction describeNativeComponentFrame(fn, construct) {\n\t\t  // If something asked for a stack inside a fake render, it should get ignored.\n\t\t  if ( !fn || reentry) {\n\t\t    return '';\n\t\t  }\n\n\t\t  {\n\t\t    var frame = componentFrameCache.get(fn);\n\n\t\t    if (frame !== undefined) {\n\t\t      return frame;\n\t\t    }\n\t\t  }\n\n\t\t  var control;\n\t\t  reentry = true;\n\t\t  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n\t\t  Error.prepareStackTrace = undefined;\n\t\t  var previousDispatcher;\n\n\t\t  {\n\t\t    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function\n\t\t    // for warnings.\n\n\t\t    ReactCurrentDispatcher$1.current = null;\n\t\t    disableLogs();\n\t\t  }\n\n\t\t  try {\n\t\t    // This should throw.\n\t\t    if (construct) {\n\t\t      // Something should be setting the props in the constructor.\n\t\t      var Fake = function () {\n\t\t        throw Error();\n\t\t      }; // $FlowFixMe\n\n\n\t\t      Object.defineProperty(Fake.prototype, 'props', {\n\t\t        set: function () {\n\t\t          // We use a throwing setter instead of frozen or non-writable props\n\t\t          // because that won't throw in a non-strict mode function.\n\t\t          throw Error();\n\t\t        }\n\t\t      });\n\n\t\t      if (typeof Reflect === 'object' && Reflect.construct) {\n\t\t        // We construct a different control for this case to include any extra\n\t\t        // frames added by the construct call.\n\t\t        try {\n\t\t          Reflect.construct(Fake, []);\n\t\t        } catch (x) {\n\t\t          control = x;\n\t\t        }\n\n\t\t        Reflect.construct(fn, [], Fake);\n\t\t      } else {\n\t\t        try {\n\t\t          Fake.call();\n\t\t        } catch (x) {\n\t\t          control = x;\n\t\t        }\n\n\t\t        fn.call(Fake.prototype);\n\t\t      }\n\t\t    } else {\n\t\t      try {\n\t\t        throw Error();\n\t\t      } catch (x) {\n\t\t        control = x;\n\t\t      }\n\n\t\t      fn();\n\t\t    }\n\t\t  } catch (sample) {\n\t\t    // This is inlined manually because closure doesn't do it for us.\n\t\t    if (sample && control && typeof sample.stack === 'string') {\n\t\t      // This extracts the first frame from the sample that isn't also in the control.\n\t\t      // Skipping one frame that we assume is the frame that calls the two.\n\t\t      var sampleLines = sample.stack.split('\\n');\n\t\t      var controlLines = control.stack.split('\\n');\n\t\t      var s = sampleLines.length - 1;\n\t\t      var c = controlLines.length - 1;\n\n\t\t      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n\t\t        // We expect at least one stack frame to be shared.\n\t\t        // Typically this will be the root most one. However, stack frames may be\n\t\t        // cut off due to maximum stack limits. In this case, one maybe cut off\n\t\t        // earlier than the other. We assume that the sample is longer or the same\n\t\t        // and there for cut off earlier. So we should find the root most frame in\n\t\t        // the sample somewhere in the control.\n\t\t        c--;\n\t\t      }\n\n\t\t      for (; s >= 1 && c >= 0; s--, c--) {\n\t\t        // Next we find the first one that isn't the same which should be the\n\t\t        // frame that called our sample function and the control.\n\t\t        if (sampleLines[s] !== controlLines[c]) {\n\t\t          // In V8, the first line is describing the message but other VMs don't.\n\t\t          // If we're about to return the first line, and the control is also on the same\n\t\t          // line, that's a pretty good indicator that our sample threw at same line as\n\t\t          // the control. I.e. before we entered the sample frame. So we ignore this result.\n\t\t          // This can happen if you passed a class to function component, or non-function.\n\t\t          if (s !== 1 || c !== 1) {\n\t\t            do {\n\t\t              s--;\n\t\t              c--; // We may still have similar intermediate frames from the construct call.\n\t\t              // The next one that isn't the same should be our match though.\n\n\t\t              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n\t\t                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n\t\t                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n\t\t                // but we have a user-provided \"displayName\"\n\t\t                // splice it in to make the stack more readable.\n\n\n\t\t                if (fn.displayName && _frame.includes('<anonymous>')) {\n\t\t                  _frame = _frame.replace('<anonymous>', fn.displayName);\n\t\t                }\n\n\t\t                {\n\t\t                  if (typeof fn === 'function') {\n\t\t                    componentFrameCache.set(fn, _frame);\n\t\t                  }\n\t\t                } // Return the line we found.\n\n\n\t\t                return _frame;\n\t\t              }\n\t\t            } while (s >= 1 && c >= 0);\n\t\t          }\n\n\t\t          break;\n\t\t        }\n\t\t      }\n\t\t    }\n\t\t  } finally {\n\t\t    reentry = false;\n\n\t\t    {\n\t\t      ReactCurrentDispatcher$1.current = previousDispatcher;\n\t\t      reenableLogs();\n\t\t    }\n\n\t\t    Error.prepareStackTrace = previousPrepareStackTrace;\n\t\t  } // Fallback to just using the name if we couldn't make it throw.\n\n\n\t\t  var name = fn ? fn.displayName || fn.name : '';\n\t\t  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n\t\t  {\n\t\t    if (typeof fn === 'function') {\n\t\t      componentFrameCache.set(fn, syntheticFrame);\n\t\t    }\n\t\t  }\n\n\t\t  return syntheticFrame;\n\t\t}\n\t\tfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n\t\t  {\n\t\t    return describeNativeComponentFrame(fn, false);\n\t\t  }\n\t\t}\n\n\t\tfunction shouldConstruct(Component) {\n\t\t  var prototype = Component.prototype;\n\t\t  return !!(prototype && prototype.isReactComponent);\n\t\t}\n\n\t\tfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n\t\t  if (type == null) {\n\t\t    return '';\n\t\t  }\n\n\t\t  if (typeof type === 'function') {\n\t\t    {\n\t\t      return describeNativeComponentFrame(type, shouldConstruct(type));\n\t\t    }\n\t\t  }\n\n\t\t  if (typeof type === 'string') {\n\t\t    return describeBuiltInComponentFrame(type);\n\t\t  }\n\n\t\t  switch (type) {\n\t\t    case REACT_SUSPENSE_TYPE:\n\t\t      return describeBuiltInComponentFrame('Suspense');\n\n\t\t    case REACT_SUSPENSE_LIST_TYPE:\n\t\t      return describeBuiltInComponentFrame('SuspenseList');\n\t\t  }\n\n\t\t  if (typeof type === 'object') {\n\t\t    switch (type.$$typeof) {\n\t\t      case REACT_FORWARD_REF_TYPE:\n\t\t        return describeFunctionComponentFrame(type.render);\n\n\t\t      case REACT_MEMO_TYPE:\n\t\t        // Memo may contain any component type so we recursively resolve it.\n\t\t        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n\t\t      case REACT_LAZY_TYPE:\n\t\t        {\n\t\t          var lazyComponent = type;\n\t\t          var payload = lazyComponent._payload;\n\t\t          var init = lazyComponent._init;\n\n\t\t          try {\n\t\t            // Lazy may contain any component type so we recursively resolve it.\n\t\t            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n\t\t          } catch (x) {}\n\t\t        }\n\t\t    }\n\t\t  }\n\n\t\t  return '';\n\t\t}\n\n\t\tvar loggedTypeFailures = {};\n\t\tvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\n\t\tfunction setCurrentlyValidatingElement(element) {\n\t\t  {\n\t\t    if (element) {\n\t\t      var owner = element._owner;\n\t\t      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n\t\t      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n\t\t    } else {\n\t\t      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n\t\t  {\n\t\t    // $FlowFixMe This is okay but Flow doesn't know it.\n\t\t    var has = Function.call.bind(hasOwnProperty);\n\n\t\t    for (var typeSpecName in typeSpecs) {\n\t\t      if (has(typeSpecs, typeSpecName)) {\n\t\t        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n\t\t        // fail the render phase where it didn't fail before. So we log it.\n\t\t        // After these have been cleaned up, we'll let them throw.\n\n\t\t        try {\n\t\t          // This is intentionally an invariant that gets caught. It's the same\n\t\t          // behavior as without this statement except with a better message.\n\t\t          if (typeof typeSpecs[typeSpecName] !== 'function') {\n\t\t            // eslint-disable-next-line react-internal/prod-error-codes\n\t\t            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n\t\t            err.name = 'Invariant Violation';\n\t\t            throw err;\n\t\t          }\n\n\t\t          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n\t\t        } catch (ex) {\n\t\t          error$1 = ex;\n\t\t        }\n\n\t\t        if (error$1 && !(error$1 instanceof Error)) {\n\t\t          setCurrentlyValidatingElement(element);\n\n\t\t          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n\t\t          setCurrentlyValidatingElement(null);\n\t\t        }\n\n\t\t        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n\t\t          // Only monitor this failure once because there tends to be a lot of the\n\t\t          // same error.\n\t\t          loggedTypeFailures[error$1.message] = true;\n\t\t          setCurrentlyValidatingElement(element);\n\n\t\t          error('Failed %s type: %s', location, error$1.message);\n\n\t\t          setCurrentlyValidatingElement(null);\n\t\t        }\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tfunction setCurrentlyValidatingElement$1(element) {\n\t\t  {\n\t\t    if (element) {\n\t\t      var owner = element._owner;\n\t\t      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n\t\t      setExtraStackFrame(stack);\n\t\t    } else {\n\t\t      setExtraStackFrame(null);\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tvar propTypesMisspellWarningShown;\n\n\t\t{\n\t\t  propTypesMisspellWarningShown = false;\n\t\t}\n\n\t\tfunction getDeclarationErrorAddendum() {\n\t\t  if (ReactCurrentOwner.current) {\n\t\t    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n\t\t    if (name) {\n\t\t      return '\\n\\nCheck the render method of `' + name + '`.';\n\t\t    }\n\t\t  }\n\n\t\t  return '';\n\t\t}\n\n\t\tfunction getSourceInfoErrorAddendum(source) {\n\t\t  if (source !== undefined) {\n\t\t    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n\t\t    var lineNumber = source.lineNumber;\n\t\t    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n\t\t  }\n\n\t\t  return '';\n\t\t}\n\n\t\tfunction getSourceInfoErrorAddendumForProps(elementProps) {\n\t\t  if (elementProps !== null && elementProps !== undefined) {\n\t\t    return getSourceInfoErrorAddendum(elementProps.__source);\n\t\t  }\n\n\t\t  return '';\n\t\t}\n\t\t/**\n\t\t * Warn if there's no key explicitly set on dynamic arrays of children or\n\t\t * object keys are not valid. This allows us to keep track of children between\n\t\t * updates.\n\t\t */\n\n\n\t\tvar ownerHasKeyUseWarning = {};\n\n\t\tfunction getCurrentComponentErrorInfo(parentType) {\n\t\t  var info = getDeclarationErrorAddendum();\n\n\t\t  if (!info) {\n\t\t    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n\t\t    if (parentName) {\n\t\t      info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n\t\t    }\n\t\t  }\n\n\t\t  return info;\n\t\t}\n\t\t/**\n\t\t * Warn if the element doesn't have an explicit key assigned to it.\n\t\t * This element is in an array. The array could grow and shrink or be\n\t\t * reordered. All children that haven't already been validated are required to\n\t\t * have a \"key\" property assigned to it. Error statuses are cached so a warning\n\t\t * will only be shown once.\n\t\t *\n\t\t * @internal\n\t\t * @param {ReactElement} element Element that requires a key.\n\t\t * @param {*} parentType element's parent's type.\n\t\t */\n\n\n\t\tfunction validateExplicitKey(element, parentType) {\n\t\t  if (!element._store || element._store.validated || element.key != null) {\n\t\t    return;\n\t\t  }\n\n\t\t  element._store.validated = true;\n\t\t  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n\t\t  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n\t\t    return;\n\t\t  }\n\n\t\t  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n\t\t  // property, it may be the creator of the child that's responsible for\n\t\t  // assigning it a key.\n\n\t\t  var childOwner = '';\n\n\t\t  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n\t\t    // Give the component that originally created this child.\n\t\t    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n\t\t  }\n\n\t\t  {\n\t\t    setCurrentlyValidatingElement$1(element);\n\n\t\t    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n\t\t    setCurrentlyValidatingElement$1(null);\n\t\t  }\n\t\t}\n\t\t/**\n\t\t * Ensure that every element either is passed in a static location, in an\n\t\t * array with an explicit keys property defined, or in an object literal\n\t\t * with valid key property.\n\t\t *\n\t\t * @internal\n\t\t * @param {ReactNode} node Statically passed child of any type.\n\t\t * @param {*} parentType node's parent's type.\n\t\t */\n\n\n\t\tfunction validateChildKeys(node, parentType) {\n\t\t  if (typeof node !== 'object') {\n\t\t    return;\n\t\t  }\n\n\t\t  if (isArray(node)) {\n\t\t    for (var i = 0; i < node.length; i++) {\n\t\t      var child = node[i];\n\n\t\t      if (isValidElement(child)) {\n\t\t        validateExplicitKey(child, parentType);\n\t\t      }\n\t\t    }\n\t\t  } else if (isValidElement(node)) {\n\t\t    // This element was passed in a valid location.\n\t\t    if (node._store) {\n\t\t      node._store.validated = true;\n\t\t    }\n\t\t  } else if (node) {\n\t\t    var iteratorFn = getIteratorFn(node);\n\n\t\t    if (typeof iteratorFn === 'function') {\n\t\t      // Entry iterators used to provide implicit keys,\n\t\t      // but now we print a separate warning for them later.\n\t\t      if (iteratorFn !== node.entries) {\n\t\t        var iterator = iteratorFn.call(node);\n\t\t        var step;\n\n\t\t        while (!(step = iterator.next()).done) {\n\t\t          if (isValidElement(step.value)) {\n\t\t            validateExplicitKey(step.value, parentType);\n\t\t          }\n\t\t        }\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t}\n\t\t/**\n\t\t * Given an element, validate that its props follow the propTypes definition,\n\t\t * provided by the type.\n\t\t *\n\t\t * @param {ReactElement} element\n\t\t */\n\n\n\t\tfunction validatePropTypes(element) {\n\t\t  {\n\t\t    var type = element.type;\n\n\t\t    if (type === null || type === undefined || typeof type === 'string') {\n\t\t      return;\n\t\t    }\n\n\t\t    var propTypes;\n\n\t\t    if (typeof type === 'function') {\n\t\t      propTypes = type.propTypes;\n\t\t    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n\t\t    // Inner props are checked in the reconciler.\n\t\t    type.$$typeof === REACT_MEMO_TYPE)) {\n\t\t      propTypes = type.propTypes;\n\t\t    } else {\n\t\t      return;\n\t\t    }\n\n\t\t    if (propTypes) {\n\t\t      // Intentionally inside to avoid triggering lazy initializers:\n\t\t      var name = getComponentNameFromType(type);\n\t\t      checkPropTypes(propTypes, element.props, 'prop', name, element);\n\t\t    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n\t\t      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n\t\t      var _name = getComponentNameFromType(type);\n\n\t\t      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n\t\t    }\n\n\t\t    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n\t\t      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n\t\t    }\n\t\t  }\n\t\t}\n\t\t/**\n\t\t * Given a fragment, validate that it can only be provided with fragment props\n\t\t * @param {ReactElement} fragment\n\t\t */\n\n\n\t\tfunction validateFragmentProps(fragment) {\n\t\t  {\n\t\t    var keys = Object.keys(fragment.props);\n\n\t\t    for (var i = 0; i < keys.length; i++) {\n\t\t      var key = keys[i];\n\n\t\t      if (key !== 'children' && key !== 'key') {\n\t\t        setCurrentlyValidatingElement$1(fragment);\n\n\t\t        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n\t\t        setCurrentlyValidatingElement$1(null);\n\t\t        break;\n\t\t      }\n\t\t    }\n\n\t\t    if (fragment.ref !== null) {\n\t\t      setCurrentlyValidatingElement$1(fragment);\n\n\t\t      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n\t\t      setCurrentlyValidatingElement$1(null);\n\t\t    }\n\t\t  }\n\t\t}\n\t\tfunction createElementWithValidation(type, props, children) {\n\t\t  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n\t\t  // succeed and there will likely be errors in render.\n\n\t\t  if (!validType) {\n\t\t    var info = '';\n\n\t\t    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n\t\t      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n\t\t    }\n\n\t\t    var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n\t\t    if (sourceInfo) {\n\t\t      info += sourceInfo;\n\t\t    } else {\n\t\t      info += getDeclarationErrorAddendum();\n\t\t    }\n\n\t\t    var typeString;\n\n\t\t    if (type === null) {\n\t\t      typeString = 'null';\n\t\t    } else if (isArray(type)) {\n\t\t      typeString = 'array';\n\t\t    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n\t\t      typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n\t\t      info = ' Did you accidentally export a JSX literal instead of a component?';\n\t\t    } else {\n\t\t      typeString = typeof type;\n\t\t    }\n\n\t\t    {\n\t\t      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n\t\t    }\n\t\t  }\n\n\t\t  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n\t\t  // TODO: Drop this when these are no longer allowed as the type argument.\n\n\t\t  if (element == null) {\n\t\t    return element;\n\t\t  } // Skip key warning if the type isn't valid since our key validation logic\n\t\t  // doesn't expect a non-string/function type and can throw confusing errors.\n\t\t  // We don't want exception behavior to differ between dev and prod.\n\t\t  // (Rendering will throw with a helpful message and as soon as the type is\n\t\t  // fixed, the key warnings will appear.)\n\n\n\t\t  if (validType) {\n\t\t    for (var i = 2; i < arguments.length; i++) {\n\t\t      validateChildKeys(arguments[i], type);\n\t\t    }\n\t\t  }\n\n\t\t  if (type === REACT_FRAGMENT_TYPE) {\n\t\t    validateFragmentProps(element);\n\t\t  } else {\n\t\t    validatePropTypes(element);\n\t\t  }\n\n\t\t  return element;\n\t\t}\n\t\tvar didWarnAboutDeprecatedCreateFactory = false;\n\t\tfunction createFactoryWithValidation(type) {\n\t\t  var validatedFactory = createElementWithValidation.bind(null, type);\n\t\t  validatedFactory.type = type;\n\n\t\t  {\n\t\t    if (!didWarnAboutDeprecatedCreateFactory) {\n\t\t      didWarnAboutDeprecatedCreateFactory = true;\n\n\t\t      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');\n\t\t    } // Legacy hook: remove it\n\n\n\t\t    Object.defineProperty(validatedFactory, 'type', {\n\t\t      enumerable: false,\n\t\t      get: function () {\n\t\t        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n\n\t\t        Object.defineProperty(this, 'type', {\n\t\t          value: type\n\t\t        });\n\t\t        return type;\n\t\t      }\n\t\t    });\n\t\t  }\n\n\t\t  return validatedFactory;\n\t\t}\n\t\tfunction cloneElementWithValidation(element, props, children) {\n\t\t  var newElement = cloneElement.apply(this, arguments);\n\n\t\t  for (var i = 2; i < arguments.length; i++) {\n\t\t    validateChildKeys(arguments[i], newElement.type);\n\t\t  }\n\n\t\t  validatePropTypes(newElement);\n\t\t  return newElement;\n\t\t}\n\n\t\tfunction startTransition(scope, options) {\n\t\t  var prevTransition = ReactCurrentBatchConfig.transition;\n\t\t  ReactCurrentBatchConfig.transition = {};\n\t\t  var currentTransition = ReactCurrentBatchConfig.transition;\n\n\t\t  {\n\t\t    ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n\t\t  }\n\n\t\t  try {\n\t\t    scope();\n\t\t  } finally {\n\t\t    ReactCurrentBatchConfig.transition = prevTransition;\n\n\t\t    {\n\t\t      if (prevTransition === null && currentTransition._updatedFibers) {\n\t\t        var updatedFibersCount = currentTransition._updatedFibers.size;\n\n\t\t        if (updatedFibersCount > 10) {\n\t\t          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n\t\t        }\n\n\t\t        currentTransition._updatedFibers.clear();\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tvar didWarnAboutMessageChannel = false;\n\t\tvar enqueueTaskImpl = null;\n\t\tfunction enqueueTask(task) {\n\t\t  if (enqueueTaskImpl === null) {\n\t\t    try {\n\t\t      // read require off the module object to get around the bundlers.\n\t\t      // we don't want them to detect a require and bundle a Node polyfill.\n\t\t      var requireString = ('require' + Math.random()).slice(0, 7);\n\t\t      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's\n\t\t      // version of setImmediate, bypassing fake timers if any.\n\n\t\t      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;\n\t\t    } catch (_err) {\n\t\t      // we're in a browser\n\t\t      // we can't use regular timers because they may still be faked\n\t\t      // so we try MessageChannel+postMessage instead\n\t\t      enqueueTaskImpl = function (callback) {\n\t\t        {\n\t\t          if (didWarnAboutMessageChannel === false) {\n\t\t            didWarnAboutMessageChannel = true;\n\n\t\t            if (typeof MessageChannel === 'undefined') {\n\t\t              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');\n\t\t            }\n\t\t          }\n\t\t        }\n\n\t\t        var channel = new MessageChannel();\n\t\t        channel.port1.onmessage = callback;\n\t\t        channel.port2.postMessage(undefined);\n\t\t      };\n\t\t    }\n\t\t  }\n\n\t\t  return enqueueTaskImpl(task);\n\t\t}\n\n\t\tvar actScopeDepth = 0;\n\t\tvar didWarnNoAwaitAct = false;\n\t\tfunction act(callback) {\n\t\t  {\n\t\t    // `act` calls can be nested, so we track the depth. This represents the\n\t\t    // number of `act` scopes on the stack.\n\t\t    var prevActScopeDepth = actScopeDepth;\n\t\t    actScopeDepth++;\n\n\t\t    if (ReactCurrentActQueue.current === null) {\n\t\t      // This is the outermost `act` scope. Initialize the queue. The reconciler\n\t\t      // will detect the queue and use it instead of Scheduler.\n\t\t      ReactCurrentActQueue.current = [];\n\t\t    }\n\n\t\t    var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;\n\t\t    var result;\n\n\t\t    try {\n\t\t      // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only\n\t\t      // set to `true` while the given callback is executed, not for updates\n\t\t      // triggered during an async event, because this is how the legacy\n\t\t      // implementation of `act` behaved.\n\t\t      ReactCurrentActQueue.isBatchingLegacy = true;\n\t\t      result = callback(); // Replicate behavior of original `act` implementation in legacy mode,\n\t\t      // which flushed updates immediately after the scope function exits, even\n\t\t      // if it's an async function.\n\n\t\t      if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {\n\t\t        var queue = ReactCurrentActQueue.current;\n\n\t\t        if (queue !== null) {\n\t\t          ReactCurrentActQueue.didScheduleLegacyUpdate = false;\n\t\t          flushActQueue(queue);\n\t\t        }\n\t\t      }\n\t\t    } catch (error) {\n\t\t      popActScope(prevActScopeDepth);\n\t\t      throw error;\n\t\t    } finally {\n\t\t      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;\n\t\t    }\n\n\t\t    if (result !== null && typeof result === 'object' && typeof result.then === 'function') {\n\t\t      var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait\n\t\t      // for it to resolve before exiting the current scope.\n\n\t\t      var wasAwaited = false;\n\t\t      var thenable = {\n\t\t        then: function (resolve, reject) {\n\t\t          wasAwaited = true;\n\t\t          thenableResult.then(function (returnValue) {\n\t\t            popActScope(prevActScopeDepth);\n\n\t\t            if (actScopeDepth === 0) {\n\t\t              // We've exited the outermost act scope. Recursively flush the\n\t\t              // queue until there's no remaining work.\n\t\t              recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n\t\t            } else {\n\t\t              resolve(returnValue);\n\t\t            }\n\t\t          }, function (error) {\n\t\t            // The callback threw an error.\n\t\t            popActScope(prevActScopeDepth);\n\t\t            reject(error);\n\t\t          });\n\t\t        }\n\t\t      };\n\n\t\t      {\n\t\t        if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {\n\t\t          // eslint-disable-next-line no-undef\n\t\t          Promise.resolve().then(function () {}).then(function () {\n\t\t            if (!wasAwaited) {\n\t\t              didWarnNoAwaitAct = true;\n\n\t\t              error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');\n\t\t            }\n\t\t          });\n\t\t        }\n\t\t      }\n\n\t\t      return thenable;\n\t\t    } else {\n\t\t      var returnValue = result; // The callback is not an async function. Exit the current scope\n\t\t      // immediately, without awaiting.\n\n\t\t      popActScope(prevActScopeDepth);\n\n\t\t      if (actScopeDepth === 0) {\n\t\t        // Exiting the outermost act scope. Flush the queue.\n\t\t        var _queue = ReactCurrentActQueue.current;\n\n\t\t        if (_queue !== null) {\n\t\t          flushActQueue(_queue);\n\t\t          ReactCurrentActQueue.current = null;\n\t\t        } // Return a thenable. If the user awaits it, we'll flush again in\n\t\t        // case additional work was scheduled by a microtask.\n\n\n\t\t        var _thenable = {\n\t\t          then: function (resolve, reject) {\n\t\t            // Confirm we haven't re-entered another `act` scope, in case\n\t\t            // the user does something weird like await the thenable\n\t\t            // multiple times.\n\t\t            if (ReactCurrentActQueue.current === null) {\n\t\t              // Recursively flush the queue until there's no remaining work.\n\t\t              ReactCurrentActQueue.current = [];\n\t\t              recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n\t\t            } else {\n\t\t              resolve(returnValue);\n\t\t            }\n\t\t          }\n\t\t        };\n\t\t        return _thenable;\n\t\t      } else {\n\t\t        // Since we're inside a nested `act` scope, the returned thenable\n\t\t        // immediately resolves. The outer scope will flush the queue.\n\t\t        var _thenable2 = {\n\t\t          then: function (resolve, reject) {\n\t\t            resolve(returnValue);\n\t\t          }\n\t\t        };\n\t\t        return _thenable2;\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tfunction popActScope(prevActScopeDepth) {\n\t\t  {\n\t\t    if (prevActScopeDepth !== actScopeDepth - 1) {\n\t\t      error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');\n\t\t    }\n\n\t\t    actScopeDepth = prevActScopeDepth;\n\t\t  }\n\t\t}\n\n\t\tfunction recursivelyFlushAsyncActWork(returnValue, resolve, reject) {\n\t\t  {\n\t\t    var queue = ReactCurrentActQueue.current;\n\n\t\t    if (queue !== null) {\n\t\t      try {\n\t\t        flushActQueue(queue);\n\t\t        enqueueTask(function () {\n\t\t          if (queue.length === 0) {\n\t\t            // No additional work was scheduled. Finish.\n\t\t            ReactCurrentActQueue.current = null;\n\t\t            resolve(returnValue);\n\t\t          } else {\n\t\t            // Keep flushing work until there's none left.\n\t\t            recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n\t\t          }\n\t\t        });\n\t\t      } catch (error) {\n\t\t        reject(error);\n\t\t      }\n\t\t    } else {\n\t\t      resolve(returnValue);\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tvar isFlushing = false;\n\n\t\tfunction flushActQueue(queue) {\n\t\t  {\n\t\t    if (!isFlushing) {\n\t\t      // Prevent re-entrance.\n\t\t      isFlushing = true;\n\t\t      var i = 0;\n\n\t\t      try {\n\t\t        for (; i < queue.length; i++) {\n\t\t          var callback = queue[i];\n\n\t\t          do {\n\t\t            callback = callback(true);\n\t\t          } while (callback !== null);\n\t\t        }\n\n\t\t        queue.length = 0;\n\t\t      } catch (error) {\n\t\t        // If something throws, leave the remaining callbacks on the queue.\n\t\t        queue = queue.slice(i + 1);\n\t\t        throw error;\n\t\t      } finally {\n\t\t        isFlushing = false;\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tvar createElement$1 =  createElementWithValidation ;\n\t\tvar cloneElement$1 =  cloneElementWithValidation ;\n\t\tvar createFactory =  createFactoryWithValidation ;\n\t\tvar Children = {\n\t\t  map: mapChildren,\n\t\t  forEach: forEachChildren,\n\t\t  count: countChildren,\n\t\t  toArray: toArray,\n\t\t  only: onlyChild\n\t\t};\n\n\t\texports.Children = Children;\n\t\texports.Component = Component;\n\t\texports.Fragment = REACT_FRAGMENT_TYPE;\n\t\texports.Profiler = REACT_PROFILER_TYPE;\n\t\texports.PureComponent = PureComponent;\n\t\texports.StrictMode = REACT_STRICT_MODE_TYPE;\n\t\texports.Suspense = REACT_SUSPENSE_TYPE;\n\t\texports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\n\t\texports.cloneElement = cloneElement$1;\n\t\texports.createContext = createContext;\n\t\texports.createElement = createElement$1;\n\t\texports.createFactory = createFactory;\n\t\texports.createRef = createRef;\n\t\texports.forwardRef = forwardRef;\n\t\texports.isValidElement = isValidElement;\n\t\texports.lazy = lazy;\n\t\texports.memo = memo;\n\t\texports.startTransition = startTransition;\n\t\texports.unstable_act = act;\n\t\texports.useCallback = useCallback;\n\t\texports.useContext = useContext;\n\t\texports.useDebugValue = useDebugValue;\n\t\texports.useDeferredValue = useDeferredValue;\n\t\texports.useEffect = useEffect;\n\t\texports.useId = useId;\n\t\texports.useImperativeHandle = useImperativeHandle;\n\t\texports.useInsertionEffect = useInsertionEffect;\n\t\texports.useLayoutEffect = useLayoutEffect;\n\t\texports.useMemo = useMemo;\n\t\texports.useReducer = useReducer;\n\t\texports.useRef = useRef;\n\t\texports.useState = useState;\n\t\texports.useSyncExternalStore = useSyncExternalStore;\n\t\texports.useTransition = useTransition;\n\t\texports.version = ReactVersion;\n\t\t          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\t\tif (\n\t\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n\t\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n\t\t    'function'\n\t\t) {\n\t\t  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n\t\t}\n\t\t        \n\t\t  })();\n\t\t}\n} (react_development, react_development.exports));\n\treturn react_development.exports;\n}\n\nvar hasRequiredReact;\n\nfunction requireReact () {\n\tif (hasRequiredReact) return react.exports;\n\thasRequiredReact = 1;\n\t(function (module) {\n\n\t\t{\n\t\t  module.exports = requireReact_development();\n\t\t}\n} (react));\n\treturn react.exports;\n}\n\nvar reactExports = requireReact();\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\nvar ReactEcs$1;\n(function (ReactEcs) {\n    ReactEcs.createElement = reactExports.createElement;\n})(ReactEcs$1 || (ReactEcs$1 = {}));\n\n/* eslint-disable */\nvar YGPositionType;\n(function (YGPositionType) {\n    YGPositionType[YGPositionType[\"YGPT_RELATIVE\"] = 0] = \"YGPT_RELATIVE\";\n    YGPositionType[YGPositionType[\"YGPT_ABSOLUTE\"] = 1] = \"YGPT_ABSOLUTE\";\n    YGPositionType[YGPositionType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(YGPositionType || (YGPositionType = {}));\nvar YGAlign;\n(function (YGAlign) {\n    YGAlign[YGAlign[\"YGA_AUTO\"] = 0] = \"YGA_AUTO\";\n    YGAlign[YGAlign[\"YGA_FLEX_START\"] = 1] = \"YGA_FLEX_START\";\n    YGAlign[YGAlign[\"YGA_CENTER\"] = 2] = \"YGA_CENTER\";\n    YGAlign[YGAlign[\"YGA_FLEX_END\"] = 3] = \"YGA_FLEX_END\";\n    YGAlign[YGAlign[\"YGA_STRETCH\"] = 4] = \"YGA_STRETCH\";\n    YGAlign[YGAlign[\"YGA_BASELINE\"] = 5] = \"YGA_BASELINE\";\n    YGAlign[YGAlign[\"YGA_SPACE_BETWEEN\"] = 6] = \"YGA_SPACE_BETWEEN\";\n    YGAlign[YGAlign[\"YGA_SPACE_AROUND\"] = 7] = \"YGA_SPACE_AROUND\";\n    YGAlign[YGAlign[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(YGAlign || (YGAlign = {}));\nvar YGUnit;\n(function (YGUnit) {\n    YGUnit[YGUnit[\"YGU_UNDEFINED\"] = 0] = \"YGU_UNDEFINED\";\n    YGUnit[YGUnit[\"YGU_POINT\"] = 1] = \"YGU_POINT\";\n    YGUnit[YGUnit[\"YGU_PERCENT\"] = 2] = \"YGU_PERCENT\";\n    YGUnit[YGUnit[\"YGU_AUTO\"] = 3] = \"YGU_AUTO\";\n    YGUnit[YGUnit[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(YGUnit || (YGUnit = {}));\nvar YGFlexDirection;\n(function (YGFlexDirection) {\n    YGFlexDirection[YGFlexDirection[\"YGFD_ROW\"] = 0] = \"YGFD_ROW\";\n    YGFlexDirection[YGFlexDirection[\"YGFD_COLUMN\"] = 1] = \"YGFD_COLUMN\";\n    YGFlexDirection[YGFlexDirection[\"YGFD_COLUMN_REVERSE\"] = 2] = \"YGFD_COLUMN_REVERSE\";\n    YGFlexDirection[YGFlexDirection[\"YGFD_ROW_REVERSE\"] = 3] = \"YGFD_ROW_REVERSE\";\n    YGFlexDirection[YGFlexDirection[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(YGFlexDirection || (YGFlexDirection = {}));\nvar YGWrap;\n(function (YGWrap) {\n    YGWrap[YGWrap[\"YGW_NO_WRAP\"] = 0] = \"YGW_NO_WRAP\";\n    YGWrap[YGWrap[\"YGW_WRAP\"] = 1] = \"YGW_WRAP\";\n    YGWrap[YGWrap[\"YGW_WRAP_REVERSE\"] = 2] = \"YGW_WRAP_REVERSE\";\n    YGWrap[YGWrap[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(YGWrap || (YGWrap = {}));\nvar YGJustify;\n(function (YGJustify) {\n    YGJustify[YGJustify[\"YGJ_FLEX_START\"] = 0] = \"YGJ_FLEX_START\";\n    YGJustify[YGJustify[\"YGJ_CENTER\"] = 1] = \"YGJ_CENTER\";\n    YGJustify[YGJustify[\"YGJ_FLEX_END\"] = 2] = \"YGJ_FLEX_END\";\n    YGJustify[YGJustify[\"YGJ_SPACE_BETWEEN\"] = 3] = \"YGJ_SPACE_BETWEEN\";\n    YGJustify[YGJustify[\"YGJ_SPACE_AROUND\"] = 4] = \"YGJ_SPACE_AROUND\";\n    YGJustify[YGJustify[\"YGJ_SPACE_EVENLY\"] = 5] = \"YGJ_SPACE_EVENLY\";\n    YGJustify[YGJustify[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(YGJustify || (YGJustify = {}));\nvar YGOverflow;\n(function (YGOverflow) {\n    YGOverflow[YGOverflow[\"YGO_VISIBLE\"] = 0] = \"YGO_VISIBLE\";\n    YGOverflow[YGOverflow[\"YGO_HIDDEN\"] = 1] = \"YGO_HIDDEN\";\n    YGOverflow[YGOverflow[\"YGO_SCROLL\"] = 2] = \"YGO_SCROLL\";\n    YGOverflow[YGOverflow[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(YGOverflow || (YGOverflow = {}));\nvar YGDisplay;\n(function (YGDisplay) {\n    YGDisplay[YGDisplay[\"YGD_FLEX\"] = 0] = \"YGD_FLEX\";\n    YGDisplay[YGDisplay[\"YGD_NONE\"] = 1] = \"YGD_NONE\";\n    YGDisplay[YGDisplay[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(YGDisplay || (YGDisplay = {}));\nvar YGEdge;\n(function (YGEdge) {\n    YGEdge[YGEdge[\"YGE_LEFT\"] = 0] = \"YGE_LEFT\";\n    YGEdge[YGEdge[\"YGE_TOP\"] = 1] = \"YGE_TOP\";\n    YGEdge[YGEdge[\"YGE_RIGHT\"] = 2] = \"YGE_RIGHT\";\n    YGEdge[YGEdge[\"YGE_BOTTOM\"] = 3] = \"YGE_BOTTOM\";\n    YGEdge[YGEdge[\"YGE_START\"] = 4] = \"YGE_START\";\n    YGEdge[YGEdge[\"YGE_END\"] = 5] = \"YGE_END\";\n    YGEdge[YGEdge[\"YGE_HORIZONTAL\"] = 6] = \"YGE_HORIZONTAL\";\n    YGEdge[YGEdge[\"YGE_VERTICAL\"] = 7] = \"YGE_VERTICAL\";\n    YGEdge[YGEdge[\"YGE_ALL\"] = 8] = \"YGE_ALL\";\n    YGEdge[YGEdge[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(YGEdge || (YGEdge = {}));\n\nfunction capitalize(value) {\n    return `${value[0].toUpperCase()}${value.slice(1, value.length)}`;\n}\nfunction isPercent(val) {\n    return typeof val === 'string' && val.endsWith('%');\n}\nfunction isPoint(val) {\n    return typeof val === 'string' && val.endsWith('px');\n}\nfunction parsePositionUnit(val) {\n    function getValue(key, value) {\n        return Number(value.slice(0, value.indexOf(key)));\n    }\n    if (val === undefined || val === null) {\n        return [undefined, YGUnit.YGU_UNDEFINED];\n    }\n    if (typeof val === 'number') {\n        return [Number(val), YGUnit.YGU_POINT];\n    }\n    if (isPercent(val)) {\n        return [getValue('%', val), YGUnit.YGU_PERCENT];\n    }\n    if (isPoint(val)) {\n        return [getValue('px', val), YGUnit.YGU_POINT];\n    }\n    return [undefined, YGUnit.YGU_UNDEFINED];\n}\n// position: { top: '1px' } => { positionTop: 1, positionTopUnit: YGUnit.YGU_Point }\nfunction parsePosition(position = {}, prop) {\n    const obj = {};\n    for (const key in position) {\n        const typedKey = key;\n        const propKey = `${prop}${capitalize(typedKey)}`;\n        const propKeyUnit = `${prop}${capitalize(typedKey)}Unit`;\n        const [value, unit] = parsePositionUnit(position[typedKey]);\n        if (value === undefined)\n            continue;\n        obj[propKeyUnit] = unit;\n        obj[propKey] = value;\n    }\n    return obj;\n}\nfunction parseSize(val, key) {\n    const unitKey = `${key}Unit`;\n    const [value, unit] = parsePositionUnit(val);\n    if (value === undefined)\n        return {};\n    return {\n        [key]: value,\n        [unitKey]: unit\n    };\n}\n\nconst CANVAS_ROOT_ENTITY = 0;\n/**\n * @public\n */\nfunction parseUiTransform(props = {}) {\n    const { position, padding, margin, height, minHeight, maxHeight, width, maxWidth, minWidth, ...otherProps } = props;\n    return {\n        ...defaultUiTransform,\n        ...otherProps,\n        ...parsePosition(position, 'position'),\n        ...parsePosition(margin, 'margin'),\n        ...parsePosition(padding, 'padding'),\n        ...parseSize(height, 'height'),\n        ...parseSize(minHeight, 'minHeight'),\n        ...parseSize(maxHeight, 'maxHeight'),\n        ...parseSize(width, 'width'),\n        ...parseSize(minWidth, 'minWidth'),\n        ...parseSize(maxWidth, 'maxWidth')\n    };\n}\nconst defaultUiTransform = {\n    parent: CANVAS_ROOT_ENTITY,\n    rightOf: 0,\n    display: YGDisplay.YGD_FLEX,\n    flexBasis: 0,\n    width: 0,\n    height: 0,\n    minWidth: 0,\n    minHeight: 0,\n    maxWidth: 0,\n    maxHeight: 0,\n    justifyContent: YGJustify.YGJ_FLEX_START,\n    alignSelf: YGAlign.YGA_AUTO,\n    flexDirection: YGFlexDirection.YGFD_ROW,\n    positionType: YGPositionType.YGPT_RELATIVE,\n    flexGrow: 0,\n    marginBottom: 0,\n    marginBottomUnit: YGUnit.YGU_UNDEFINED,\n    marginLeft: 0,\n    marginLeftUnit: YGUnit.YGU_UNDEFINED,\n    marginRight: 0,\n    marginRightUnit: YGUnit.YGU_UNDEFINED,\n    marginTop: 0,\n    marginTopUnit: YGUnit.YGU_UNDEFINED,\n    maxHeightUnit: YGUnit.YGU_UNDEFINED,\n    maxWidthUnit: YGUnit.YGU_UNDEFINED,\n    minHeightUnit: YGUnit.YGU_UNDEFINED,\n    minWidthUnit: YGUnit.YGU_UNDEFINED,\n    overflow: YGOverflow.YGO_VISIBLE,\n    paddingBottom: 0,\n    paddingBottomUnit: YGUnit.YGU_PERCENT,\n    paddingLeft: 0,\n    paddingLeftUnit: YGUnit.YGU_UNDEFINED,\n    paddingTopUnit: YGUnit.YGU_UNDEFINED,\n    paddingRight: 0,\n    paddingRightUnit: YGUnit.YGU_UNDEFINED,\n    paddingTop: 0,\n    positionBottom: 0,\n    positionBottomUnit: YGUnit.YGU_UNDEFINED,\n    positionLeft: 0,\n    positionLeftUnit: YGUnit.YGU_UNDEFINED,\n    positionRight: 0,\n    positionRightUnit: YGUnit.YGU_UNDEFINED,\n    positionTop: 0,\n    positionTopUnit: YGUnit.YGU_UNDEFINED,\n    flexBasisUnit: YGUnit.YGU_UNDEFINED,\n    widthUnit: YGUnit.YGU_UNDEFINED,\n    heightUnit: YGUnit.YGU_UNDEFINED\n};\n\n/* eslint-disable */\nvar TextAlignMode;\n(function (TextAlignMode) {\n    TextAlignMode[TextAlignMode[\"TAM_TOP_LEFT\"] = 0] = \"TAM_TOP_LEFT\";\n    TextAlignMode[TextAlignMode[\"TAM_TOP_CENTER\"] = 1] = \"TAM_TOP_CENTER\";\n    TextAlignMode[TextAlignMode[\"TAM_TOP_RIGHT\"] = 2] = \"TAM_TOP_RIGHT\";\n    TextAlignMode[TextAlignMode[\"TAM_MIDDLE_LEFT\"] = 3] = \"TAM_MIDDLE_LEFT\";\n    TextAlignMode[TextAlignMode[\"TAM_MIDDLE_CENTER\"] = 4] = \"TAM_MIDDLE_CENTER\";\n    TextAlignMode[TextAlignMode[\"TAM_MIDDLE_RIGHT\"] = 5] = \"TAM_MIDDLE_RIGHT\";\n    TextAlignMode[TextAlignMode[\"TAM_BOTTOM_LEFT\"] = 6] = \"TAM_BOTTOM_LEFT\";\n    TextAlignMode[TextAlignMode[\"TAM_BOTTOM_CENTER\"] = 7] = \"TAM_BOTTOM_CENTER\";\n    TextAlignMode[TextAlignMode[\"TAM_BOTTOM_RIGHT\"] = 8] = \"TAM_BOTTOM_RIGHT\";\n    TextAlignMode[TextAlignMode[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(TextAlignMode || (TextAlignMode = {}));\nvar Font;\n(function (Font) {\n    Font[Font[\"F_LIBERATION_SANS\"] = 0] = \"F_LIBERATION_SANS\";\n    Font[Font[\"F_SANS_SERIF\"] = 1] = \"F_SANS_SERIF\";\n    Font[Font[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(Font || (Font = {}));\n\nconst listeners = {\n    onClick: undefined\n};\nconst listenersKey = Object.keys(listeners);\nconst isListener = (key) => listenersKey.includes(key);\n\n/**\n * @public\n */\nfunction UiEntity(props) {\n    const { uiTransform, ...otherProps } = props;\n    const uiTransformProps = parseUiTransform(uiTransform);\n    return ReactEcs$1.createElement(\"entity\", { uiTransform: uiTransformProps, ...otherProps });\n}\nfunction Container({ width, height, children }) {\n    return (ReactEcs$1.createElement(UiEntity, { uiTransform: { width, height, display: YGDisplay.YGD_FLEX } }, children));\n}\n\nvar reactReconciler = {exports: {}};\n\nvar reactReconciler_development = {exports: {}};\n\nvar scheduler = {exports: {}};\n\nvar scheduler_development = {};\n\n/**\n * @license React\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredScheduler_development;\n\nfunction requireScheduler_development () {\n\tif (hasRequiredScheduler_development) return scheduler_development;\n\thasRequiredScheduler_development = 1;\n\t(function (exports) {\n\n\t\t{\n\t\t  (function() {\n\n\t\t/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\t\tif (\n\t\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n\t\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n\t\t    'function'\n\t\t) {\n\t\t  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n\t\t}\n\t\t          var enableSchedulerDebugging = false;\n\t\tvar enableProfiling = false;\n\t\tvar frameYieldMs = 5;\n\n\t\tfunction push(heap, node) {\n\t\t  var index = heap.length;\n\t\t  heap.push(node);\n\t\t  siftUp(heap, node, index);\n\t\t}\n\t\tfunction peek(heap) {\n\t\t  return heap.length === 0 ? null : heap[0];\n\t\t}\n\t\tfunction pop(heap) {\n\t\t  if (heap.length === 0) {\n\t\t    return null;\n\t\t  }\n\n\t\t  var first = heap[0];\n\t\t  var last = heap.pop();\n\n\t\t  if (last !== first) {\n\t\t    heap[0] = last;\n\t\t    siftDown(heap, last, 0);\n\t\t  }\n\n\t\t  return first;\n\t\t}\n\n\t\tfunction siftUp(heap, node, i) {\n\t\t  var index = i;\n\n\t\t  while (index > 0) {\n\t\t    var parentIndex = index - 1 >>> 1;\n\t\t    var parent = heap[parentIndex];\n\n\t\t    if (compare(parent, node) > 0) {\n\t\t      // The parent is larger. Swap positions.\n\t\t      heap[parentIndex] = node;\n\t\t      heap[index] = parent;\n\t\t      index = parentIndex;\n\t\t    } else {\n\t\t      // The parent is smaller. Exit.\n\t\t      return;\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tfunction siftDown(heap, node, i) {\n\t\t  var index = i;\n\t\t  var length = heap.length;\n\t\t  var halfLength = length >>> 1;\n\n\t\t  while (index < halfLength) {\n\t\t    var leftIndex = (index + 1) * 2 - 1;\n\t\t    var left = heap[leftIndex];\n\t\t    var rightIndex = leftIndex + 1;\n\t\t    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n\t\t    if (compare(left, node) < 0) {\n\t\t      if (rightIndex < length && compare(right, left) < 0) {\n\t\t        heap[index] = right;\n\t\t        heap[rightIndex] = node;\n\t\t        index = rightIndex;\n\t\t      } else {\n\t\t        heap[index] = left;\n\t\t        heap[leftIndex] = node;\n\t\t        index = leftIndex;\n\t\t      }\n\t\t    } else if (rightIndex < length && compare(right, node) < 0) {\n\t\t      heap[index] = right;\n\t\t      heap[rightIndex] = node;\n\t\t      index = rightIndex;\n\t\t    } else {\n\t\t      // Neither child is smaller. Exit.\n\t\t      return;\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tfunction compare(a, b) {\n\t\t  // Compare sort index first, then task id.\n\t\t  var diff = a.sortIndex - b.sortIndex;\n\t\t  return diff !== 0 ? diff : a.id - b.id;\n\t\t}\n\n\t\t// TODO: Use symbols?\n\t\tvar ImmediatePriority = 1;\n\t\tvar UserBlockingPriority = 2;\n\t\tvar NormalPriority = 3;\n\t\tvar LowPriority = 4;\n\t\tvar IdlePriority = 5;\n\n\t\tfunction markTaskErrored(task, ms) {\n\t\t}\n\n\t\t/* eslint-disable no-var */\n\n\t\tvar hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\n\t\tif (hasPerformanceNow) {\n\t\t  var localPerformance = performance;\n\n\t\t  exports.unstable_now = function () {\n\t\t    return localPerformance.now();\n\t\t  };\n\t\t} else {\n\t\t  var localDate = Date;\n\t\t  var initialTime = localDate.now();\n\n\t\t  exports.unstable_now = function () {\n\t\t    return localDate.now() - initialTime;\n\t\t  };\n\t\t} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n\t\t// Math.pow(2, 30) - 1\n\t\t// 0b111111111111111111111111111111\n\n\n\t\tvar maxSigned31BitInt = 1073741823; // Times out immediately\n\n\t\tvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n\t\tvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\n\t\tvar NORMAL_PRIORITY_TIMEOUT = 5000;\n\t\tvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n\t\tvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\n\t\tvar taskQueue = [];\n\t\tvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\n\t\tvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\t\tvar currentTask = null;\n\t\tvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\n\n\t\tvar isPerformingWork = false;\n\t\tvar isHostCallbackScheduled = false;\n\t\tvar isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\n\n\t\tvar localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\n\t\tvar localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;\n\t\tvar localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\n\n\t\ttypeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;\n\n\t\tfunction advanceTimers(currentTime) {\n\t\t  // Check for tasks that are no longer delayed and add them to the queue.\n\t\t  var timer = peek(timerQueue);\n\n\t\t  while (timer !== null) {\n\t\t    if (timer.callback === null) {\n\t\t      // Timer was cancelled.\n\t\t      pop(timerQueue);\n\t\t    } else if (timer.startTime <= currentTime) {\n\t\t      // Timer fired. Transfer to the task queue.\n\t\t      pop(timerQueue);\n\t\t      timer.sortIndex = timer.expirationTime;\n\t\t      push(taskQueue, timer);\n\t\t    } else {\n\t\t      // Remaining timers are pending.\n\t\t      return;\n\t\t    }\n\n\t\t    timer = peek(timerQueue);\n\t\t  }\n\t\t}\n\n\t\tfunction handleTimeout(currentTime) {\n\t\t  isHostTimeoutScheduled = false;\n\t\t  advanceTimers(currentTime);\n\n\t\t  if (!isHostCallbackScheduled) {\n\t\t    if (peek(taskQueue) !== null) {\n\t\t      isHostCallbackScheduled = true;\n\t\t      requestHostCallback(flushWork);\n\t\t    } else {\n\t\t      var firstTimer = peek(timerQueue);\n\n\t\t      if (firstTimer !== null) {\n\t\t        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tfunction flushWork(hasTimeRemaining, initialTime) {\n\n\n\t\t  isHostCallbackScheduled = false;\n\n\t\t  if (isHostTimeoutScheduled) {\n\t\t    // We scheduled a timeout but it's no longer needed. Cancel it.\n\t\t    isHostTimeoutScheduled = false;\n\t\t    cancelHostTimeout();\n\t\t  }\n\n\t\t  isPerformingWork = true;\n\t\t  var previousPriorityLevel = currentPriorityLevel;\n\n\t\t  try {\n\t\t    var currentTime; if (enableProfiling) ; else {\n\t\t      // No catch in prod code path.\n\t\t      return workLoop(hasTimeRemaining, initialTime);\n\t\t    }\n\t\t  } finally {\n\t\t    currentTask = null;\n\t\t    currentPriorityLevel = previousPriorityLevel;\n\t\t    isPerformingWork = false;\n\t\t  }\n\t\t}\n\n\t\tfunction workLoop(hasTimeRemaining, initialTime) {\n\t\t  var currentTime = initialTime;\n\t\t  advanceTimers(currentTime);\n\t\t  currentTask = peek(taskQueue);\n\n\t\t  while (currentTask !== null && !(enableSchedulerDebugging )) {\n\t\t    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n\t\t      // This currentTask hasn't expired, and we've reached the deadline.\n\t\t      break;\n\t\t    }\n\n\t\t    var callback = currentTask.callback;\n\n\t\t    if (typeof callback === 'function') {\n\t\t      currentTask.callback = null;\n\t\t      currentPriorityLevel = currentTask.priorityLevel;\n\t\t      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n\t\t      var continuationCallback = callback(didUserCallbackTimeout);\n\t\t      currentTime = exports.unstable_now();\n\n\t\t      if (typeof continuationCallback === 'function') {\n\t\t        currentTask.callback = continuationCallback;\n\t\t      } else {\n\n\t\t        if (currentTask === peek(taskQueue)) {\n\t\t          pop(taskQueue);\n\t\t        }\n\t\t      }\n\n\t\t      advanceTimers(currentTime);\n\t\t    } else {\n\t\t      pop(taskQueue);\n\t\t    }\n\n\t\t    currentTask = peek(taskQueue);\n\t\t  } // Return whether there's additional work\n\n\n\t\t  if (currentTask !== null) {\n\t\t    return true;\n\t\t  } else {\n\t\t    var firstTimer = peek(timerQueue);\n\n\t\t    if (firstTimer !== null) {\n\t\t      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n\t\t    }\n\n\t\t    return false;\n\t\t  }\n\t\t}\n\n\t\tfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n\t\t  switch (priorityLevel) {\n\t\t    case ImmediatePriority:\n\t\t    case UserBlockingPriority:\n\t\t    case NormalPriority:\n\t\t    case LowPriority:\n\t\t    case IdlePriority:\n\t\t      break;\n\n\t\t    default:\n\t\t      priorityLevel = NormalPriority;\n\t\t  }\n\n\t\t  var previousPriorityLevel = currentPriorityLevel;\n\t\t  currentPriorityLevel = priorityLevel;\n\n\t\t  try {\n\t\t    return eventHandler();\n\t\t  } finally {\n\t\t    currentPriorityLevel = previousPriorityLevel;\n\t\t  }\n\t\t}\n\n\t\tfunction unstable_next(eventHandler) {\n\t\t  var priorityLevel;\n\n\t\t  switch (currentPriorityLevel) {\n\t\t    case ImmediatePriority:\n\t\t    case UserBlockingPriority:\n\t\t    case NormalPriority:\n\t\t      // Shift down to normal priority\n\t\t      priorityLevel = NormalPriority;\n\t\t      break;\n\n\t\t    default:\n\t\t      // Anything lower than normal priority should remain at the current level.\n\t\t      priorityLevel = currentPriorityLevel;\n\t\t      break;\n\t\t  }\n\n\t\t  var previousPriorityLevel = currentPriorityLevel;\n\t\t  currentPriorityLevel = priorityLevel;\n\n\t\t  try {\n\t\t    return eventHandler();\n\t\t  } finally {\n\t\t    currentPriorityLevel = previousPriorityLevel;\n\t\t  }\n\t\t}\n\n\t\tfunction unstable_wrapCallback(callback) {\n\t\t  var parentPriorityLevel = currentPriorityLevel;\n\t\t  return function () {\n\t\t    // This is a fork of runWithPriority, inlined for performance.\n\t\t    var previousPriorityLevel = currentPriorityLevel;\n\t\t    currentPriorityLevel = parentPriorityLevel;\n\n\t\t    try {\n\t\t      return callback.apply(this, arguments);\n\t\t    } finally {\n\t\t      currentPriorityLevel = previousPriorityLevel;\n\t\t    }\n\t\t  };\n\t\t}\n\n\t\tfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n\t\t  var currentTime = exports.unstable_now();\n\t\t  var startTime;\n\n\t\t  if (typeof options === 'object' && options !== null) {\n\t\t    var delay = options.delay;\n\n\t\t    if (typeof delay === 'number' && delay > 0) {\n\t\t      startTime = currentTime + delay;\n\t\t    } else {\n\t\t      startTime = currentTime;\n\t\t    }\n\t\t  } else {\n\t\t    startTime = currentTime;\n\t\t  }\n\n\t\t  var timeout;\n\n\t\t  switch (priorityLevel) {\n\t\t    case ImmediatePriority:\n\t\t      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n\t\t      break;\n\n\t\t    case UserBlockingPriority:\n\t\t      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n\t\t      break;\n\n\t\t    case IdlePriority:\n\t\t      timeout = IDLE_PRIORITY_TIMEOUT;\n\t\t      break;\n\n\t\t    case LowPriority:\n\t\t      timeout = LOW_PRIORITY_TIMEOUT;\n\t\t      break;\n\n\t\t    case NormalPriority:\n\t\t    default:\n\t\t      timeout = NORMAL_PRIORITY_TIMEOUT;\n\t\t      break;\n\t\t  }\n\n\t\t  var expirationTime = startTime + timeout;\n\t\t  var newTask = {\n\t\t    id: taskIdCounter++,\n\t\t    callback: callback,\n\t\t    priorityLevel: priorityLevel,\n\t\t    startTime: startTime,\n\t\t    expirationTime: expirationTime,\n\t\t    sortIndex: -1\n\t\t  };\n\n\t\t  if (startTime > currentTime) {\n\t\t    // This is a delayed task.\n\t\t    newTask.sortIndex = startTime;\n\t\t    push(timerQueue, newTask);\n\n\t\t    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n\t\t      // All tasks are delayed, and this is the task with the earliest delay.\n\t\t      if (isHostTimeoutScheduled) {\n\t\t        // Cancel an existing timeout.\n\t\t        cancelHostTimeout();\n\t\t      } else {\n\t\t        isHostTimeoutScheduled = true;\n\t\t      } // Schedule a timeout.\n\n\n\t\t      requestHostTimeout(handleTimeout, startTime - currentTime);\n\t\t    }\n\t\t  } else {\n\t\t    newTask.sortIndex = expirationTime;\n\t\t    push(taskQueue, newTask);\n\t\t    // wait until the next time we yield.\n\n\n\t\t    if (!isHostCallbackScheduled && !isPerformingWork) {\n\t\t      isHostCallbackScheduled = true;\n\t\t      requestHostCallback(flushWork);\n\t\t    }\n\t\t  }\n\n\t\t  return newTask;\n\t\t}\n\n\t\tfunction unstable_pauseExecution() {\n\t\t}\n\n\t\tfunction unstable_continueExecution() {\n\n\t\t  if (!isHostCallbackScheduled && !isPerformingWork) {\n\t\t    isHostCallbackScheduled = true;\n\t\t    requestHostCallback(flushWork);\n\t\t  }\n\t\t}\n\n\t\tfunction unstable_getFirstCallbackNode() {\n\t\t  return peek(taskQueue);\n\t\t}\n\n\t\tfunction unstable_cancelCallback(task) {\n\t\t  // remove from the queue because you can't remove arbitrary nodes from an\n\t\t  // array based heap, only the first one.)\n\n\n\t\t  task.callback = null;\n\t\t}\n\n\t\tfunction unstable_getCurrentPriorityLevel() {\n\t\t  return currentPriorityLevel;\n\t\t}\n\n\t\tvar isMessageLoopRunning = false;\n\t\tvar scheduledHostCallback = null;\n\t\tvar taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n\t\t// thread, like user events. By default, it yields multiple times per frame.\n\t\t// It does not attempt to align with frame boundaries, since most tasks don't\n\t\t// need to be frame aligned; for those that do, use requestAnimationFrame.\n\n\t\tvar frameInterval = frameYieldMs;\n\t\tvar startTime = -1;\n\n\t\tfunction shouldYieldToHost() {\n\t\t  var timeElapsed = exports.unstable_now() - startTime;\n\n\t\t  if (timeElapsed < frameInterval) {\n\t\t    // The main thread has only been blocked for a really short amount of time;\n\t\t    // smaller than a single frame. Don't yield yet.\n\t\t    return false;\n\t\t  } // The main thread has been blocked for a non-negligible amount of time. We\n\n\n\t\t  return true;\n\t\t}\n\n\t\tfunction requestPaint() {\n\n\t\t}\n\n\t\tfunction forceFrameRate(fps) {\n\t\t  if (fps < 0 || fps > 125) {\n\t\t    // Using console['error'] to evade Babel and ESLint\n\t\t    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n\t\t    return;\n\t\t  }\n\n\t\t  if (fps > 0) {\n\t\t    frameInterval = Math.floor(1000 / fps);\n\t\t  } else {\n\t\t    // reset the framerate\n\t\t    frameInterval = frameYieldMs;\n\t\t  }\n\t\t}\n\n\t\tvar performWorkUntilDeadline = function () {\n\t\t  if (scheduledHostCallback !== null) {\n\t\t    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread\n\t\t    // has been blocked.\n\n\t\t    startTime = currentTime;\n\t\t    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the\n\t\t    // error can be observed.\n\t\t    //\n\t\t    // Intentionally not using a try-catch, since that makes some debugging\n\t\t    // techniques harder. Instead, if `scheduledHostCallback` errors, then\n\t\t    // `hasMoreWork` will remain true, and we'll continue the work loop.\n\n\t\t    var hasMoreWork = true;\n\n\t\t    try {\n\t\t      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\t\t    } finally {\n\t\t      if (hasMoreWork) {\n\t\t        // If there's more work, schedule the next message event at the end\n\t\t        // of the preceding one.\n\t\t        schedulePerformWorkUntilDeadline();\n\t\t      } else {\n\t\t        isMessageLoopRunning = false;\n\t\t        scheduledHostCallback = null;\n\t\t      }\n\t\t    }\n\t\t  } else {\n\t\t    isMessageLoopRunning = false;\n\t\t  } // Yielding to the browser will give it a chance to paint, so we can\n\t\t};\n\n\t\tvar schedulePerformWorkUntilDeadline;\n\n\t\tif (typeof localSetImmediate === 'function') {\n\t\t  // Node.js and old IE.\n\t\t  // There's a few reasons for why we prefer setImmediate.\n\t\t  //\n\t\t  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n\t\t  // (Even though this is a DOM fork of the Scheduler, you could get here\n\t\t  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n\t\t  // https://github.com/facebook/react/issues/20756\n\t\t  //\n\t\t  // But also, it runs earlier which is the semantic we want.\n\t\t  // If other browsers ever implement it, it's better to use it.\n\t\t  // Although both of these would be inferior to native scheduling.\n\t\t  schedulePerformWorkUntilDeadline = function () {\n\t\t    localSetImmediate(performWorkUntilDeadline);\n\t\t  };\n\t\t} else if (typeof MessageChannel !== 'undefined') {\n\t\t  // DOM and Worker environments.\n\t\t  // We prefer MessageChannel because of the 4ms setTimeout clamping.\n\t\t  var channel = new MessageChannel();\n\t\t  var port = channel.port2;\n\t\t  channel.port1.onmessage = performWorkUntilDeadline;\n\n\t\t  schedulePerformWorkUntilDeadline = function () {\n\t\t    port.postMessage(null);\n\t\t  };\n\t\t} else {\n\t\t  // We should only fallback here in non-browser environments.\n\t\t  schedulePerformWorkUntilDeadline = function () {\n\t\t    localSetTimeout(performWorkUntilDeadline, 0);\n\t\t  };\n\t\t}\n\n\t\tfunction requestHostCallback(callback) {\n\t\t  scheduledHostCallback = callback;\n\n\t\t  if (!isMessageLoopRunning) {\n\t\t    isMessageLoopRunning = true;\n\t\t    schedulePerformWorkUntilDeadline();\n\t\t  }\n\t\t}\n\n\t\tfunction requestHostTimeout(callback, ms) {\n\t\t  taskTimeoutID = localSetTimeout(function () {\n\t\t    callback(exports.unstable_now());\n\t\t  }, ms);\n\t\t}\n\n\t\tfunction cancelHostTimeout() {\n\t\t  localClearTimeout(taskTimeoutID);\n\t\t  taskTimeoutID = -1;\n\t\t}\n\n\t\tvar unstable_requestPaint = requestPaint;\n\t\tvar unstable_Profiling =  null;\n\n\t\texports.unstable_IdlePriority = IdlePriority;\n\t\texports.unstable_ImmediatePriority = ImmediatePriority;\n\t\texports.unstable_LowPriority = LowPriority;\n\t\texports.unstable_NormalPriority = NormalPriority;\n\t\texports.unstable_Profiling = unstable_Profiling;\n\t\texports.unstable_UserBlockingPriority = UserBlockingPriority;\n\t\texports.unstable_cancelCallback = unstable_cancelCallback;\n\t\texports.unstable_continueExecution = unstable_continueExecution;\n\t\texports.unstable_forceFrameRate = forceFrameRate;\n\t\texports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n\t\texports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n\t\texports.unstable_next = unstable_next;\n\t\texports.unstable_pauseExecution = unstable_pauseExecution;\n\t\texports.unstable_requestPaint = unstable_requestPaint;\n\t\texports.unstable_runWithPriority = unstable_runWithPriority;\n\t\texports.unstable_scheduleCallback = unstable_scheduleCallback;\n\t\texports.unstable_shouldYield = shouldYieldToHost;\n\t\texports.unstable_wrapCallback = unstable_wrapCallback;\n\t\t          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\t\tif (\n\t\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n\t\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n\t\t    'function'\n\t\t) {\n\t\t  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n\t\t}\n\t\t        \n\t\t  })();\n\t\t}\n} (scheduler_development));\n\treturn scheduler_development;\n}\n\nvar hasRequiredScheduler;\n\nfunction requireScheduler () {\n\tif (hasRequiredScheduler) return scheduler.exports;\n\thasRequiredScheduler = 1;\n\t(function (module) {\n\n\t\t{\n\t\t  module.exports = requireScheduler_development();\n\t\t}\n} (scheduler));\n\treturn scheduler.exports;\n}\n\n/**\n * @license React\n * react-reconciler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredReactReconciler_development;\n\nfunction requireReactReconciler_development () {\n\tif (hasRequiredReactReconciler_development) return reactReconciler_development.exports;\n\thasRequiredReactReconciler_development = 1;\n\n\t{\n\t  reactReconciler_development.exports = function $$$reconciler($$$hostConfig) {\n\t    var exports = {};\n\n\tvar React = requireReact();\n\tvar Scheduler = requireScheduler();\n\n\tvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n\tvar suppressWarning = false;\n\tfunction setSuppressWarning(newSuppressWarning) {\n\t  {\n\t    suppressWarning = newSuppressWarning;\n\t  }\n\t} // In DEV, calls to console.warn and console.error get replaced\n\t// by calls to these methods by a Babel plugin.\n\t//\n\t// In PROD (or in packages without access to React internals),\n\t// they are left as they are instead.\n\n\tfunction warn(format) {\n\t  {\n\t    if (!suppressWarning) {\n\t      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        args[_key - 1] = arguments[_key];\n\t      }\n\n\t      printWarning('warn', format, args);\n\t    }\n\t  }\n\t}\n\tfunction error(format) {\n\t  {\n\t    if (!suppressWarning) {\n\t      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t        args[_key2 - 1] = arguments[_key2];\n\t      }\n\n\t      printWarning('error', format, args);\n\t    }\n\t  }\n\t}\n\n\tfunction printWarning(level, format, args) {\n\t  // When changing this logic, you might want to also\n\t  // update consoleWithStackDev.www.js as well.\n\t  {\n\t    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\t    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n\t    if (stack !== '') {\n\t      format += '%s';\n\t      args = args.concat([stack]);\n\t    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n\t    var argsWithFormat = args.map(function (item) {\n\t      return String(item);\n\t    }); // Careful: RN currently depends on this prefix\n\n\t    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n\t    // breaks IE9: https://github.com/facebook/react/issues/13610\n\t    // eslint-disable-next-line react-internal/no-production-logging\n\n\t    Function.prototype.apply.call(console[level], console, argsWithFormat);\n\t  }\n\t}\n\n\tvar assign = Object.assign;\n\n\t/**\n\t * `ReactInstanceMap` maintains a mapping from a public facing stateful\n\t * instance (key) and the internal representation (value). This allows public\n\t * methods to accept the user facing instance as an argument and map them back\n\t * to internal methods.\n\t *\n\t * Note that this module is currently shared and assumed to be stateless.\n\t * If this becomes an actual Map, that will break.\n\t */\n\tfunction get(key) {\n\t  return key._reactInternals;\n\t}\n\tfunction set(key, value) {\n\t  key._reactInternals = value;\n\t}\n\n\t// -----------------------------------------------------------------------------\n\t// the react-reconciler package.\n\n\tvar enableNewReconciler = false; // Support legacy Primer support on internal FB www\n\n\tvar enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.\n\n\tvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n\n\tvar enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz\n\tvar warnAboutStringRefs = false; // -----------------------------------------------------------------------------\n\t// Debugging and DevTools\n\t// -----------------------------------------------------------------------------\n\t// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n\t// for an experimental timeline tool.\n\n\tvar enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState\n\n\tvar enableProfilerTimer = true; // Record durations for commit and passive effects phases.\n\n\tvar enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\n\n\tvar FunctionComponent = 0;\n\tvar ClassComponent = 1;\n\tvar IndeterminateComponent = 2; // Before we know whether it is function or class\n\n\tvar HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\n\tvar HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\n\tvar HostComponent = 5;\n\tvar HostText = 6;\n\tvar Fragment = 7;\n\tvar Mode = 8;\n\tvar ContextConsumer = 9;\n\tvar ContextProvider = 10;\n\tvar ForwardRef = 11;\n\tvar Profiler = 12;\n\tvar SuspenseComponent = 13;\n\tvar MemoComponent = 14;\n\tvar SimpleMemoComponent = 15;\n\tvar LazyComponent = 16;\n\tvar IncompleteClassComponent = 17;\n\tvar DehydratedFragment = 18;\n\tvar SuspenseListComponent = 19;\n\tvar ScopeComponent = 21;\n\tvar OffscreenComponent = 22;\n\tvar LegacyHiddenComponent = 23;\n\tvar CacheComponent = 24;\n\tvar TracingMarkerComponent = 25;\n\n\t// ATTENTION\n\t// When adding new symbols to this file,\n\t// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\t// The Symbol used to tag the ReactElement-like types.\n\tvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\n\tvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\n\tvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\n\tvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\n\tvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\n\tvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\n\tvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\n\tvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\n\tvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\n\tvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\n\tvar REACT_MEMO_TYPE = Symbol.for('react.memo');\n\tvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\n\tvar REACT_SCOPE_TYPE = Symbol.for('react.scope');\n\tvar REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\n\tvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\n\tvar REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\n\tvar REACT_CACHE_TYPE = Symbol.for('react.cache');\n\tvar REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\n\tvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n\tvar FAUX_ITERATOR_SYMBOL = '@@iterator';\n\tfunction getIteratorFn(maybeIterable) {\n\t  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n\t    return null;\n\t  }\n\n\t  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n\t  if (typeof maybeIterator === 'function') {\n\t    return maybeIterator;\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction getWrappedName(outerType, innerType, wrapperName) {\n\t  var displayName = outerType.displayName;\n\n\t  if (displayName) {\n\t    return displayName;\n\t  }\n\n\t  var functionName = innerType.displayName || innerType.name || '';\n\t  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n\t} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\n\tfunction getContextName(type) {\n\t  return type.displayName || 'Context';\n\t} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\n\tfunction getComponentNameFromType(type) {\n\t  if (type == null) {\n\t    // Host root, text node or just invalid type.\n\t    return null;\n\t  }\n\n\t  {\n\t    if (typeof type.tag === 'number') {\n\t      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n\t    }\n\t  }\n\n\t  if (typeof type === 'function') {\n\t    return type.displayName || type.name || null;\n\t  }\n\n\t  if (typeof type === 'string') {\n\t    return type;\n\t  }\n\n\t  switch (type) {\n\t    case REACT_FRAGMENT_TYPE:\n\t      return 'Fragment';\n\n\t    case REACT_PORTAL_TYPE:\n\t      return 'Portal';\n\n\t    case REACT_PROFILER_TYPE:\n\t      return 'Profiler';\n\n\t    case REACT_STRICT_MODE_TYPE:\n\t      return 'StrictMode';\n\n\t    case REACT_SUSPENSE_TYPE:\n\t      return 'Suspense';\n\n\t    case REACT_SUSPENSE_LIST_TYPE:\n\t      return 'SuspenseList';\n\n\t  }\n\n\t  if (typeof type === 'object') {\n\t    switch (type.$$typeof) {\n\t      case REACT_CONTEXT_TYPE:\n\t        var context = type;\n\t        return getContextName(context) + '.Consumer';\n\n\t      case REACT_PROVIDER_TYPE:\n\t        var provider = type;\n\t        return getContextName(provider._context) + '.Provider';\n\n\t      case REACT_FORWARD_REF_TYPE:\n\t        return getWrappedName(type, type.render, 'ForwardRef');\n\n\t      case REACT_MEMO_TYPE:\n\t        var outerName = type.displayName || null;\n\n\t        if (outerName !== null) {\n\t          return outerName;\n\t        }\n\n\t        return getComponentNameFromType(type.type) || 'Memo';\n\n\t      case REACT_LAZY_TYPE:\n\t        {\n\t          var lazyComponent = type;\n\t          var payload = lazyComponent._payload;\n\t          var init = lazyComponent._init;\n\n\t          try {\n\t            return getComponentNameFromType(init(payload));\n\t          } catch (x) {\n\t            return null;\n\t          }\n\t        }\n\n\t      // eslint-disable-next-line no-fallthrough\n\t    }\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction getWrappedName$1(outerType, innerType, wrapperName) {\n\t  var functionName = innerType.displayName || innerType.name || '';\n\t  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n\t} // Keep in sync with shared/getComponentNameFromType\n\n\n\tfunction getContextName$1(type) {\n\t  return type.displayName || 'Context';\n\t}\n\n\tfunction getComponentNameFromFiber(fiber) {\n\t  var tag = fiber.tag,\n\t      type = fiber.type;\n\n\t  switch (tag) {\n\t    case CacheComponent:\n\t      return 'Cache';\n\n\t    case ContextConsumer:\n\t      var context = type;\n\t      return getContextName$1(context) + '.Consumer';\n\n\t    case ContextProvider:\n\t      var provider = type;\n\t      return getContextName$1(provider._context) + '.Provider';\n\n\t    case DehydratedFragment:\n\t      return 'DehydratedFragment';\n\n\t    case ForwardRef:\n\t      return getWrappedName$1(type, type.render, 'ForwardRef');\n\n\t    case Fragment:\n\t      return 'Fragment';\n\n\t    case HostComponent:\n\t      // Host component type is the display name (e.g. \"div\", \"View\")\n\t      return type;\n\n\t    case HostPortal:\n\t      return 'Portal';\n\n\t    case HostRoot:\n\t      return 'Root';\n\n\t    case HostText:\n\t      return 'Text';\n\n\t    case LazyComponent:\n\t      // Name comes from the type in this case; we don't have a tag.\n\t      return getComponentNameFromType(type);\n\n\t    case Mode:\n\t      if (type === REACT_STRICT_MODE_TYPE) {\n\t        // Don't be less specific than shared/getComponentNameFromType\n\t        return 'StrictMode';\n\t      }\n\n\t      return 'Mode';\n\n\t    case OffscreenComponent:\n\t      return 'Offscreen';\n\n\t    case Profiler:\n\t      return 'Profiler';\n\n\t    case ScopeComponent:\n\t      return 'Scope';\n\n\t    case SuspenseComponent:\n\t      return 'Suspense';\n\n\t    case SuspenseListComponent:\n\t      return 'SuspenseList';\n\n\t    case TracingMarkerComponent:\n\t      return 'TracingMarker';\n\t    // The display name for this tags come from the user-provided type:\n\n\t    case ClassComponent:\n\t    case FunctionComponent:\n\t    case IncompleteClassComponent:\n\t    case IndeterminateComponent:\n\t    case MemoComponent:\n\t    case SimpleMemoComponent:\n\t      if (typeof type === 'function') {\n\t        return type.displayName || type.name || null;\n\t      }\n\n\t      if (typeof type === 'string') {\n\t        return type;\n\t      }\n\n\t      break;\n\n\t  }\n\n\t  return null;\n\t}\n\n\t// Don't change these two values. They're used by React Dev Tools.\n\tvar NoFlags =\n\t/*                      */\n\t0;\n\tvar PerformedWork =\n\t/*                */\n\t1; // You can change the rest (and add more).\n\n\tvar Placement =\n\t/*                    */\n\t2;\n\tvar Update =\n\t/*                       */\n\t4;\n\tvar ChildDeletion =\n\t/*                */\n\t16;\n\tvar ContentReset =\n\t/*                 */\n\t32;\n\tvar Callback =\n\t/*                     */\n\t64;\n\tvar DidCapture =\n\t/*                   */\n\t128;\n\tvar ForceClientRender =\n\t/*            */\n\t256;\n\tvar Ref =\n\t/*                          */\n\t512;\n\tvar Snapshot =\n\t/*                     */\n\t1024;\n\tvar Passive =\n\t/*                      */\n\t2048;\n\tvar Hydrating =\n\t/*                    */\n\t4096;\n\tvar Visibility =\n\t/*                   */\n\t8192;\n\tvar StoreConsistency =\n\t/*             */\n\t16384;\n\tvar LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n\n\tvar HostEffectMask =\n\t/*               */\n\t32767; // These are not really side effects, but we still reuse this field.\n\n\tvar Incomplete =\n\t/*                   */\n\t32768;\n\tvar ShouldCapture =\n\t/*                */\n\t65536;\n\tvar ForceUpdateForLegacySuspense =\n\t/* */\n\t131072;\n\tvar Forked =\n\t/*                       */\n\t1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n\t// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n\t// This enables us to defer more work in the unmount case,\n\t// since we can defer traversing the tree during layout to look for Passive effects,\n\t// and instead rely on the static flag as a signal that there may be cleanup work.\n\n\tvar RefStatic =\n\t/*                    */\n\t2097152;\n\tvar LayoutStatic =\n\t/*                 */\n\t4194304;\n\tvar PassiveStatic =\n\t/*                */\n\t8388608; // These flags allow us to traverse to fibers that have effects on mount\n\t// without traversing the entire tree after every commit for\n\t// double invoking\n\n\tvar MountLayoutDev =\n\t/*               */\n\t16777216;\n\tvar MountPassiveDev =\n\t/*              */\n\t33554432; // Groups of flags that are used in the commit phase to skip over trees that\n\t// don't contain effects, by checking subtreeFlags.\n\n\tvar BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n\t// flag logic (see #20043)\n\tUpdate | Snapshot | ( 0);\n\tvar MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\n\tvar LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n\n\tvar PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.\n\t// This allows certain concepts to persist without recalculating them,\n\t// e.g. whether a subtree contains passive effects or portals.\n\n\tvar StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n\n\tvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\tfunction getNearestMountedFiber(fiber) {\n\t  var node = fiber;\n\t  var nearestMounted = fiber;\n\n\t  if (!fiber.alternate) {\n\t    // If there is no alternate, this might be a new tree that isn't inserted\n\t    // yet. If it is, then it will have a pending insertion effect on it.\n\t    var nextNode = node;\n\n\t    do {\n\t      node = nextNode;\n\n\t      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n\t        // This is an insertion or in-progress hydration. The nearest possible\n\t        // mounted fiber is the parent but we need to continue to figure out\n\t        // if that one is still mounted.\n\t        nearestMounted = node.return;\n\t      }\n\n\t      nextNode = node.return;\n\t    } while (nextNode);\n\t  } else {\n\t    while (node.return) {\n\t      node = node.return;\n\t    }\n\t  }\n\n\t  if (node.tag === HostRoot) {\n\t    // TODO: Check if this was a nested HostRoot when used with\n\t    // renderContainerIntoSubtree.\n\t    return nearestMounted;\n\t  } // If we didn't hit the root, that means that we're in an disconnected tree\n\t  // that has been unmounted.\n\n\n\t  return null;\n\t}\n\tfunction isFiberMounted(fiber) {\n\t  return getNearestMountedFiber(fiber) === fiber;\n\t}\n\tfunction isMounted(component) {\n\t  {\n\t    var owner = ReactCurrentOwner.current;\n\n\t    if (owner !== null && owner.tag === ClassComponent) {\n\t      var ownerFiber = owner;\n\t      var instance = ownerFiber.stateNode;\n\n\t      if (!instance._warnedAboutRefsInRender) {\n\t        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');\n\t      }\n\n\t      instance._warnedAboutRefsInRender = true;\n\t    }\n\t  }\n\n\t  var fiber = get(component);\n\n\t  if (!fiber) {\n\t    return false;\n\t  }\n\n\t  return getNearestMountedFiber(fiber) === fiber;\n\t}\n\n\tfunction assertIsMounted(fiber) {\n\t  if (getNearestMountedFiber(fiber) !== fiber) {\n\t    throw new Error('Unable to find node on an unmounted component.');\n\t  }\n\t}\n\n\tfunction findCurrentFiberUsingSlowPath(fiber) {\n\t  var alternate = fiber.alternate;\n\n\t  if (!alternate) {\n\t    // If there is no alternate, then we only need to check if it is mounted.\n\t    var nearestMounted = getNearestMountedFiber(fiber);\n\n\t    if (nearestMounted === null) {\n\t      throw new Error('Unable to find node on an unmounted component.');\n\t    }\n\n\t    if (nearestMounted !== fiber) {\n\t      return null;\n\t    }\n\n\t    return fiber;\n\t  } // If we have two possible branches, we'll walk backwards up to the root\n\t  // to see what path the root points to. On the way we may hit one of the\n\t  // special cases and we'll deal with them.\n\n\n\t  var a = fiber;\n\t  var b = alternate;\n\n\t  while (true) {\n\t    var parentA = a.return;\n\n\t    if (parentA === null) {\n\t      // We're at the root.\n\t      break;\n\t    }\n\n\t    var parentB = parentA.alternate;\n\n\t    if (parentB === null) {\n\t      // There is no alternate. This is an unusual case. Currently, it only\n\t      // happens when a Suspense component is hidden. An extra fragment fiber\n\t      // is inserted in between the Suspense fiber and its children. Skip\n\t      // over this extra fragment fiber and proceed to the next parent.\n\t      var nextParent = parentA.return;\n\n\t      if (nextParent !== null) {\n\t        a = b = nextParent;\n\t        continue;\n\t      } // If there's no parent, we're at the root.\n\n\n\t      break;\n\t    } // If both copies of the parent fiber point to the same child, we can\n\t    // assume that the child is current. This happens when we bailout on low\n\t    // priority: the bailed out fiber's child reuses the current child.\n\n\n\t    if (parentA.child === parentB.child) {\n\t      var child = parentA.child;\n\n\t      while (child) {\n\t        if (child === a) {\n\t          // We've determined that A is the current branch.\n\t          assertIsMounted(parentA);\n\t          return fiber;\n\t        }\n\n\t        if (child === b) {\n\t          // We've determined that B is the current branch.\n\t          assertIsMounted(parentA);\n\t          return alternate;\n\t        }\n\n\t        child = child.sibling;\n\t      } // We should never have an alternate for any mounting node. So the only\n\t      // way this could possibly happen is if this was unmounted, if at all.\n\n\n\t      throw new Error('Unable to find node on an unmounted component.');\n\t    }\n\n\t    if (a.return !== b.return) {\n\t      // The return pointer of A and the return pointer of B point to different\n\t      // fibers. We assume that return pointers never criss-cross, so A must\n\t      // belong to the child set of A.return, and B must belong to the child\n\t      // set of B.return.\n\t      a = parentA;\n\t      b = parentB;\n\t    } else {\n\t      // The return pointers point to the same fiber. We'll have to use the\n\t      // default, slow path: scan the child sets of each parent alternate to see\n\t      // which child belongs to which set.\n\t      //\n\t      // Search parent A's child set\n\t      var didFindChild = false;\n\t      var _child = parentA.child;\n\n\t      while (_child) {\n\t        if (_child === a) {\n\t          didFindChild = true;\n\t          a = parentA;\n\t          b = parentB;\n\t          break;\n\t        }\n\n\t        if (_child === b) {\n\t          didFindChild = true;\n\t          b = parentA;\n\t          a = parentB;\n\t          break;\n\t        }\n\n\t        _child = _child.sibling;\n\t      }\n\n\t      if (!didFindChild) {\n\t        // Search parent B's child set\n\t        _child = parentB.child;\n\n\t        while (_child) {\n\t          if (_child === a) {\n\t            didFindChild = true;\n\t            a = parentB;\n\t            b = parentA;\n\t            break;\n\t          }\n\n\t          if (_child === b) {\n\t            didFindChild = true;\n\t            b = parentB;\n\t            a = parentA;\n\t            break;\n\t          }\n\n\t          _child = _child.sibling;\n\t        }\n\n\t        if (!didFindChild) {\n\t          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\n\t        }\n\t      }\n\t    }\n\n\t    if (a.alternate !== b) {\n\t      throw new Error(\"Return fibers should always be each others' alternates. \" + 'This error is likely caused by a bug in React. Please file an issue.');\n\t    }\n\t  } // If the root is not a host container, we're in a disconnected tree. I.e.\n\t  // unmounted.\n\n\n\t  if (a.tag !== HostRoot) {\n\t    throw new Error('Unable to find node on an unmounted component.');\n\t  }\n\n\t  if (a.stateNode.current === a) {\n\t    // We've determined that A is the current branch.\n\t    return fiber;\n\t  } // Otherwise B has to be current branch.\n\n\n\t  return alternate;\n\t}\n\tfunction findCurrentHostFiber(parent) {\n\t  var currentParent = findCurrentFiberUsingSlowPath(parent);\n\t  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n\t}\n\n\tfunction findCurrentHostFiberImpl(node) {\n\t  // Next we'll drill down this component to find the first HostComponent/Text.\n\t  if (node.tag === HostComponent || node.tag === HostText) {\n\t    return node;\n\t  }\n\n\t  var child = node.child;\n\n\t  while (child !== null) {\n\t    var match = findCurrentHostFiberImpl(child);\n\n\t    if (match !== null) {\n\t      return match;\n\t    }\n\n\t    child = child.sibling;\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction findCurrentHostFiberWithNoPortals(parent) {\n\t  var currentParent = findCurrentFiberUsingSlowPath(parent);\n\t  return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;\n\t}\n\n\tfunction findCurrentHostFiberWithNoPortalsImpl(node) {\n\t  // Next we'll drill down this component to find the first HostComponent/Text.\n\t  if (node.tag === HostComponent || node.tag === HostText) {\n\t    return node;\n\t  }\n\n\t  var child = node.child;\n\n\t  while (child !== null) {\n\t    if (child.tag !== HostPortal) {\n\t      var match = findCurrentHostFiberWithNoPortalsImpl(child);\n\n\t      if (match !== null) {\n\t        return match;\n\t      }\n\t    }\n\n\t    child = child.sibling;\n\t  }\n\n\t  return null;\n\t}\n\n\tvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\n\tfunction isArray(a) {\n\t  return isArrayImpl(a);\n\t}\n\n\t// This is a host config that's used for the `react-reconciler` package on npm.\n\t// It is only used by third-party renderers.\n\t//\n\t// Its API lets you pass the host config as an argument.\n\t// However, inside the `react-reconciler` we treat host config as a module.\n\t// This file is a shim between two worlds.\n\t//\n\t// It works because the `react-reconciler` bundle is wrapped in something like:\n\t//\n\t// module.exports = function ($$$config) {\n\t//   /* reconciler code */\n\t// }\n\t//\n\t// So `$$$config` looks like a global variable, but it's\n\t// really an argument to a top-level wrapping function.\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\tvar getPublicInstance = $$$hostConfig.getPublicInstance;\n\tvar getRootHostContext = $$$hostConfig.getRootHostContext;\n\tvar getChildHostContext = $$$hostConfig.getChildHostContext;\n\tvar prepareForCommit = $$$hostConfig.prepareForCommit;\n\tvar resetAfterCommit = $$$hostConfig.resetAfterCommit;\n\tvar createInstance = $$$hostConfig.createInstance;\n\tvar appendInitialChild = $$$hostConfig.appendInitialChild;\n\tvar finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;\n\tvar prepareUpdate = $$$hostConfig.prepareUpdate;\n\tvar shouldSetTextContent = $$$hostConfig.shouldSetTextContent;\n\tvar createTextInstance = $$$hostConfig.createTextInstance;\n\tvar scheduleTimeout = $$$hostConfig.scheduleTimeout;\n\tvar cancelTimeout = $$$hostConfig.cancelTimeout;\n\tvar noTimeout = $$$hostConfig.noTimeout;\n\tvar isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;\n\tvar warnsIfNotActing = $$$hostConfig.warnsIfNotActing;\n\tvar supportsMutation = $$$hostConfig.supportsMutation;\n\tvar supportsPersistence = $$$hostConfig.supportsPersistence;\n\tvar supportsHydration = $$$hostConfig.supportsHydration;\n\tvar getInstanceFromNode = $$$hostConfig.getInstanceFromNode;\n\t$$$hostConfig.beforeActiveInstanceBlur;\n\t$$$hostConfig.afterActiveInstanceBlur;\n\tvar preparePortalMount = $$$hostConfig.preparePortalMount;\n\t$$$hostConfig.prepareScopeUpdate;\n\t$$$hostConfig.getInstanceFromScope;\n\tvar getCurrentEventPriority = $$$hostConfig.getCurrentEventPriority;\n\tvar detachDeletedInstance = $$$hostConfig.detachDeletedInstance; // -------------------\n\t//      Microtasks\n\t//     (optional)\n\t// -------------------\n\n\tvar supportsMicrotasks = $$$hostConfig.supportsMicrotasks;\n\tvar scheduleMicrotask = $$$hostConfig.scheduleMicrotask; // -------------------\n\t//      Test selectors\n\t//     (optional)\n\t// -------------------\n\n\tvar supportsTestSelectors = $$$hostConfig.supportsTestSelectors;\n\tvar findFiberRoot = $$$hostConfig.findFiberRoot;\n\tvar getBoundingRect = $$$hostConfig.getBoundingRect;\n\tvar getTextContent = $$$hostConfig.getTextContent;\n\tvar isHiddenSubtree = $$$hostConfig.isHiddenSubtree;\n\tvar matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;\n\tvar setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;\n\tvar setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver; // -------------------\n\t//      Mutation\n\t//     (optional)\n\t// -------------------\n\n\tvar appendChild = $$$hostConfig.appendChild;\n\tvar appendChildToContainer = $$$hostConfig.appendChildToContainer;\n\tvar commitTextUpdate = $$$hostConfig.commitTextUpdate;\n\tvar commitMount = $$$hostConfig.commitMount;\n\tvar commitUpdate = $$$hostConfig.commitUpdate;\n\tvar insertBefore = $$$hostConfig.insertBefore;\n\tvar insertInContainerBefore = $$$hostConfig.insertInContainerBefore;\n\tvar removeChild = $$$hostConfig.removeChild;\n\tvar removeChildFromContainer = $$$hostConfig.removeChildFromContainer;\n\tvar resetTextContent = $$$hostConfig.resetTextContent;\n\tvar hideInstance = $$$hostConfig.hideInstance;\n\tvar hideTextInstance = $$$hostConfig.hideTextInstance;\n\tvar unhideInstance = $$$hostConfig.unhideInstance;\n\tvar unhideTextInstance = $$$hostConfig.unhideTextInstance;\n\tvar clearContainer = $$$hostConfig.clearContainer; // -------------------\n\t//     Persistence\n\t//     (optional)\n\t// -------------------\n\n\tvar cloneInstance = $$$hostConfig.cloneInstance;\n\tvar createContainerChildSet = $$$hostConfig.createContainerChildSet;\n\tvar appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;\n\tvar finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;\n\tvar replaceContainerChildren = $$$hostConfig.replaceContainerChildren;\n\tvar cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;\n\tvar cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance; // -------------------\n\t//     Hydration\n\t//     (optional)\n\t// -------------------\n\n\tvar canHydrateInstance = $$$hostConfig.canHydrateInstance;\n\tvar canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;\n\tvar canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;\n\tvar isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;\n\tvar isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;\n\tvar getSuspenseInstanceFallbackErrorDetails = $$$hostConfig.getSuspenseInstanceFallbackErrorDetails;\n\tvar registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;\n\tvar getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;\n\tvar getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;\n\tvar getFirstHydratableChildWithinContainer = $$$hostConfig.getFirstHydratableChildWithinContainer;\n\tvar getFirstHydratableChildWithinSuspenseInstance = $$$hostConfig.getFirstHydratableChildWithinSuspenseInstance;\n\tvar hydrateInstance = $$$hostConfig.hydrateInstance;\n\tvar hydrateTextInstance = $$$hostConfig.hydrateTextInstance;\n\tvar hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;\n\tvar getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;\n\tvar commitHydratedContainer = $$$hostConfig.commitHydratedContainer;\n\tvar commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;\n\tvar clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;\n\tvar clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;\n\tvar shouldDeleteUnhydratedTailInstances = $$$hostConfig.shouldDeleteUnhydratedTailInstances;\n\tvar didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;\n\tvar didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;\n\tvar didNotHydrateInstanceWithinContainer = $$$hostConfig.didNotHydrateInstanceWithinContainer;\n\tvar didNotHydrateInstanceWithinSuspenseInstance = $$$hostConfig.didNotHydrateInstanceWithinSuspenseInstance;\n\tvar didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;\n\tvar didNotFindHydratableInstanceWithinContainer = $$$hostConfig.didNotFindHydratableInstanceWithinContainer;\n\tvar didNotFindHydratableTextInstanceWithinContainer = $$$hostConfig.didNotFindHydratableTextInstanceWithinContainer;\n\tvar didNotFindHydratableSuspenseInstanceWithinContainer = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinContainer;\n\tvar didNotFindHydratableInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableInstanceWithinSuspenseInstance;\n\tvar didNotFindHydratableTextInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableTextInstanceWithinSuspenseInstance;\n\tvar didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance;\n\tvar didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;\n\tvar didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;\n\tvar didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;\n\tvar errorHydratingContainer = $$$hostConfig.errorHydratingContainer;\n\n\t// Helpers to patch console.logs to avoid logging during side-effect free\n\t// replaying on render function. This currently only patches the object\n\t// lazily which won't cover if the log function was extracted eagerly.\n\t// We could also eagerly patch the method.\n\tvar disabledDepth = 0;\n\tvar prevLog;\n\tvar prevInfo;\n\tvar prevWarn;\n\tvar prevError;\n\tvar prevGroup;\n\tvar prevGroupCollapsed;\n\tvar prevGroupEnd;\n\n\tfunction disabledLog() {}\n\n\tdisabledLog.__reactDisabledLog = true;\n\tfunction disableLogs() {\n\t  {\n\t    if (disabledDepth === 0) {\n\t      /* eslint-disable react-internal/no-production-logging */\n\t      prevLog = console.log;\n\t      prevInfo = console.info;\n\t      prevWarn = console.warn;\n\t      prevError = console.error;\n\t      prevGroup = console.group;\n\t      prevGroupCollapsed = console.groupCollapsed;\n\t      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n\t      var props = {\n\t        configurable: true,\n\t        enumerable: true,\n\t        value: disabledLog,\n\t        writable: true\n\t      }; // $FlowFixMe Flow thinks console is immutable.\n\n\t      Object.defineProperties(console, {\n\t        info: props,\n\t        log: props,\n\t        warn: props,\n\t        error: props,\n\t        group: props,\n\t        groupCollapsed: props,\n\t        groupEnd: props\n\t      });\n\t      /* eslint-enable react-internal/no-production-logging */\n\t    }\n\n\t    disabledDepth++;\n\t  }\n\t}\n\tfunction reenableLogs() {\n\t  {\n\t    disabledDepth--;\n\n\t    if (disabledDepth === 0) {\n\t      /* eslint-disable react-internal/no-production-logging */\n\t      var props = {\n\t        configurable: true,\n\t        enumerable: true,\n\t        writable: true\n\t      }; // $FlowFixMe Flow thinks console is immutable.\n\n\t      Object.defineProperties(console, {\n\t        log: assign({}, props, {\n\t          value: prevLog\n\t        }),\n\t        info: assign({}, props, {\n\t          value: prevInfo\n\t        }),\n\t        warn: assign({}, props, {\n\t          value: prevWarn\n\t        }),\n\t        error: assign({}, props, {\n\t          value: prevError\n\t        }),\n\t        group: assign({}, props, {\n\t          value: prevGroup\n\t        }),\n\t        groupCollapsed: assign({}, props, {\n\t          value: prevGroupCollapsed\n\t        }),\n\t        groupEnd: assign({}, props, {\n\t          value: prevGroupEnd\n\t        })\n\t      });\n\t      /* eslint-enable react-internal/no-production-logging */\n\t    }\n\n\t    if (disabledDepth < 0) {\n\t      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n\t    }\n\t  }\n\t}\n\n\tvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n\tvar prefix;\n\tfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n\t  {\n\t    if (prefix === undefined) {\n\t      // Extract the VM specific prefix used by each line.\n\t      try {\n\t        throw Error();\n\t      } catch (x) {\n\t        var match = x.stack.trim().match(/\\n( *(at )?)/);\n\t        prefix = match && match[1] || '';\n\t      }\n\t    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n\t    return '\\n' + prefix + name;\n\t  }\n\t}\n\tvar reentry = false;\n\tvar componentFrameCache;\n\n\t{\n\t  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\t  componentFrameCache = new PossiblyWeakMap();\n\t}\n\n\tfunction describeNativeComponentFrame(fn, construct) {\n\t  // If something asked for a stack inside a fake render, it should get ignored.\n\t  if ( !fn || reentry) {\n\t    return '';\n\t  }\n\n\t  {\n\t    var frame = componentFrameCache.get(fn);\n\n\t    if (frame !== undefined) {\n\t      return frame;\n\t    }\n\t  }\n\n\t  var control;\n\t  reentry = true;\n\t  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n\t  Error.prepareStackTrace = undefined;\n\t  var previousDispatcher;\n\n\t  {\n\t    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n\t    // for warnings.\n\n\t    ReactCurrentDispatcher.current = null;\n\t    disableLogs();\n\t  }\n\n\t  try {\n\t    // This should throw.\n\t    if (construct) {\n\t      // Something should be setting the props in the constructor.\n\t      var Fake = function () {\n\t        throw Error();\n\t      }; // $FlowFixMe\n\n\n\t      Object.defineProperty(Fake.prototype, 'props', {\n\t        set: function () {\n\t          // We use a throwing setter instead of frozen or non-writable props\n\t          // because that won't throw in a non-strict mode function.\n\t          throw Error();\n\t        }\n\t      });\n\n\t      if (typeof Reflect === 'object' && Reflect.construct) {\n\t        // We construct a different control for this case to include any extra\n\t        // frames added by the construct call.\n\t        try {\n\t          Reflect.construct(Fake, []);\n\t        } catch (x) {\n\t          control = x;\n\t        }\n\n\t        Reflect.construct(fn, [], Fake);\n\t      } else {\n\t        try {\n\t          Fake.call();\n\t        } catch (x) {\n\t          control = x;\n\t        }\n\n\t        fn.call(Fake.prototype);\n\t      }\n\t    } else {\n\t      try {\n\t        throw Error();\n\t      } catch (x) {\n\t        control = x;\n\t      }\n\n\t      fn();\n\t    }\n\t  } catch (sample) {\n\t    // This is inlined manually because closure doesn't do it for us.\n\t    if (sample && control && typeof sample.stack === 'string') {\n\t      // This extracts the first frame from the sample that isn't also in the control.\n\t      // Skipping one frame that we assume is the frame that calls the two.\n\t      var sampleLines = sample.stack.split('\\n');\n\t      var controlLines = control.stack.split('\\n');\n\t      var s = sampleLines.length - 1;\n\t      var c = controlLines.length - 1;\n\n\t      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n\t        // We expect at least one stack frame to be shared.\n\t        // Typically this will be the root most one. However, stack frames may be\n\t        // cut off due to maximum stack limits. In this case, one maybe cut off\n\t        // earlier than the other. We assume that the sample is longer or the same\n\t        // and there for cut off earlier. So we should find the root most frame in\n\t        // the sample somewhere in the control.\n\t        c--;\n\t      }\n\n\t      for (; s >= 1 && c >= 0; s--, c--) {\n\t        // Next we find the first one that isn't the same which should be the\n\t        // frame that called our sample function and the control.\n\t        if (sampleLines[s] !== controlLines[c]) {\n\t          // In V8, the first line is describing the message but other VMs don't.\n\t          // If we're about to return the first line, and the control is also on the same\n\t          // line, that's a pretty good indicator that our sample threw at same line as\n\t          // the control. I.e. before we entered the sample frame. So we ignore this result.\n\t          // This can happen if you passed a class to function component, or non-function.\n\t          if (s !== 1 || c !== 1) {\n\t            do {\n\t              s--;\n\t              c--; // We may still have similar intermediate frames from the construct call.\n\t              // The next one that isn't the same should be our match though.\n\n\t              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n\t                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n\t                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n\t                // but we have a user-provided \"displayName\"\n\t                // splice it in to make the stack more readable.\n\n\n\t                if (fn.displayName && _frame.includes('<anonymous>')) {\n\t                  _frame = _frame.replace('<anonymous>', fn.displayName);\n\t                }\n\n\t                {\n\t                  if (typeof fn === 'function') {\n\t                    componentFrameCache.set(fn, _frame);\n\t                  }\n\t                } // Return the line we found.\n\n\n\t                return _frame;\n\t              }\n\t            } while (s >= 1 && c >= 0);\n\t          }\n\n\t          break;\n\t        }\n\t      }\n\t    }\n\t  } finally {\n\t    reentry = false;\n\n\t    {\n\t      ReactCurrentDispatcher.current = previousDispatcher;\n\t      reenableLogs();\n\t    }\n\n\t    Error.prepareStackTrace = previousPrepareStackTrace;\n\t  } // Fallback to just using the name if we couldn't make it throw.\n\n\n\t  var name = fn ? fn.displayName || fn.name : '';\n\t  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n\t  {\n\t    if (typeof fn === 'function') {\n\t      componentFrameCache.set(fn, syntheticFrame);\n\t    }\n\t  }\n\n\t  return syntheticFrame;\n\t}\n\n\tfunction describeClassComponentFrame(ctor, source, ownerFn) {\n\t  {\n\t    return describeNativeComponentFrame(ctor, true);\n\t  }\n\t}\n\tfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n\t  {\n\t    return describeNativeComponentFrame(fn, false);\n\t  }\n\t}\n\n\tfunction shouldConstruct(Component) {\n\t  var prototype = Component.prototype;\n\t  return !!(prototype && prototype.isReactComponent);\n\t}\n\n\tfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n\t  if (type == null) {\n\t    return '';\n\t  }\n\n\t  if (typeof type === 'function') {\n\t    {\n\t      return describeNativeComponentFrame(type, shouldConstruct(type));\n\t    }\n\t  }\n\n\t  if (typeof type === 'string') {\n\t    return describeBuiltInComponentFrame(type);\n\t  }\n\n\t  switch (type) {\n\t    case REACT_SUSPENSE_TYPE:\n\t      return describeBuiltInComponentFrame('Suspense');\n\n\t    case REACT_SUSPENSE_LIST_TYPE:\n\t      return describeBuiltInComponentFrame('SuspenseList');\n\t  }\n\n\t  if (typeof type === 'object') {\n\t    switch (type.$$typeof) {\n\t      case REACT_FORWARD_REF_TYPE:\n\t        return describeFunctionComponentFrame(type.render);\n\n\t      case REACT_MEMO_TYPE:\n\t        // Memo may contain any component type so we recursively resolve it.\n\t        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n\t      case REACT_LAZY_TYPE:\n\t        {\n\t          var lazyComponent = type;\n\t          var payload = lazyComponent._payload;\n\t          var init = lazyComponent._init;\n\n\t          try {\n\t            // Lazy may contain any component type so we recursively resolve it.\n\t            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n\t          } catch (x) {}\n\t        }\n\t    }\n\t  }\n\n\t  return '';\n\t}\n\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\tvar loggedTypeFailures = {};\n\tvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\n\tfunction setCurrentlyValidatingElement(element) {\n\t  {\n\t    if (element) {\n\t      var owner = element._owner;\n\t      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n\t      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n\t    } else {\n\t      ReactDebugCurrentFrame.setExtraStackFrame(null);\n\t    }\n\t  }\n\t}\n\n\tfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n\t  {\n\t    // $FlowFixMe This is okay but Flow doesn't know it.\n\t    var has = Function.call.bind(hasOwnProperty);\n\n\t    for (var typeSpecName in typeSpecs) {\n\t      if (has(typeSpecs, typeSpecName)) {\n\t        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n\t        // fail the render phase where it didn't fail before. So we log it.\n\t        // After these have been cleaned up, we'll let them throw.\n\n\t        try {\n\t          // This is intentionally an invariant that gets caught. It's the same\n\t          // behavior as without this statement except with a better message.\n\t          if (typeof typeSpecs[typeSpecName] !== 'function') {\n\t            // eslint-disable-next-line react-internal/prod-error-codes\n\t            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n\t            err.name = 'Invariant Violation';\n\t            throw err;\n\t          }\n\n\t          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n\t        } catch (ex) {\n\t          error$1 = ex;\n\t        }\n\n\t        if (error$1 && !(error$1 instanceof Error)) {\n\t          setCurrentlyValidatingElement(element);\n\n\t          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n\t          setCurrentlyValidatingElement(null);\n\t        }\n\n\t        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n\t          // Only monitor this failure once because there tends to be a lot of the\n\t          // same error.\n\t          loggedTypeFailures[error$1.message] = true;\n\t          setCurrentlyValidatingElement(element);\n\n\t          error('Failed %s type: %s', location, error$1.message);\n\n\t          setCurrentlyValidatingElement(null);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tvar valueStack = [];\n\tvar fiberStack;\n\n\t{\n\t  fiberStack = [];\n\t}\n\n\tvar index = -1;\n\n\tfunction createCursor(defaultValue) {\n\t  return {\n\t    current: defaultValue\n\t  };\n\t}\n\n\tfunction pop(cursor, fiber) {\n\t  if (index < 0) {\n\t    {\n\t      error('Unexpected pop.');\n\t    }\n\n\t    return;\n\t  }\n\n\t  {\n\t    if (fiber !== fiberStack[index]) {\n\t      error('Unexpected Fiber popped.');\n\t    }\n\t  }\n\n\t  cursor.current = valueStack[index];\n\t  valueStack[index] = null;\n\n\t  {\n\t    fiberStack[index] = null;\n\t  }\n\n\t  index--;\n\t}\n\n\tfunction push(cursor, value, fiber) {\n\t  index++;\n\t  valueStack[index] = cursor.current;\n\n\t  {\n\t    fiberStack[index] = fiber;\n\t  }\n\n\t  cursor.current = value;\n\t}\n\n\tvar warnedAboutMissingGetChildContext;\n\n\t{\n\t  warnedAboutMissingGetChildContext = {};\n\t}\n\n\tvar emptyContextObject = {};\n\n\t{\n\t  Object.freeze(emptyContextObject);\n\t} // A cursor to the current merged context object on the stack.\n\n\n\tvar contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\n\tvar didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n\t// We use this to get access to the parent context after we have already\n\t// pushed the next context provider, and now need to merge their contexts.\n\n\tvar previousContext = emptyContextObject;\n\n\tfunction getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n\t  {\n\t    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n\t      // If the fiber is a context provider itself, when we read its context\n\t      // we may have already pushed its own child context on the stack. A context\n\t      // provider should not \"see\" its own child context. Therefore we read the\n\t      // previous (parent) context instead for a context provider.\n\t      return previousContext;\n\t    }\n\n\t    return contextStackCursor.current;\n\t  }\n\t}\n\n\tfunction cacheContext(workInProgress, unmaskedContext, maskedContext) {\n\t  {\n\t    var instance = workInProgress.stateNode;\n\t    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n\t    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n\t  }\n\t}\n\n\tfunction getMaskedContext(workInProgress, unmaskedContext) {\n\t  {\n\t    var type = workInProgress.type;\n\t    var contextTypes = type.contextTypes;\n\n\t    if (!contextTypes) {\n\t      return emptyContextObject;\n\t    } // Avoid recreating masked context unless unmasked context has changed.\n\t    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n\t    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n\n\t    var instance = workInProgress.stateNode;\n\n\t    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n\t      return instance.__reactInternalMemoizedMaskedChildContext;\n\t    }\n\n\t    var context = {};\n\n\t    for (var key in contextTypes) {\n\t      context[key] = unmaskedContext[key];\n\t    }\n\n\t    {\n\t      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n\t      checkPropTypes(contextTypes, context, 'context', name);\n\t    } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n\t    // Context is created before the class component is instantiated so check for instance.\n\n\n\t    if (instance) {\n\t      cacheContext(workInProgress, unmaskedContext, context);\n\t    }\n\n\t    return context;\n\t  }\n\t}\n\n\tfunction hasContextChanged() {\n\t  {\n\t    return didPerformWorkStackCursor.current;\n\t  }\n\t}\n\n\tfunction isContextProvider(type) {\n\t  {\n\t    var childContextTypes = type.childContextTypes;\n\t    return childContextTypes !== null && childContextTypes !== undefined;\n\t  }\n\t}\n\n\tfunction popContext(fiber) {\n\t  {\n\t    pop(didPerformWorkStackCursor, fiber);\n\t    pop(contextStackCursor, fiber);\n\t  }\n\t}\n\n\tfunction popTopLevelContextObject(fiber) {\n\t  {\n\t    pop(didPerformWorkStackCursor, fiber);\n\t    pop(contextStackCursor, fiber);\n\t  }\n\t}\n\n\tfunction pushTopLevelContextObject(fiber, context, didChange) {\n\t  {\n\t    if (contextStackCursor.current !== emptyContextObject) {\n\t      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t    }\n\n\t    push(contextStackCursor, context, fiber);\n\t    push(didPerformWorkStackCursor, didChange, fiber);\n\t  }\n\t}\n\n\tfunction processChildContext(fiber, type, parentContext) {\n\t  {\n\t    var instance = fiber.stateNode;\n\t    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n\t    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n\t    if (typeof instance.getChildContext !== 'function') {\n\t      {\n\t        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n\t        if (!warnedAboutMissingGetChildContext[componentName]) {\n\t          warnedAboutMissingGetChildContext[componentName] = true;\n\n\t          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n\t        }\n\t      }\n\n\t      return parentContext;\n\t    }\n\n\t    var childContext = instance.getChildContext();\n\n\t    for (var contextKey in childContext) {\n\t      if (!(contextKey in childContextTypes)) {\n\t        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\");\n\t      }\n\t    }\n\n\t    {\n\t      var name = getComponentNameFromFiber(fiber) || 'Unknown';\n\t      checkPropTypes(childContextTypes, childContext, 'child context', name);\n\t    }\n\n\t    return assign({}, parentContext, childContext);\n\t  }\n\t}\n\n\tfunction pushContextProvider(workInProgress) {\n\t  {\n\t    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n\t    // If the instance does not exist yet, we will push null at first,\n\t    // and replace it on the stack later when invalidating the context.\n\n\t    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n\t    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n\t    previousContext = contextStackCursor.current;\n\t    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n\t    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n\t    return true;\n\t  }\n\t}\n\n\tfunction invalidateContextProvider(workInProgress, type, didChange) {\n\t  {\n\t    var instance = workInProgress.stateNode;\n\n\t    if (!instance) {\n\t      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t    }\n\n\t    if (didChange) {\n\t      // Merge parent and own context.\n\t      // Skip this if we're not updating due to sCU.\n\t      // This avoids unnecessarily recomputing memoized values.\n\t      var mergedContext = processChildContext(workInProgress, type, previousContext);\n\t      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n\t      // It is important to unwind the context in the reverse order.\n\n\t      pop(didPerformWorkStackCursor, workInProgress);\n\t      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\n\n\t      push(contextStackCursor, mergedContext, workInProgress);\n\t      push(didPerformWorkStackCursor, didChange, workInProgress);\n\t    } else {\n\t      pop(didPerformWorkStackCursor, workInProgress);\n\t      push(didPerformWorkStackCursor, didChange, workInProgress);\n\t    }\n\t  }\n\t}\n\n\tfunction findCurrentUnmaskedContext(fiber) {\n\t  {\n\t    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n\t    // makes sense elsewhere\n\t    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n\t      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t    }\n\n\t    var node = fiber;\n\n\t    do {\n\t      switch (node.tag) {\n\t        case HostRoot:\n\t          return node.stateNode.context;\n\n\t        case ClassComponent:\n\t          {\n\t            var Component = node.type;\n\n\t            if (isContextProvider(Component)) {\n\t              return node.stateNode.__reactInternalMemoizedMergedChildContext;\n\t            }\n\n\t            break;\n\t          }\n\t      }\n\n\t      node = node.return;\n\t    } while (node !== null);\n\n\t    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t  }\n\t}\n\n\tvar LegacyRoot = 0;\n\tvar ConcurrentRoot = 1;\n\n\tvar NoMode =\n\t/*                         */\n\t0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n\n\tvar ConcurrentMode =\n\t/*                 */\n\t1;\n\tvar ProfileMode =\n\t/*                    */\n\t2;\n\tvar StrictLegacyMode =\n\t/*               */\n\t8;\n\tvar StrictEffectsMode =\n\t/*              */\n\t16;\n\n\t// TODO: This is pretty well supported by browsers. Maybe we can drop it.\n\tvar clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n\t// Based on:\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\n\tvar log = Math.log;\n\tvar LN2 = Math.LN2;\n\n\tfunction clz32Fallback(x) {\n\t  var asUint = x >>> 0;\n\n\t  if (asUint === 0) {\n\t    return 32;\n\t  }\n\n\t  return 31 - (log(asUint) / LN2 | 0) | 0;\n\t}\n\n\t// If those values are changed that package should be rebuilt and redeployed.\n\n\tvar TotalLanes = 31;\n\tvar NoLanes =\n\t/*                        */\n\t0;\n\tvar NoLane =\n\t/*                          */\n\t0;\n\tvar SyncLane =\n\t/*                        */\n\t1;\n\tvar InputContinuousHydrationLane =\n\t/*    */\n\t2;\n\tvar InputContinuousLane =\n\t/*             */\n\t4;\n\tvar DefaultHydrationLane =\n\t/*            */\n\t8;\n\tvar DefaultLane =\n\t/*                     */\n\t16;\n\tvar TransitionHydrationLane =\n\t/*                */\n\t32;\n\tvar TransitionLanes =\n\t/*                       */\n\t4194240;\n\tvar TransitionLane1 =\n\t/*                        */\n\t64;\n\tvar TransitionLane2 =\n\t/*                        */\n\t128;\n\tvar TransitionLane3 =\n\t/*                        */\n\t256;\n\tvar TransitionLane4 =\n\t/*                        */\n\t512;\n\tvar TransitionLane5 =\n\t/*                        */\n\t1024;\n\tvar TransitionLane6 =\n\t/*                        */\n\t2048;\n\tvar TransitionLane7 =\n\t/*                        */\n\t4096;\n\tvar TransitionLane8 =\n\t/*                        */\n\t8192;\n\tvar TransitionLane9 =\n\t/*                        */\n\t16384;\n\tvar TransitionLane10 =\n\t/*                       */\n\t32768;\n\tvar TransitionLane11 =\n\t/*                       */\n\t65536;\n\tvar TransitionLane12 =\n\t/*                       */\n\t131072;\n\tvar TransitionLane13 =\n\t/*                       */\n\t262144;\n\tvar TransitionLane14 =\n\t/*                       */\n\t524288;\n\tvar TransitionLane15 =\n\t/*                       */\n\t1048576;\n\tvar TransitionLane16 =\n\t/*                       */\n\t2097152;\n\tvar RetryLanes =\n\t/*                            */\n\t130023424;\n\tvar RetryLane1 =\n\t/*                             */\n\t4194304;\n\tvar RetryLane2 =\n\t/*                             */\n\t8388608;\n\tvar RetryLane3 =\n\t/*                             */\n\t16777216;\n\tvar RetryLane4 =\n\t/*                             */\n\t33554432;\n\tvar RetryLane5 =\n\t/*                             */\n\t67108864;\n\tvar SomeRetryLane = RetryLane1;\n\tvar SelectiveHydrationLane =\n\t/*          */\n\t134217728;\n\tvar NonIdleLanes =\n\t/*                          */\n\t268435455;\n\tvar IdleHydrationLane =\n\t/*               */\n\t268435456;\n\tvar IdleLane =\n\t/*                        */\n\t536870912;\n\tvar OffscreenLane =\n\t/*                   */\n\t1073741824; // This function is used for the experimental timeline (react-devtools-timeline)\n\t// It should be kept in sync with the Lanes values above.\n\n\tfunction getLabelForLane(lane) {\n\t  {\n\t    if (lane & SyncLane) {\n\t      return 'Sync';\n\t    }\n\n\t    if (lane & InputContinuousHydrationLane) {\n\t      return 'InputContinuousHydration';\n\t    }\n\n\t    if (lane & InputContinuousLane) {\n\t      return 'InputContinuous';\n\t    }\n\n\t    if (lane & DefaultHydrationLane) {\n\t      return 'DefaultHydration';\n\t    }\n\n\t    if (lane & DefaultLane) {\n\t      return 'Default';\n\t    }\n\n\t    if (lane & TransitionHydrationLane) {\n\t      return 'TransitionHydration';\n\t    }\n\n\t    if (lane & TransitionLanes) {\n\t      return 'Transition';\n\t    }\n\n\t    if (lane & RetryLanes) {\n\t      return 'Retry';\n\t    }\n\n\t    if (lane & SelectiveHydrationLane) {\n\t      return 'SelectiveHydration';\n\t    }\n\n\t    if (lane & IdleHydrationLane) {\n\t      return 'IdleHydration';\n\t    }\n\n\t    if (lane & IdleLane) {\n\t      return 'Idle';\n\t    }\n\n\t    if (lane & OffscreenLane) {\n\t      return 'Offscreen';\n\t    }\n\t  }\n\t}\n\tvar NoTimestamp = -1;\n\tvar nextTransitionLane = TransitionLane1;\n\tvar nextRetryLane = RetryLane1;\n\n\tfunction getHighestPriorityLanes(lanes) {\n\t  switch (getHighestPriorityLane(lanes)) {\n\t    case SyncLane:\n\t      return SyncLane;\n\n\t    case InputContinuousHydrationLane:\n\t      return InputContinuousHydrationLane;\n\n\t    case InputContinuousLane:\n\t      return InputContinuousLane;\n\n\t    case DefaultHydrationLane:\n\t      return DefaultHydrationLane;\n\n\t    case DefaultLane:\n\t      return DefaultLane;\n\n\t    case TransitionHydrationLane:\n\t      return TransitionHydrationLane;\n\n\t    case TransitionLane1:\n\t    case TransitionLane2:\n\t    case TransitionLane3:\n\t    case TransitionLane4:\n\t    case TransitionLane5:\n\t    case TransitionLane6:\n\t    case TransitionLane7:\n\t    case TransitionLane8:\n\t    case TransitionLane9:\n\t    case TransitionLane10:\n\t    case TransitionLane11:\n\t    case TransitionLane12:\n\t    case TransitionLane13:\n\t    case TransitionLane14:\n\t    case TransitionLane15:\n\t    case TransitionLane16:\n\t      return lanes & TransitionLanes;\n\n\t    case RetryLane1:\n\t    case RetryLane2:\n\t    case RetryLane3:\n\t    case RetryLane4:\n\t    case RetryLane5:\n\t      return lanes & RetryLanes;\n\n\t    case SelectiveHydrationLane:\n\t      return SelectiveHydrationLane;\n\n\t    case IdleHydrationLane:\n\t      return IdleHydrationLane;\n\n\t    case IdleLane:\n\t      return IdleLane;\n\n\t    case OffscreenLane:\n\t      return OffscreenLane;\n\n\t    default:\n\t      {\n\t        error('Should have found matching lanes. This is a bug in React.');\n\t      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n\n\n\t      return lanes;\n\t  }\n\t}\n\n\tfunction getNextLanes(root, wipLanes) {\n\t  // Early bailout if there's no pending work left.\n\t  var pendingLanes = root.pendingLanes;\n\n\t  if (pendingLanes === NoLanes) {\n\t    return NoLanes;\n\t  }\n\n\t  var nextLanes = NoLanes;\n\t  var suspendedLanes = root.suspendedLanes;\n\t  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n\t  // even if the work is suspended.\n\n\t  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n\n\t  if (nonIdlePendingLanes !== NoLanes) {\n\t    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n\n\t    if (nonIdleUnblockedLanes !== NoLanes) {\n\t      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n\t    } else {\n\t      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n\n\t      if (nonIdlePingedLanes !== NoLanes) {\n\t        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n\t      }\n\t    }\n\t  } else {\n\t    // The only remaining work is Idle.\n\t    var unblockedLanes = pendingLanes & ~suspendedLanes;\n\n\t    if (unblockedLanes !== NoLanes) {\n\t      nextLanes = getHighestPriorityLanes(unblockedLanes);\n\t    } else {\n\t      if (pingedLanes !== NoLanes) {\n\t        nextLanes = getHighestPriorityLanes(pingedLanes);\n\t      }\n\t    }\n\t  }\n\n\t  if (nextLanes === NoLanes) {\n\t    // This should only be reachable if we're suspended\n\t    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n\t    return NoLanes;\n\t  } // If we're already in the middle of a render, switching lanes will interrupt\n\t  // it and we'll lose our progress. We should only do this if the new lanes are\n\t  // higher priority.\n\n\n\t  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n\t  // bother waiting until the root is complete.\n\t  (wipLanes & suspendedLanes) === NoLanes) {\n\t    var nextLane = getHighestPriorityLane(nextLanes);\n\t    var wipLane = getHighestPriorityLane(wipLanes);\n\n\t    if ( // Tests whether the next lane is equal or lower priority than the wip\n\t    // one. This works because the bits decrease in priority as you go left.\n\t    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\n\t    // only difference between default updates and transition updates is that\n\t    // default updates do not support refresh transitions.\n\t    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n\t      // Keep working on the existing in-progress tree. Do not interrupt.\n\t      return wipLanes;\n\t    }\n\t  }\n\n\t  if ((nextLanes & InputContinuousLane) !== NoLanes) {\n\t    // When updates are sync by default, we entangle continuous priority updates\n\t    // and default updates, so they render in the same batch. The only reason\n\t    // they use separate lanes is because continuous updates should interrupt\n\t    // transitions, but default updates should not.\n\t    nextLanes |= pendingLanes & DefaultLane;\n\t  } // Check for entangled lanes and add them to the batch.\n\t  //\n\t  // A lane is said to be entangled with another when it's not allowed to render\n\t  // in a batch that does not also include the other lane. Typically we do this\n\t  // when multiple updates have the same source, and we only want to respond to\n\t  // the most recent event from that source.\n\t  //\n\t  // Note that we apply entanglements *after* checking for partial work above.\n\t  // This means that if a lane is entangled during an interleaved event while\n\t  // it's already rendering, we won't interrupt it. This is intentional, since\n\t  // entanglement is usually \"best effort\": we'll try our best to render the\n\t  // lanes in the same batch, but it's not worth throwing out partially\n\t  // completed work in order to do it.\n\t  // TODO: Reconsider this. The counter-argument is that the partial work\n\t  // represents an intermediate state, which we don't want to show to the user.\n\t  // And by spending extra time finishing it, we're increasing the amount of\n\t  // time it takes to show the final state, which is what they are actually\n\t  // waiting for.\n\t  //\n\t  // For those exceptions where entanglement is semantically important, like\n\t  // useMutableSource, we should ensure that there is no partial work at the\n\t  // time we apply the entanglement.\n\n\n\t  var entangledLanes = root.entangledLanes;\n\n\t  if (entangledLanes !== NoLanes) {\n\t    var entanglements = root.entanglements;\n\t    var lanes = nextLanes & entangledLanes;\n\n\t    while (lanes > 0) {\n\t      var index = pickArbitraryLaneIndex(lanes);\n\t      var lane = 1 << index;\n\t      nextLanes |= entanglements[index];\n\t      lanes &= ~lane;\n\t    }\n\t  }\n\n\t  return nextLanes;\n\t}\n\tfunction getMostRecentEventTime(root, lanes) {\n\t  var eventTimes = root.eventTimes;\n\t  var mostRecentEventTime = NoTimestamp;\n\n\t  while (lanes > 0) {\n\t    var index = pickArbitraryLaneIndex(lanes);\n\t    var lane = 1 << index;\n\t    var eventTime = eventTimes[index];\n\n\t    if (eventTime > mostRecentEventTime) {\n\t      mostRecentEventTime = eventTime;\n\t    }\n\n\t    lanes &= ~lane;\n\t  }\n\n\t  return mostRecentEventTime;\n\t}\n\n\tfunction computeExpirationTime(lane, currentTime) {\n\t  switch (lane) {\n\t    case SyncLane:\n\t    case InputContinuousHydrationLane:\n\t    case InputContinuousLane:\n\t      // User interactions should expire slightly more quickly.\n\t      //\n\t      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n\t      // When we made it larger, a product metric in www regressed, suggesting\n\t      // there's a user interaction that's being starved by a series of\n\t      // synchronous updates. If that theory is correct, the proper solution is\n\t      // to fix the starvation. However, this scenario supports the idea that\n\t      // expiration times are an important safeguard when starvation\n\t      // does happen.\n\t      return currentTime + 250;\n\n\t    case DefaultHydrationLane:\n\t    case DefaultLane:\n\t    case TransitionHydrationLane:\n\t    case TransitionLane1:\n\t    case TransitionLane2:\n\t    case TransitionLane3:\n\t    case TransitionLane4:\n\t    case TransitionLane5:\n\t    case TransitionLane6:\n\t    case TransitionLane7:\n\t    case TransitionLane8:\n\t    case TransitionLane9:\n\t    case TransitionLane10:\n\t    case TransitionLane11:\n\t    case TransitionLane12:\n\t    case TransitionLane13:\n\t    case TransitionLane14:\n\t    case TransitionLane15:\n\t    case TransitionLane16:\n\t      return currentTime + 5000;\n\n\t    case RetryLane1:\n\t    case RetryLane2:\n\t    case RetryLane3:\n\t    case RetryLane4:\n\t    case RetryLane5:\n\t      // TODO: Retries should be allowed to expire if they are CPU bound for\n\t      // too long, but when I made this change it caused a spike in browser\n\t      // crashes. There must be some other underlying bug; not super urgent but\n\t      // ideally should figure out why and fix it. Unfortunately we don't have\n\t      // a repro for the crashes, only detected via production metrics.\n\t      return NoTimestamp;\n\n\t    case SelectiveHydrationLane:\n\t    case IdleHydrationLane:\n\t    case IdleLane:\n\t    case OffscreenLane:\n\t      // Anything idle priority or lower should never expire.\n\t      return NoTimestamp;\n\n\t    default:\n\t      {\n\t        error('Should have found matching lanes. This is a bug in React.');\n\t      }\n\n\t      return NoTimestamp;\n\t  }\n\t}\n\n\tfunction markStarvedLanesAsExpired(root, currentTime) {\n\t  // TODO: This gets called every time we yield. We can optimize by storing\n\t  // the earliest expiration time on the root. Then use that to quickly bail out\n\t  // of this function.\n\t  var pendingLanes = root.pendingLanes;\n\t  var suspendedLanes = root.suspendedLanes;\n\t  var pingedLanes = root.pingedLanes;\n\t  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n\t  // expiration time. If so, we'll assume the update is being starved and mark\n\t  // it as expired to force it to finish.\n\n\t  var lanes = pendingLanes;\n\n\t  while (lanes > 0) {\n\t    var index = pickArbitraryLaneIndex(lanes);\n\t    var lane = 1 << index;\n\t    var expirationTime = expirationTimes[index];\n\n\t    if (expirationTime === NoTimestamp) {\n\t      // Found a pending lane with no expiration time. If it's not suspended, or\n\t      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n\t      // using the current time.\n\t      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n\t        // Assumes timestamps are monotonically increasing.\n\t        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n\t      }\n\t    } else if (expirationTime <= currentTime) {\n\t      // This lane expired\n\t      root.expiredLanes |= lane;\n\t    }\n\n\t    lanes &= ~lane;\n\t  }\n\t} // This returns the highest priority pending lanes regardless of whether they\n\t// are suspended.\n\n\tfunction getHighestPriorityPendingLanes(root) {\n\t  return getHighestPriorityLanes(root.pendingLanes);\n\t}\n\tfunction getLanesToRetrySynchronouslyOnError(root) {\n\t  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n\n\t  if (everythingButOffscreen !== NoLanes) {\n\t    return everythingButOffscreen;\n\t  }\n\n\t  if (everythingButOffscreen & OffscreenLane) {\n\t    return OffscreenLane;\n\t  }\n\n\t  return NoLanes;\n\t}\n\tfunction includesSyncLane(lanes) {\n\t  return (lanes & SyncLane) !== NoLanes;\n\t}\n\tfunction includesNonIdleWork(lanes) {\n\t  return (lanes & NonIdleLanes) !== NoLanes;\n\t}\n\tfunction includesOnlyRetries(lanes) {\n\t  return (lanes & RetryLanes) === lanes;\n\t}\n\tfunction includesOnlyNonUrgentLanes(lanes) {\n\t  var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n\t  return (lanes & UrgentLanes) === NoLanes;\n\t}\n\tfunction includesOnlyTransitions(lanes) {\n\t  return (lanes & TransitionLanes) === lanes;\n\t}\n\tfunction includesBlockingLane(root, lanes) {\n\n\t  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n\t  return (lanes & SyncDefaultLanes) !== NoLanes;\n\t}\n\tfunction includesExpiredLane(root, lanes) {\n\t  // This is a separate check from includesBlockingLane because a lane can\n\t  // expire after a render has already started.\n\t  return (lanes & root.expiredLanes) !== NoLanes;\n\t}\n\tfunction isTransitionLane(lane) {\n\t  return (lane & TransitionLanes) !== NoLanes;\n\t}\n\tfunction claimNextTransitionLane() {\n\t  // Cycle through the lanes, assigning each new transition to the next lane.\n\t  // In most cases, this means every transition gets its own lane, until we\n\t  // run out of lanes and cycle back to the beginning.\n\t  var lane = nextTransitionLane;\n\t  nextTransitionLane <<= 1;\n\n\t  if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n\t    nextTransitionLane = TransitionLane1;\n\t  }\n\n\t  return lane;\n\t}\n\tfunction claimNextRetryLane() {\n\t  var lane = nextRetryLane;\n\t  nextRetryLane <<= 1;\n\n\t  if ((nextRetryLane & RetryLanes) === NoLanes) {\n\t    nextRetryLane = RetryLane1;\n\t  }\n\n\t  return lane;\n\t}\n\tfunction getHighestPriorityLane(lanes) {\n\t  return lanes & -lanes;\n\t}\n\tfunction pickArbitraryLane(lanes) {\n\t  // This wrapper function gets inlined. Only exists so to communicate that it\n\t  // doesn't matter which bit is selected; you can pick any bit without\n\t  // affecting the algorithms where its used. Here I'm using\n\t  // getHighestPriorityLane because it requires the fewest operations.\n\t  return getHighestPriorityLane(lanes);\n\t}\n\n\tfunction pickArbitraryLaneIndex(lanes) {\n\t  return 31 - clz32(lanes);\n\t}\n\n\tfunction laneToIndex(lane) {\n\t  return pickArbitraryLaneIndex(lane);\n\t}\n\n\tfunction includesSomeLane(a, b) {\n\t  return (a & b) !== NoLanes;\n\t}\n\tfunction isSubsetOfLanes(set, subset) {\n\t  return (set & subset) === subset;\n\t}\n\tfunction mergeLanes(a, b) {\n\t  return a | b;\n\t}\n\tfunction removeLanes(set, subset) {\n\t  return set & ~subset;\n\t}\n\tfunction intersectLanes(a, b) {\n\t  return a & b;\n\t} // Seems redundant, but it changes the type from a single lane (used for\n\t// updates) to a group of lanes (used for flushing work).\n\n\tfunction laneToLanes(lane) {\n\t  return lane;\n\t}\n\tfunction higherPriorityLane(a, b) {\n\t  // This works because the bit ranges decrease in priority as you go left.\n\t  return a !== NoLane && a < b ? a : b;\n\t}\n\tfunction createLaneMap(initial) {\n\t  // Intentionally pushing one by one.\n\t  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n\t  var laneMap = [];\n\n\t  for (var i = 0; i < TotalLanes; i++) {\n\t    laneMap.push(initial);\n\t  }\n\n\t  return laneMap;\n\t}\n\tfunction markRootUpdated(root, updateLane, eventTime) {\n\t  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n\t  // could unblock them. Clear the suspended lanes so that we can try rendering\n\t  // them again.\n\t  //\n\t  // TODO: We really only need to unsuspend only lanes that are in the\n\t  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n\t  // path. This would exclude suspended updates in an unrelated sibling tree,\n\t  // since there's no way for this update to unblock it.\n\t  //\n\t  // We don't do this if the incoming update is idle, because we never process\n\t  // idle updates until after all the regular updates have finished; there's no\n\t  // way it could unblock a transition.\n\n\t  if (updateLane !== IdleLane) {\n\t    root.suspendedLanes = NoLanes;\n\t    root.pingedLanes = NoLanes;\n\t  }\n\n\t  var eventTimes = root.eventTimes;\n\t  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most\n\t  // recent event, and we assume time is monotonically increasing.\n\n\t  eventTimes[index] = eventTime;\n\t}\n\tfunction markRootSuspended(root, suspendedLanes) {\n\t  root.suspendedLanes |= suspendedLanes;\n\t  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n\t  var expirationTimes = root.expirationTimes;\n\t  var lanes = suspendedLanes;\n\n\t  while (lanes > 0) {\n\t    var index = pickArbitraryLaneIndex(lanes);\n\t    var lane = 1 << index;\n\t    expirationTimes[index] = NoTimestamp;\n\t    lanes &= ~lane;\n\t  }\n\t}\n\tfunction markRootPinged(root, pingedLanes, eventTime) {\n\t  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n\t}\n\tfunction markRootFinished(root, remainingLanes) {\n\t  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n\t  root.pendingLanes = remainingLanes; // Let's try everything again\n\n\t  root.suspendedLanes = NoLanes;\n\t  root.pingedLanes = NoLanes;\n\t  root.expiredLanes &= remainingLanes;\n\t  root.mutableReadLanes &= remainingLanes;\n\t  root.entangledLanes &= remainingLanes;\n\t  var entanglements = root.entanglements;\n\t  var eventTimes = root.eventTimes;\n\t  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work\n\n\t  var lanes = noLongerPendingLanes;\n\n\t  while (lanes > 0) {\n\t    var index = pickArbitraryLaneIndex(lanes);\n\t    var lane = 1 << index;\n\t    entanglements[index] = NoLanes;\n\t    eventTimes[index] = NoTimestamp;\n\t    expirationTimes[index] = NoTimestamp;\n\t    lanes &= ~lane;\n\t  }\n\t}\n\tfunction markRootEntangled(root, entangledLanes) {\n\t  // In addition to entangling each of the given lanes with each other, we also\n\t  // have to consider _transitive_ entanglements. For each lane that is already\n\t  // entangled with *any* of the given lanes, that lane is now transitively\n\t  // entangled with *all* the given lanes.\n\t  //\n\t  // Translated: If C is entangled with A, then entangling A with B also\n\t  // entangles C with B.\n\t  //\n\t  // If this is hard to grasp, it might help to intentionally break this\n\t  // function and look at the tests that fail in ReactTransition-test.js. Try\n\t  // commenting out one of the conditions below.\n\t  var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n\t  var entanglements = root.entanglements;\n\t  var lanes = rootEntangledLanes;\n\n\t  while (lanes) {\n\t    var index = pickArbitraryLaneIndex(lanes);\n\t    var lane = 1 << index;\n\n\t    if ( // Is this one of the newly entangled lanes?\n\t    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?\n\t    entanglements[index] & entangledLanes) {\n\t      entanglements[index] |= entangledLanes;\n\t    }\n\n\t    lanes &= ~lane;\n\t  }\n\t}\n\tfunction getBumpedLaneForHydration(root, renderLanes) {\n\t  var renderLane = getHighestPriorityLane(renderLanes);\n\t  var lane;\n\n\t  switch (renderLane) {\n\t    case InputContinuousLane:\n\t      lane = InputContinuousHydrationLane;\n\t      break;\n\n\t    case DefaultLane:\n\t      lane = DefaultHydrationLane;\n\t      break;\n\n\t    case TransitionLane1:\n\t    case TransitionLane2:\n\t    case TransitionLane3:\n\t    case TransitionLane4:\n\t    case TransitionLane5:\n\t    case TransitionLane6:\n\t    case TransitionLane7:\n\t    case TransitionLane8:\n\t    case TransitionLane9:\n\t    case TransitionLane10:\n\t    case TransitionLane11:\n\t    case TransitionLane12:\n\t    case TransitionLane13:\n\t    case TransitionLane14:\n\t    case TransitionLane15:\n\t    case TransitionLane16:\n\t    case RetryLane1:\n\t    case RetryLane2:\n\t    case RetryLane3:\n\t    case RetryLane4:\n\t    case RetryLane5:\n\t      lane = TransitionHydrationLane;\n\t      break;\n\n\t    case IdleLane:\n\t      lane = IdleHydrationLane;\n\t      break;\n\n\t    default:\n\t      // Everything else is already either a hydration lane, or shouldn't\n\t      // be retried at a hydration lane.\n\t      lane = NoLane;\n\t      break;\n\t  } // Check if the lane we chose is suspended. If so, that indicates that we\n\t  // already attempted and failed to hydrate at that level. Also check if we're\n\t  // already rendering that lane, which is rare but could happen.\n\n\n\t  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n\t    // Give up trying to hydrate and fall back to client render.\n\t    return NoLane;\n\t  }\n\n\t  return lane;\n\t}\n\tfunction addFiberToLanesMap(root, fiber, lanes) {\n\n\t  if (!isDevToolsPresent) {\n\t    return;\n\t  }\n\n\t  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n\n\t  while (lanes > 0) {\n\t    var index = laneToIndex(lanes);\n\t    var lane = 1 << index;\n\t    var updaters = pendingUpdatersLaneMap[index];\n\t    updaters.add(fiber);\n\t    lanes &= ~lane;\n\t  }\n\t}\n\tfunction movePendingFibersToMemoized(root, lanes) {\n\n\t  if (!isDevToolsPresent) {\n\t    return;\n\t  }\n\n\t  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n\t  var memoizedUpdaters = root.memoizedUpdaters;\n\n\t  while (lanes > 0) {\n\t    var index = laneToIndex(lanes);\n\t    var lane = 1 << index;\n\t    var updaters = pendingUpdatersLaneMap[index];\n\n\t    if (updaters.size > 0) {\n\t      updaters.forEach(function (fiber) {\n\t        var alternate = fiber.alternate;\n\n\t        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n\t          memoizedUpdaters.add(fiber);\n\t        }\n\t      });\n\t      updaters.clear();\n\t    }\n\n\t    lanes &= ~lane;\n\t  }\n\t}\n\tfunction getTransitionsForLanes(root, lanes) {\n\t  {\n\t    return null;\n\t  }\n\t}\n\n\tvar DiscreteEventPriority = SyncLane;\n\tvar ContinuousEventPriority = InputContinuousLane;\n\tvar DefaultEventPriority = DefaultLane;\n\tvar IdleEventPriority = IdleLane;\n\tvar currentUpdatePriority = NoLane;\n\tfunction getCurrentUpdatePriority() {\n\t  return currentUpdatePriority;\n\t}\n\tfunction setCurrentUpdatePriority(newPriority) {\n\t  currentUpdatePriority = newPriority;\n\t}\n\tfunction runWithPriority(priority, fn) {\n\t  var previousPriority = currentUpdatePriority;\n\n\t  try {\n\t    currentUpdatePriority = priority;\n\t    return fn();\n\t  } finally {\n\t    currentUpdatePriority = previousPriority;\n\t  }\n\t}\n\tfunction higherEventPriority(a, b) {\n\t  return a !== 0 && a < b ? a : b;\n\t}\n\tfunction lowerEventPriority(a, b) {\n\t  return a === 0 || a > b ? a : b;\n\t}\n\tfunction isHigherEventPriority(a, b) {\n\t  return a !== 0 && a < b;\n\t}\n\tfunction lanesToEventPriority(lanes) {\n\t  var lane = getHighestPriorityLane(lanes);\n\n\t  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n\t    return DiscreteEventPriority;\n\t  }\n\n\t  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n\t    return ContinuousEventPriority;\n\t  }\n\n\t  if (includesNonIdleWork(lane)) {\n\t    return DefaultEventPriority;\n\t  }\n\n\t  return IdleEventPriority;\n\t}\n\n\t// This module only exists as an ESM wrapper around the external CommonJS\n\tvar scheduleCallback = Scheduler.unstable_scheduleCallback;\n\tvar cancelCallback = Scheduler.unstable_cancelCallback;\n\tvar shouldYield = Scheduler.unstable_shouldYield;\n\tvar requestPaint = Scheduler.unstable_requestPaint;\n\tvar now = Scheduler.unstable_now;\n\tvar ImmediatePriority = Scheduler.unstable_ImmediatePriority;\n\tvar UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\n\tvar NormalPriority = Scheduler.unstable_NormalPriority;\n\tvar IdlePriority = Scheduler.unstable_IdlePriority;\n\t// this doesn't actually exist on the scheduler, but it *does*\n\t// on scheduler/unstable_mock, which we'll need for internal testing\n\tvar unstable_yieldValue = Scheduler.unstable_yieldValue;\n\tvar unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;\n\n\tvar rendererID = null;\n\tvar injectedHook = null;\n\tvar injectedProfilingHooks = null;\n\tvar hasLoggedError = false;\n\tvar isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\tfunction injectInternals(internals) {\n\t  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n\t    // No DevTools\n\t    return false;\n\t  }\n\n\t  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n\t  if (hook.isDisabled) {\n\t    // This isn't a real property on the hook, but it can be set to opt out\n\t    // of DevTools integration and associated warnings and logs.\n\t    // https://github.com/facebook/react/issues/3877\n\t    return true;\n\t  }\n\n\t  if (!hook.supportsFiber) {\n\t    {\n\t      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');\n\t    } // DevTools exists, even though it doesn't support Fiber.\n\n\n\t    return true;\n\t  }\n\n\t  try {\n\t    if (enableSchedulingProfiler) {\n\t      // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n\t      // This gives DevTools a way to feature detect that isn't tied to version number\n\t      // (since profiling and timeline are controlled by different feature flags).\n\t      internals = assign({}, internals, {\n\t        getLaneLabelMap: getLaneLabelMap,\n\t        injectProfilingHooks: injectProfilingHooks\n\t      });\n\t    }\n\n\t    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n\t    injectedHook = hook;\n\t  } catch (err) {\n\t    // Catch all errors because it is unsafe to throw during initialization.\n\t    {\n\t      error('React instrumentation encountered an error: %s.', err);\n\t    }\n\t  }\n\n\t  if (hook.checkDCE) {\n\t    // This is the real DevTools.\n\t    return true;\n\t  } else {\n\t    // This is likely a hook installed by Fast Refresh runtime.\n\t    return false;\n\t  }\n\t}\n\tfunction onScheduleRoot(root, children) {\n\t  {\n\t    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {\n\t      try {\n\t        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n\t      } catch (err) {\n\t        if ( !hasLoggedError) {\n\t          hasLoggedError = true;\n\n\t          error('React instrumentation encountered an error: %s', err);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\tfunction onCommitRoot(root, eventPriority) {\n\t  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n\t    try {\n\t      var didError = (root.current.flags & DidCapture) === DidCapture;\n\n\t      if (enableProfilerTimer) {\n\t        var schedulerPriority;\n\n\t        switch (eventPriority) {\n\t          case DiscreteEventPriority:\n\t            schedulerPriority = ImmediatePriority;\n\t            break;\n\n\t          case ContinuousEventPriority:\n\t            schedulerPriority = UserBlockingPriority;\n\t            break;\n\n\t          case DefaultEventPriority:\n\t            schedulerPriority = NormalPriority;\n\t            break;\n\n\t          case IdleEventPriority:\n\t            schedulerPriority = IdlePriority;\n\t            break;\n\n\t          default:\n\t            schedulerPriority = NormalPriority;\n\t            break;\n\t        }\n\n\t        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n\t      }\n\t    } catch (err) {\n\t      {\n\t        if (!hasLoggedError) {\n\t          hasLoggedError = true;\n\n\t          error('React instrumentation encountered an error: %s', err);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\tfunction onPostCommitRoot(root) {\n\t  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {\n\t    try {\n\t      injectedHook.onPostCommitFiberRoot(rendererID, root);\n\t    } catch (err) {\n\t      {\n\t        if (!hasLoggedError) {\n\t          hasLoggedError = true;\n\n\t          error('React instrumentation encountered an error: %s', err);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\tfunction onCommitUnmount(fiber) {\n\t  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n\t    try {\n\t      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n\t    } catch (err) {\n\t      {\n\t        if (!hasLoggedError) {\n\t          hasLoggedError = true;\n\n\t          error('React instrumentation encountered an error: %s', err);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\tfunction setIsStrictModeForDevtools(newIsStrictMode) {\n\t  {\n\t    if (typeof unstable_yieldValue === 'function') {\n\t      // We're in a test because Scheduler.unstable_yieldValue only exists\n\t      // in SchedulerMock. To reduce the noise in strict mode tests,\n\t      // suppress warnings and disable scheduler yielding during the double render\n\t      unstable_setDisableYieldValue(newIsStrictMode);\n\t      setSuppressWarning(newIsStrictMode);\n\t    }\n\n\t    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n\t      try {\n\t        injectedHook.setStrictMode(rendererID, newIsStrictMode);\n\t      } catch (err) {\n\t        {\n\t          if (!hasLoggedError) {\n\t            hasLoggedError = true;\n\n\t            error('React instrumentation encountered an error: %s', err);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t} // Profiler API hooks\n\n\tfunction injectProfilingHooks(profilingHooks) {\n\t  injectedProfilingHooks = profilingHooks;\n\t}\n\n\tfunction getLaneLabelMap() {\n\t  {\n\t    var map = new Map();\n\t    var lane = 1;\n\n\t    for (var index = 0; index < TotalLanes; index++) {\n\t      var label = getLabelForLane(lane);\n\t      map.set(lane, label);\n\t      lane *= 2;\n\t    }\n\n\t    return map;\n\t  }\n\t}\n\n\tfunction markCommitStarted(lanes) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {\n\t      injectedProfilingHooks.markCommitStarted(lanes);\n\t    }\n\t  }\n\t}\n\tfunction markCommitStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {\n\t      injectedProfilingHooks.markCommitStopped();\n\t    }\n\t  }\n\t}\n\tfunction markComponentRenderStarted(fiber) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {\n\t      injectedProfilingHooks.markComponentRenderStarted(fiber);\n\t    }\n\t  }\n\t}\n\tfunction markComponentRenderStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {\n\t      injectedProfilingHooks.markComponentRenderStopped();\n\t    }\n\t  }\n\t}\n\tfunction markComponentPassiveEffectMountStarted(fiber) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {\n\t      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n\t    }\n\t  }\n\t}\n\tfunction markComponentPassiveEffectMountStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {\n\t      injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n\t    }\n\t  }\n\t}\n\tfunction markComponentPassiveEffectUnmountStarted(fiber) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {\n\t      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n\t    }\n\t  }\n\t}\n\tfunction markComponentPassiveEffectUnmountStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {\n\t      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n\t    }\n\t  }\n\t}\n\tfunction markComponentLayoutEffectMountStarted(fiber) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {\n\t      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n\t    }\n\t  }\n\t}\n\tfunction markComponentLayoutEffectMountStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {\n\t      injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n\t    }\n\t  }\n\t}\n\tfunction markComponentLayoutEffectUnmountStarted(fiber) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {\n\t      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n\t    }\n\t  }\n\t}\n\tfunction markComponentLayoutEffectUnmountStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {\n\t      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n\t    }\n\t  }\n\t}\n\tfunction markComponentErrored(fiber, thrownValue, lanes) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {\n\t      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n\t    }\n\t  }\n\t}\n\tfunction markComponentSuspended(fiber, wakeable, lanes) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {\n\t      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n\t    }\n\t  }\n\t}\n\tfunction markLayoutEffectsStarted(lanes) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {\n\t      injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n\t    }\n\t  }\n\t}\n\tfunction markLayoutEffectsStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {\n\t      injectedProfilingHooks.markLayoutEffectsStopped();\n\t    }\n\t  }\n\t}\n\tfunction markPassiveEffectsStarted(lanes) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {\n\t      injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n\t    }\n\t  }\n\t}\n\tfunction markPassiveEffectsStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {\n\t      injectedProfilingHooks.markPassiveEffectsStopped();\n\t    }\n\t  }\n\t}\n\tfunction markRenderStarted(lanes) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {\n\t      injectedProfilingHooks.markRenderStarted(lanes);\n\t    }\n\t  }\n\t}\n\tfunction markRenderYielded() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {\n\t      injectedProfilingHooks.markRenderYielded();\n\t    }\n\t  }\n\t}\n\tfunction markRenderStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {\n\t      injectedProfilingHooks.markRenderStopped();\n\t    }\n\t  }\n\t}\n\tfunction markRenderScheduled(lane) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {\n\t      injectedProfilingHooks.markRenderScheduled(lane);\n\t    }\n\t  }\n\t}\n\tfunction markForceUpdateScheduled(fiber, lane) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {\n\t      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n\t    }\n\t  }\n\t}\n\tfunction markStateUpdateScheduled(fiber, lane) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {\n\t      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n\t    }\n\t  }\n\t}\n\n\t/**\n\t * inlined Object.is polyfill to avoid requiring consumers ship their own\n\t * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n\t */\n\tfunction is(x, y) {\n\t  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n\t  ;\n\t}\n\n\tvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\n\tvar syncQueue = null;\n\tvar includesLegacySyncCallbacks = false;\n\tvar isFlushingSyncQueue = false;\n\tfunction scheduleSyncCallback(callback) {\n\t  // Push this callback into an internal queue. We'll flush these either in\n\t  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n\t  if (syncQueue === null) {\n\t    syncQueue = [callback];\n\t  } else {\n\t    // Push onto existing queue. Don't need to schedule a callback because\n\t    // we already scheduled one when we created the queue.\n\t    syncQueue.push(callback);\n\t  }\n\t}\n\tfunction scheduleLegacySyncCallback(callback) {\n\t  includesLegacySyncCallbacks = true;\n\t  scheduleSyncCallback(callback);\n\t}\n\tfunction flushSyncCallbacksOnlyInLegacyMode() {\n\t  // Only flushes the queue if there's a legacy sync callback scheduled.\n\t  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n\t  // it might make more sense for the queue to be a list of roots instead of a\n\t  // list of generic callbacks. Then we can have two: one for legacy roots, one\n\t  // for concurrent roots. And this method would only flush the legacy ones.\n\t  if (includesLegacySyncCallbacks) {\n\t    flushSyncCallbacks();\n\t  }\n\t}\n\tfunction flushSyncCallbacks() {\n\t  if (!isFlushingSyncQueue && syncQueue !== null) {\n\t    // Prevent re-entrance.\n\t    isFlushingSyncQueue = true;\n\t    var i = 0;\n\t    var previousUpdatePriority = getCurrentUpdatePriority();\n\n\t    try {\n\t      var isSync = true;\n\t      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this\n\t      // queue is in the render or commit phases.\n\n\t      setCurrentUpdatePriority(DiscreteEventPriority);\n\n\t      for (; i < queue.length; i++) {\n\t        var callback = queue[i];\n\n\t        do {\n\t          callback = callback(isSync);\n\t        } while (callback !== null);\n\t      }\n\n\t      syncQueue = null;\n\t      includesLegacySyncCallbacks = false;\n\t    } catch (error) {\n\t      // If something throws, leave the remaining callbacks on the queue.\n\t      if (syncQueue !== null) {\n\t        syncQueue = syncQueue.slice(i + 1);\n\t      } // Resume flushing in the next tick\n\n\n\t      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n\t      throw error;\n\t    } finally {\n\t      setCurrentUpdatePriority(previousUpdatePriority);\n\t      isFlushingSyncQueue = false;\n\t    }\n\t  }\n\n\t  return null;\n\t}\n\n\t// This is imported by the event replaying implementation in React DOM. It's\n\t// in a separate file to break a circular dependency between the renderer and\n\t// the reconciler.\n\tfunction isRootDehydrated(root) {\n\t  var currentState = root.current.memoizedState;\n\t  return currentState.isDehydrated;\n\t}\n\n\t// TODO: Use the unified fiber stack module instead of this local one?\n\t// Intentionally not using it yet to derisk the initial implementation, because\n\t// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n\t// rather the ids be wrong than crash the whole reconciler.\n\tvar forkStack = [];\n\tvar forkStackIndex = 0;\n\tvar treeForkProvider = null;\n\tvar treeForkCount = 0;\n\tvar idStack = [];\n\tvar idStackIndex = 0;\n\tvar treeContextProvider = null;\n\tvar treeContextId = 1;\n\tvar treeContextOverflow = '';\n\tfunction isForkedChild(workInProgress) {\n\t  warnIfNotHydrating();\n\t  return (workInProgress.flags & Forked) !== NoFlags;\n\t}\n\tfunction getForksAtLevel(workInProgress) {\n\t  warnIfNotHydrating();\n\t  return treeForkCount;\n\t}\n\tfunction getTreeId() {\n\t  var overflow = treeContextOverflow;\n\t  var idWithLeadingBit = treeContextId;\n\t  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n\t  return id.toString(32) + overflow;\n\t}\n\tfunction pushTreeFork(workInProgress, totalChildren) {\n\t  // This is called right after we reconcile an array (or iterator) of child\n\t  // fibers, because that's the only place where we know how many children in\n\t  // the whole set without doing extra work later, or storing addtional\n\t  // information on the fiber.\n\t  //\n\t  // That's why this function is separate from pushTreeId — it's called during\n\t  // the render phase of the fork parent, not the child, which is where we push\n\t  // the other context values.\n\t  //\n\t  // In the Fizz implementation this is much simpler because the child is\n\t  // rendered in the same callstack as the parent.\n\t  //\n\t  // It might be better to just add a `forks` field to the Fiber type. It would\n\t  // make this module simpler.\n\t  warnIfNotHydrating();\n\t  forkStack[forkStackIndex++] = treeForkCount;\n\t  forkStack[forkStackIndex++] = treeForkProvider;\n\t  treeForkProvider = workInProgress;\n\t  treeForkCount = totalChildren;\n\t}\n\tfunction pushTreeId(workInProgress, totalChildren, index) {\n\t  warnIfNotHydrating();\n\t  idStack[idStackIndex++] = treeContextId;\n\t  idStack[idStackIndex++] = treeContextOverflow;\n\t  idStack[idStackIndex++] = treeContextProvider;\n\t  treeContextProvider = workInProgress;\n\t  var baseIdWithLeadingBit = treeContextId;\n\t  var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n\t  // of the id; we use it to account for leading 0s.\n\n\t  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n\t  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n\t  var slot = index + 1;\n\t  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n\t  // consideration the leading 1 we use to mark the end of the sequence.\n\n\t  if (length > 30) {\n\t    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n\t    // This branch assumes the length of the base id is greater than 5; it won't\n\t    // work for smaller ids, because you need 5 bits per character.\n\t    //\n\t    // We encode the id in multiple steps: first the base id, then the\n\t    // remaining digits.\n\t    //\n\t    // Each 5 bit sequence corresponds to a single base 32 character. So for\n\t    // example, if the current id is 23 bits long, we can convert 20 of those\n\t    // bits into a string of 4 characters, with 3 bits left over.\n\t    //\n\t    // First calculate how many bits in the base id represent a complete\n\t    // sequence of characters.\n\t    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n\n\t    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n\n\t    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n\n\t    var restOfBaseId = baseId >> numberOfOverflowBits;\n\t    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n\t    // we made more room, this time it won't overflow.\n\n\t    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n\t    var restOfNewBits = slot << restOfBaseLength;\n\t    var id = restOfNewBits | restOfBaseId;\n\t    var overflow = newOverflow + baseOverflow;\n\t    treeContextId = 1 << restOfLength | id;\n\t    treeContextOverflow = overflow;\n\t  } else {\n\t    // Normal path\n\t    var newBits = slot << baseLength;\n\n\t    var _id = newBits | baseId;\n\n\t    var _overflow = baseOverflow;\n\t    treeContextId = 1 << length | _id;\n\t    treeContextOverflow = _overflow;\n\t  }\n\t}\n\tfunction pushMaterializedTreeId(workInProgress) {\n\t  warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear\n\t  // in its children.\n\n\t  var returnFiber = workInProgress.return;\n\n\t  if (returnFiber !== null) {\n\t    var numberOfForks = 1;\n\t    var slotIndex = 0;\n\t    pushTreeFork(workInProgress, numberOfForks);\n\t    pushTreeId(workInProgress, numberOfForks, slotIndex);\n\t  }\n\t}\n\n\tfunction getBitLength(number) {\n\t  return 32 - clz32(number);\n\t}\n\n\tfunction getLeadingBit(id) {\n\t  return 1 << getBitLength(id) - 1;\n\t}\n\n\tfunction popTreeContext(workInProgress) {\n\t  // Restore the previous values.\n\t  // This is a bit more complicated than other context-like modules in Fiber\n\t  // because the same Fiber may appear on the stack multiple times and for\n\t  // different reasons. We have to keep popping until the work-in-progress is\n\t  // no longer at the top of the stack.\n\t  while (workInProgress === treeForkProvider) {\n\t    treeForkProvider = forkStack[--forkStackIndex];\n\t    forkStack[forkStackIndex] = null;\n\t    treeForkCount = forkStack[--forkStackIndex];\n\t    forkStack[forkStackIndex] = null;\n\t  }\n\n\t  while (workInProgress === treeContextProvider) {\n\t    treeContextProvider = idStack[--idStackIndex];\n\t    idStack[idStackIndex] = null;\n\t    treeContextOverflow = idStack[--idStackIndex];\n\t    idStack[idStackIndex] = null;\n\t    treeContextId = idStack[--idStackIndex];\n\t    idStack[idStackIndex] = null;\n\t  }\n\t}\n\tfunction getSuspendedTreeContext() {\n\t  warnIfNotHydrating();\n\n\t  if (treeContextProvider !== null) {\n\t    return {\n\t      id: treeContextId,\n\t      overflow: treeContextOverflow\n\t    };\n\t  } else {\n\t    return null;\n\t  }\n\t}\n\tfunction restoreSuspendedTreeContext(workInProgress, suspendedContext) {\n\t  warnIfNotHydrating();\n\t  idStack[idStackIndex++] = treeContextId;\n\t  idStack[idStackIndex++] = treeContextOverflow;\n\t  idStack[idStackIndex++] = treeContextProvider;\n\t  treeContextId = suspendedContext.id;\n\t  treeContextOverflow = suspendedContext.overflow;\n\t  treeContextProvider = workInProgress;\n\t}\n\n\tfunction warnIfNotHydrating() {\n\t  {\n\t    if (!getIsHydrating()) {\n\t      error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');\n\t    }\n\t  }\n\t}\n\n\t// This may have been an insertion or a hydration.\n\n\tvar hydrationParentFiber = null;\n\tvar nextHydratableInstance = null;\n\tvar isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches\n\t// due to earlier mismatches or a suspended fiber.\n\n\tvar didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary\n\n\tvar hydrationErrors = null;\n\n\tfunction warnIfHydrating() {\n\t  {\n\t    if (isHydrating) {\n\t      error('We should not be hydrating here. This is a bug in React. Please file a bug.');\n\t    }\n\t  }\n\t}\n\n\tfunction markDidThrowWhileHydratingDEV() {\n\t  {\n\t    didSuspendOrErrorDEV = true;\n\t  }\n\t}\n\tfunction didSuspendOrErrorWhileHydratingDEV() {\n\t  {\n\t    return didSuspendOrErrorDEV;\n\t  }\n\t}\n\n\tfunction enterHydrationState(fiber) {\n\t  if (!supportsHydration) {\n\t    return false;\n\t  }\n\n\t  var parentInstance = fiber.stateNode.containerInfo;\n\t  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);\n\t  hydrationParentFiber = fiber;\n\t  isHydrating = true;\n\t  hydrationErrors = null;\n\t  didSuspendOrErrorDEV = false;\n\t  return true;\n\t}\n\n\tfunction reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {\n\t  if (!supportsHydration) {\n\t    return false;\n\t  }\n\n\t  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);\n\t  hydrationParentFiber = fiber;\n\t  isHydrating = true;\n\t  hydrationErrors = null;\n\t  didSuspendOrErrorDEV = false;\n\n\t  if (treeContext !== null) {\n\t    restoreSuspendedTreeContext(fiber, treeContext);\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction warnUnhydratedInstance(returnFiber, instance) {\n\t  {\n\t    switch (returnFiber.tag) {\n\t      case HostRoot:\n\t        {\n\t          didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);\n\t          break;\n\t        }\n\n\t      case HostComponent:\n\t        {\n\t          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\t          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.\n\t          isConcurrentMode);\n\t          break;\n\t        }\n\n\t      case SuspenseComponent:\n\t        {\n\t          var suspenseState = returnFiber.memoizedState;\n\t          if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);\n\t          break;\n\t        }\n\t    }\n\t  }\n\t}\n\n\tfunction deleteHydratableInstance(returnFiber, instance) {\n\t  warnUnhydratedInstance(returnFiber, instance);\n\t  var childToDelete = createFiberFromHostInstanceForDeletion();\n\t  childToDelete.stateNode = instance;\n\t  childToDelete.return = returnFiber;\n\t  var deletions = returnFiber.deletions;\n\n\t  if (deletions === null) {\n\t    returnFiber.deletions = [childToDelete];\n\t    returnFiber.flags |= ChildDeletion;\n\t  } else {\n\t    deletions.push(childToDelete);\n\t  }\n\t}\n\n\tfunction warnNonhydratedInstance(returnFiber, fiber) {\n\t  {\n\t    if (didSuspendOrErrorDEV) {\n\t      // Inside a boundary that already suspended. We're currently rendering the\n\t      // siblings of a suspended node. The mismatch may be due to the missing\n\t      // data, so it's probably a false positive.\n\t      return;\n\t    }\n\n\t    switch (returnFiber.tag) {\n\t      case HostRoot:\n\t        {\n\t          var parentContainer = returnFiber.stateNode.containerInfo;\n\n\t          switch (fiber.tag) {\n\t            case HostComponent:\n\t              var type = fiber.type;\n\t              var props = fiber.pendingProps;\n\t              didNotFindHydratableInstanceWithinContainer(parentContainer, type, props);\n\t              break;\n\n\t            case HostText:\n\t              var text = fiber.pendingProps;\n\t              didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);\n\t              break;\n\n\t            case SuspenseComponent:\n\t              didNotFindHydratableSuspenseInstanceWithinContainer(parentContainer);\n\t              break;\n\t          }\n\n\t          break;\n\t        }\n\n\t      case HostComponent:\n\t        {\n\t          var parentType = returnFiber.type;\n\t          var parentProps = returnFiber.memoizedProps;\n\t          var parentInstance = returnFiber.stateNode;\n\n\t          switch (fiber.tag) {\n\t            case HostComponent:\n\t              {\n\t                var _type = fiber.type;\n\t                var _props = fiber.pendingProps;\n\t                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\t                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.\n\t                isConcurrentMode);\n\t                break;\n\t              }\n\n\t            case HostText:\n\t              {\n\t                var _text = fiber.pendingProps;\n\n\t                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\n\t                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.\n\t                _isConcurrentMode);\n\t                break;\n\t              }\n\n\t            case SuspenseComponent:\n\t              {\n\t                didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);\n\t                break;\n\t              }\n\t          }\n\n\t          break;\n\t        }\n\n\t      case SuspenseComponent:\n\t        {\n\t          var suspenseState = returnFiber.memoizedState;\n\t          var _parentInstance = suspenseState.dehydrated;\n\t          if (_parentInstance !== null) switch (fiber.tag) {\n\t            case HostComponent:\n\t              var _type2 = fiber.type;\n\t              var _props2 = fiber.pendingProps;\n\t              didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2, _props2);\n\t              break;\n\n\t            case HostText:\n\t              var _text2 = fiber.pendingProps;\n\t              didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);\n\t              break;\n\n\t            case SuspenseComponent:\n\t              didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(_parentInstance);\n\t              break;\n\t          }\n\t          break;\n\t        }\n\n\t      default:\n\t        return;\n\t    }\n\t  }\n\t}\n\n\tfunction insertNonHydratedInstance(returnFiber, fiber) {\n\t  fiber.flags = fiber.flags & ~Hydrating | Placement;\n\t  warnNonhydratedInstance(returnFiber, fiber);\n\t}\n\n\tfunction tryHydrate(fiber, nextInstance) {\n\t  switch (fiber.tag) {\n\t    case HostComponent:\n\t      {\n\t        var type = fiber.type;\n\t        var props = fiber.pendingProps;\n\t        var instance = canHydrateInstance(nextInstance, type, props);\n\n\t        if (instance !== null) {\n\t          fiber.stateNode = instance;\n\t          hydrationParentFiber = fiber;\n\t          nextHydratableInstance = getFirstHydratableChild(instance);\n\t          return true;\n\t        }\n\n\t        return false;\n\t      }\n\n\t    case HostText:\n\t      {\n\t        var text = fiber.pendingProps;\n\t        var textInstance = canHydrateTextInstance(nextInstance, text);\n\n\t        if (textInstance !== null) {\n\t          fiber.stateNode = textInstance;\n\t          hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.\n\n\t          nextHydratableInstance = null;\n\t          return true;\n\t        }\n\n\t        return false;\n\t      }\n\n\t    case SuspenseComponent:\n\t      {\n\t        var suspenseInstance = canHydrateSuspenseInstance(nextInstance);\n\n\t        if (suspenseInstance !== null) {\n\t          var suspenseState = {\n\t            dehydrated: suspenseInstance,\n\t            treeContext: getSuspendedTreeContext(),\n\t            retryLane: OffscreenLane\n\t          };\n\t          fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.\n\t          // This simplifies the code for getHostSibling and deleting nodes,\n\t          // since it doesn't have to consider all Suspense boundaries and\n\t          // check if they're dehydrated ones or not.\n\n\t          var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);\n\t          dehydratedFragment.return = fiber;\n\t          fiber.child = dehydratedFragment;\n\t          hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into\n\t          // it during the first pass. Instead, we'll reenter it later.\n\n\t          nextHydratableInstance = null;\n\t          return true;\n\t        }\n\n\t        return false;\n\t      }\n\n\t    default:\n\t      return false;\n\t  }\n\t}\n\n\tfunction shouldClientRenderOnMismatch(fiber) {\n\t  return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;\n\t}\n\n\tfunction throwOnHydrationMismatch(fiber) {\n\t  throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');\n\t}\n\n\tfunction tryToClaimNextHydratableInstance(fiber) {\n\t  if (!isHydrating) {\n\t    return;\n\t  }\n\n\t  var nextInstance = nextHydratableInstance;\n\n\t  if (!nextInstance) {\n\t    if (shouldClientRenderOnMismatch(fiber)) {\n\t      warnNonhydratedInstance(hydrationParentFiber, fiber);\n\t      throwOnHydrationMismatch();\n\t    } // Nothing to hydrate. Make it an insertion.\n\n\n\t    insertNonHydratedInstance(hydrationParentFiber, fiber);\n\t    isHydrating = false;\n\t    hydrationParentFiber = fiber;\n\t    return;\n\t  }\n\n\t  var firstAttemptedInstance = nextInstance;\n\n\t  if (!tryHydrate(fiber, nextInstance)) {\n\t    if (shouldClientRenderOnMismatch(fiber)) {\n\t      warnNonhydratedInstance(hydrationParentFiber, fiber);\n\t      throwOnHydrationMismatch();\n\t    } // If we can't hydrate this instance let's try the next one.\n\t    // We use this as a heuristic. It's based on intuition and not data so it\n\t    // might be flawed or unnecessary.\n\n\n\t    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n\t    var prevHydrationParentFiber = hydrationParentFiber;\n\n\t    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n\t      // Nothing to hydrate. Make it an insertion.\n\t      insertNonHydratedInstance(hydrationParentFiber, fiber);\n\t      isHydrating = false;\n\t      hydrationParentFiber = fiber;\n\t      return;\n\t    } // We matched the next one, we'll now assume that the first one was\n\t    // superfluous and we'll delete it. Since we can't eagerly delete it\n\t    // we'll have to schedule a deletion. To do that, this node needs a dummy\n\t    // fiber associated with it.\n\n\n\t    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n\t  }\n\t}\n\n\tfunction prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n\t  if (!supportsHydration) {\n\t    throw new Error('Expected prepareToHydrateHostInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t  }\n\n\t  var instance = fiber.stateNode;\n\t  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n\t  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.\n\n\t  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n\t  // is a new ref we mark this as an update.\n\n\t  if (updatePayload !== null) {\n\t    return true;\n\t  }\n\n\t  return false;\n\t}\n\n\tfunction prepareToHydrateHostTextInstance(fiber) {\n\t  if (!supportsHydration) {\n\t    throw new Error('Expected prepareToHydrateHostTextInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t  }\n\n\t  var textInstance = fiber.stateNode;\n\t  var textContent = fiber.memoizedProps;\n\t  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n\t  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber, shouldWarnIfMismatchDev);\n\n\t  if (shouldUpdate) {\n\t    // We assume that prepareToHydrateHostTextInstance is called in a context where the\n\t    // hydration parent is the parent host component of this host text.\n\t    var returnFiber = hydrationParentFiber;\n\n\t    if (returnFiber !== null) {\n\t      switch (returnFiber.tag) {\n\t        case HostRoot:\n\t          {\n\t            var parentContainer = returnFiber.stateNode.containerInfo;\n\t            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\t            didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\n\t            isConcurrentMode);\n\t            break;\n\t          }\n\n\t        case HostComponent:\n\t          {\n\t            var parentType = returnFiber.type;\n\t            var parentProps = returnFiber.memoizedProps;\n\t            var parentInstance = returnFiber.stateNode;\n\n\t            var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\n\t            didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\n\t            _isConcurrentMode2);\n\t            break;\n\t          }\n\t      }\n\t    }\n\t  }\n\n\t  return shouldUpdate;\n\t}\n\n\tfunction prepareToHydrateHostSuspenseInstance(fiber) {\n\t  if (!supportsHydration) {\n\t    throw new Error('Expected prepareToHydrateHostSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t  }\n\n\t  var suspenseState = fiber.memoizedState;\n\t  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n\t  if (!suspenseInstance) {\n\t    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t  }\n\n\t  hydrateSuspenseInstance(suspenseInstance, fiber);\n\t}\n\n\tfunction skipPastDehydratedSuspenseInstance(fiber) {\n\t  if (!supportsHydration) {\n\t    throw new Error('Expected skipPastDehydratedSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t  }\n\n\t  var suspenseState = fiber.memoizedState;\n\t  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n\t  if (!suspenseInstance) {\n\t    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t  }\n\n\t  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n\t}\n\n\tfunction popToNextHostParent(fiber) {\n\t  var parent = fiber.return;\n\n\t  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {\n\t    parent = parent.return;\n\t  }\n\n\t  hydrationParentFiber = parent;\n\t}\n\n\tfunction popHydrationState(fiber) {\n\t  if (!supportsHydration) {\n\t    return false;\n\t  }\n\n\t  if (fiber !== hydrationParentFiber) {\n\t    // We're deeper than the current hydration context, inside an inserted\n\t    // tree.\n\t    return false;\n\t  }\n\n\t  if (!isHydrating) {\n\t    // If we're not currently hydrating but we're in a hydration context, then\n\t    // we were an insertion and now need to pop up reenter hydration of our\n\t    // siblings.\n\t    popToNextHostParent(fiber);\n\t    isHydrating = true;\n\t    return false;\n\t  } // If we have any remaining hydratable nodes, we need to delete them now.\n\t  // We only do this deeper than head and body since they tend to have random\n\t  // other nodes in them. We also ignore components with pure text content in\n\t  // side of them. We also don't delete anything inside the root container.\n\n\n\t  if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {\n\t    var nextInstance = nextHydratableInstance;\n\n\t    if (nextInstance) {\n\t      if (shouldClientRenderOnMismatch(fiber)) {\n\t        warnIfUnhydratedTailNodes(fiber);\n\t        throwOnHydrationMismatch();\n\t      } else {\n\t        while (nextInstance) {\n\t          deleteHydratableInstance(fiber, nextInstance);\n\t          nextInstance = getNextHydratableSibling(nextInstance);\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  popToNextHostParent(fiber);\n\n\t  if (fiber.tag === SuspenseComponent) {\n\t    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n\t  } else {\n\t    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction hasUnhydratedTailNodes() {\n\t  return isHydrating && nextHydratableInstance !== null;\n\t}\n\n\tfunction warnIfUnhydratedTailNodes(fiber) {\n\t  var nextInstance = nextHydratableInstance;\n\n\t  while (nextInstance) {\n\t    warnUnhydratedInstance(fiber, nextInstance);\n\t    nextInstance = getNextHydratableSibling(nextInstance);\n\t  }\n\t}\n\n\tfunction resetHydrationState() {\n\t  if (!supportsHydration) {\n\t    return;\n\t  }\n\n\t  hydrationParentFiber = null;\n\t  nextHydratableInstance = null;\n\t  isHydrating = false;\n\t  didSuspendOrErrorDEV = false;\n\t}\n\n\tfunction upgradeHydrationErrorsToRecoverable() {\n\t  if (hydrationErrors !== null) {\n\t    // Successfully completed a forced client render. The errors that occurred\n\t    // during the hydration attempt are now recovered. We will log them in\n\t    // commit phase, once the entire tree has finished.\n\t    queueRecoverableErrors(hydrationErrors);\n\t    hydrationErrors = null;\n\t  }\n\t}\n\n\tfunction getIsHydrating() {\n\t  return isHydrating;\n\t}\n\n\tfunction queueHydrationError(error) {\n\t  if (hydrationErrors === null) {\n\t    hydrationErrors = [error];\n\t  } else {\n\t    hydrationErrors.push(error);\n\t  }\n\t}\n\n\tvar ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;\n\tvar NoTransition = null;\n\tfunction requestCurrentTransition() {\n\t  return ReactCurrentBatchConfig.transition;\n\t}\n\n\t/**\n\t * Performs equality by iterating through keys on an object and returning false\n\t * when any key has values which are not strictly equal between the arguments.\n\t * Returns true when the values of all keys are strictly equal.\n\t */\n\n\tfunction shallowEqual(objA, objB) {\n\t  if (objectIs(objA, objB)) {\n\t    return true;\n\t  }\n\n\t  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n\t    return false;\n\t  }\n\n\t  var keysA = Object.keys(objA);\n\t  var keysB = Object.keys(objB);\n\n\t  if (keysA.length !== keysB.length) {\n\t    return false;\n\t  } // Test for A's keys different from B.\n\n\n\t  for (var i = 0; i < keysA.length; i++) {\n\t    var currentKey = keysA[i];\n\n\t    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\n\t      return false;\n\t    }\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction describeFiber(fiber) {\n\t  fiber._debugOwner ? fiber._debugOwner.type : null ;\n\t  fiber._debugSource ;\n\n\t  switch (fiber.tag) {\n\t    case HostComponent:\n\t      return describeBuiltInComponentFrame(fiber.type);\n\n\t    case LazyComponent:\n\t      return describeBuiltInComponentFrame('Lazy');\n\n\t    case SuspenseComponent:\n\t      return describeBuiltInComponentFrame('Suspense');\n\n\t    case SuspenseListComponent:\n\t      return describeBuiltInComponentFrame('SuspenseList');\n\n\t    case FunctionComponent:\n\t    case IndeterminateComponent:\n\t    case SimpleMemoComponent:\n\t      return describeFunctionComponentFrame(fiber.type);\n\n\t    case ForwardRef:\n\t      return describeFunctionComponentFrame(fiber.type.render);\n\n\t    case ClassComponent:\n\t      return describeClassComponentFrame(fiber.type);\n\n\t    default:\n\t      return '';\n\t  }\n\t}\n\n\tfunction getStackByFiberInDevAndProd(workInProgress) {\n\t  try {\n\t    var info = '';\n\t    var node = workInProgress;\n\n\t    do {\n\t      info += describeFiber(node);\n\t      node = node.return;\n\t    } while (node);\n\n\t    return info;\n\t  } catch (x) {\n\t    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n\t  }\n\t}\n\n\tvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\tvar current = null;\n\tvar isRendering = false;\n\tfunction getCurrentFiberOwnerNameInDevOrNull() {\n\t  {\n\t    if (current === null) {\n\t      return null;\n\t    }\n\n\t    var owner = current._debugOwner;\n\n\t    if (owner !== null && typeof owner !== 'undefined') {\n\t      return getComponentNameFromFiber(owner);\n\t    }\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction getCurrentFiberStackInDev() {\n\t  {\n\t    if (current === null) {\n\t      return '';\n\t    } // Safe because if current fiber exists, we are reconciling,\n\t    // and it is guaranteed to be the work-in-progress version.\n\n\n\t    return getStackByFiberInDevAndProd(current);\n\t  }\n\t}\n\n\tfunction resetCurrentFiber() {\n\t  {\n\t    ReactDebugCurrentFrame$1.getCurrentStack = null;\n\t    current = null;\n\t    isRendering = false;\n\t  }\n\t}\n\tfunction setCurrentFiber(fiber) {\n\t  {\n\t    ReactDebugCurrentFrame$1.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;\n\t    current = fiber;\n\t    isRendering = false;\n\t  }\n\t}\n\tfunction getCurrentFiber() {\n\t  {\n\t    return current;\n\t  }\n\t}\n\tfunction setIsRendering(rendering) {\n\t  {\n\t    isRendering = rendering;\n\t  }\n\t}\n\n\tvar ReactStrictModeWarnings = {\n\t  recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n\t  flushPendingUnsafeLifecycleWarnings: function () {},\n\t  recordLegacyContextWarning: function (fiber, instance) {},\n\t  flushLegacyContextWarning: function () {},\n\t  discardPendingWarnings: function () {}\n\t};\n\n\t{\n\t  var findStrictRoot = function (fiber) {\n\t    var maybeStrictRoot = null;\n\t    var node = fiber;\n\n\t    while (node !== null) {\n\t      if (node.mode & StrictLegacyMode) {\n\t        maybeStrictRoot = node;\n\t      }\n\n\t      node = node.return;\n\t    }\n\n\t    return maybeStrictRoot;\n\t  };\n\n\t  var setToSortedString = function (set) {\n\t    var array = [];\n\t    set.forEach(function (value) {\n\t      array.push(value);\n\t    });\n\t    return array.sort().join(', ');\n\t  };\n\n\t  var pendingComponentWillMountWarnings = [];\n\t  var pendingUNSAFE_ComponentWillMountWarnings = [];\n\t  var pendingComponentWillReceivePropsWarnings = [];\n\t  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n\t  var pendingComponentWillUpdateWarnings = [];\n\t  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n\t  var didWarnAboutUnsafeLifecycles = new Set();\n\n\t  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n\t    // Dedupe strategy: Warn once per component.\n\t    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n\t      return;\n\t    }\n\n\t    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.\n\t    instance.componentWillMount.__suppressDeprecationWarning !== true) {\n\t      pendingComponentWillMountWarnings.push(fiber);\n\t    }\n\n\t    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {\n\t      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n\t    }\n\n\t    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n\t      pendingComponentWillReceivePropsWarnings.push(fiber);\n\t    }\n\n\t    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n\t      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n\t    }\n\n\t    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n\t      pendingComponentWillUpdateWarnings.push(fiber);\n\t    }\n\n\t    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\n\t      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n\t    }\n\t  };\n\n\t  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n\t    // We do an initial pass to gather component names\n\t    var componentWillMountUniqueNames = new Set();\n\n\t    if (pendingComponentWillMountWarnings.length > 0) {\n\t      pendingComponentWillMountWarnings.forEach(function (fiber) {\n\t        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n\t        didWarnAboutUnsafeLifecycles.add(fiber.type);\n\t      });\n\t      pendingComponentWillMountWarnings = [];\n\t    }\n\n\t    var UNSAFE_componentWillMountUniqueNames = new Set();\n\n\t    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n\t      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n\t        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n\t        didWarnAboutUnsafeLifecycles.add(fiber.type);\n\t      });\n\t      pendingUNSAFE_ComponentWillMountWarnings = [];\n\t    }\n\n\t    var componentWillReceivePropsUniqueNames = new Set();\n\n\t    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n\t      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n\t        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n\t        didWarnAboutUnsafeLifecycles.add(fiber.type);\n\t      });\n\t      pendingComponentWillReceivePropsWarnings = [];\n\t    }\n\n\t    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n\n\t    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n\t      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\n\t        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n\t        didWarnAboutUnsafeLifecycles.add(fiber.type);\n\t      });\n\t      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n\t    }\n\n\t    var componentWillUpdateUniqueNames = new Set();\n\n\t    if (pendingComponentWillUpdateWarnings.length > 0) {\n\t      pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n\t        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n\t        didWarnAboutUnsafeLifecycles.add(fiber.type);\n\t      });\n\t      pendingComponentWillUpdateWarnings = [];\n\t    }\n\n\t    var UNSAFE_componentWillUpdateUniqueNames = new Set();\n\n\t    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n\t      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n\t        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n\t        didWarnAboutUnsafeLifecycles.add(fiber.type);\n\t      });\n\t      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n\t    } // Finally, we flush all the warnings\n\t    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n\n\t    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n\t      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n\n\t      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '\\nPlease update the following components: %s', sortedNames);\n\t    }\n\n\t    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n\t      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n\n\t      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, \" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '\\nPlease update the following components: %s', _sortedNames);\n\t    }\n\n\t    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n\t      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n\n\t      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '\\nPlease update the following components: %s', _sortedNames2);\n\t    }\n\n\t    if (componentWillMountUniqueNames.size > 0) {\n\t      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n\n\t      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames3);\n\t    }\n\n\t    if (componentWillReceivePropsUniqueNames.size > 0) {\n\t      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n\n\t      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, refactor your \" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames4);\n\t    }\n\n\t    if (componentWillUpdateUniqueNames.size > 0) {\n\t      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n\n\t      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames5);\n\t    }\n\t  };\n\n\t  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n\t  var didWarnAboutLegacyContext = new Set();\n\n\t  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n\t    var strictRoot = findStrictRoot(fiber);\n\n\t    if (strictRoot === null) {\n\t      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\n\t      return;\n\t    } // Dedup strategy: Warn once per component.\n\n\n\t    if (didWarnAboutLegacyContext.has(fiber.type)) {\n\t      return;\n\t    }\n\n\t    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n\t    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n\t      if (warningsForRoot === undefined) {\n\t        warningsForRoot = [];\n\t        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n\t      }\n\n\t      warningsForRoot.push(fiber);\n\t    }\n\t  };\n\n\t  ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n\t    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n\t      if (fiberArray.length === 0) {\n\t        return;\n\t      }\n\n\t      var firstFiber = fiberArray[0];\n\t      var uniqueNames = new Set();\n\t      fiberArray.forEach(function (fiber) {\n\t        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n\t        didWarnAboutLegacyContext.add(fiber.type);\n\t      });\n\t      var sortedNames = setToSortedString(uniqueNames);\n\n\t      try {\n\t        setCurrentFiber(firstFiber);\n\n\t        error('Legacy context API has been detected within a strict-mode tree.' + '\\n\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);\n\t      } finally {\n\t        resetCurrentFiber();\n\t      }\n\t    });\n\t  };\n\n\t  ReactStrictModeWarnings.discardPendingWarnings = function () {\n\t    pendingComponentWillMountWarnings = [];\n\t    pendingUNSAFE_ComponentWillMountWarnings = [];\n\t    pendingComponentWillReceivePropsWarnings = [];\n\t    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n\t    pendingComponentWillUpdateWarnings = [];\n\t    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n\t    pendingLegacyContextWarning = new Map();\n\t  };\n\t}\n\n\t/*\n\t * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n\t * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n\t *\n\t * The functions in this module will throw an easier-to-understand,\n\t * easier-to-debug exception with a clear errors message message explaining the\n\t * problem. (Instead of a confusing exception thrown inside the implementation\n\t * of the `value` object).\n\t */\n\t// $FlowFixMe only called in DEV, so void return is not possible.\n\tfunction typeName(value) {\n\t  {\n\t    // toStringTag is needed for namespaced types like Temporal.Instant\n\t    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n\t    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n\t    return type;\n\t  }\n\t} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\n\tfunction willCoercionThrow(value) {\n\t  {\n\t    try {\n\t      testStringCoercion(value);\n\t      return false;\n\t    } catch (e) {\n\t      return true;\n\t    }\n\t  }\n\t}\n\n\tfunction testStringCoercion(value) {\n\t  // If you ended up here by following an exception call stack, here's what's\n\t  // happened: you supplied an object or symbol value to React (as a prop, key,\n\t  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n\t  // coerce it to a string using `'' + value`, an exception was thrown.\n\t  //\n\t  // The most common types that will cause this exception are `Symbol` instances\n\t  // and Temporal objects like `Temporal.Instant`. But any object that has a\n\t  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n\t  // exception. (Library authors do this to prevent users from using built-in\n\t  // numeric operators like `+` or comparison operators like `>=` because custom\n\t  // methods are needed to perform accurate arithmetic or comparison.)\n\t  //\n\t  // To fix the problem, coerce this object or symbol value to a string before\n\t  // passing it to React. The most reliable way is usually `String(value)`.\n\t  //\n\t  // To find which value is throwing, check the browser or debugger console.\n\t  // Before this exception was thrown, there should be `console.error` output\n\t  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n\t  // problem and how that type was used: key, atrribute, input value prop, etc.\n\t  // In most cases, this console output also shows the component and its\n\t  // ancestor components where the exception happened.\n\t  //\n\t  // eslint-disable-next-line react-internal/safe-string-coercion\n\t  return '' + value;\n\t}\n\tfunction checkKeyStringCoercion(value) {\n\t  {\n\t    if (willCoercionThrow(value)) {\n\t      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n\t      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n\t    }\n\t  }\n\t}\n\tfunction checkPropStringCoercion(value, propName) {\n\t  {\n\t    if (willCoercionThrow(value)) {\n\t      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n\n\t      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n\t    }\n\t  }\n\t}\n\n\tfunction resolveDefaultProps(Component, baseProps) {\n\t  if (Component && Component.defaultProps) {\n\t    // Resolve default props. Taken from ReactElement\n\t    var props = assign({}, baseProps);\n\t    var defaultProps = Component.defaultProps;\n\n\t    for (var propName in defaultProps) {\n\t      if (props[propName] === undefined) {\n\t        props[propName] = defaultProps[propName];\n\t      }\n\t    }\n\n\t    return props;\n\t  }\n\n\t  return baseProps;\n\t}\n\n\tvar valueCursor = createCursor(null);\n\tvar rendererSigil;\n\n\t{\n\t  // Use this to detect multiple renderers using the same context\n\t  rendererSigil = {};\n\t}\n\n\tvar currentlyRenderingFiber = null;\n\tvar lastContextDependency = null;\n\tvar lastFullyObservedContext = null;\n\tvar isDisallowedContextReadInDEV = false;\n\tfunction resetContextDependencies() {\n\t  // This is called right before React yields execution, to ensure `readContext`\n\t  // cannot be called outside the render phase.\n\t  currentlyRenderingFiber = null;\n\t  lastContextDependency = null;\n\t  lastFullyObservedContext = null;\n\n\t  {\n\t    isDisallowedContextReadInDEV = false;\n\t  }\n\t}\n\tfunction enterDisallowedContextReadInDEV() {\n\t  {\n\t    isDisallowedContextReadInDEV = true;\n\t  }\n\t}\n\tfunction exitDisallowedContextReadInDEV() {\n\t  {\n\t    isDisallowedContextReadInDEV = false;\n\t  }\n\t}\n\tfunction pushProvider(providerFiber, context, nextValue) {\n\t  if (isPrimaryRenderer) {\n\t    push(valueCursor, context._currentValue, providerFiber);\n\t    context._currentValue = nextValue;\n\n\t    {\n\t      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n\t        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n\t      }\n\n\t      context._currentRenderer = rendererSigil;\n\t    }\n\t  } else {\n\t    push(valueCursor, context._currentValue2, providerFiber);\n\t    context._currentValue2 = nextValue;\n\n\t    {\n\t      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n\t        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n\t      }\n\n\t      context._currentRenderer2 = rendererSigil;\n\t    }\n\t  }\n\t}\n\tfunction popProvider(context, providerFiber) {\n\t  var currentValue = valueCursor.current;\n\t  pop(valueCursor, providerFiber);\n\n\t  if (isPrimaryRenderer) {\n\t    {\n\t      context._currentValue = currentValue;\n\t    }\n\t  } else {\n\t    {\n\t      context._currentValue2 = currentValue;\n\t    }\n\t  }\n\t}\n\tfunction scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n\t  // Update the child lanes of all the ancestors, including the alternates.\n\t  var node = parent;\n\n\t  while (node !== null) {\n\t    var alternate = node.alternate;\n\n\t    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n\t      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n\t      if (alternate !== null) {\n\t        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n\t      }\n\t    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n\t      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n\t    }\n\n\t    if (node === propagationRoot) {\n\t      break;\n\t    }\n\n\t    node = node.return;\n\t  }\n\n\t  {\n\t    if (node !== propagationRoot) {\n\t      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t    }\n\t  }\n\t}\n\tfunction propagateContextChange(workInProgress, context, renderLanes) {\n\t  {\n\t    propagateContextChange_eager(workInProgress, context, renderLanes);\n\t  }\n\t}\n\n\tfunction propagateContextChange_eager(workInProgress, context, renderLanes) {\n\n\t  var fiber = workInProgress.child;\n\n\t  if (fiber !== null) {\n\t    // Set the return pointer of the child to the work-in-progress fiber.\n\t    fiber.return = workInProgress;\n\t  }\n\n\t  while (fiber !== null) {\n\t    var nextFiber = void 0; // Visit this fiber.\n\n\t    var list = fiber.dependencies;\n\n\t    if (list !== null) {\n\t      nextFiber = fiber.child;\n\t      var dependency = list.firstContext;\n\n\t      while (dependency !== null) {\n\t        // Check if the context matches.\n\t        if (dependency.context === context) {\n\t          // Match! Schedule an update on this fiber.\n\t          if (fiber.tag === ClassComponent) {\n\t            // Schedule a force update on the work-in-progress.\n\t            var lane = pickArbitraryLane(renderLanes);\n\t            var update = createUpdate(NoTimestamp, lane);\n\t            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n\t            // update to the current fiber, too, which means it will persist even if\n\t            // this render is thrown away. Since it's a race condition, not sure it's\n\t            // worth fixing.\n\t            // Inlined `enqueueUpdate` to remove interleaved update check\n\n\t            var updateQueue = fiber.updateQueue;\n\n\t            if (updateQueue === null) ; else {\n\t              var sharedQueue = updateQueue.shared;\n\t              var pending = sharedQueue.pending;\n\n\t              if (pending === null) {\n\t                // This is the first update. Create a circular list.\n\t                update.next = update;\n\t              } else {\n\t                update.next = pending.next;\n\t                pending.next = update;\n\t              }\n\n\t              sharedQueue.pending = update;\n\t            }\n\t          }\n\n\t          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n\t          var alternate = fiber.alternate;\n\n\t          if (alternate !== null) {\n\t            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n\t          }\n\n\t          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n\n\t          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n\t          // dependency list.\n\n\t          break;\n\t        }\n\n\t        dependency = dependency.next;\n\t      }\n\t    } else if (fiber.tag === ContextProvider) {\n\t      // Don't scan deeper if this is a matching provider\n\t      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n\t    } else if (fiber.tag === DehydratedFragment) {\n\t      // If a dehydrated suspense boundary is in this subtree, we don't know\n\t      // if it will have any context consumers in it. The best we can do is\n\t      // mark it as having updates.\n\t      var parentSuspense = fiber.return;\n\n\t      if (parentSuspense === null) {\n\t        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\n\t      }\n\n\t      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n\t      var _alternate = parentSuspense.alternate;\n\n\t      if (_alternate !== null) {\n\t        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n\t      } // This is intentionally passing this fiber as the parent\n\t      // because we want to schedule this fiber as having work\n\t      // on its children. We'll use the childLanes on\n\t      // this fiber to indicate that a context has changed.\n\n\n\t      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n\t      nextFiber = fiber.sibling;\n\t    } else {\n\t      // Traverse down.\n\t      nextFiber = fiber.child;\n\t    }\n\n\t    if (nextFiber !== null) {\n\t      // Set the return pointer of the child to the work-in-progress fiber.\n\t      nextFiber.return = fiber;\n\t    } else {\n\t      // No child. Traverse to next sibling.\n\t      nextFiber = fiber;\n\n\t      while (nextFiber !== null) {\n\t        if (nextFiber === workInProgress) {\n\t          // We're back to the root of this subtree. Exit.\n\t          nextFiber = null;\n\t          break;\n\t        }\n\n\t        var sibling = nextFiber.sibling;\n\n\t        if (sibling !== null) {\n\t          // Set the return pointer of the sibling to the work-in-progress fiber.\n\t          sibling.return = nextFiber.return;\n\t          nextFiber = sibling;\n\t          break;\n\t        } // No more siblings. Traverse up.\n\n\n\t        nextFiber = nextFiber.return;\n\t      }\n\t    }\n\n\t    fiber = nextFiber;\n\t  }\n\t}\n\tfunction prepareToReadContext(workInProgress, renderLanes) {\n\t  currentlyRenderingFiber = workInProgress;\n\t  lastContextDependency = null;\n\t  lastFullyObservedContext = null;\n\t  var dependencies = workInProgress.dependencies;\n\n\t  if (dependencies !== null) {\n\t    {\n\t      var firstContext = dependencies.firstContext;\n\n\t      if (firstContext !== null) {\n\t        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n\t          // Context list has a pending update. Mark that this fiber performed work.\n\t          markWorkInProgressReceivedUpdate();\n\t        } // Reset the work-in-progress list\n\n\n\t        dependencies.firstContext = null;\n\t      }\n\t    }\n\t  }\n\t}\n\tfunction readContext(context) {\n\t  {\n\t    // This warning would fire if you read context inside a Hook like useMemo.\n\t    // Unlike the class check below, it's not enforced in production for perf.\n\t    if (isDisallowedContextReadInDEV) {\n\t      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n\t    }\n\t  }\n\n\t  var value = isPrimaryRenderer ? context._currentValue : context._currentValue2;\n\n\t  if (lastFullyObservedContext === context) ; else {\n\t    var contextItem = {\n\t      context: context,\n\t      memoizedValue: value,\n\t      next: null\n\t    };\n\n\t    if (lastContextDependency === null) {\n\t      if (currentlyRenderingFiber === null) {\n\t        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n\t      } // This is the first dependency for this component. Create a new list.\n\n\n\t      lastContextDependency = contextItem;\n\t      currentlyRenderingFiber.dependencies = {\n\t        lanes: NoLanes,\n\t        firstContext: contextItem\n\t      };\n\t    } else {\n\t      // Append a new context item.\n\t      lastContextDependency = lastContextDependency.next = contextItem;\n\t    }\n\t  }\n\n\t  return value;\n\t}\n\n\t// render. When this render exits, either because it finishes or because it is\n\t// interrupted, the interleaved updates will be transferred onto the main part\n\t// of the queue.\n\n\tvar concurrentQueues = null;\n\tfunction pushConcurrentUpdateQueue(queue) {\n\t  if (concurrentQueues === null) {\n\t    concurrentQueues = [queue];\n\t  } else {\n\t    concurrentQueues.push(queue);\n\t  }\n\t}\n\tfunction finishQueueingConcurrentUpdates() {\n\t  // Transfer the interleaved updates onto the main queue. Each queue has a\n\t  // `pending` field and an `interleaved` field. When they are not null, they\n\t  // point to the last node in a circular linked list. We need to append the\n\t  // interleaved list to the end of the pending list by joining them into a\n\t  // single, circular list.\n\t  if (concurrentQueues !== null) {\n\t    for (var i = 0; i < concurrentQueues.length; i++) {\n\t      var queue = concurrentQueues[i];\n\t      var lastInterleavedUpdate = queue.interleaved;\n\n\t      if (lastInterleavedUpdate !== null) {\n\t        queue.interleaved = null;\n\t        var firstInterleavedUpdate = lastInterleavedUpdate.next;\n\t        var lastPendingUpdate = queue.pending;\n\n\t        if (lastPendingUpdate !== null) {\n\t          var firstPendingUpdate = lastPendingUpdate.next;\n\t          lastPendingUpdate.next = firstInterleavedUpdate;\n\t          lastInterleavedUpdate.next = firstPendingUpdate;\n\t        }\n\n\t        queue.pending = lastInterleavedUpdate;\n\t      }\n\t    }\n\n\t    concurrentQueues = null;\n\t  }\n\t}\n\tfunction enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n\t  var interleaved = queue.interleaved;\n\n\t  if (interleaved === null) {\n\t    // This is the first update. Create a circular list.\n\t    update.next = update; // At the end of the current render, this queue's interleaved updates will\n\t    // be transferred to the pending queue.\n\n\t    pushConcurrentUpdateQueue(queue);\n\t  } else {\n\t    update.next = interleaved.next;\n\t    interleaved.next = update;\n\t  }\n\n\t  queue.interleaved = update;\n\t  return markUpdateLaneFromFiberToRoot(fiber, lane);\n\t}\n\tfunction enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {\n\t  var interleaved = queue.interleaved;\n\n\t  if (interleaved === null) {\n\t    // This is the first update. Create a circular list.\n\t    update.next = update; // At the end of the current render, this queue's interleaved updates will\n\t    // be transferred to the pending queue.\n\n\t    pushConcurrentUpdateQueue(queue);\n\t  } else {\n\t    update.next = interleaved.next;\n\t    interleaved.next = update;\n\t  }\n\n\t  queue.interleaved = update;\n\t}\n\tfunction enqueueConcurrentClassUpdate(fiber, queue, update, lane) {\n\t  var interleaved = queue.interleaved;\n\n\t  if (interleaved === null) {\n\t    // This is the first update. Create a circular list.\n\t    update.next = update; // At the end of the current render, this queue's interleaved updates will\n\t    // be transferred to the pending queue.\n\n\t    pushConcurrentUpdateQueue(queue);\n\t  } else {\n\t    update.next = interleaved.next;\n\t    interleaved.next = update;\n\t  }\n\n\t  queue.interleaved = update;\n\t  return markUpdateLaneFromFiberToRoot(fiber, lane);\n\t}\n\tfunction enqueueConcurrentRenderForLane(fiber, lane) {\n\t  return markUpdateLaneFromFiberToRoot(fiber, lane);\n\t} // Calling this function outside this module should only be done for backwards\n\t// compatibility and should always be accompanied by a warning.\n\n\tvar unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;\n\n\tfunction markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n\t  // Update the source fiber's lanes\n\t  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n\t  var alternate = sourceFiber.alternate;\n\n\t  if (alternate !== null) {\n\t    alternate.lanes = mergeLanes(alternate.lanes, lane);\n\t  }\n\n\t  {\n\t    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {\n\t      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n\t    }\n\t  } // Walk the parent path to the root and update the child lanes.\n\n\n\t  var node = sourceFiber;\n\t  var parent = sourceFiber.return;\n\n\t  while (parent !== null) {\n\t    parent.childLanes = mergeLanes(parent.childLanes, lane);\n\t    alternate = parent.alternate;\n\n\t    if (alternate !== null) {\n\t      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n\t    } else {\n\t      {\n\t        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n\t          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n\t        }\n\t      }\n\t    }\n\n\t    node = parent;\n\t    parent = parent.return;\n\t  }\n\n\t  if (node.tag === HostRoot) {\n\t    var root = node.stateNode;\n\t    return root;\n\t  } else {\n\t    return null;\n\t  }\n\t}\n\n\tvar UpdateState = 0;\n\tvar ReplaceState = 1;\n\tvar ForceUpdate = 2;\n\tvar CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n\t// It should only be read right after calling `processUpdateQueue`, via\n\t// `checkHasForceUpdateAfterProcessing`.\n\n\tvar hasForceUpdate = false;\n\tvar didWarnUpdateInsideUpdate;\n\tvar currentlyProcessingQueue;\n\n\t{\n\t  didWarnUpdateInsideUpdate = false;\n\t  currentlyProcessingQueue = null;\n\t}\n\n\tfunction initializeUpdateQueue(fiber) {\n\t  var queue = {\n\t    baseState: fiber.memoizedState,\n\t    firstBaseUpdate: null,\n\t    lastBaseUpdate: null,\n\t    shared: {\n\t      pending: null,\n\t      interleaved: null,\n\t      lanes: NoLanes\n\t    },\n\t    effects: null\n\t  };\n\t  fiber.updateQueue = queue;\n\t}\n\tfunction cloneUpdateQueue(current, workInProgress) {\n\t  // Clone the update queue from current. Unless it's already a clone.\n\t  var queue = workInProgress.updateQueue;\n\t  var currentQueue = current.updateQueue;\n\n\t  if (queue === currentQueue) {\n\t    var clone = {\n\t      baseState: currentQueue.baseState,\n\t      firstBaseUpdate: currentQueue.firstBaseUpdate,\n\t      lastBaseUpdate: currentQueue.lastBaseUpdate,\n\t      shared: currentQueue.shared,\n\t      effects: currentQueue.effects\n\t    };\n\t    workInProgress.updateQueue = clone;\n\t  }\n\t}\n\tfunction createUpdate(eventTime, lane) {\n\t  var update = {\n\t    eventTime: eventTime,\n\t    lane: lane,\n\t    tag: UpdateState,\n\t    payload: null,\n\t    callback: null,\n\t    next: null\n\t  };\n\t  return update;\n\t}\n\tfunction enqueueUpdate(fiber, update, lane) {\n\t  var updateQueue = fiber.updateQueue;\n\n\t  if (updateQueue === null) {\n\t    // Only occurs if the fiber has been unmounted.\n\t    return null;\n\t  }\n\n\t  var sharedQueue = updateQueue.shared;\n\n\t  {\n\t    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n\t      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n\n\t      didWarnUpdateInsideUpdate = true;\n\t    }\n\t  }\n\n\t  if (isUnsafeClassRenderPhaseUpdate()) {\n\t    // This is an unsafe render phase update. Add directly to the update\n\t    // queue so we can process it immediately during the current render.\n\t    var pending = sharedQueue.pending;\n\n\t    if (pending === null) {\n\t      // This is the first update. Create a circular list.\n\t      update.next = update;\n\t    } else {\n\t      update.next = pending.next;\n\t      pending.next = update;\n\t    }\n\n\t    sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering\n\t    // this fiber. This is for backwards compatibility in the case where you\n\t    // update a different component during render phase than the one that is\n\t    // currently renderings (a pattern that is accompanied by a warning).\n\n\t    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n\t  } else {\n\t    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n\t  }\n\t}\n\tfunction entangleTransitions(root, fiber, lane) {\n\t  var updateQueue = fiber.updateQueue;\n\n\t  if (updateQueue === null) {\n\t    // Only occurs if the fiber has been unmounted.\n\t    return;\n\t  }\n\n\t  var sharedQueue = updateQueue.shared;\n\n\t  if (isTransitionLane(lane)) {\n\t    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n\t    // have finished. We can remove them from the shared queue, which represents\n\t    // a superset of the actually pending lanes. In some cases we may entangle\n\t    // more than we need to, but that's OK. In fact it's worse if we *don't*\n\t    // entangle when we should.\n\n\t    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n\t    var newQueueLanes = mergeLanes(queueLanes, lane);\n\t    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n\t    // the lane finished since the last time we entangled it. So we need to\n\t    // entangle it again, just to be sure.\n\n\t    markRootEntangled(root, newQueueLanes);\n\t  }\n\t}\n\tfunction enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n\t  // Captured updates are updates that are thrown by a child during the render\n\t  // phase. They should be discarded if the render is aborted. Therefore,\n\t  // we should only put them on the work-in-progress queue, not the current one.\n\t  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n\t  var current = workInProgress.alternate;\n\n\t  if (current !== null) {\n\t    var currentQueue = current.updateQueue;\n\n\t    if (queue === currentQueue) {\n\t      // The work-in-progress queue is the same as current. This happens when\n\t      // we bail out on a parent fiber that then captures an error thrown by\n\t      // a child. Since we want to append the update only to the work-in\n\t      // -progress queue, we need to clone the updates. We usually clone during\n\t      // processUpdateQueue, but that didn't happen in this case because we\n\t      // skipped over the parent when we bailed out.\n\t      var newFirst = null;\n\t      var newLast = null;\n\t      var firstBaseUpdate = queue.firstBaseUpdate;\n\n\t      if (firstBaseUpdate !== null) {\n\t        // Loop through the updates and clone them.\n\t        var update = firstBaseUpdate;\n\n\t        do {\n\t          var clone = {\n\t            eventTime: update.eventTime,\n\t            lane: update.lane,\n\t            tag: update.tag,\n\t            payload: update.payload,\n\t            callback: update.callback,\n\t            next: null\n\t          };\n\n\t          if (newLast === null) {\n\t            newFirst = newLast = clone;\n\t          } else {\n\t            newLast.next = clone;\n\t            newLast = clone;\n\t          }\n\n\t          update = update.next;\n\t        } while (update !== null); // Append the captured update the end of the cloned list.\n\n\n\t        if (newLast === null) {\n\t          newFirst = newLast = capturedUpdate;\n\t        } else {\n\t          newLast.next = capturedUpdate;\n\t          newLast = capturedUpdate;\n\t        }\n\t      } else {\n\t        // There are no base updates.\n\t        newFirst = newLast = capturedUpdate;\n\t      }\n\n\t      queue = {\n\t        baseState: currentQueue.baseState,\n\t        firstBaseUpdate: newFirst,\n\t        lastBaseUpdate: newLast,\n\t        shared: currentQueue.shared,\n\t        effects: currentQueue.effects\n\t      };\n\t      workInProgress.updateQueue = queue;\n\t      return;\n\t    }\n\t  } // Append the update to the end of the list.\n\n\n\t  var lastBaseUpdate = queue.lastBaseUpdate;\n\n\t  if (lastBaseUpdate === null) {\n\t    queue.firstBaseUpdate = capturedUpdate;\n\t  } else {\n\t    lastBaseUpdate.next = capturedUpdate;\n\t  }\n\n\t  queue.lastBaseUpdate = capturedUpdate;\n\t}\n\n\tfunction getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n\t  switch (update.tag) {\n\t    case ReplaceState:\n\t      {\n\t        var payload = update.payload;\n\n\t        if (typeof payload === 'function') {\n\t          // Updater function\n\t          {\n\t            enterDisallowedContextReadInDEV();\n\t          }\n\n\t          var nextState = payload.call(instance, prevState, nextProps);\n\n\t          {\n\t            if ( workInProgress.mode & StrictLegacyMode) {\n\t              setIsStrictModeForDevtools(true);\n\n\t              try {\n\t                payload.call(instance, prevState, nextProps);\n\t              } finally {\n\t                setIsStrictModeForDevtools(false);\n\t              }\n\t            }\n\n\t            exitDisallowedContextReadInDEV();\n\t          }\n\n\t          return nextState;\n\t        } // State object\n\n\n\t        return payload;\n\t      }\n\n\t    case CaptureUpdate:\n\t      {\n\t        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n\t      }\n\t    // Intentional fallthrough\n\n\t    case UpdateState:\n\t      {\n\t        var _payload = update.payload;\n\t        var partialState;\n\n\t        if (typeof _payload === 'function') {\n\t          // Updater function\n\t          {\n\t            enterDisallowedContextReadInDEV();\n\t          }\n\n\t          partialState = _payload.call(instance, prevState, nextProps);\n\n\t          {\n\t            if ( workInProgress.mode & StrictLegacyMode) {\n\t              setIsStrictModeForDevtools(true);\n\n\t              try {\n\t                _payload.call(instance, prevState, nextProps);\n\t              } finally {\n\t                setIsStrictModeForDevtools(false);\n\t              }\n\t            }\n\n\t            exitDisallowedContextReadInDEV();\n\t          }\n\t        } else {\n\t          // Partial state object\n\t          partialState = _payload;\n\t        }\n\n\t        if (partialState === null || partialState === undefined) {\n\t          // Null and undefined are treated as no-ops.\n\t          return prevState;\n\t        } // Merge the partial state and the previous state.\n\n\n\t        return assign({}, prevState, partialState);\n\t      }\n\n\t    case ForceUpdate:\n\t      {\n\t        hasForceUpdate = true;\n\t        return prevState;\n\t      }\n\t  }\n\n\t  return prevState;\n\t}\n\n\tfunction processUpdateQueue(workInProgress, props, instance, renderLanes) {\n\t  // This is always non-null on a ClassComponent or HostRoot\n\t  var queue = workInProgress.updateQueue;\n\t  hasForceUpdate = false;\n\n\t  {\n\t    currentlyProcessingQueue = queue.shared;\n\t  }\n\n\t  var firstBaseUpdate = queue.firstBaseUpdate;\n\t  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n\t  var pendingQueue = queue.shared.pending;\n\n\t  if (pendingQueue !== null) {\n\t    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n\t    // and last so that it's non-circular.\n\n\t    var lastPendingUpdate = pendingQueue;\n\t    var firstPendingUpdate = lastPendingUpdate.next;\n\t    lastPendingUpdate.next = null; // Append pending updates to base queue\n\n\t    if (lastBaseUpdate === null) {\n\t      firstBaseUpdate = firstPendingUpdate;\n\t    } else {\n\t      lastBaseUpdate.next = firstPendingUpdate;\n\t    }\n\n\t    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n\t    // we need to transfer the updates to that queue, too. Because the base\n\t    // queue is a singly-linked list with no cycles, we can append to both\n\t    // lists and take advantage of structural sharing.\n\t    // TODO: Pass `current` as argument\n\n\t    var current = workInProgress.alternate;\n\n\t    if (current !== null) {\n\t      // This is always non-null on a ClassComponent or HostRoot\n\t      var currentQueue = current.updateQueue;\n\t      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n\n\t      if (currentLastBaseUpdate !== lastBaseUpdate) {\n\t        if (currentLastBaseUpdate === null) {\n\t          currentQueue.firstBaseUpdate = firstPendingUpdate;\n\t        } else {\n\t          currentLastBaseUpdate.next = firstPendingUpdate;\n\t        }\n\n\t        currentQueue.lastBaseUpdate = lastPendingUpdate;\n\t      }\n\t    }\n\t  } // These values may change as we process the queue.\n\n\n\t  if (firstBaseUpdate !== null) {\n\t    // Iterate through the list of updates to compute the result.\n\t    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n\t    // from the original lanes.\n\n\t    var newLanes = NoLanes;\n\t    var newBaseState = null;\n\t    var newFirstBaseUpdate = null;\n\t    var newLastBaseUpdate = null;\n\t    var update = firstBaseUpdate;\n\n\t    do {\n\t      var updateLane = update.lane;\n\t      var updateEventTime = update.eventTime;\n\n\t      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n\t        // Priority is insufficient. Skip this update. If this is the first\n\t        // skipped update, the previous update/state is the new base\n\t        // update/state.\n\t        var clone = {\n\t          eventTime: updateEventTime,\n\t          lane: updateLane,\n\t          tag: update.tag,\n\t          payload: update.payload,\n\t          callback: update.callback,\n\t          next: null\n\t        };\n\n\t        if (newLastBaseUpdate === null) {\n\t          newFirstBaseUpdate = newLastBaseUpdate = clone;\n\t          newBaseState = newState;\n\t        } else {\n\t          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n\t        } // Update the remaining priority in the queue.\n\n\n\t        newLanes = mergeLanes(newLanes, updateLane);\n\t      } else {\n\t        // This update does have sufficient priority.\n\t        if (newLastBaseUpdate !== null) {\n\t          var _clone = {\n\t            eventTime: updateEventTime,\n\t            // This update is going to be committed so we never want uncommit\n\t            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n\t            // this will never be skipped by the check above.\n\t            lane: NoLane,\n\t            tag: update.tag,\n\t            payload: update.payload,\n\t            callback: update.callback,\n\t            next: null\n\t          };\n\t          newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n\t        } // Process this update.\n\n\n\t        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n\t        var callback = update.callback;\n\n\t        if (callback !== null && // If the update was already committed, we should not queue its\n\t        // callback again.\n\t        update.lane !== NoLane) {\n\t          workInProgress.flags |= Callback;\n\t          var effects = queue.effects;\n\n\t          if (effects === null) {\n\t            queue.effects = [update];\n\t          } else {\n\t            effects.push(update);\n\t          }\n\t        }\n\t      }\n\n\t      update = update.next;\n\n\t      if (update === null) {\n\t        pendingQueue = queue.shared.pending;\n\n\t        if (pendingQueue === null) {\n\t          break;\n\t        } else {\n\t          // An update was scheduled from inside a reducer. Add the new\n\t          // pending updates to the end of the list and keep processing.\n\t          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n\t          // unravel them when transferring them to the base queue.\n\n\t          var _firstPendingUpdate = _lastPendingUpdate.next;\n\t          _lastPendingUpdate.next = null;\n\t          update = _firstPendingUpdate;\n\t          queue.lastBaseUpdate = _lastPendingUpdate;\n\t          queue.shared.pending = null;\n\t        }\n\t      }\n\t    } while (true);\n\n\t    if (newLastBaseUpdate === null) {\n\t      newBaseState = newState;\n\t    }\n\n\t    queue.baseState = newBaseState;\n\t    queue.firstBaseUpdate = newFirstBaseUpdate;\n\t    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to\n\t    // process them during this render, but we do need to track which lanes\n\t    // are remaining.\n\n\t    var lastInterleaved = queue.shared.interleaved;\n\n\t    if (lastInterleaved !== null) {\n\t      var interleaved = lastInterleaved;\n\n\t      do {\n\t        newLanes = mergeLanes(newLanes, interleaved.lane);\n\t        interleaved = interleaved.next;\n\t      } while (interleaved !== lastInterleaved);\n\t    } else if (firstBaseUpdate === null) {\n\t      // `queue.lanes` is used for entangling transitions. We can set it back to\n\t      // zero once the queue is empty.\n\t      queue.shared.lanes = NoLanes;\n\t    } // Set the remaining expiration time to be whatever is remaining in the queue.\n\t    // This should be fine because the only two other things that contribute to\n\t    // expiration time are props and context. We're already in the middle of the\n\t    // begin phase by the time we start processing the queue, so we've already\n\t    // dealt with the props. Context in components that specify\n\t    // shouldComponentUpdate is tricky; but we'll have to account for\n\t    // that regardless.\n\n\n\t    markSkippedUpdateLanes(newLanes);\n\t    workInProgress.lanes = newLanes;\n\t    workInProgress.memoizedState = newState;\n\t  }\n\n\t  {\n\t    currentlyProcessingQueue = null;\n\t  }\n\t}\n\n\tfunction callCallback(callback, context) {\n\t  if (typeof callback !== 'function') {\n\t    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + (\"received: \" + callback));\n\t  }\n\n\t  callback.call(context);\n\t}\n\n\tfunction resetHasForceUpdateBeforeProcessing() {\n\t  hasForceUpdate = false;\n\t}\n\tfunction checkHasForceUpdateAfterProcessing() {\n\t  return hasForceUpdate;\n\t}\n\tfunction commitUpdateQueue(finishedWork, finishedQueue, instance) {\n\t  // Commit the effects\n\t  var effects = finishedQueue.effects;\n\t  finishedQueue.effects = null;\n\n\t  if (effects !== null) {\n\t    for (var i = 0; i < effects.length; i++) {\n\t      var effect = effects[i];\n\t      var callback = effect.callback;\n\n\t      if (callback !== null) {\n\t        effect.callback = null;\n\t        callCallback(callback, instance);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tvar fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.\n\t// We'll use it to determine whether we need to initialize legacy refs.\n\n\tvar emptyRefsObject = new React.Component().refs;\n\tvar didWarnAboutStateAssignmentForComponent;\n\tvar didWarnAboutUninitializedState;\n\tvar didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n\tvar didWarnAboutLegacyLifecyclesAndDerivedState;\n\tvar didWarnAboutUndefinedDerivedState;\n\tvar warnOnUndefinedDerivedState;\n\tvar warnOnInvalidCallback;\n\tvar didWarnAboutDirectlyAssigningPropsToState;\n\tvar didWarnAboutContextTypeAndContextTypes;\n\tvar didWarnAboutInvalidateContextType;\n\n\t{\n\t  didWarnAboutStateAssignmentForComponent = new Set();\n\t  didWarnAboutUninitializedState = new Set();\n\t  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n\t  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n\t  didWarnAboutDirectlyAssigningPropsToState = new Set();\n\t  didWarnAboutUndefinedDerivedState = new Set();\n\t  didWarnAboutContextTypeAndContextTypes = new Set();\n\t  didWarnAboutInvalidateContextType = new Set();\n\t  var didWarnOnInvalidCallback = new Set();\n\n\t  warnOnInvalidCallback = function (callback, callerName) {\n\t    if (callback === null || typeof callback === 'function') {\n\t      return;\n\t    }\n\n\t    var key = callerName + '_' + callback;\n\n\t    if (!didWarnOnInvalidCallback.has(key)) {\n\t      didWarnOnInvalidCallback.add(key);\n\n\t      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n\t    }\n\t  };\n\n\t  warnOnUndefinedDerivedState = function (type, partialState) {\n\t    if (partialState === undefined) {\n\t      var componentName = getComponentNameFromType(type) || 'Component';\n\n\t      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n\t        didWarnAboutUndefinedDerivedState.add(componentName);\n\n\t        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n\t      }\n\t    }\n\t  }; // This is so gross but it's at least non-critical and can be removed if\n\t  // it causes problems. This is meant to give a nicer error message for\n\t  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n\t  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n\t  // exception.\n\n\n\t  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n\t    enumerable: false,\n\t    value: function () {\n\t      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');\n\t    }\n\t  });\n\t  Object.freeze(fakeInternalInstance);\n\t}\n\n\tfunction applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n\t  var prevState = workInProgress.memoizedState;\n\t  var partialState = getDerivedStateFromProps(nextProps, prevState);\n\n\t  {\n\t    if ( workInProgress.mode & StrictLegacyMode) {\n\t      setIsStrictModeForDevtools(true);\n\n\t      try {\n\t        // Invoke the function an extra time to help detect side-effects.\n\t        partialState = getDerivedStateFromProps(nextProps, prevState);\n\t      } finally {\n\t        setIsStrictModeForDevtools(false);\n\t      }\n\t    }\n\n\t    warnOnUndefinedDerivedState(ctor, partialState);\n\t  } // Merge the partial state and the previous state.\n\n\n\t  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n\t  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n\t  // base state.\n\n\t  if (workInProgress.lanes === NoLanes) {\n\t    // Queue is always non-null for classes\n\t    var updateQueue = workInProgress.updateQueue;\n\t    updateQueue.baseState = memoizedState;\n\t  }\n\t}\n\n\tvar classComponentUpdater = {\n\t  isMounted: isMounted,\n\t  enqueueSetState: function (inst, payload, callback) {\n\t    var fiber = get(inst);\n\t    var eventTime = requestEventTime();\n\t    var lane = requestUpdateLane(fiber);\n\t    var update = createUpdate(eventTime, lane);\n\t    update.payload = payload;\n\n\t    if (callback !== undefined && callback !== null) {\n\t      {\n\t        warnOnInvalidCallback(callback, 'setState');\n\t      }\n\n\t      update.callback = callback;\n\t    }\n\n\t    var root = enqueueUpdate(fiber, update, lane);\n\n\t    if (root !== null) {\n\t      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t      entangleTransitions(root, fiber, lane);\n\t    }\n\n\t    {\n\t      markStateUpdateScheduled(fiber, lane);\n\t    }\n\t  },\n\t  enqueueReplaceState: function (inst, payload, callback) {\n\t    var fiber = get(inst);\n\t    var eventTime = requestEventTime();\n\t    var lane = requestUpdateLane(fiber);\n\t    var update = createUpdate(eventTime, lane);\n\t    update.tag = ReplaceState;\n\t    update.payload = payload;\n\n\t    if (callback !== undefined && callback !== null) {\n\t      {\n\t        warnOnInvalidCallback(callback, 'replaceState');\n\t      }\n\n\t      update.callback = callback;\n\t    }\n\n\t    var root = enqueueUpdate(fiber, update, lane);\n\n\t    if (root !== null) {\n\t      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t      entangleTransitions(root, fiber, lane);\n\t    }\n\n\t    {\n\t      markStateUpdateScheduled(fiber, lane);\n\t    }\n\t  },\n\t  enqueueForceUpdate: function (inst, callback) {\n\t    var fiber = get(inst);\n\t    var eventTime = requestEventTime();\n\t    var lane = requestUpdateLane(fiber);\n\t    var update = createUpdate(eventTime, lane);\n\t    update.tag = ForceUpdate;\n\n\t    if (callback !== undefined && callback !== null) {\n\t      {\n\t        warnOnInvalidCallback(callback, 'forceUpdate');\n\t      }\n\n\t      update.callback = callback;\n\t    }\n\n\t    var root = enqueueUpdate(fiber, update, lane);\n\n\t    if (root !== null) {\n\t      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t      entangleTransitions(root, fiber, lane);\n\t    }\n\n\t    {\n\t      markForceUpdateScheduled(fiber, lane);\n\t    }\n\t  }\n\t};\n\n\tfunction checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n\t  var instance = workInProgress.stateNode;\n\n\t  if (typeof instance.shouldComponentUpdate === 'function') {\n\t    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n\n\t    {\n\t      if ( workInProgress.mode & StrictLegacyMode) {\n\t        setIsStrictModeForDevtools(true);\n\n\t        try {\n\t          // Invoke the function an extra time to help detect side-effects.\n\t          shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n\t        } finally {\n\t          setIsStrictModeForDevtools(false);\n\t        }\n\t      }\n\n\t      if (shouldUpdate === undefined) {\n\t        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');\n\t      }\n\t    }\n\n\t    return shouldUpdate;\n\t  }\n\n\t  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n\t    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction checkClassInstance(workInProgress, ctor, newProps) {\n\t  var instance = workInProgress.stateNode;\n\n\t  {\n\t    var name = getComponentNameFromType(ctor) || 'Component';\n\t    var renderPresent = instance.render;\n\n\t    if (!renderPresent) {\n\t      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n\t        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n\t      } else {\n\t        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n\t      }\n\t    }\n\n\t    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n\t      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n\t    }\n\n\t    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n\t      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n\t    }\n\n\t    if (instance.propTypes) {\n\t      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n\t    }\n\n\t    if (instance.contextType) {\n\t      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n\t    }\n\n\t    {\n\t      if (instance.contextTypes) {\n\t        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n\t      }\n\n\t      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n\t        didWarnAboutContextTypeAndContextTypes.add(ctor);\n\n\t        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n\t      }\n\t    }\n\n\t    if (typeof instance.componentShouldUpdate === 'function') {\n\t      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n\t    }\n\n\t    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n\t      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\n\t    }\n\n\t    if (typeof instance.componentDidUnmount === 'function') {\n\t      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n\t    }\n\n\t    if (typeof instance.componentDidReceiveProps === 'function') {\n\t      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n\t    }\n\n\t    if (typeof instance.componentWillRecieveProps === 'function') {\n\t      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n\t    }\n\n\t    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n\t      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n\t    }\n\n\t    var hasMutatedProps = instance.props !== newProps;\n\n\t    if (instance.props !== undefined && hasMutatedProps) {\n\t      error('%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name);\n\t    }\n\n\t    if (instance.defaultProps) {\n\t      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n\t    }\n\n\t    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n\t      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n\n\t      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\n\t    }\n\n\t    if (typeof instance.getDerivedStateFromProps === 'function') {\n\t      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n\t    }\n\n\t    if (typeof instance.getDerivedStateFromError === 'function') {\n\t      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n\t    }\n\n\t    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n\t      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n\t    }\n\n\t    var _state = instance.state;\n\n\t    if (_state && (typeof _state !== 'object' || isArray(_state))) {\n\t      error('%s.state: must be set to an object or null', name);\n\t    }\n\n\t    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n\t      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n\t    }\n\t  }\n\t}\n\n\tfunction adoptClassInstance(workInProgress, instance) {\n\t  instance.updater = classComponentUpdater;\n\t  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n\t  set(instance, workInProgress);\n\n\t  {\n\t    instance._reactInternalInstance = fakeInternalInstance;\n\t  }\n\t}\n\n\tfunction constructClassInstance(workInProgress, ctor, props) {\n\t  var isLegacyContextConsumer = false;\n\t  var unmaskedContext = emptyContextObject;\n\t  var context = emptyContextObject;\n\t  var contextType = ctor.contextType;\n\n\t  {\n\t    if ('contextType' in ctor) {\n\t      var isValid = // Allow null for conditional declaration\n\t      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n\n\t      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n\t        didWarnAboutInvalidateContextType.add(ctor);\n\t        var addendum = '';\n\n\t        if (contextType === undefined) {\n\t          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n\t        } else if (typeof contextType !== 'object') {\n\t          addendum = ' However, it is set to a ' + typeof contextType + '.';\n\t        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n\t          addendum = ' Did you accidentally pass the Context.Provider instead?';\n\t        } else if (contextType._context !== undefined) {\n\t          // <Context.Consumer>\n\t          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n\t        } else {\n\t          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n\t        }\n\n\t        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\n\t      }\n\t    }\n\t  }\n\n\t  if (typeof contextType === 'object' && contextType !== null) {\n\t    context = readContext(contextType);\n\t  } else {\n\t    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n\t    var contextTypes = ctor.contextTypes;\n\t    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n\t    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n\t  }\n\n\t  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n\n\t  {\n\t    if ( workInProgress.mode & StrictLegacyMode) {\n\t      setIsStrictModeForDevtools(true);\n\n\t      try {\n\t        instance = new ctor(props, context); // eslint-disable-line no-new\n\t      } finally {\n\t        setIsStrictModeForDevtools(false);\n\t      }\n\t    }\n\t  }\n\n\t  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n\t  adoptClassInstance(workInProgress, instance);\n\n\t  {\n\t    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n\t      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n\t      if (!didWarnAboutUninitializedState.has(componentName)) {\n\t        didWarnAboutUninitializedState.add(componentName);\n\n\t        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n\t      }\n\t    } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n\t    // Warn about these lifecycles if they are present.\n\t    // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n\n\t    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n\t      var foundWillMountName = null;\n\t      var foundWillReceivePropsName = null;\n\t      var foundWillUpdateName = null;\n\n\t      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n\t        foundWillMountName = 'componentWillMount';\n\t      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n\t        foundWillMountName = 'UNSAFE_componentWillMount';\n\t      }\n\n\t      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n\t        foundWillReceivePropsName = 'componentWillReceiveProps';\n\t      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n\t        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n\t      }\n\n\t      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n\t        foundWillUpdateName = 'componentWillUpdate';\n\t      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n\t        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n\t      }\n\n\t      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n\t        var _componentName = getComponentNameFromType(ctor) || 'Component';\n\n\t        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n\n\t        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n\t          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n\n\t          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n\t        }\n\t      }\n\t    }\n\t  } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n\t  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n\n\t  if (isLegacyContextConsumer) {\n\t    cacheContext(workInProgress, unmaskedContext, context);\n\t  }\n\n\t  return instance;\n\t}\n\n\tfunction callComponentWillMount(workInProgress, instance) {\n\t  var oldState = instance.state;\n\n\t  if (typeof instance.componentWillMount === 'function') {\n\t    instance.componentWillMount();\n\t  }\n\n\t  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n\t    instance.UNSAFE_componentWillMount();\n\t  }\n\n\t  if (oldState !== instance.state) {\n\t    {\n\t      error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');\n\t    }\n\n\t    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n\t  }\n\t}\n\n\tfunction callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n\t  var oldState = instance.state;\n\n\t  if (typeof instance.componentWillReceiveProps === 'function') {\n\t    instance.componentWillReceiveProps(newProps, nextContext);\n\t  }\n\n\t  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n\t    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n\t  }\n\n\t  if (instance.state !== oldState) {\n\t    {\n\t      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';\n\n\t      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n\t        didWarnAboutStateAssignmentForComponent.add(componentName);\n\n\t        error('%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n\t      }\n\t    }\n\n\t    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n\t  }\n\t} // Invokes the mount life-cycles on a previously never rendered instance.\n\n\n\tfunction mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n\t  {\n\t    checkClassInstance(workInProgress, ctor, newProps);\n\t  }\n\n\t  var instance = workInProgress.stateNode;\n\t  instance.props = newProps;\n\t  instance.state = workInProgress.memoizedState;\n\t  instance.refs = emptyRefsObject;\n\t  initializeUpdateQueue(workInProgress);\n\t  var contextType = ctor.contextType;\n\n\t  if (typeof contextType === 'object' && contextType !== null) {\n\t    instance.context = readContext(contextType);\n\t  } else {\n\t    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n\t    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n\t  }\n\n\t  {\n\t    if (instance.state === newProps) {\n\t      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n\t      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n\t        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n\n\t        error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n\t      }\n\t    }\n\n\t    if (workInProgress.mode & StrictLegacyMode) {\n\t      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n\t    }\n\n\t    {\n\t      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n\t    }\n\t  }\n\n\t  instance.state = workInProgress.memoizedState;\n\t  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n\t  if (typeof getDerivedStateFromProps === 'function') {\n\t    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n\t    instance.state = workInProgress.memoizedState;\n\t  } // In order to support react-lifecycles-compat polyfilled components,\n\t  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\n\t  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n\t    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n\t    // process them now.\n\n\t    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n\t    instance.state = workInProgress.memoizedState;\n\t  }\n\n\t  if (typeof instance.componentDidMount === 'function') {\n\t    var fiberFlags = Update;\n\n\t    {\n\t      fiberFlags |= LayoutStatic;\n\t    }\n\n\t    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n\t      fiberFlags |= MountLayoutDev;\n\t    }\n\n\t    workInProgress.flags |= fiberFlags;\n\t  }\n\t}\n\n\tfunction resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n\t  var instance = workInProgress.stateNode;\n\t  var oldProps = workInProgress.memoizedProps;\n\t  instance.props = oldProps;\n\t  var oldContext = instance.context;\n\t  var contextType = ctor.contextType;\n\t  var nextContext = emptyContextObject;\n\n\t  if (typeof contextType === 'object' && contextType !== null) {\n\t    nextContext = readContext(contextType);\n\t  } else {\n\t    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n\t    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n\t  }\n\n\t  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\t  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n\t  // ever the previously attempted to render - not the \"current\". However,\n\t  // during componentDidUpdate we pass the \"current\" props.\n\t  // In order to support react-lifecycles-compat polyfilled components,\n\t  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\t  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n\t    if (oldProps !== newProps || oldContext !== nextContext) {\n\t      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n\t    }\n\t  }\n\n\t  resetHasForceUpdateBeforeProcessing();\n\t  var oldState = workInProgress.memoizedState;\n\t  var newState = instance.state = oldState;\n\t  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n\t  newState = workInProgress.memoizedState;\n\n\t  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n\t    // If an update was already in progress, we should schedule an Update\n\t    // effect even though we're bailing out, so that cWU/cDU are called.\n\t    if (typeof instance.componentDidMount === 'function') {\n\t      var fiberFlags = Update;\n\n\t      {\n\t        fiberFlags |= LayoutStatic;\n\t      }\n\n\t      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n\t        fiberFlags |= MountLayoutDev;\n\t      }\n\n\t      workInProgress.flags |= fiberFlags;\n\t    }\n\n\t    return false;\n\t  }\n\n\t  if (typeof getDerivedStateFromProps === 'function') {\n\t    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n\t    newState = workInProgress.memoizedState;\n\t  }\n\n\t  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n\n\t  if (shouldUpdate) {\n\t    // In order to support react-lifecycles-compat polyfilled components,\n\t    // Unsafe lifecycles should not be invoked for components using the new APIs.\n\t    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n\t      if (typeof instance.componentWillMount === 'function') {\n\t        instance.componentWillMount();\n\t      }\n\n\t      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n\t        instance.UNSAFE_componentWillMount();\n\t      }\n\t    }\n\n\t    if (typeof instance.componentDidMount === 'function') {\n\t      var _fiberFlags = Update;\n\n\t      {\n\t        _fiberFlags |= LayoutStatic;\n\t      }\n\n\t      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n\t        _fiberFlags |= MountLayoutDev;\n\t      }\n\n\t      workInProgress.flags |= _fiberFlags;\n\t    }\n\t  } else {\n\t    // If an update was already in progress, we should schedule an Update\n\t    // effect even though we're bailing out, so that cWU/cDU are called.\n\t    if (typeof instance.componentDidMount === 'function') {\n\t      var _fiberFlags2 = Update;\n\n\t      {\n\t        _fiberFlags2 |= LayoutStatic;\n\t      }\n\n\t      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n\t        _fiberFlags2 |= MountLayoutDev;\n\t      }\n\n\t      workInProgress.flags |= _fiberFlags2;\n\t    } // If shouldComponentUpdate returned false, we should still update the\n\t    // memoized state to indicate that this work can be reused.\n\n\n\t    workInProgress.memoizedProps = newProps;\n\t    workInProgress.memoizedState = newState;\n\t  } // Update the existing instance's state, props, and context pointers even\n\t  // if shouldComponentUpdate returns false.\n\n\n\t  instance.props = newProps;\n\t  instance.state = newState;\n\t  instance.context = nextContext;\n\t  return shouldUpdate;\n\t} // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n\n\tfunction updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n\t  var instance = workInProgress.stateNode;\n\t  cloneUpdateQueue(current, workInProgress);\n\t  var unresolvedOldProps = workInProgress.memoizedProps;\n\t  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n\t  instance.props = oldProps;\n\t  var unresolvedNewProps = workInProgress.pendingProps;\n\t  var oldContext = instance.context;\n\t  var contextType = ctor.contextType;\n\t  var nextContext = emptyContextObject;\n\n\t  if (typeof contextType === 'object' && contextType !== null) {\n\t    nextContext = readContext(contextType);\n\t  } else {\n\t    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n\t    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n\t  }\n\n\t  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\t  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n\t  // ever the previously attempted to render - not the \"current\". However,\n\t  // during componentDidUpdate we pass the \"current\" props.\n\t  // In order to support react-lifecycles-compat polyfilled components,\n\t  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\t  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n\t    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n\t      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n\t    }\n\t  }\n\n\t  resetHasForceUpdateBeforeProcessing();\n\t  var oldState = workInProgress.memoizedState;\n\t  var newState = instance.state = oldState;\n\t  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n\t  newState = workInProgress.memoizedState;\n\n\t  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {\n\t    // If an update was already in progress, we should schedule an Update\n\t    // effect even though we're bailing out, so that cWU/cDU are called.\n\t    if (typeof instance.componentDidUpdate === 'function') {\n\t      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n\t        workInProgress.flags |= Update;\n\t      }\n\t    }\n\n\t    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n\t      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n\t        workInProgress.flags |= Snapshot;\n\t      }\n\t    }\n\n\t    return false;\n\t  }\n\n\t  if (typeof getDerivedStateFromProps === 'function') {\n\t    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n\t    newState = workInProgress.memoizedState;\n\t  }\n\n\t  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,\n\t  // both before and after `shouldComponentUpdate` has been called. Not ideal,\n\t  // but I'm loath to refactor this function. This only happens for memoized\n\t  // components so it's not that common.\n\t  enableLazyContextPropagation   ;\n\n\t  if (shouldUpdate) {\n\t    // In order to support react-lifecycles-compat polyfilled components,\n\t    // Unsafe lifecycles should not be invoked for components using the new APIs.\n\t    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n\t      if (typeof instance.componentWillUpdate === 'function') {\n\t        instance.componentWillUpdate(newProps, newState, nextContext);\n\t      }\n\n\t      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n\t        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n\t      }\n\t    }\n\n\t    if (typeof instance.componentDidUpdate === 'function') {\n\t      workInProgress.flags |= Update;\n\t    }\n\n\t    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n\t      workInProgress.flags |= Snapshot;\n\t    }\n\t  } else {\n\t    // If an update was already in progress, we should schedule an Update\n\t    // effect even though we're bailing out, so that cWU/cDU are called.\n\t    if (typeof instance.componentDidUpdate === 'function') {\n\t      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n\t        workInProgress.flags |= Update;\n\t      }\n\t    }\n\n\t    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n\t      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n\t        workInProgress.flags |= Snapshot;\n\t      }\n\t    } // If shouldComponentUpdate returned false, we should still update the\n\t    // memoized props/state to indicate that this work can be reused.\n\n\n\t    workInProgress.memoizedProps = newProps;\n\t    workInProgress.memoizedState = newState;\n\t  } // Update the existing instance's state, props, and context pointers even\n\t  // if shouldComponentUpdate returns false.\n\n\n\t  instance.props = newProps;\n\t  instance.state = newState;\n\t  instance.context = nextContext;\n\t  return shouldUpdate;\n\t}\n\n\tvar didWarnAboutMaps;\n\tvar didWarnAboutGenerators;\n\tvar didWarnAboutStringRefs;\n\tvar ownerHasKeyUseWarning;\n\tvar ownerHasFunctionTypeWarning;\n\n\tvar warnForMissingKey = function (child, returnFiber) {};\n\n\t{\n\t  didWarnAboutMaps = false;\n\t  didWarnAboutGenerators = false;\n\t  didWarnAboutStringRefs = {};\n\t  /**\n\t   * Warn if there's no key explicitly set on dynamic arrays of children or\n\t   * object keys are not valid. This allows us to keep track of children between\n\t   * updates.\n\t   */\n\n\t  ownerHasKeyUseWarning = {};\n\t  ownerHasFunctionTypeWarning = {};\n\n\t  warnForMissingKey = function (child, returnFiber) {\n\t    if (child === null || typeof child !== 'object') {\n\t      return;\n\t    }\n\n\t    if (!child._store || child._store.validated || child.key != null) {\n\t      return;\n\t    }\n\n\t    if (typeof child._store !== 'object') {\n\t      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t    }\n\n\t    child._store.validated = true;\n\t    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n\t    if (ownerHasKeyUseWarning[componentName]) {\n\t      return;\n\t    }\n\n\t    ownerHasKeyUseWarning[componentName] = true;\n\n\t    error('Each child in a list should have a unique ' + '\"key\" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');\n\t  };\n\t}\n\n\tfunction coerceRef(returnFiber, current, element) {\n\t  var mixedRef = element.ref;\n\n\t  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {\n\t    {\n\t      // TODO: Clean this up once we turn on the string ref warning for\n\t      // everyone, because the strict mode case will no longer be relevant\n\t      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs\n\t      // because these cannot be automatically converted to an arrow function\n\t      // using a codemod. Therefore, we don't have to warn about string refs again.\n\t      !(element._owner && element._self && element._owner.stateNode !== element._self)) {\n\t        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n\t        if (!didWarnAboutStringRefs[componentName]) {\n\t          {\n\t            error('A string ref, \"%s\", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);\n\t          }\n\n\t          didWarnAboutStringRefs[componentName] = true;\n\t        }\n\t      }\n\t    }\n\n\t    if (element._owner) {\n\t      var owner = element._owner;\n\t      var inst;\n\n\t      if (owner) {\n\t        var ownerFiber = owner;\n\n\t        if (ownerFiber.tag !== ClassComponent) {\n\t          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');\n\t        }\n\n\t        inst = ownerFiber.stateNode;\n\t      }\n\n\t      if (!inst) {\n\t        throw new Error(\"Missing owner for string ref \" + mixedRef + \". This error is likely caused by a \" + 'bug in React. Please file an issue.');\n\t      } // Assigning this to a const so Flow knows it won't change in the closure\n\n\n\t      var resolvedInst = inst;\n\n\t      {\n\t        checkPropStringCoercion(mixedRef, 'ref');\n\t      }\n\n\t      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref\n\n\t      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {\n\t        return current.ref;\n\t      }\n\n\t      var ref = function (value) {\n\t        var refs = resolvedInst.refs;\n\n\t        if (refs === emptyRefsObject) {\n\t          // This is a lazy pooled frozen object, so we need to initialize.\n\t          refs = resolvedInst.refs = {};\n\t        }\n\n\t        if (value === null) {\n\t          delete refs[stringRef];\n\t        } else {\n\t          refs[stringRef] = value;\n\t        }\n\t      };\n\n\t      ref._stringRef = stringRef;\n\t      return ref;\n\t    } else {\n\t      if (typeof mixedRef !== 'string') {\n\t        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');\n\t      }\n\n\t      if (!element._owner) {\n\t        throw new Error(\"Element ref was specified as a string (\" + mixedRef + \") but no owner was set. This could happen for one of\" + ' the following reasons:\\n' + '1. You may be adding a ref to a function component\\n' + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + '3. You have multiple copies of React loaded\\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');\n\t      }\n\t    }\n\t  }\n\n\t  return mixedRef;\n\t}\n\n\tfunction throwOnInvalidObjectType(returnFiber, newChild) {\n\t  var childString = Object.prototype.toString.call(newChild);\n\t  throw new Error(\"Objects are not valid as a React child (found: \" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n\t}\n\n\tfunction warnOnFunctionType(returnFiber) {\n\t  {\n\t    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n\t    if (ownerHasFunctionTypeWarning[componentName]) {\n\t      return;\n\t    }\n\n\t    ownerHasFunctionTypeWarning[componentName] = true;\n\n\t    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');\n\t  }\n\t}\n\n\tfunction resolveLazy(lazyType) {\n\t  var payload = lazyType._payload;\n\t  var init = lazyType._init;\n\t  return init(payload);\n\t} // This wrapper function exists because I expect to clone the code in each path\n\t// to be able to optimize each path individually by branching early. This needs\n\t// a compiler or we can do it manually. Helpers that don't need this branching\n\t// live outside of this function.\n\n\n\tfunction ChildReconciler(shouldTrackSideEffects) {\n\t  function deleteChild(returnFiber, childToDelete) {\n\t    if (!shouldTrackSideEffects) {\n\t      // Noop.\n\t      return;\n\t    }\n\n\t    var deletions = returnFiber.deletions;\n\n\t    if (deletions === null) {\n\t      returnFiber.deletions = [childToDelete];\n\t      returnFiber.flags |= ChildDeletion;\n\t    } else {\n\t      deletions.push(childToDelete);\n\t    }\n\t  }\n\n\t  function deleteRemainingChildren(returnFiber, currentFirstChild) {\n\t    if (!shouldTrackSideEffects) {\n\t      // Noop.\n\t      return null;\n\t    } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n\t    // assuming that after the first child we've already added everything.\n\n\n\t    var childToDelete = currentFirstChild;\n\n\t    while (childToDelete !== null) {\n\t      deleteChild(returnFiber, childToDelete);\n\t      childToDelete = childToDelete.sibling;\n\t    }\n\n\t    return null;\n\t  }\n\n\t  function mapRemainingChildren(returnFiber, currentFirstChild) {\n\t    // Add the remaining children to a temporary map so that we can find them by\n\t    // keys quickly. Implicit (null) keys get added to this set with their index\n\t    // instead.\n\t    var existingChildren = new Map();\n\t    var existingChild = currentFirstChild;\n\n\t    while (existingChild !== null) {\n\t      if (existingChild.key !== null) {\n\t        existingChildren.set(existingChild.key, existingChild);\n\t      } else {\n\t        existingChildren.set(existingChild.index, existingChild);\n\t      }\n\n\t      existingChild = existingChild.sibling;\n\t    }\n\n\t    return existingChildren;\n\t  }\n\n\t  function useFiber(fiber, pendingProps) {\n\t    // We currently set sibling to null and index to 0 here because it is easy\n\t    // to forget to do before returning it. E.g. for the single child case.\n\t    var clone = createWorkInProgress(fiber, pendingProps);\n\t    clone.index = 0;\n\t    clone.sibling = null;\n\t    return clone;\n\t  }\n\n\t  function placeChild(newFiber, lastPlacedIndex, newIndex) {\n\t    newFiber.index = newIndex;\n\n\t    if (!shouldTrackSideEffects) {\n\t      // During hydration, the useId algorithm needs to know which fibers are\n\t      // part of a list of children (arrays, iterators).\n\t      newFiber.flags |= Forked;\n\t      return lastPlacedIndex;\n\t    }\n\n\t    var current = newFiber.alternate;\n\n\t    if (current !== null) {\n\t      var oldIndex = current.index;\n\n\t      if (oldIndex < lastPlacedIndex) {\n\t        // This is a move.\n\t        newFiber.flags |= Placement;\n\t        return lastPlacedIndex;\n\t      } else {\n\t        // This item can stay in place.\n\t        return oldIndex;\n\t      }\n\t    } else {\n\t      // This is an insertion.\n\t      newFiber.flags |= Placement;\n\t      return lastPlacedIndex;\n\t    }\n\t  }\n\n\t  function placeSingleChild(newFiber) {\n\t    // This is simpler for the single child case. We only need to do a\n\t    // placement for inserting new children.\n\t    if (shouldTrackSideEffects && newFiber.alternate === null) {\n\t      newFiber.flags |= Placement;\n\t    }\n\n\t    return newFiber;\n\t  }\n\n\t  function updateTextNode(returnFiber, current, textContent, lanes) {\n\t    if (current === null || current.tag !== HostText) {\n\t      // Insert\n\t      var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n\t      created.return = returnFiber;\n\t      return created;\n\t    } else {\n\t      // Update\n\t      var existing = useFiber(current, textContent);\n\t      existing.return = returnFiber;\n\t      return existing;\n\t    }\n\t  }\n\n\t  function updateElement(returnFiber, current, element, lanes) {\n\t    var elementType = element.type;\n\n\t    if (elementType === REACT_FRAGMENT_TYPE) {\n\t      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\n\t    }\n\n\t    if (current !== null) {\n\t      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n\t       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.\n\t      // We need to do this after the Hot Reloading check above,\n\t      // because hot reloading has different semantics than prod because\n\t      // it doesn't resuspend. So we can't let the call below suspend.\n\t      typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\n\t        // Move based on index\n\t        var existing = useFiber(current, element.props);\n\t        existing.ref = coerceRef(returnFiber, current, element);\n\t        existing.return = returnFiber;\n\n\t        {\n\t          existing._debugSource = element._source;\n\t          existing._debugOwner = element._owner;\n\t        }\n\n\t        return existing;\n\t      }\n\t    } // Insert\n\n\n\t    var created = createFiberFromElement(element, returnFiber.mode, lanes);\n\t    created.ref = coerceRef(returnFiber, current, element);\n\t    created.return = returnFiber;\n\t    return created;\n\t  }\n\n\t  function updatePortal(returnFiber, current, portal, lanes) {\n\t    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n\t      // Insert\n\t      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n\t      created.return = returnFiber;\n\t      return created;\n\t    } else {\n\t      // Update\n\t      var existing = useFiber(current, portal.children || []);\n\t      existing.return = returnFiber;\n\t      return existing;\n\t    }\n\t  }\n\n\t  function updateFragment(returnFiber, current, fragment, lanes, key) {\n\t    if (current === null || current.tag !== Fragment) {\n\t      // Insert\n\t      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n\t      created.return = returnFiber;\n\t      return created;\n\t    } else {\n\t      // Update\n\t      var existing = useFiber(current, fragment);\n\t      existing.return = returnFiber;\n\t      return existing;\n\t    }\n\t  }\n\n\t  function createChild(returnFiber, newChild, lanes) {\n\t    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n\t      // Text nodes don't have keys. If the previous node is implicitly keyed\n\t      // we can continue to replace it without aborting even if it is not a text\n\t      // node.\n\t      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);\n\t      created.return = returnFiber;\n\t      return created;\n\t    }\n\n\t    if (typeof newChild === 'object' && newChild !== null) {\n\t      switch (newChild.$$typeof) {\n\t        case REACT_ELEMENT_TYPE:\n\t          {\n\t            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n\n\t            _created.ref = coerceRef(returnFiber, null, newChild);\n\t            _created.return = returnFiber;\n\t            return _created;\n\t          }\n\n\t        case REACT_PORTAL_TYPE:\n\t          {\n\t            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n\n\t            _created2.return = returnFiber;\n\t            return _created2;\n\t          }\n\n\t        case REACT_LAZY_TYPE:\n\t          {\n\t            var payload = newChild._payload;\n\t            var init = newChild._init;\n\t            return createChild(returnFiber, init(payload), lanes);\n\t          }\n\t      }\n\n\t      if (isArray(newChild) || getIteratorFn(newChild)) {\n\t        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n\n\t        _created3.return = returnFiber;\n\t        return _created3;\n\t      }\n\n\t      throwOnInvalidObjectType(returnFiber, newChild);\n\t    }\n\n\t    {\n\t      if (typeof newChild === 'function') {\n\t        warnOnFunctionType(returnFiber);\n\t      }\n\t    }\n\n\t    return null;\n\t  }\n\n\t  function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n\t    // Update the fiber if the keys match, otherwise return null.\n\t    var key = oldFiber !== null ? oldFiber.key : null;\n\n\t    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n\t      // Text nodes don't have keys. If the previous node is implicitly keyed\n\t      // we can continue to replace it without aborting even if it is not a text\n\t      // node.\n\t      if (key !== null) {\n\t        return null;\n\t      }\n\n\t      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n\t    }\n\n\t    if (typeof newChild === 'object' && newChild !== null) {\n\t      switch (newChild.$$typeof) {\n\t        case REACT_ELEMENT_TYPE:\n\t          {\n\t            if (newChild.key === key) {\n\t              return updateElement(returnFiber, oldFiber, newChild, lanes);\n\t            } else {\n\t              return null;\n\t            }\n\t          }\n\n\t        case REACT_PORTAL_TYPE:\n\t          {\n\t            if (newChild.key === key) {\n\t              return updatePortal(returnFiber, oldFiber, newChild, lanes);\n\t            } else {\n\t              return null;\n\t            }\n\t          }\n\n\t        case REACT_LAZY_TYPE:\n\t          {\n\t            var payload = newChild._payload;\n\t            var init = newChild._init;\n\t            return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n\t          }\n\t      }\n\n\t      if (isArray(newChild) || getIteratorFn(newChild)) {\n\t        if (key !== null) {\n\t          return null;\n\t        }\n\n\t        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n\t      }\n\n\t      throwOnInvalidObjectType(returnFiber, newChild);\n\t    }\n\n\t    {\n\t      if (typeof newChild === 'function') {\n\t        warnOnFunctionType(returnFiber);\n\t      }\n\t    }\n\n\t    return null;\n\t  }\n\n\t  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\n\t    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n\t      // Text nodes don't have keys, so we neither have to check the old nor\n\t      // new node for the key. If both are text nodes, they match.\n\t      var matchedFiber = existingChildren.get(newIdx) || null;\n\t      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n\t    }\n\n\t    if (typeof newChild === 'object' && newChild !== null) {\n\t      switch (newChild.$$typeof) {\n\t        case REACT_ELEMENT_TYPE:\n\t          {\n\t            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n\t            return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n\t          }\n\n\t        case REACT_PORTAL_TYPE:\n\t          {\n\t            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n\t            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n\t          }\n\n\t        case REACT_LAZY_TYPE:\n\t          var payload = newChild._payload;\n\t          var init = newChild._init;\n\t          return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);\n\t      }\n\n\t      if (isArray(newChild) || getIteratorFn(newChild)) {\n\t        var _matchedFiber3 = existingChildren.get(newIdx) || null;\n\n\t        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\n\t      }\n\n\t      throwOnInvalidObjectType(returnFiber, newChild);\n\t    }\n\n\t    {\n\t      if (typeof newChild === 'function') {\n\t        warnOnFunctionType(returnFiber);\n\t      }\n\t    }\n\n\t    return null;\n\t  }\n\t  /**\n\t   * Warns if there is a duplicate or missing key\n\t   */\n\n\n\t  function warnOnInvalidKey(child, knownKeys, returnFiber) {\n\t    {\n\t      if (typeof child !== 'object' || child === null) {\n\t        return knownKeys;\n\t      }\n\n\t      switch (child.$$typeof) {\n\t        case REACT_ELEMENT_TYPE:\n\t        case REACT_PORTAL_TYPE:\n\t          warnForMissingKey(child, returnFiber);\n\t          var key = child.key;\n\n\t          if (typeof key !== 'string') {\n\t            break;\n\t          }\n\n\t          if (knownKeys === null) {\n\t            knownKeys = new Set();\n\t            knownKeys.add(key);\n\t            break;\n\t          }\n\n\t          if (!knownKeys.has(key)) {\n\t            knownKeys.add(key);\n\t            break;\n\t          }\n\n\t          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);\n\n\t          break;\n\n\t        case REACT_LAZY_TYPE:\n\t          var payload = child._payload;\n\t          var init = child._init;\n\t          warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n\t          break;\n\t      }\n\t    }\n\n\t    return knownKeys;\n\t  }\n\n\t  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n\t    // This algorithm can't optimize by searching from both ends since we\n\t    // don't have backpointers on fibers. I'm trying to see how far we can get\n\t    // with that model. If it ends up not being worth the tradeoffs, we can\n\t    // add it later.\n\t    // Even with a two ended optimization, we'd want to optimize for the case\n\t    // where there are few changes and brute force the comparison instead of\n\t    // going for the Map. It'd like to explore hitting that path first in\n\t    // forward-only mode and only go for the Map once we notice that we need\n\t    // lots of look ahead. This doesn't handle reversal as well as two ended\n\t    // search but that's unusual. Besides, for the two ended optimization to\n\t    // work on Iterables, we'd need to copy the whole set.\n\t    // In this first iteration, we'll just live with hitting the bad case\n\t    // (adding everything to a Map) in for every insert/move.\n\t    // If you change this code, also update reconcileChildrenIterator() which\n\t    // uses the same algorithm.\n\t    {\n\t      // First, validate keys.\n\t      var knownKeys = null;\n\n\t      for (var i = 0; i < newChildren.length; i++) {\n\t        var child = newChildren[i];\n\t        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n\t      }\n\t    }\n\n\t    var resultingFirstChild = null;\n\t    var previousNewFiber = null;\n\t    var oldFiber = currentFirstChild;\n\t    var lastPlacedIndex = 0;\n\t    var newIdx = 0;\n\t    var nextOldFiber = null;\n\n\t    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n\t      if (oldFiber.index > newIdx) {\n\t        nextOldFiber = oldFiber;\n\t        oldFiber = null;\n\t      } else {\n\t        nextOldFiber = oldFiber.sibling;\n\t      }\n\n\t      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n\n\t      if (newFiber === null) {\n\t        // TODO: This breaks on empty slots like null children. That's\n\t        // unfortunate because it triggers the slow path all the time. We need\n\t        // a better way to communicate whether this was a miss or null,\n\t        // boolean, undefined, etc.\n\t        if (oldFiber === null) {\n\t          oldFiber = nextOldFiber;\n\t        }\n\n\t        break;\n\t      }\n\n\t      if (shouldTrackSideEffects) {\n\t        if (oldFiber && newFiber.alternate === null) {\n\t          // We matched the slot, but we didn't reuse the existing fiber, so we\n\t          // need to delete the existing child.\n\t          deleteChild(returnFiber, oldFiber);\n\t        }\n\t      }\n\n\t      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n\t      if (previousNewFiber === null) {\n\t        // TODO: Move out of the loop. This only happens for the first run.\n\t        resultingFirstChild = newFiber;\n\t      } else {\n\t        // TODO: Defer siblings if we're not at the right index for this slot.\n\t        // I.e. if we had null values before, then we want to defer this\n\t        // for each null value. However, we also don't want to call updateSlot\n\t        // with the previous one.\n\t        previousNewFiber.sibling = newFiber;\n\t      }\n\n\t      previousNewFiber = newFiber;\n\t      oldFiber = nextOldFiber;\n\t    }\n\n\t    if (newIdx === newChildren.length) {\n\t      // We've reached the end of the new children. We can delete the rest.\n\t      deleteRemainingChildren(returnFiber, oldFiber);\n\n\t      if (getIsHydrating()) {\n\t        var numberOfForks = newIdx;\n\t        pushTreeFork(returnFiber, numberOfForks);\n\t      }\n\n\t      return resultingFirstChild;\n\t    }\n\n\t    if (oldFiber === null) {\n\t      // If we don't have any more existing children we can choose a fast path\n\t      // since the rest will all be insertions.\n\t      for (; newIdx < newChildren.length; newIdx++) {\n\t        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n\n\t        if (_newFiber === null) {\n\t          continue;\n\t        }\n\n\t        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n\n\t        if (previousNewFiber === null) {\n\t          // TODO: Move out of the loop. This only happens for the first run.\n\t          resultingFirstChild = _newFiber;\n\t        } else {\n\t          previousNewFiber.sibling = _newFiber;\n\t        }\n\n\t        previousNewFiber = _newFiber;\n\t      }\n\n\t      if (getIsHydrating()) {\n\t        var _numberOfForks = newIdx;\n\t        pushTreeFork(returnFiber, _numberOfForks);\n\t      }\n\n\t      return resultingFirstChild;\n\t    } // Add all children to a key map for quick lookups.\n\n\n\t    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n\t    for (; newIdx < newChildren.length; newIdx++) {\n\t      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n\n\t      if (_newFiber2 !== null) {\n\t        if (shouldTrackSideEffects) {\n\t          if (_newFiber2.alternate !== null) {\n\t            // The new fiber is a work in progress, but if there exists a\n\t            // current, that means that we reused the fiber. We need to delete\n\t            // it from the child list so that we don't add it to the deletion\n\t            // list.\n\t            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n\t          }\n\t        }\n\n\t        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\n\t        if (previousNewFiber === null) {\n\t          resultingFirstChild = _newFiber2;\n\t        } else {\n\t          previousNewFiber.sibling = _newFiber2;\n\t        }\n\n\t        previousNewFiber = _newFiber2;\n\t      }\n\t    }\n\n\t    if (shouldTrackSideEffects) {\n\t      // Any existing children that weren't consumed above were deleted. We need\n\t      // to add them to the deletion list.\n\t      existingChildren.forEach(function (child) {\n\t        return deleteChild(returnFiber, child);\n\t      });\n\t    }\n\n\t    if (getIsHydrating()) {\n\t      var _numberOfForks2 = newIdx;\n\t      pushTreeFork(returnFiber, _numberOfForks2);\n\t    }\n\n\t    return resultingFirstChild;\n\t  }\n\n\t  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\n\t    // This is the same implementation as reconcileChildrenArray(),\n\t    // but using the iterator instead.\n\t    var iteratorFn = getIteratorFn(newChildrenIterable);\n\n\t    if (typeof iteratorFn !== 'function') {\n\t      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n\t    }\n\n\t    {\n\t      // We don't support rendering Generators because it's a mutation.\n\t      // See https://github.com/facebook/react/issues/12995\n\t      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag\n\t      newChildrenIterable[Symbol.toStringTag] === 'Generator') {\n\t        if (!didWarnAboutGenerators) {\n\t          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\n\t        }\n\n\t        didWarnAboutGenerators = true;\n\t      } // Warn about using Maps as children\n\n\n\t      if (newChildrenIterable.entries === iteratorFn) {\n\t        if (!didWarnAboutMaps) {\n\t          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n\t        }\n\n\t        didWarnAboutMaps = true;\n\t      } // First, validate keys.\n\t      // We'll get a different iterator later for the main pass.\n\n\n\t      var _newChildren = iteratorFn.call(newChildrenIterable);\n\n\t      if (_newChildren) {\n\t        var knownKeys = null;\n\n\t        var _step = _newChildren.next();\n\n\t        for (; !_step.done; _step = _newChildren.next()) {\n\t          var child = _step.value;\n\t          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n\t        }\n\t      }\n\t    }\n\n\t    var newChildren = iteratorFn.call(newChildrenIterable);\n\n\t    if (newChildren == null) {\n\t      throw new Error('An iterable object provided no iterator.');\n\t    }\n\n\t    var resultingFirstChild = null;\n\t    var previousNewFiber = null;\n\t    var oldFiber = currentFirstChild;\n\t    var lastPlacedIndex = 0;\n\t    var newIdx = 0;\n\t    var nextOldFiber = null;\n\t    var step = newChildren.next();\n\n\t    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n\t      if (oldFiber.index > newIdx) {\n\t        nextOldFiber = oldFiber;\n\t        oldFiber = null;\n\t      } else {\n\t        nextOldFiber = oldFiber.sibling;\n\t      }\n\n\t      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n\n\t      if (newFiber === null) {\n\t        // TODO: This breaks on empty slots like null children. That's\n\t        // unfortunate because it triggers the slow path all the time. We need\n\t        // a better way to communicate whether this was a miss or null,\n\t        // boolean, undefined, etc.\n\t        if (oldFiber === null) {\n\t          oldFiber = nextOldFiber;\n\t        }\n\n\t        break;\n\t      }\n\n\t      if (shouldTrackSideEffects) {\n\t        if (oldFiber && newFiber.alternate === null) {\n\t          // We matched the slot, but we didn't reuse the existing fiber, so we\n\t          // need to delete the existing child.\n\t          deleteChild(returnFiber, oldFiber);\n\t        }\n\t      }\n\n\t      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n\t      if (previousNewFiber === null) {\n\t        // TODO: Move out of the loop. This only happens for the first run.\n\t        resultingFirstChild = newFiber;\n\t      } else {\n\t        // TODO: Defer siblings if we're not at the right index for this slot.\n\t        // I.e. if we had null values before, then we want to defer this\n\t        // for each null value. However, we also don't want to call updateSlot\n\t        // with the previous one.\n\t        previousNewFiber.sibling = newFiber;\n\t      }\n\n\t      previousNewFiber = newFiber;\n\t      oldFiber = nextOldFiber;\n\t    }\n\n\t    if (step.done) {\n\t      // We've reached the end of the new children. We can delete the rest.\n\t      deleteRemainingChildren(returnFiber, oldFiber);\n\n\t      if (getIsHydrating()) {\n\t        var numberOfForks = newIdx;\n\t        pushTreeFork(returnFiber, numberOfForks);\n\t      }\n\n\t      return resultingFirstChild;\n\t    }\n\n\t    if (oldFiber === null) {\n\t      // If we don't have any more existing children we can choose a fast path\n\t      // since the rest will all be insertions.\n\t      for (; !step.done; newIdx++, step = newChildren.next()) {\n\t        var _newFiber3 = createChild(returnFiber, step.value, lanes);\n\n\t        if (_newFiber3 === null) {\n\t          continue;\n\t        }\n\n\t        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n\n\t        if (previousNewFiber === null) {\n\t          // TODO: Move out of the loop. This only happens for the first run.\n\t          resultingFirstChild = _newFiber3;\n\t        } else {\n\t          previousNewFiber.sibling = _newFiber3;\n\t        }\n\n\t        previousNewFiber = _newFiber3;\n\t      }\n\n\t      if (getIsHydrating()) {\n\t        var _numberOfForks3 = newIdx;\n\t        pushTreeFork(returnFiber, _numberOfForks3);\n\t      }\n\n\t      return resultingFirstChild;\n\t    } // Add all children to a key map for quick lookups.\n\n\n\t    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n\t    for (; !step.done; newIdx++, step = newChildren.next()) {\n\t      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n\n\t      if (_newFiber4 !== null) {\n\t        if (shouldTrackSideEffects) {\n\t          if (_newFiber4.alternate !== null) {\n\t            // The new fiber is a work in progress, but if there exists a\n\t            // current, that means that we reused the fiber. We need to delete\n\t            // it from the child list so that we don't add it to the deletion\n\t            // list.\n\t            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n\t          }\n\t        }\n\n\t        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n\n\t        if (previousNewFiber === null) {\n\t          resultingFirstChild = _newFiber4;\n\t        } else {\n\t          previousNewFiber.sibling = _newFiber4;\n\t        }\n\n\t        previousNewFiber = _newFiber4;\n\t      }\n\t    }\n\n\t    if (shouldTrackSideEffects) {\n\t      // Any existing children that weren't consumed above were deleted. We need\n\t      // to add them to the deletion list.\n\t      existingChildren.forEach(function (child) {\n\t        return deleteChild(returnFiber, child);\n\t      });\n\t    }\n\n\t    if (getIsHydrating()) {\n\t      var _numberOfForks4 = newIdx;\n\t      pushTreeFork(returnFiber, _numberOfForks4);\n\t    }\n\n\t    return resultingFirstChild;\n\t  }\n\n\t  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n\t    // There's no need to check for keys on text nodes since we don't have a\n\t    // way to define them.\n\t    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n\t      // We already have an existing node so let's just update it and delete\n\t      // the rest.\n\t      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n\t      var existing = useFiber(currentFirstChild, textContent);\n\t      existing.return = returnFiber;\n\t      return existing;\n\t    } // The existing first child is not a text node so we need to create one\n\t    // and delete the existing ones.\n\n\n\t    deleteRemainingChildren(returnFiber, currentFirstChild);\n\t    var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n\t    created.return = returnFiber;\n\t    return created;\n\t  }\n\n\t  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\n\t    var key = element.key;\n\t    var child = currentFirstChild;\n\n\t    while (child !== null) {\n\t      // TODO: If key === null and child.key === null, then this only applies to\n\t      // the first item in the list.\n\t      if (child.key === key) {\n\t        var elementType = element.type;\n\n\t        if (elementType === REACT_FRAGMENT_TYPE) {\n\t          if (child.tag === Fragment) {\n\t            deleteRemainingChildren(returnFiber, child.sibling);\n\t            var existing = useFiber(child, element.props.children);\n\t            existing.return = returnFiber;\n\n\t            {\n\t              existing._debugSource = element._source;\n\t              existing._debugOwner = element._owner;\n\t            }\n\n\t            return existing;\n\t          }\n\t        } else {\n\t          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n\t           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.\n\t          // We need to do this after the Hot Reloading check above,\n\t          // because hot reloading has different semantics than prod because\n\t          // it doesn't resuspend. So we can't let the call below suspend.\n\t          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\n\t            deleteRemainingChildren(returnFiber, child.sibling);\n\n\t            var _existing = useFiber(child, element.props);\n\n\t            _existing.ref = coerceRef(returnFiber, child, element);\n\t            _existing.return = returnFiber;\n\n\t            {\n\t              _existing._debugSource = element._source;\n\t              _existing._debugOwner = element._owner;\n\t            }\n\n\t            return _existing;\n\t          }\n\t        } // Didn't match.\n\n\n\t        deleteRemainingChildren(returnFiber, child);\n\t        break;\n\t      } else {\n\t        deleteChild(returnFiber, child);\n\t      }\n\n\t      child = child.sibling;\n\t    }\n\n\t    if (element.type === REACT_FRAGMENT_TYPE) {\n\t      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n\t      created.return = returnFiber;\n\t      return created;\n\t    } else {\n\t      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n\n\t      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n\t      _created4.return = returnFiber;\n\t      return _created4;\n\t    }\n\t  }\n\n\t  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\n\t    var key = portal.key;\n\t    var child = currentFirstChild;\n\n\t    while (child !== null) {\n\t      // TODO: If key === null and child.key === null, then this only applies to\n\t      // the first item in the list.\n\t      if (child.key === key) {\n\t        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n\t          deleteRemainingChildren(returnFiber, child.sibling);\n\t          var existing = useFiber(child, portal.children || []);\n\t          existing.return = returnFiber;\n\t          return existing;\n\t        } else {\n\t          deleteRemainingChildren(returnFiber, child);\n\t          break;\n\t        }\n\t      } else {\n\t        deleteChild(returnFiber, child);\n\t      }\n\n\t      child = child.sibling;\n\t    }\n\n\t    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n\t    created.return = returnFiber;\n\t    return created;\n\t  } // This API will tag the children with the side-effect of the reconciliation\n\t  // itself. They will be added to the side-effect list as we pass through the\n\t  // children and the parent.\n\n\n\t  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n\t    // This function is not recursive.\n\t    // If the top level item is an array, we treat it as a set of children,\n\t    // not as a fragment. Nested arrays on the other hand will be treated as\n\t    // fragment nodes. Recursion happens at the normal flow.\n\t    // Handle top level unkeyed fragments as if they were arrays.\n\t    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n\t    // We treat the ambiguous cases above the same.\n\t    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n\n\t    if (isUnkeyedTopLevelFragment) {\n\t      newChild = newChild.props.children;\n\t    } // Handle object types\n\n\n\t    if (typeof newChild === 'object' && newChild !== null) {\n\t      switch (newChild.$$typeof) {\n\t        case REACT_ELEMENT_TYPE:\n\t          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n\n\t        case REACT_PORTAL_TYPE:\n\t          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n\n\t        case REACT_LAZY_TYPE:\n\t          var payload = newChild._payload;\n\t          var init = newChild._init; // TODO: This function is supposed to be non-recursive.\n\n\t          return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);\n\t      }\n\n\t      if (isArray(newChild)) {\n\t        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n\t      }\n\n\t      if (getIteratorFn(newChild)) {\n\t        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n\t      }\n\n\t      throwOnInvalidObjectType(returnFiber, newChild);\n\t    }\n\n\t    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n\t      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n\t    }\n\n\t    {\n\t      if (typeof newChild === 'function') {\n\t        warnOnFunctionType(returnFiber);\n\t      }\n\t    } // Remaining cases are all treated as empty.\n\n\n\t    return deleteRemainingChildren(returnFiber, currentFirstChild);\n\t  }\n\n\t  return reconcileChildFibers;\n\t}\n\n\tvar reconcileChildFibers = ChildReconciler(true);\n\tvar mountChildFibers = ChildReconciler(false);\n\tfunction cloneChildFibers(current, workInProgress) {\n\t  if (current !== null && workInProgress.child !== current.child) {\n\t    throw new Error('Resuming work not yet implemented.');\n\t  }\n\n\t  if (workInProgress.child === null) {\n\t    return;\n\t  }\n\n\t  var currentChild = workInProgress.child;\n\t  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n\t  workInProgress.child = newChild;\n\t  newChild.return = workInProgress;\n\n\t  while (currentChild.sibling !== null) {\n\t    currentChild = currentChild.sibling;\n\t    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n\t    newChild.return = workInProgress;\n\t  }\n\n\t  newChild.sibling = null;\n\t} // Reset a workInProgress child set to prepare it for a second pass.\n\n\tfunction resetChildFibers(workInProgress, lanes) {\n\t  var child = workInProgress.child;\n\n\t  while (child !== null) {\n\t    resetWorkInProgress(child, lanes);\n\t    child = child.sibling;\n\t  }\n\t}\n\n\tvar NO_CONTEXT = {};\n\tvar contextStackCursor$1 = createCursor(NO_CONTEXT);\n\tvar contextFiberStackCursor = createCursor(NO_CONTEXT);\n\tvar rootInstanceStackCursor = createCursor(NO_CONTEXT);\n\n\tfunction requiredContext(c) {\n\t  if (c === NO_CONTEXT) {\n\t    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n\t  }\n\n\t  return c;\n\t}\n\n\tfunction getRootHostContainer() {\n\t  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n\t  return rootInstance;\n\t}\n\n\tfunction pushHostContainer(fiber, nextRootInstance) {\n\t  // Push current root instance onto the stack;\n\t  // This allows us to reset root when portals are popped.\n\t  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n\t  // This enables us to pop only Fibers that provide unique contexts.\n\n\t  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n\t  // However, we can't just call getRootHostContext() and push it because\n\t  // we'd have a different number of entries on the stack depending on\n\t  // whether getRootHostContext() throws somewhere in renderer code or not.\n\t  // So we push an empty value first. This lets us safely unwind on errors.\n\n\t  push(contextStackCursor$1, NO_CONTEXT, fiber);\n\t  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\n\n\t  pop(contextStackCursor$1, fiber);\n\t  push(contextStackCursor$1, nextRootContext, fiber);\n\t}\n\n\tfunction popHostContainer(fiber) {\n\t  pop(contextStackCursor$1, fiber);\n\t  pop(contextFiberStackCursor, fiber);\n\t  pop(rootInstanceStackCursor, fiber);\n\t}\n\n\tfunction getHostContext() {\n\t  var context = requiredContext(contextStackCursor$1.current);\n\t  return context;\n\t}\n\n\tfunction pushHostContext(fiber) {\n\t  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n\t  var context = requiredContext(contextStackCursor$1.current);\n\t  var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.\n\n\t  if (context === nextContext) {\n\t    return;\n\t  } // Track the context and the Fiber that provided it.\n\t  // This enables us to pop only Fibers that provide unique contexts.\n\n\n\t  push(contextFiberStackCursor, fiber, fiber);\n\t  push(contextStackCursor$1, nextContext, fiber);\n\t}\n\n\tfunction popHostContext(fiber) {\n\t  // Do not pop unless this Fiber provided the current context.\n\t  // pushHostContext() only pushes Fibers that provide unique contexts.\n\t  if (contextFiberStackCursor.current !== fiber) {\n\t    return;\n\t  }\n\n\t  pop(contextStackCursor$1, fiber);\n\t  pop(contextFiberStackCursor, fiber);\n\t}\n\n\tvar DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is\n\t// inherited deeply down the subtree. The upper bits only affect\n\t// this immediate suspense boundary and gets reset each new\n\t// boundary or suspense list.\n\n\tvar SubtreeSuspenseContextMask = 1; // Subtree Flags:\n\t// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n\t// boundaries is not currently showing visible main content.\n\t// Either because it is already showing a fallback or is not mounted at all.\n\t// We can use this to determine if it is desirable to trigger a fallback at\n\t// the parent. If not, then we might need to trigger undesirable boundaries\n\t// and/or suspend the commit to avoid hiding the parent content.\n\n\tvar InvisibleParentSuspenseContext = 1; // Shallow Flags:\n\t// ForceSuspenseFallback can be used by SuspenseList to force newly added\n\t// items into their fallback state during one of the render passes.\n\n\tvar ForceSuspenseFallback = 2;\n\tvar suspenseStackCursor = createCursor(DefaultSuspenseContext);\n\tfunction hasSuspenseContext(parentContext, flag) {\n\t  return (parentContext & flag) !== 0;\n\t}\n\tfunction setDefaultShallowSuspenseContext(parentContext) {\n\t  return parentContext & SubtreeSuspenseContextMask;\n\t}\n\tfunction setShallowSuspenseContext(parentContext, shallowContext) {\n\t  return parentContext & SubtreeSuspenseContextMask | shallowContext;\n\t}\n\tfunction addSubtreeSuspenseContext(parentContext, subtreeContext) {\n\t  return parentContext | subtreeContext;\n\t}\n\tfunction pushSuspenseContext(fiber, newContext) {\n\t  push(suspenseStackCursor, newContext, fiber);\n\t}\n\tfunction popSuspenseContext(fiber) {\n\t  pop(suspenseStackCursor, fiber);\n\t}\n\n\tfunction shouldCaptureSuspense(workInProgress, hasInvisibleParent) {\n\t  // If it was the primary children that just suspended, capture and render the\n\t  // fallback. Otherwise, don't capture and bubble to the next boundary.\n\t  var nextState = workInProgress.memoizedState;\n\n\t  if (nextState !== null) {\n\t    if (nextState.dehydrated !== null) {\n\t      // A dehydrated boundary always captures.\n\t      return true;\n\t    }\n\n\t    return false;\n\t  }\n\n\t  workInProgress.memoizedProps; // Regular boundaries always capture.\n\n\t  {\n\t    return true;\n\t  } // If it's a boundary we should avoid, then we prefer to bubble up to the\n\t}\n\tfunction findFirstSuspended(row) {\n\t  var node = row;\n\n\t  while (node !== null) {\n\t    if (node.tag === SuspenseComponent) {\n\t      var state = node.memoizedState;\n\n\t      if (state !== null) {\n\t        var dehydrated = state.dehydrated;\n\n\t        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {\n\t          return node;\n\t        }\n\t      }\n\t    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n\t    // keep track of whether it suspended or not.\n\t    node.memoizedProps.revealOrder !== undefined) {\n\t      var didSuspend = (node.flags & DidCapture) !== NoFlags;\n\n\t      if (didSuspend) {\n\t        return node;\n\t      }\n\t    } else if (node.child !== null) {\n\t      node.child.return = node;\n\t      node = node.child;\n\t      continue;\n\t    }\n\n\t    if (node === row) {\n\t      return null;\n\t    }\n\n\t    while (node.sibling === null) {\n\t      if (node.return === null || node.return === row) {\n\t        return null;\n\t      }\n\n\t      node = node.return;\n\t    }\n\n\t    node.sibling.return = node.return;\n\t    node = node.sibling;\n\t  }\n\n\t  return null;\n\t}\n\n\tvar NoFlags$1 =\n\t/*   */\n\t0; // Represents whether effect should fire.\n\n\tvar HasEffect =\n\t/* */\n\t1; // Represents the phase in which the effect (not the clean-up) fires.\n\n\tvar Insertion =\n\t/*  */\n\t2;\n\tvar Layout =\n\t/*    */\n\t4;\n\tvar Passive$1 =\n\t/*   */\n\t8;\n\n\t// and should be reset before starting a new render.\n\t// This tracks which mutable sources need to be reset after a render.\n\n\tvar workInProgressSources = [];\n\tfunction resetWorkInProgressVersions() {\n\t  for (var i = 0; i < workInProgressSources.length; i++) {\n\t    var mutableSource = workInProgressSources[i];\n\n\t    if (isPrimaryRenderer) {\n\t      mutableSource._workInProgressVersionPrimary = null;\n\t    } else {\n\t      mutableSource._workInProgressVersionSecondary = null;\n\t    }\n\t  }\n\n\t  workInProgressSources.length = 0;\n\t}\n\t// This ensures that the version used for server rendering matches the one\n\t// that is eventually read during hydration.\n\t// If they don't match there's a potential tear and a full deopt render is required.\n\n\tfunction registerMutableSourceForHydration(root, mutableSource) {\n\t  var getVersion = mutableSource._getVersion;\n\t  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.\n\t  // Retaining it forever may interfere with GC.\n\n\t  if (root.mutableSourceEagerHydrationData == null) {\n\t    root.mutableSourceEagerHydrationData = [mutableSource, version];\n\t  } else {\n\t    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n\t  }\n\t}\n\n\tvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n\t    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\n\tvar didWarnAboutMismatchedHooksForComponent;\n\tvar didWarnUncachedGetSnapshot;\n\n\t{\n\t  didWarnAboutMismatchedHooksForComponent = new Set();\n\t}\n\n\t// These are set right before calling the component.\n\tvar renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n\t// the work-in-progress hook.\n\n\tvar currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n\t// current hook list is the list that belongs to the current fiber. The\n\t// work-in-progress hook list is a new list that will be added to the\n\t// work-in-progress fiber.\n\n\tvar currentHook = null;\n\tvar workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n\t// does not get reset if we do another render pass; only when we're completely\n\t// finished evaluating this component. This is an optimization so we know\n\t// whether we need to clear render phase updates after a throw.\n\n\tvar didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n\t// gets reset after each attempt.\n\t// TODO: Maybe there's some way to consolidate this with\n\t// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\n\tvar didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.\n\n\tvar localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during\n\t// hydration). This counter is global, so client ids are not stable across\n\t// render attempts.\n\n\tvar globalClientIdCounter = 0;\n\tvar RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\n\tvar currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n\t// The list stores the order of hooks used during the initial render (mount).\n\t// Subsequent renders (updates) reference this list.\n\n\tvar hookTypesDev = null;\n\tvar hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n\t// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n\t// When true, such Hooks will always be \"remounted\". Only used during hot reload.\n\n\tvar ignorePreviousDependencies = false;\n\n\tfunction mountHookTypesDev() {\n\t  {\n\t    var hookName = currentHookNameInDev;\n\n\t    if (hookTypesDev === null) {\n\t      hookTypesDev = [hookName];\n\t    } else {\n\t      hookTypesDev.push(hookName);\n\t    }\n\t  }\n\t}\n\n\tfunction updateHookTypesDev() {\n\t  {\n\t    var hookName = currentHookNameInDev;\n\n\t    if (hookTypesDev !== null) {\n\t      hookTypesUpdateIndexDev++;\n\n\t      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n\t        warnOnHookMismatchInDev(hookName);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction checkDepsAreArrayDev(deps) {\n\t  {\n\t    if (deps !== undefined && deps !== null && !isArray(deps)) {\n\t      // Verify deps, but only on mount to avoid extra checks.\n\t      // It's unlikely their type would change as usually you define them inline.\n\t      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);\n\t    }\n\t  }\n\t}\n\n\tfunction warnOnHookMismatchInDev(currentHookName) {\n\t  {\n\t    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n\n\t    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n\t      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n\t      if (hookTypesDev !== null) {\n\t        var table = '';\n\t        var secondColumnStart = 30;\n\n\t        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n\t          var oldHookName = hookTypesDev[i];\n\t          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n\t          var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n\t          // lol @ IE not supporting String#repeat\n\n\t          while (row.length < secondColumnStart) {\n\t            row += ' ';\n\t          }\n\n\t          row += newHookName + '\\n';\n\t          table += row;\n\t        }\n\n\t        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' + '   Previous render            Next render\\n' + '   ------------------------------------------------------\\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n', componentName, table);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction throwInvalidHookError() {\n\t  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n\t}\n\n\tfunction areHookInputsEqual(nextDeps, prevDeps) {\n\t  {\n\t    if (ignorePreviousDependencies) {\n\t      // Only true when this component is being hot reloaded.\n\t      return false;\n\t    }\n\t  }\n\n\t  if (prevDeps === null) {\n\t    {\n\t      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n\t    }\n\n\t    return false;\n\t  }\n\n\t  {\n\t    // Don't bother comparing lengths in prod because these arrays should be\n\t    // passed inline.\n\t    if (nextDeps.length !== prevDeps.length) {\n\t      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + prevDeps.join(', ') + \"]\", \"[\" + nextDeps.join(', ') + \"]\");\n\t    }\n\t  }\n\n\t  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n\t    if (objectIs(nextDeps[i], prevDeps[i])) {\n\t      continue;\n\t    }\n\n\t    return false;\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n\t  renderLanes = nextRenderLanes;\n\t  currentlyRenderingFiber$1 = workInProgress;\n\n\t  {\n\t    hookTypesDev = current !== null ? current._debugHookTypes : null;\n\t    hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n\t    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n\t  }\n\n\t  workInProgress.memoizedState = null;\n\t  workInProgress.updateQueue = null;\n\t  workInProgress.lanes = NoLanes; // The following should have already been reset\n\t  // currentHook = null;\n\t  // workInProgressHook = null;\n\t  // didScheduleRenderPhaseUpdate = false;\n\t  // localIdCounter = 0;\n\t  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n\t  // Currently we will identify the update render as a mount because memoizedState === null.\n\t  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\t  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n\t  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n\t  // so memoizedState would be null during updates and mounts.\n\n\t  {\n\t    if (current !== null && current.memoizedState !== null) {\n\t      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n\t    } else if (hookTypesDev !== null) {\n\t      // This dispatcher handles an edge case where a component is updating,\n\t      // but no stateful hooks have been used.\n\t      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n\t      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n\t      // This dispatcher does that.\n\t      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n\t    } else {\n\t      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n\t    }\n\t  }\n\n\t  var children = Component(props, secondArg); // Check if there was a render phase update\n\n\t  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n\t    // Keep rendering in a loop for as long as render phase updates continue to\n\t    // be scheduled. Use a counter to prevent infinite loops.\n\t    var numberOfReRenders = 0;\n\n\t    do {\n\t      didScheduleRenderPhaseUpdateDuringThisPass = false;\n\t      localIdCounter = 0;\n\n\t      if (numberOfReRenders >= RE_RENDER_LIMIT) {\n\t        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\n\t      }\n\n\t      numberOfReRenders += 1;\n\n\t      {\n\t        // Even when hot reloading, allow dependencies to stabilize\n\t        // after first render to prevent infinite render phase updates.\n\t        ignorePreviousDependencies = false;\n\t      } // Start over from the beginning of the list\n\n\n\t      currentHook = null;\n\t      workInProgressHook = null;\n\t      workInProgress.updateQueue = null;\n\n\t      {\n\t        // Also validate hook order for cascading updates.\n\t        hookTypesUpdateIndexDev = -1;\n\t      }\n\n\t      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;\n\t      children = Component(props, secondArg);\n\t    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n\t  } // We can assume the previous dispatcher is always this one, since we set it\n\t  // at the beginning of the render phase and there's no re-entrance.\n\n\n\t  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n\t  {\n\t    workInProgress._debugHookTypes = hookTypesDev;\n\t  } // This check uses currentHook so that it works the same in DEV and prod bundles.\n\t  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n\n\t  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n\t  renderLanes = NoLanes;\n\t  currentlyRenderingFiber$1 = null;\n\t  currentHook = null;\n\t  workInProgressHook = null;\n\n\t  {\n\t    currentHookNameInDev = null;\n\t    hookTypesDev = null;\n\t    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n\t    // render. If this fires, it suggests that we incorrectly reset the static\n\t    // flags in some other part of the codebase. This has happened before, for\n\t    // example, in the SuspenseList implementation.\n\n\t    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird\n\t    // and creates false positives. To make this work in legacy mode, we'd\n\t    // need to mark fibers that commit in an incomplete state, somehow. For\n\t    // now I'll disable the warning that most of the bugs that would trigger\n\t    // it are either exclusive to concurrent mode or exist in both.\n\t    (current.mode & ConcurrentMode) !== NoMode) {\n\t      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');\n\t    }\n\t  }\n\n\t  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n\t  // localIdCounter = 0;\n\n\t  if (didRenderTooFewHooks) {\n\t    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');\n\t  }\n\n\t  return children;\n\t}\n\tfunction checkDidRenderIdHook() {\n\t  // This should be called immediately after every renderWithHooks call.\n\t  // Conceptually, it's part of the return value of renderWithHooks; it's only a\n\t  // separate function to avoid using an array tuple.\n\t  var didRenderIdHook = localIdCounter !== 0;\n\t  localIdCounter = 0;\n\t  return didRenderIdHook;\n\t}\n\tfunction bailoutHooks(current, workInProgress, lanes) {\n\t  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n\t  // complete phase (bubbleProperties).\n\n\t  if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n\t    workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);\n\t  } else {\n\t    workInProgress.flags &= ~(Passive | Update);\n\t  }\n\n\t  current.lanes = removeLanes(current.lanes, lanes);\n\t}\n\tfunction resetHooksAfterThrow() {\n\t  // We can assume the previous dispatcher is always this one, since we set it\n\t  // at the beginning of the render phase and there's no re-entrance.\n\t  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n\t  if (didScheduleRenderPhaseUpdate) {\n\t    // There were render phase updates. These are only valid for this render\n\t    // phase, which we are now aborting. Remove the updates from the queues so\n\t    // they do not persist to the next render. Do not remove updates from hooks\n\t    // that weren't processed.\n\t    //\n\t    // Only reset the updates from the queue if it has a clone. If it does\n\t    // not have a clone, that means it wasn't processed, and the updates were\n\t    // scheduled before we entered the render phase.\n\t    var hook = currentlyRenderingFiber$1.memoizedState;\n\n\t    while (hook !== null) {\n\t      var queue = hook.queue;\n\n\t      if (queue !== null) {\n\t        queue.pending = null;\n\t      }\n\n\t      hook = hook.next;\n\t    }\n\n\t    didScheduleRenderPhaseUpdate = false;\n\t  }\n\n\t  renderLanes = NoLanes;\n\t  currentlyRenderingFiber$1 = null;\n\t  currentHook = null;\n\t  workInProgressHook = null;\n\n\t  {\n\t    hookTypesDev = null;\n\t    hookTypesUpdateIndexDev = -1;\n\t    currentHookNameInDev = null;\n\t    isUpdatingOpaqueValueInRenderPhase = false;\n\t  }\n\n\t  didScheduleRenderPhaseUpdateDuringThisPass = false;\n\t  localIdCounter = 0;\n\t}\n\n\tfunction mountWorkInProgressHook() {\n\t  var hook = {\n\t    memoizedState: null,\n\t    baseState: null,\n\t    baseQueue: null,\n\t    queue: null,\n\t    next: null\n\t  };\n\n\t  if (workInProgressHook === null) {\n\t    // This is the first hook in the list\n\t    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n\t  } else {\n\t    // Append to the end of the list\n\t    workInProgressHook = workInProgressHook.next = hook;\n\t  }\n\n\t  return workInProgressHook;\n\t}\n\n\tfunction updateWorkInProgressHook() {\n\t  // This function is used both for updates and for re-renders triggered by a\n\t  // render phase update. It assumes there is either a current hook we can\n\t  // clone, or a work-in-progress hook from a previous render pass that we can\n\t  // use as a base. When we reach the end of the base list, we must switch to\n\t  // the dispatcher used for mounts.\n\t  var nextCurrentHook;\n\n\t  if (currentHook === null) {\n\t    var current = currentlyRenderingFiber$1.alternate;\n\n\t    if (current !== null) {\n\t      nextCurrentHook = current.memoizedState;\n\t    } else {\n\t      nextCurrentHook = null;\n\t    }\n\t  } else {\n\t    nextCurrentHook = currentHook.next;\n\t  }\n\n\t  var nextWorkInProgressHook;\n\n\t  if (workInProgressHook === null) {\n\t    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n\t  } else {\n\t    nextWorkInProgressHook = workInProgressHook.next;\n\t  }\n\n\t  if (nextWorkInProgressHook !== null) {\n\t    // There's already a work-in-progress. Reuse it.\n\t    workInProgressHook = nextWorkInProgressHook;\n\t    nextWorkInProgressHook = workInProgressHook.next;\n\t    currentHook = nextCurrentHook;\n\t  } else {\n\t    // Clone from the current hook.\n\t    if (nextCurrentHook === null) {\n\t      throw new Error('Rendered more hooks than during the previous render.');\n\t    }\n\n\t    currentHook = nextCurrentHook;\n\t    var newHook = {\n\t      memoizedState: currentHook.memoizedState,\n\t      baseState: currentHook.baseState,\n\t      baseQueue: currentHook.baseQueue,\n\t      queue: currentHook.queue,\n\t      next: null\n\t    };\n\n\t    if (workInProgressHook === null) {\n\t      // This is the first hook in the list.\n\t      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n\t    } else {\n\t      // Append to the end of the list.\n\t      workInProgressHook = workInProgressHook.next = newHook;\n\t    }\n\t  }\n\n\t  return workInProgressHook;\n\t}\n\n\tfunction createFunctionComponentUpdateQueue() {\n\t  return {\n\t    lastEffect: null,\n\t    stores: null\n\t  };\n\t}\n\n\tfunction basicStateReducer(state, action) {\n\t  // $FlowFixMe: Flow doesn't like mixed types\n\t  return typeof action === 'function' ? action(state) : action;\n\t}\n\n\tfunction mountReducer(reducer, initialArg, init) {\n\t  var hook = mountWorkInProgressHook();\n\t  var initialState;\n\n\t  if (init !== undefined) {\n\t    initialState = init(initialArg);\n\t  } else {\n\t    initialState = initialArg;\n\t  }\n\n\t  hook.memoizedState = hook.baseState = initialState;\n\t  var queue = {\n\t    pending: null,\n\t    interleaved: null,\n\t    lanes: NoLanes,\n\t    dispatch: null,\n\t    lastRenderedReducer: reducer,\n\t    lastRenderedState: initialState\n\t  };\n\t  hook.queue = queue;\n\t  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n\t  return [hook.memoizedState, dispatch];\n\t}\n\n\tfunction updateReducer(reducer, initialArg, init) {\n\t  var hook = updateWorkInProgressHook();\n\t  var queue = hook.queue;\n\n\t  if (queue === null) {\n\t    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n\t  }\n\n\t  queue.lastRenderedReducer = reducer;\n\t  var current = currentHook; // The last rebase update that is NOT part of the base state.\n\n\t  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.\n\n\t  var pendingQueue = queue.pending;\n\n\t  if (pendingQueue !== null) {\n\t    // We have new updates that haven't been processed yet.\n\t    // We'll add them to the base queue.\n\t    if (baseQueue !== null) {\n\t      // Merge the pending queue and the base queue.\n\t      var baseFirst = baseQueue.next;\n\t      var pendingFirst = pendingQueue.next;\n\t      baseQueue.next = pendingFirst;\n\t      pendingQueue.next = baseFirst;\n\t    }\n\n\t    {\n\t      if (current.baseQueue !== baseQueue) {\n\t        // Internal invariant that should never happen, but feasibly could in\n\t        // the future if we implement resuming, or some form of that.\n\t        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');\n\t      }\n\t    }\n\n\t    current.baseQueue = baseQueue = pendingQueue;\n\t    queue.pending = null;\n\t  }\n\n\t  if (baseQueue !== null) {\n\t    // We have a queue to process.\n\t    var first = baseQueue.next;\n\t    var newState = current.baseState;\n\t    var newBaseState = null;\n\t    var newBaseQueueFirst = null;\n\t    var newBaseQueueLast = null;\n\t    var update = first;\n\n\t    do {\n\t      var updateLane = update.lane;\n\n\t      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n\t        // Priority is insufficient. Skip this update. If this is the first\n\t        // skipped update, the previous update/state is the new base\n\t        // update/state.\n\t        var clone = {\n\t          lane: updateLane,\n\t          action: update.action,\n\t          hasEagerState: update.hasEagerState,\n\t          eagerState: update.eagerState,\n\t          next: null\n\t        };\n\n\t        if (newBaseQueueLast === null) {\n\t          newBaseQueueFirst = newBaseQueueLast = clone;\n\t          newBaseState = newState;\n\t        } else {\n\t          newBaseQueueLast = newBaseQueueLast.next = clone;\n\t        } // Update the remaining priority in the queue.\n\t        // TODO: Don't need to accumulate this. Instead, we can remove\n\t        // renderLanes from the original lanes.\n\n\n\t        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n\t        markSkippedUpdateLanes(updateLane);\n\t      } else {\n\t        // This update does have sufficient priority.\n\t        if (newBaseQueueLast !== null) {\n\t          var _clone = {\n\t            // This update is going to be committed so we never want uncommit\n\t            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n\t            // this will never be skipped by the check above.\n\t            lane: NoLane,\n\t            action: update.action,\n\t            hasEagerState: update.hasEagerState,\n\t            eagerState: update.eagerState,\n\t            next: null\n\t          };\n\t          newBaseQueueLast = newBaseQueueLast.next = _clone;\n\t        } // Process this update.\n\n\n\t        if (update.hasEagerState) {\n\t          // If this update is a state update (not a reducer) and was processed eagerly,\n\t          // we can use the eagerly computed state\n\t          newState = update.eagerState;\n\t        } else {\n\t          var action = update.action;\n\t          newState = reducer(newState, action);\n\t        }\n\t      }\n\n\t      update = update.next;\n\t    } while (update !== null && update !== first);\n\n\t    if (newBaseQueueLast === null) {\n\t      newBaseState = newState;\n\t    } else {\n\t      newBaseQueueLast.next = newBaseQueueFirst;\n\t    } // Mark that the fiber performed work, but only if the new state is\n\t    // different from the current state.\n\n\n\t    if (!objectIs(newState, hook.memoizedState)) {\n\t      markWorkInProgressReceivedUpdate();\n\t    }\n\n\t    hook.memoizedState = newState;\n\t    hook.baseState = newBaseState;\n\t    hook.baseQueue = newBaseQueueLast;\n\t    queue.lastRenderedState = newState;\n\t  } // Interleaved updates are stored on a separate queue. We aren't going to\n\t  // process them during this render, but we do need to track which lanes\n\t  // are remaining.\n\n\n\t  var lastInterleaved = queue.interleaved;\n\n\t  if (lastInterleaved !== null) {\n\t    var interleaved = lastInterleaved;\n\n\t    do {\n\t      var interleavedLane = interleaved.lane;\n\t      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);\n\t      markSkippedUpdateLanes(interleavedLane);\n\t      interleaved = interleaved.next;\n\t    } while (interleaved !== lastInterleaved);\n\t  } else if (baseQueue === null) {\n\t    // `queue.lanes` is used for entangling transitions. We can set it back to\n\t    // zero once the queue is empty.\n\t    queue.lanes = NoLanes;\n\t  }\n\n\t  var dispatch = queue.dispatch;\n\t  return [hook.memoizedState, dispatch];\n\t}\n\n\tfunction rerenderReducer(reducer, initialArg, init) {\n\t  var hook = updateWorkInProgressHook();\n\t  var queue = hook.queue;\n\n\t  if (queue === null) {\n\t    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n\t  }\n\n\t  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n\t  // work-in-progress hook.\n\n\t  var dispatch = queue.dispatch;\n\t  var lastRenderPhaseUpdate = queue.pending;\n\t  var newState = hook.memoizedState;\n\n\t  if (lastRenderPhaseUpdate !== null) {\n\t    // The queue doesn't persist past this render pass.\n\t    queue.pending = null;\n\t    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n\t    var update = firstRenderPhaseUpdate;\n\n\t    do {\n\t      // Process this render phase update. We don't have to check the\n\t      // priority because it will always be the same as the current\n\t      // render's.\n\t      var action = update.action;\n\t      newState = reducer(newState, action);\n\t      update = update.next;\n\t    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n\t    // different from the current state.\n\n\n\t    if (!objectIs(newState, hook.memoizedState)) {\n\t      markWorkInProgressReceivedUpdate();\n\t    }\n\n\t    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n\t    // the base state unless the queue is empty.\n\t    // TODO: Not sure if this is the desired semantics, but it's what we\n\t    // do for gDSFP. I can't remember why.\n\n\t    if (hook.baseQueue === null) {\n\t      hook.baseState = newState;\n\t    }\n\n\t    queue.lastRenderedState = newState;\n\t  }\n\n\t  return [newState, dispatch];\n\t}\n\n\tfunction mountMutableSource(source, getSnapshot, subscribe) {\n\t  {\n\t    return undefined;\n\t  }\n\t}\n\n\tfunction updateMutableSource(source, getSnapshot, subscribe) {\n\t  {\n\t    return undefined;\n\t  }\n\t}\n\n\tfunction mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n\t  var fiber = currentlyRenderingFiber$1;\n\t  var hook = mountWorkInProgressHook();\n\t  var nextSnapshot;\n\t  var isHydrating = getIsHydrating();\n\n\t  if (isHydrating) {\n\t    if (getServerSnapshot === undefined) {\n\t      throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');\n\t    }\n\n\t    nextSnapshot = getServerSnapshot();\n\n\t    {\n\t      if (!didWarnUncachedGetSnapshot) {\n\t        if (nextSnapshot !== getServerSnapshot()) {\n\t          error('The result of getServerSnapshot should be cached to avoid an infinite loop');\n\n\t          didWarnUncachedGetSnapshot = true;\n\t        }\n\t      }\n\t    }\n\t  } else {\n\t    nextSnapshot = getSnapshot();\n\n\t    {\n\t      if (!didWarnUncachedGetSnapshot) {\n\t        var cachedSnapshot = getSnapshot();\n\n\t        if (!objectIs(nextSnapshot, cachedSnapshot)) {\n\t          error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n\t          didWarnUncachedGetSnapshot = true;\n\t        }\n\t      }\n\t    } // Unless we're rendering a blocking lane, schedule a consistency check.\n\t    // Right before committing, we will walk the tree and check if any of the\n\t    // stores were mutated.\n\t    //\n\t    // We won't do this if we're hydrating server-rendered content, because if\n\t    // the content is stale, it's already visible anyway. Instead we'll patch\n\t    // it up in a passive effect.\n\n\n\t    var root = getWorkInProgressRoot();\n\n\t    if (root === null) {\n\t      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n\t    }\n\n\t    if (!includesBlockingLane(root, renderLanes)) {\n\t      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n\t    }\n\t  } // Read the current snapshot from the store on every render. This breaks the\n\t  // normal rules of React, and only works because store updates are\n\t  // always synchronous.\n\n\n\t  hook.memoizedState = nextSnapshot;\n\t  var inst = {\n\t    value: nextSnapshot,\n\t    getSnapshot: getSnapshot\n\t  };\n\t  hook.queue = inst; // Schedule an effect to subscribe to the store.\n\n\t  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update\n\t  // this whenever subscribe, getSnapshot, or value changes. Because there's no\n\t  // clean-up function, and we track the deps correctly, we can call pushEffect\n\t  // directly, without storing any additional state. For the same reason, we\n\t  // don't need to set a static flag, either.\n\t  // TODO: We can move this to the passive phase once we add a pre-commit\n\t  // consistency check. See the next comment.\n\n\t  fiber.flags |= Passive;\n\t  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);\n\t  return nextSnapshot;\n\t}\n\n\tfunction updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n\t  var fiber = currentlyRenderingFiber$1;\n\t  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n\t  // normal rules of React, and only works because store updates are\n\t  // always synchronous.\n\n\t  var nextSnapshot = getSnapshot();\n\n\t  {\n\t    if (!didWarnUncachedGetSnapshot) {\n\t      var cachedSnapshot = getSnapshot();\n\n\t      if (!objectIs(nextSnapshot, cachedSnapshot)) {\n\t        error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n\t        didWarnUncachedGetSnapshot = true;\n\t      }\n\t    }\n\t  }\n\n\t  var prevSnapshot = hook.memoizedState;\n\t  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n\n\t  if (snapshotChanged) {\n\t    hook.memoizedState = nextSnapshot;\n\t    markWorkInProgressReceivedUpdate();\n\t  }\n\n\t  var inst = hook.queue;\n\t  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the\n\t  // commit phase if there was an interleaved mutation. In concurrent mode\n\t  // this can happen all the time, but even in synchronous mode, an earlier\n\t  // effect may have mutated the store.\n\n\t  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by\n\t  // checking whether we scheduled a subscription effect above.\n\t  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n\t    fiber.flags |= Passive;\n\t    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.\n\t    // Right before committing, we will walk the tree and check if any of the\n\t    // stores were mutated.\n\n\t    var root = getWorkInProgressRoot();\n\n\t    if (root === null) {\n\t      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n\t    }\n\n\t    if (!includesBlockingLane(root, renderLanes)) {\n\t      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n\t    }\n\t  }\n\n\t  return nextSnapshot;\n\t}\n\n\tfunction pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n\t  fiber.flags |= StoreConsistency;\n\t  var check = {\n\t    getSnapshot: getSnapshot,\n\t    value: renderedSnapshot\n\t  };\n\t  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n\t  if (componentUpdateQueue === null) {\n\t    componentUpdateQueue = createFunctionComponentUpdateQueue();\n\t    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n\t    componentUpdateQueue.stores = [check];\n\t  } else {\n\t    var stores = componentUpdateQueue.stores;\n\n\t    if (stores === null) {\n\t      componentUpdateQueue.stores = [check];\n\t    } else {\n\t      stores.push(check);\n\t    }\n\t  }\n\t}\n\n\tfunction updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n\t  // These are updated in the passive phase\n\t  inst.value = nextSnapshot;\n\t  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n\t  // have been in an event that fired before the passive effects, or it could\n\t  // have been in a layout effect. In that case, we would have used the old\n\t  // snapsho and getSnapshot values to bail out. We need to check one more time.\n\n\t  if (checkIfSnapshotChanged(inst)) {\n\t    // Force a re-render.\n\t    forceStoreRerender(fiber);\n\t  }\n\t}\n\n\tfunction subscribeToStore(fiber, inst, subscribe) {\n\t  var handleStoreChange = function () {\n\t    // The store changed. Check if the snapshot changed since the last time we\n\t    // read from the store.\n\t    if (checkIfSnapshotChanged(inst)) {\n\t      // Force a re-render.\n\t      forceStoreRerender(fiber);\n\t    }\n\t  }; // Subscribe to the store and return a clean-up function.\n\n\n\t  return subscribe(handleStoreChange);\n\t}\n\n\tfunction checkIfSnapshotChanged(inst) {\n\t  var latestGetSnapshot = inst.getSnapshot;\n\t  var prevValue = inst.value;\n\n\t  try {\n\t    var nextValue = latestGetSnapshot();\n\t    return !objectIs(prevValue, nextValue);\n\t  } catch (error) {\n\t    return true;\n\t  }\n\t}\n\n\tfunction forceStoreRerender(fiber) {\n\t  var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t  if (root !== null) {\n\t    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t  }\n\t}\n\n\tfunction mountState(initialState) {\n\t  var hook = mountWorkInProgressHook();\n\n\t  if (typeof initialState === 'function') {\n\t    // $FlowFixMe: Flow doesn't like mixed types\n\t    initialState = initialState();\n\t  }\n\n\t  hook.memoizedState = hook.baseState = initialState;\n\t  var queue = {\n\t    pending: null,\n\t    interleaved: null,\n\t    lanes: NoLanes,\n\t    dispatch: null,\n\t    lastRenderedReducer: basicStateReducer,\n\t    lastRenderedState: initialState\n\t  };\n\t  hook.queue = queue;\n\t  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n\t  return [hook.memoizedState, dispatch];\n\t}\n\n\tfunction updateState(initialState) {\n\t  return updateReducer(basicStateReducer);\n\t}\n\n\tfunction rerenderState(initialState) {\n\t  return rerenderReducer(basicStateReducer);\n\t}\n\n\tfunction pushEffect(tag, create, destroy, deps) {\n\t  var effect = {\n\t    tag: tag,\n\t    create: create,\n\t    destroy: destroy,\n\t    deps: deps,\n\t    // Circular\n\t    next: null\n\t  };\n\t  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n\t  if (componentUpdateQueue === null) {\n\t    componentUpdateQueue = createFunctionComponentUpdateQueue();\n\t    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n\t    componentUpdateQueue.lastEffect = effect.next = effect;\n\t  } else {\n\t    var lastEffect = componentUpdateQueue.lastEffect;\n\n\t    if (lastEffect === null) {\n\t      componentUpdateQueue.lastEffect = effect.next = effect;\n\t    } else {\n\t      var firstEffect = lastEffect.next;\n\t      lastEffect.next = effect;\n\t      effect.next = firstEffect;\n\t      componentUpdateQueue.lastEffect = effect;\n\t    }\n\t  }\n\n\t  return effect;\n\t}\n\n\tfunction mountRef(initialValue) {\n\t  var hook = mountWorkInProgressHook();\n\n\t  {\n\t    var _ref2 = {\n\t      current: initialValue\n\t    };\n\t    hook.memoizedState = _ref2;\n\t    return _ref2;\n\t  }\n\t}\n\n\tfunction updateRef(initialValue) {\n\t  var hook = updateWorkInProgressHook();\n\t  return hook.memoizedState;\n\t}\n\n\tfunction mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n\t  var hook = mountWorkInProgressHook();\n\t  var nextDeps = deps === undefined ? null : deps;\n\t  currentlyRenderingFiber$1.flags |= fiberFlags;\n\t  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n\t}\n\n\tfunction updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n\t  var hook = updateWorkInProgressHook();\n\t  var nextDeps = deps === undefined ? null : deps;\n\t  var destroy = undefined;\n\n\t  if (currentHook !== null) {\n\t    var prevEffect = currentHook.memoizedState;\n\t    destroy = prevEffect.destroy;\n\n\t    if (nextDeps !== null) {\n\t      var prevDeps = prevEffect.deps;\n\n\t      if (areHookInputsEqual(nextDeps, prevDeps)) {\n\t        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n\t        return;\n\t      }\n\t    }\n\t  }\n\n\t  currentlyRenderingFiber$1.flags |= fiberFlags;\n\t  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);\n\t}\n\n\tfunction mountEffect(create, deps) {\n\t  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n\t    return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);\n\t  } else {\n\t    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);\n\t  }\n\t}\n\n\tfunction updateEffect(create, deps) {\n\t  return updateEffectImpl(Passive, Passive$1, create, deps);\n\t}\n\n\tfunction mountInsertionEffect(create, deps) {\n\t  return mountEffectImpl(Update, Insertion, create, deps);\n\t}\n\n\tfunction updateInsertionEffect(create, deps) {\n\t  return updateEffectImpl(Update, Insertion, create, deps);\n\t}\n\n\tfunction mountLayoutEffect(create, deps) {\n\t  var fiberFlags = Update;\n\n\t  {\n\t    fiberFlags |= LayoutStatic;\n\t  }\n\n\t  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n\t    fiberFlags |= MountLayoutDev;\n\t  }\n\n\t  return mountEffectImpl(fiberFlags, Layout, create, deps);\n\t}\n\n\tfunction updateLayoutEffect(create, deps) {\n\t  return updateEffectImpl(Update, Layout, create, deps);\n\t}\n\n\tfunction imperativeHandleEffect(create, ref) {\n\t  if (typeof ref === 'function') {\n\t    var refCallback = ref;\n\n\t    var _inst = create();\n\n\t    refCallback(_inst);\n\t    return function () {\n\t      refCallback(null);\n\t    };\n\t  } else if (ref !== null && ref !== undefined) {\n\t    var refObject = ref;\n\n\t    {\n\t      if (!refObject.hasOwnProperty('current')) {\n\t        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');\n\t      }\n\t    }\n\n\t    var _inst2 = create();\n\n\t    refObject.current = _inst2;\n\t    return function () {\n\t      refObject.current = null;\n\t    };\n\t  }\n\t}\n\n\tfunction mountImperativeHandle(ref, create, deps) {\n\t  {\n\t    if (typeof create !== 'function') {\n\t      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n\t    }\n\t  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n\t  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\t  var fiberFlags = Update;\n\n\t  {\n\t    fiberFlags |= LayoutStatic;\n\t  }\n\n\t  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n\t    fiberFlags |= MountLayoutDev;\n\t  }\n\n\t  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n\t}\n\n\tfunction updateImperativeHandle(ref, create, deps) {\n\t  {\n\t    if (typeof create !== 'function') {\n\t      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n\t    }\n\t  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n\t  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\t  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n\t}\n\n\tfunction mountDebugValue(value, formatterFn) {// This hook is normally a no-op.\n\t  // The react-debug-hooks package injects its own implementation\n\t  // so that e.g. DevTools can display custom hook values.\n\t}\n\n\tvar updateDebugValue = mountDebugValue;\n\n\tfunction mountCallback(callback, deps) {\n\t  var hook = mountWorkInProgressHook();\n\t  var nextDeps = deps === undefined ? null : deps;\n\t  hook.memoizedState = [callback, nextDeps];\n\t  return callback;\n\t}\n\n\tfunction updateCallback(callback, deps) {\n\t  var hook = updateWorkInProgressHook();\n\t  var nextDeps = deps === undefined ? null : deps;\n\t  var prevState = hook.memoizedState;\n\n\t  if (prevState !== null) {\n\t    if (nextDeps !== null) {\n\t      var prevDeps = prevState[1];\n\n\t      if (areHookInputsEqual(nextDeps, prevDeps)) {\n\t        return prevState[0];\n\t      }\n\t    }\n\t  }\n\n\t  hook.memoizedState = [callback, nextDeps];\n\t  return callback;\n\t}\n\n\tfunction mountMemo(nextCreate, deps) {\n\t  var hook = mountWorkInProgressHook();\n\t  var nextDeps = deps === undefined ? null : deps;\n\t  var nextValue = nextCreate();\n\t  hook.memoizedState = [nextValue, nextDeps];\n\t  return nextValue;\n\t}\n\n\tfunction updateMemo(nextCreate, deps) {\n\t  var hook = updateWorkInProgressHook();\n\t  var nextDeps = deps === undefined ? null : deps;\n\t  var prevState = hook.memoizedState;\n\n\t  if (prevState !== null) {\n\t    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n\t    if (nextDeps !== null) {\n\t      var prevDeps = prevState[1];\n\n\t      if (areHookInputsEqual(nextDeps, prevDeps)) {\n\t        return prevState[0];\n\t      }\n\t    }\n\t  }\n\n\t  var nextValue = nextCreate();\n\t  hook.memoizedState = [nextValue, nextDeps];\n\t  return nextValue;\n\t}\n\n\tfunction mountDeferredValue(value) {\n\t  var hook = mountWorkInProgressHook();\n\t  hook.memoizedState = value;\n\t  return value;\n\t}\n\n\tfunction updateDeferredValue(value) {\n\t  var hook = updateWorkInProgressHook();\n\t  var resolvedCurrentHook = currentHook;\n\t  var prevValue = resolvedCurrentHook.memoizedState;\n\t  return updateDeferredValueImpl(hook, prevValue, value);\n\t}\n\n\tfunction rerenderDeferredValue(value) {\n\t  var hook = updateWorkInProgressHook();\n\n\t  if (currentHook === null) {\n\t    // This is a rerender during a mount.\n\t    hook.memoizedState = value;\n\t    return value;\n\t  } else {\n\t    // This is a rerender during an update.\n\t    var prevValue = currentHook.memoizedState;\n\t    return updateDeferredValueImpl(hook, prevValue, value);\n\t  }\n\t}\n\n\tfunction updateDeferredValueImpl(hook, prevValue, value) {\n\t  var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n\n\t  if (shouldDeferValue) {\n\t    // This is an urgent update. If the value has changed, keep using the\n\t    // previous value and spawn a deferred render to update it later.\n\t    if (!objectIs(value, prevValue)) {\n\t      // Schedule a deferred render\n\t      var deferredLane = claimNextTransitionLane();\n\t      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\n\t      markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent\n\t      // from the latest value. The name \"baseState\" doesn't really match how we\n\t      // use it because we're reusing a state hook field instead of creating a\n\t      // new one.\n\n\t      hook.baseState = true;\n\t    } // Reuse the previous value\n\n\n\t    return prevValue;\n\t  } else {\n\t    // This is not an urgent update, so we can use the latest value regardless\n\t    // of what it is. No need to defer it.\n\t    // However, if we're currently inside a spawned render, then we need to mark\n\t    // this as an update to prevent the fiber from bailing out.\n\t    //\n\t    // `baseState` is true when the current value is different from the rendered\n\t    // value. The name doesn't really match how we use it because we're reusing\n\t    // a state hook field instead of creating a new one.\n\t    if (hook.baseState) {\n\t      // Flip this back to false.\n\t      hook.baseState = false;\n\t      markWorkInProgressReceivedUpdate();\n\t    }\n\n\t    hook.memoizedState = value;\n\t    return value;\n\t  }\n\t}\n\n\tfunction startTransition(setPending, callback, options) {\n\t  var previousPriority = getCurrentUpdatePriority();\n\t  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n\t  setPending(true);\n\t  var prevTransition = ReactCurrentBatchConfig$1.transition;\n\t  ReactCurrentBatchConfig$1.transition = {};\n\t  var currentTransition = ReactCurrentBatchConfig$1.transition;\n\n\t  {\n\t    ReactCurrentBatchConfig$1.transition._updatedFibers = new Set();\n\t  }\n\n\t  try {\n\t    setPending(false);\n\t    callback();\n\t  } finally {\n\t    setCurrentUpdatePriority(previousPriority);\n\t    ReactCurrentBatchConfig$1.transition = prevTransition;\n\n\t    {\n\t      if (prevTransition === null && currentTransition._updatedFibers) {\n\t        var updatedFibersCount = currentTransition._updatedFibers.size;\n\n\t        if (updatedFibersCount > 10) {\n\t          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n\t        }\n\n\t        currentTransition._updatedFibers.clear();\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction mountTransition() {\n\t  var _mountState = mountState(false),\n\t      isPending = _mountState[0],\n\t      setPending = _mountState[1]; // The `start` method never changes.\n\n\n\t  var start = startTransition.bind(null, setPending);\n\t  var hook = mountWorkInProgressHook();\n\t  hook.memoizedState = start;\n\t  return [isPending, start];\n\t}\n\n\tfunction updateTransition() {\n\t  var _updateState = updateState(),\n\t      isPending = _updateState[0];\n\n\t  var hook = updateWorkInProgressHook();\n\t  var start = hook.memoizedState;\n\t  return [isPending, start];\n\t}\n\n\tfunction rerenderTransition() {\n\t  var _rerenderState = rerenderState(),\n\t      isPending = _rerenderState[0];\n\n\t  var hook = updateWorkInProgressHook();\n\t  var start = hook.memoizedState;\n\t  return [isPending, start];\n\t}\n\n\tvar isUpdatingOpaqueValueInRenderPhase = false;\n\tfunction getIsUpdatingOpaqueValueInRenderPhaseInDEV() {\n\t  {\n\t    return isUpdatingOpaqueValueInRenderPhase;\n\t  }\n\t}\n\n\tfunction mountId() {\n\t  var hook = mountWorkInProgressHook();\n\t  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n\t  // should do this in Fiber, too? Deferring this decision for now because\n\t  // there's no other place to store the prefix except for an internal field on\n\t  // the public createRoot object, which the fiber tree does not currently have\n\t  // a reference to.\n\n\t  var identifierPrefix = root.identifierPrefix;\n\t  var id;\n\n\t  if (getIsHydrating()) {\n\t    var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.\n\n\t    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end\n\t    // that represents the position of this useId hook among all the useId\n\t    // hooks for this fiber.\n\n\t    var localId = localIdCounter++;\n\n\t    if (localId > 0) {\n\t      id += 'H' + localId.toString(32);\n\t    }\n\n\t    id += ':';\n\t  } else {\n\t    // Use a lowercase r prefix for client-generated ids.\n\t    var globalClientId = globalClientIdCounter++;\n\t    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n\t  }\n\n\t  hook.memoizedState = id;\n\t  return id;\n\t}\n\n\tfunction updateId() {\n\t  var hook = updateWorkInProgressHook();\n\t  var id = hook.memoizedState;\n\t  return id;\n\t}\n\n\tfunction dispatchReducerAction(fiber, queue, action) {\n\t  {\n\t    if (typeof arguments[3] === 'function') {\n\t      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n\t    }\n\t  }\n\n\t  var lane = requestUpdateLane(fiber);\n\t  var update = {\n\t    lane: lane,\n\t    action: action,\n\t    hasEagerState: false,\n\t    eagerState: null,\n\t    next: null\n\t  };\n\n\t  if (isRenderPhaseUpdate(fiber)) {\n\t    enqueueRenderPhaseUpdate(queue, update);\n\t  } else {\n\t    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n\t    if (root !== null) {\n\t      var eventTime = requestEventTime();\n\t      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t      entangleTransitionUpdate(root, queue, lane);\n\t    }\n\t  }\n\n\t  markUpdateInDevTools(fiber, lane);\n\t}\n\n\tfunction dispatchSetState(fiber, queue, action) {\n\t  {\n\t    if (typeof arguments[3] === 'function') {\n\t      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n\t    }\n\t  }\n\n\t  var lane = requestUpdateLane(fiber);\n\t  var update = {\n\t    lane: lane,\n\t    action: action,\n\t    hasEagerState: false,\n\t    eagerState: null,\n\t    next: null\n\t  };\n\n\t  if (isRenderPhaseUpdate(fiber)) {\n\t    enqueueRenderPhaseUpdate(queue, update);\n\t  } else {\n\t    var alternate = fiber.alternate;\n\n\t    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n\t      // The queue is currently empty, which means we can eagerly compute the\n\t      // next state before entering the render phase. If the new state is the\n\t      // same as the current state, we may be able to bail out entirely.\n\t      var lastRenderedReducer = queue.lastRenderedReducer;\n\n\t      if (lastRenderedReducer !== null) {\n\t        var prevDispatcher;\n\n\t        {\n\t          prevDispatcher = ReactCurrentDispatcher$1.current;\n\t          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\t        }\n\n\t        try {\n\t          var currentState = queue.lastRenderedState;\n\t          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n\t          // it, on the update object. If the reducer hasn't changed by the\n\t          // time we enter the render phase, then the eager state can be used\n\t          // without calling the reducer again.\n\n\t          update.hasEagerState = true;\n\t          update.eagerState = eagerState;\n\n\t          if (objectIs(eagerState, currentState)) {\n\t            // Fast path. We can bail out without scheduling React to re-render.\n\t            // It's still possible that we'll need to rebase this update later,\n\t            // if the component re-renders for a different reason and by that\n\t            // time the reducer has changed.\n\t            // TODO: Do we still need to entangle transitions in this case?\n\t            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);\n\t            return;\n\t          }\n\t        } catch (error) {// Suppress the error. It will throw again in the render phase.\n\t        } finally {\n\t          {\n\t            ReactCurrentDispatcher$1.current = prevDispatcher;\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n\t    if (root !== null) {\n\t      var eventTime = requestEventTime();\n\t      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t      entangleTransitionUpdate(root, queue, lane);\n\t    }\n\t  }\n\n\t  markUpdateInDevTools(fiber, lane);\n\t}\n\n\tfunction isRenderPhaseUpdate(fiber) {\n\t  var alternate = fiber.alternate;\n\t  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n\t}\n\n\tfunction enqueueRenderPhaseUpdate(queue, update) {\n\t  // This is a render phase update. Stash it in a lazily-created map of\n\t  // queue -> linked list of updates. After this render pass, we'll restart\n\t  // and apply the stashed updates on top of the work-in-progress hook.\n\t  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n\t  var pending = queue.pending;\n\n\t  if (pending === null) {\n\t    // This is the first update. Create a circular list.\n\t    update.next = update;\n\t  } else {\n\t    update.next = pending.next;\n\t    pending.next = update;\n\t  }\n\n\t  queue.pending = update;\n\t} // TODO: Move to ReactFiberConcurrentUpdates?\n\n\n\tfunction entangleTransitionUpdate(root, queue, lane) {\n\t  if (isTransitionLane(lane)) {\n\t    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n\t    // must have finished. We can remove them from the shared queue, which\n\t    // represents a superset of the actually pending lanes. In some cases we\n\t    // may entangle more than we need to, but that's OK. In fact it's worse if\n\t    // we *don't* entangle when we should.\n\n\t    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n\t    var newQueueLanes = mergeLanes(queueLanes, lane);\n\t    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n\t    // the lane finished since the last time we entangled it. So we need to\n\t    // entangle it again, just to be sure.\n\n\t    markRootEntangled(root, newQueueLanes);\n\t  }\n\t}\n\n\tfunction markUpdateInDevTools(fiber, lane, action) {\n\n\t  {\n\t    markStateUpdateScheduled(fiber, lane);\n\t  }\n\t}\n\n\tvar ContextOnlyDispatcher = {\n\t  readContext: readContext,\n\t  useCallback: throwInvalidHookError,\n\t  useContext: throwInvalidHookError,\n\t  useEffect: throwInvalidHookError,\n\t  useImperativeHandle: throwInvalidHookError,\n\t  useInsertionEffect: throwInvalidHookError,\n\t  useLayoutEffect: throwInvalidHookError,\n\t  useMemo: throwInvalidHookError,\n\t  useReducer: throwInvalidHookError,\n\t  useRef: throwInvalidHookError,\n\t  useState: throwInvalidHookError,\n\t  useDebugValue: throwInvalidHookError,\n\t  useDeferredValue: throwInvalidHookError,\n\t  useTransition: throwInvalidHookError,\n\t  useMutableSource: throwInvalidHookError,\n\t  useSyncExternalStore: throwInvalidHookError,\n\t  useId: throwInvalidHookError,\n\t  unstable_isNewReconciler: enableNewReconciler\n\t};\n\n\tvar HooksDispatcherOnMountInDEV = null;\n\tvar HooksDispatcherOnMountWithHookTypesInDEV = null;\n\tvar HooksDispatcherOnUpdateInDEV = null;\n\tvar HooksDispatcherOnRerenderInDEV = null;\n\tvar InvalidNestedHooksDispatcherOnMountInDEV = null;\n\tvar InvalidNestedHooksDispatcherOnUpdateInDEV = null;\n\tvar InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n\n\t{\n\t  var warnInvalidContextAccess = function () {\n\t    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n\t  };\n\n\t  var warnInvalidHookAccess = function () {\n\t    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n\t  };\n\n\t  HooksDispatcherOnMountInDEV = {\n\t    readContext: function (context) {\n\t      return readContext(context);\n\t    },\n\t    useCallback: function (callback, deps) {\n\t      currentHookNameInDev = 'useCallback';\n\t      mountHookTypesDev();\n\t      checkDepsAreArrayDev(deps);\n\t      return mountCallback(callback, deps);\n\t    },\n\t    useContext: function (context) {\n\t      currentHookNameInDev = 'useContext';\n\t      mountHookTypesDev();\n\t      return readContext(context);\n\t    },\n\t    useEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useEffect';\n\t      mountHookTypesDev();\n\t      checkDepsAreArrayDev(deps);\n\t      return mountEffect(create, deps);\n\t    },\n\t    useImperativeHandle: function (ref, create, deps) {\n\t      currentHookNameInDev = 'useImperativeHandle';\n\t      mountHookTypesDev();\n\t      checkDepsAreArrayDev(deps);\n\t      return mountImperativeHandle(ref, create, deps);\n\t    },\n\t    useInsertionEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useInsertionEffect';\n\t      mountHookTypesDev();\n\t      checkDepsAreArrayDev(deps);\n\t      return mountInsertionEffect(create, deps);\n\t    },\n\t    useLayoutEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useLayoutEffect';\n\t      mountHookTypesDev();\n\t      checkDepsAreArrayDev(deps);\n\t      return mountLayoutEffect(create, deps);\n\t    },\n\t    useMemo: function (create, deps) {\n\t      currentHookNameInDev = 'useMemo';\n\t      mountHookTypesDev();\n\t      checkDepsAreArrayDev(deps);\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountMemo(create, deps);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useReducer: function (reducer, initialArg, init) {\n\t      currentHookNameInDev = 'useReducer';\n\t      mountHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountReducer(reducer, initialArg, init);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useRef: function (initialValue) {\n\t      currentHookNameInDev = 'useRef';\n\t      mountHookTypesDev();\n\t      return mountRef(initialValue);\n\t    },\n\t    useState: function (initialState) {\n\t      currentHookNameInDev = 'useState';\n\t      mountHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountState(initialState);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useDebugValue: function (value, formatterFn) {\n\t      currentHookNameInDev = 'useDebugValue';\n\t      mountHookTypesDev();\n\t      return mountDebugValue();\n\t    },\n\t    useDeferredValue: function (value) {\n\t      currentHookNameInDev = 'useDeferredValue';\n\t      mountHookTypesDev();\n\t      return mountDeferredValue(value);\n\t    },\n\t    useTransition: function () {\n\t      currentHookNameInDev = 'useTransition';\n\t      mountHookTypesDev();\n\t      return mountTransition();\n\t    },\n\t    useMutableSource: function (source, getSnapshot, subscribe) {\n\t      currentHookNameInDev = 'useMutableSource';\n\t      mountHookTypesDev();\n\t      return mountMutableSource();\n\t    },\n\t    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n\t      currentHookNameInDev = 'useSyncExternalStore';\n\t      mountHookTypesDev();\n\t      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n\t    },\n\t    useId: function () {\n\t      currentHookNameInDev = 'useId';\n\t      mountHookTypesDev();\n\t      return mountId();\n\t    },\n\t    unstable_isNewReconciler: enableNewReconciler\n\t  };\n\n\t  HooksDispatcherOnMountWithHookTypesInDEV = {\n\t    readContext: function (context) {\n\t      return readContext(context);\n\t    },\n\t    useCallback: function (callback, deps) {\n\t      currentHookNameInDev = 'useCallback';\n\t      updateHookTypesDev();\n\t      return mountCallback(callback, deps);\n\t    },\n\t    useContext: function (context) {\n\t      currentHookNameInDev = 'useContext';\n\t      updateHookTypesDev();\n\t      return readContext(context);\n\t    },\n\t    useEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useEffect';\n\t      updateHookTypesDev();\n\t      return mountEffect(create, deps);\n\t    },\n\t    useImperativeHandle: function (ref, create, deps) {\n\t      currentHookNameInDev = 'useImperativeHandle';\n\t      updateHookTypesDev();\n\t      return mountImperativeHandle(ref, create, deps);\n\t    },\n\t    useInsertionEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useInsertionEffect';\n\t      updateHookTypesDev();\n\t      return mountInsertionEffect(create, deps);\n\t    },\n\t    useLayoutEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useLayoutEffect';\n\t      updateHookTypesDev();\n\t      return mountLayoutEffect(create, deps);\n\t    },\n\t    useMemo: function (create, deps) {\n\t      currentHookNameInDev = 'useMemo';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountMemo(create, deps);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useReducer: function (reducer, initialArg, init) {\n\t      currentHookNameInDev = 'useReducer';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountReducer(reducer, initialArg, init);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useRef: function (initialValue) {\n\t      currentHookNameInDev = 'useRef';\n\t      updateHookTypesDev();\n\t      return mountRef(initialValue);\n\t    },\n\t    useState: function (initialState) {\n\t      currentHookNameInDev = 'useState';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountState(initialState);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useDebugValue: function (value, formatterFn) {\n\t      currentHookNameInDev = 'useDebugValue';\n\t      updateHookTypesDev();\n\t      return mountDebugValue();\n\t    },\n\t    useDeferredValue: function (value) {\n\t      currentHookNameInDev = 'useDeferredValue';\n\t      updateHookTypesDev();\n\t      return mountDeferredValue(value);\n\t    },\n\t    useTransition: function () {\n\t      currentHookNameInDev = 'useTransition';\n\t      updateHookTypesDev();\n\t      return mountTransition();\n\t    },\n\t    useMutableSource: function (source, getSnapshot, subscribe) {\n\t      currentHookNameInDev = 'useMutableSource';\n\t      updateHookTypesDev();\n\t      return mountMutableSource();\n\t    },\n\t    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n\t      currentHookNameInDev = 'useSyncExternalStore';\n\t      updateHookTypesDev();\n\t      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n\t    },\n\t    useId: function () {\n\t      currentHookNameInDev = 'useId';\n\t      updateHookTypesDev();\n\t      return mountId();\n\t    },\n\t    unstable_isNewReconciler: enableNewReconciler\n\t  };\n\n\t  HooksDispatcherOnUpdateInDEV = {\n\t    readContext: function (context) {\n\t      return readContext(context);\n\t    },\n\t    useCallback: function (callback, deps) {\n\t      currentHookNameInDev = 'useCallback';\n\t      updateHookTypesDev();\n\t      return updateCallback(callback, deps);\n\t    },\n\t    useContext: function (context) {\n\t      currentHookNameInDev = 'useContext';\n\t      updateHookTypesDev();\n\t      return readContext(context);\n\t    },\n\t    useEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useEffect';\n\t      updateHookTypesDev();\n\t      return updateEffect(create, deps);\n\t    },\n\t    useImperativeHandle: function (ref, create, deps) {\n\t      currentHookNameInDev = 'useImperativeHandle';\n\t      updateHookTypesDev();\n\t      return updateImperativeHandle(ref, create, deps);\n\t    },\n\t    useInsertionEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useInsertionEffect';\n\t      updateHookTypesDev();\n\t      return updateInsertionEffect(create, deps);\n\t    },\n\t    useLayoutEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useLayoutEffect';\n\t      updateHookTypesDev();\n\t      return updateLayoutEffect(create, deps);\n\t    },\n\t    useMemo: function (create, deps) {\n\t      currentHookNameInDev = 'useMemo';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return updateMemo(create, deps);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useReducer: function (reducer, initialArg, init) {\n\t      currentHookNameInDev = 'useReducer';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return updateReducer(reducer, initialArg, init);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useRef: function (initialValue) {\n\t      currentHookNameInDev = 'useRef';\n\t      updateHookTypesDev();\n\t      return updateRef();\n\t    },\n\t    useState: function (initialState) {\n\t      currentHookNameInDev = 'useState';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return updateState(initialState);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useDebugValue: function (value, formatterFn) {\n\t      currentHookNameInDev = 'useDebugValue';\n\t      updateHookTypesDev();\n\t      return updateDebugValue();\n\t    },\n\t    useDeferredValue: function (value) {\n\t      currentHookNameInDev = 'useDeferredValue';\n\t      updateHookTypesDev();\n\t      return updateDeferredValue(value);\n\t    },\n\t    useTransition: function () {\n\t      currentHookNameInDev = 'useTransition';\n\t      updateHookTypesDev();\n\t      return updateTransition();\n\t    },\n\t    useMutableSource: function (source, getSnapshot, subscribe) {\n\t      currentHookNameInDev = 'useMutableSource';\n\t      updateHookTypesDev();\n\t      return updateMutableSource();\n\t    },\n\t    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n\t      currentHookNameInDev = 'useSyncExternalStore';\n\t      updateHookTypesDev();\n\t      return updateSyncExternalStore(subscribe, getSnapshot);\n\t    },\n\t    useId: function () {\n\t      currentHookNameInDev = 'useId';\n\t      updateHookTypesDev();\n\t      return updateId();\n\t    },\n\t    unstable_isNewReconciler: enableNewReconciler\n\t  };\n\n\t  HooksDispatcherOnRerenderInDEV = {\n\t    readContext: function (context) {\n\t      return readContext(context);\n\t    },\n\t    useCallback: function (callback, deps) {\n\t      currentHookNameInDev = 'useCallback';\n\t      updateHookTypesDev();\n\t      return updateCallback(callback, deps);\n\t    },\n\t    useContext: function (context) {\n\t      currentHookNameInDev = 'useContext';\n\t      updateHookTypesDev();\n\t      return readContext(context);\n\t    },\n\t    useEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useEffect';\n\t      updateHookTypesDev();\n\t      return updateEffect(create, deps);\n\t    },\n\t    useImperativeHandle: function (ref, create, deps) {\n\t      currentHookNameInDev = 'useImperativeHandle';\n\t      updateHookTypesDev();\n\t      return updateImperativeHandle(ref, create, deps);\n\t    },\n\t    useInsertionEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useInsertionEffect';\n\t      updateHookTypesDev();\n\t      return updateInsertionEffect(create, deps);\n\t    },\n\t    useLayoutEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useLayoutEffect';\n\t      updateHookTypesDev();\n\t      return updateLayoutEffect(create, deps);\n\t    },\n\t    useMemo: function (create, deps) {\n\t      currentHookNameInDev = 'useMemo';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n\t      try {\n\t        return updateMemo(create, deps);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useReducer: function (reducer, initialArg, init) {\n\t      currentHookNameInDev = 'useReducer';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n\t      try {\n\t        return rerenderReducer(reducer, initialArg, init);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useRef: function (initialValue) {\n\t      currentHookNameInDev = 'useRef';\n\t      updateHookTypesDev();\n\t      return updateRef();\n\t    },\n\t    useState: function (initialState) {\n\t      currentHookNameInDev = 'useState';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n\t      try {\n\t        return rerenderState(initialState);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useDebugValue: function (value, formatterFn) {\n\t      currentHookNameInDev = 'useDebugValue';\n\t      updateHookTypesDev();\n\t      return updateDebugValue();\n\t    },\n\t    useDeferredValue: function (value) {\n\t      currentHookNameInDev = 'useDeferredValue';\n\t      updateHookTypesDev();\n\t      return rerenderDeferredValue(value);\n\t    },\n\t    useTransition: function () {\n\t      currentHookNameInDev = 'useTransition';\n\t      updateHookTypesDev();\n\t      return rerenderTransition();\n\t    },\n\t    useMutableSource: function (source, getSnapshot, subscribe) {\n\t      currentHookNameInDev = 'useMutableSource';\n\t      updateHookTypesDev();\n\t      return updateMutableSource();\n\t    },\n\t    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n\t      currentHookNameInDev = 'useSyncExternalStore';\n\t      updateHookTypesDev();\n\t      return updateSyncExternalStore(subscribe, getSnapshot);\n\t    },\n\t    useId: function () {\n\t      currentHookNameInDev = 'useId';\n\t      updateHookTypesDev();\n\t      return updateId();\n\t    },\n\t    unstable_isNewReconciler: enableNewReconciler\n\t  };\n\n\t  InvalidNestedHooksDispatcherOnMountInDEV = {\n\t    readContext: function (context) {\n\t      warnInvalidContextAccess();\n\t      return readContext(context);\n\t    },\n\t    useCallback: function (callback, deps) {\n\t      currentHookNameInDev = 'useCallback';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountCallback(callback, deps);\n\t    },\n\t    useContext: function (context) {\n\t      currentHookNameInDev = 'useContext';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return readContext(context);\n\t    },\n\t    useEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useEffect';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountEffect(create, deps);\n\t    },\n\t    useImperativeHandle: function (ref, create, deps) {\n\t      currentHookNameInDev = 'useImperativeHandle';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountImperativeHandle(ref, create, deps);\n\t    },\n\t    useInsertionEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useInsertionEffect';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountInsertionEffect(create, deps);\n\t    },\n\t    useLayoutEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useLayoutEffect';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountLayoutEffect(create, deps);\n\t    },\n\t    useMemo: function (create, deps) {\n\t      currentHookNameInDev = 'useMemo';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountMemo(create, deps);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useReducer: function (reducer, initialArg, init) {\n\t      currentHookNameInDev = 'useReducer';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountReducer(reducer, initialArg, init);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useRef: function (initialValue) {\n\t      currentHookNameInDev = 'useRef';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountRef(initialValue);\n\t    },\n\t    useState: function (initialState) {\n\t      currentHookNameInDev = 'useState';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountState(initialState);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useDebugValue: function (value, formatterFn) {\n\t      currentHookNameInDev = 'useDebugValue';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountDebugValue();\n\t    },\n\t    useDeferredValue: function (value) {\n\t      currentHookNameInDev = 'useDeferredValue';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountDeferredValue(value);\n\t    },\n\t    useTransition: function () {\n\t      currentHookNameInDev = 'useTransition';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountTransition();\n\t    },\n\t    useMutableSource: function (source, getSnapshot, subscribe) {\n\t      currentHookNameInDev = 'useMutableSource';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountMutableSource();\n\t    },\n\t    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n\t      currentHookNameInDev = 'useSyncExternalStore';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n\t    },\n\t    useId: function () {\n\t      currentHookNameInDev = 'useId';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountId();\n\t    },\n\t    unstable_isNewReconciler: enableNewReconciler\n\t  };\n\n\t  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n\t    readContext: function (context) {\n\t      warnInvalidContextAccess();\n\t      return readContext(context);\n\t    },\n\t    useCallback: function (callback, deps) {\n\t      currentHookNameInDev = 'useCallback';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateCallback(callback, deps);\n\t    },\n\t    useContext: function (context) {\n\t      currentHookNameInDev = 'useContext';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return readContext(context);\n\t    },\n\t    useEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useEffect';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateEffect(create, deps);\n\t    },\n\t    useImperativeHandle: function (ref, create, deps) {\n\t      currentHookNameInDev = 'useImperativeHandle';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateImperativeHandle(ref, create, deps);\n\t    },\n\t    useInsertionEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useInsertionEffect';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateInsertionEffect(create, deps);\n\t    },\n\t    useLayoutEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useLayoutEffect';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateLayoutEffect(create, deps);\n\t    },\n\t    useMemo: function (create, deps) {\n\t      currentHookNameInDev = 'useMemo';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return updateMemo(create, deps);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useReducer: function (reducer, initialArg, init) {\n\t      currentHookNameInDev = 'useReducer';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return updateReducer(reducer, initialArg, init);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useRef: function (initialValue) {\n\t      currentHookNameInDev = 'useRef';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateRef();\n\t    },\n\t    useState: function (initialState) {\n\t      currentHookNameInDev = 'useState';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return updateState(initialState);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useDebugValue: function (value, formatterFn) {\n\t      currentHookNameInDev = 'useDebugValue';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateDebugValue();\n\t    },\n\t    useDeferredValue: function (value) {\n\t      currentHookNameInDev = 'useDeferredValue';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateDeferredValue(value);\n\t    },\n\t    useTransition: function () {\n\t      currentHookNameInDev = 'useTransition';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateTransition();\n\t    },\n\t    useMutableSource: function (source, getSnapshot, subscribe) {\n\t      currentHookNameInDev = 'useMutableSource';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateMutableSource();\n\t    },\n\t    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n\t      currentHookNameInDev = 'useSyncExternalStore';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateSyncExternalStore(subscribe, getSnapshot);\n\t    },\n\t    useId: function () {\n\t      currentHookNameInDev = 'useId';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateId();\n\t    },\n\t    unstable_isNewReconciler: enableNewReconciler\n\t  };\n\n\t  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n\t    readContext: function (context) {\n\t      warnInvalidContextAccess();\n\t      return readContext(context);\n\t    },\n\t    useCallback: function (callback, deps) {\n\t      currentHookNameInDev = 'useCallback';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateCallback(callback, deps);\n\t    },\n\t    useContext: function (context) {\n\t      currentHookNameInDev = 'useContext';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return readContext(context);\n\t    },\n\t    useEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useEffect';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateEffect(create, deps);\n\t    },\n\t    useImperativeHandle: function (ref, create, deps) {\n\t      currentHookNameInDev = 'useImperativeHandle';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateImperativeHandle(ref, create, deps);\n\t    },\n\t    useInsertionEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useInsertionEffect';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateInsertionEffect(create, deps);\n\t    },\n\t    useLayoutEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useLayoutEffect';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateLayoutEffect(create, deps);\n\t    },\n\t    useMemo: function (create, deps) {\n\t      currentHookNameInDev = 'useMemo';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return updateMemo(create, deps);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useReducer: function (reducer, initialArg, init) {\n\t      currentHookNameInDev = 'useReducer';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return rerenderReducer(reducer, initialArg, init);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useRef: function (initialValue) {\n\t      currentHookNameInDev = 'useRef';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateRef();\n\t    },\n\t    useState: function (initialState) {\n\t      currentHookNameInDev = 'useState';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return rerenderState(initialState);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useDebugValue: function (value, formatterFn) {\n\t      currentHookNameInDev = 'useDebugValue';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateDebugValue();\n\t    },\n\t    useDeferredValue: function (value) {\n\t      currentHookNameInDev = 'useDeferredValue';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return rerenderDeferredValue(value);\n\t    },\n\t    useTransition: function () {\n\t      currentHookNameInDev = 'useTransition';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return rerenderTransition();\n\t    },\n\t    useMutableSource: function (source, getSnapshot, subscribe) {\n\t      currentHookNameInDev = 'useMutableSource';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateMutableSource();\n\t    },\n\t    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n\t      currentHookNameInDev = 'useSyncExternalStore';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateSyncExternalStore(subscribe, getSnapshot);\n\t    },\n\t    useId: function () {\n\t      currentHookNameInDev = 'useId';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateId();\n\t    },\n\t    unstable_isNewReconciler: enableNewReconciler\n\t  };\n\t}\n\n\tvar now$1 = Scheduler.unstable_now;\n\tvar commitTime = 0;\n\tvar layoutEffectStartTime = -1;\n\tvar profilerStartTime = -1;\n\tvar passiveEffectStartTime = -1;\n\t/**\n\t * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n\t *\n\t * The overall sequence is:\n\t *   1. render\n\t *   2. commit (and call `onRender`, `onCommit`)\n\t *   3. check for nested updates\n\t *   4. flush passive effects (and call `onPostCommit`)\n\t *\n\t * Nested updates are identified in step 3 above,\n\t * but step 4 still applies to the work that was just committed.\n\t * We use two flags to track nested updates then:\n\t * one tracks whether the upcoming update is a nested update,\n\t * and the other tracks whether the current update was a nested update.\n\t * The first value gets synced to the second at the start of the render phase.\n\t */\n\n\tvar currentUpdateIsNested = false;\n\tvar nestedUpdateScheduled = false;\n\n\tfunction isCurrentUpdateNested() {\n\t  return currentUpdateIsNested;\n\t}\n\n\tfunction markNestedUpdateScheduled() {\n\t  {\n\t    nestedUpdateScheduled = true;\n\t  }\n\t}\n\n\tfunction resetNestedUpdateFlag() {\n\t  {\n\t    currentUpdateIsNested = false;\n\t    nestedUpdateScheduled = false;\n\t  }\n\t}\n\n\tfunction syncNestedUpdateFlag() {\n\t  {\n\t    currentUpdateIsNested = nestedUpdateScheduled;\n\t    nestedUpdateScheduled = false;\n\t  }\n\t}\n\n\tfunction getCommitTime() {\n\t  return commitTime;\n\t}\n\n\tfunction recordCommitTime() {\n\n\t  commitTime = now$1();\n\t}\n\n\tfunction startProfilerTimer(fiber) {\n\n\t  profilerStartTime = now$1();\n\n\t  if (fiber.actualStartTime < 0) {\n\t    fiber.actualStartTime = now$1();\n\t  }\n\t}\n\n\tfunction stopProfilerTimerIfRunning(fiber) {\n\n\t  profilerStartTime = -1;\n\t}\n\n\tfunction stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n\n\t  if (profilerStartTime >= 0) {\n\t    var elapsedTime = now$1() - profilerStartTime;\n\t    fiber.actualDuration += elapsedTime;\n\n\t    if (overrideBaseTime) {\n\t      fiber.selfBaseDuration = elapsedTime;\n\t    }\n\n\t    profilerStartTime = -1;\n\t  }\n\t}\n\n\tfunction recordLayoutEffectDuration(fiber) {\n\n\t  if (layoutEffectStartTime >= 0) {\n\t    var elapsedTime = now$1() - layoutEffectStartTime;\n\t    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n\t    // Or the root (for the DevTools Profiler to read)\n\n\t    var parentFiber = fiber.return;\n\n\t    while (parentFiber !== null) {\n\t      switch (parentFiber.tag) {\n\t        case HostRoot:\n\t          var root = parentFiber.stateNode;\n\t          root.effectDuration += elapsedTime;\n\t          return;\n\n\t        case Profiler:\n\t          var parentStateNode = parentFiber.stateNode;\n\t          parentStateNode.effectDuration += elapsedTime;\n\t          return;\n\t      }\n\n\t      parentFiber = parentFiber.return;\n\t    }\n\t  }\n\t}\n\n\tfunction recordPassiveEffectDuration(fiber) {\n\n\t  if (passiveEffectStartTime >= 0) {\n\t    var elapsedTime = now$1() - passiveEffectStartTime;\n\t    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n\t    // Or the root (for the DevTools Profiler to read)\n\n\t    var parentFiber = fiber.return;\n\n\t    while (parentFiber !== null) {\n\t      switch (parentFiber.tag) {\n\t        case HostRoot:\n\t          var root = parentFiber.stateNode;\n\n\t          if (root !== null) {\n\t            root.passiveEffectDuration += elapsedTime;\n\t          }\n\n\t          return;\n\n\t        case Profiler:\n\t          var parentStateNode = parentFiber.stateNode;\n\n\t          if (parentStateNode !== null) {\n\t            // Detached fibers have their state node cleared out.\n\t            // In this case, the return pointer is also cleared out,\n\t            // so we won't be able to report the time spent in this Profiler's subtree.\n\t            parentStateNode.passiveEffectDuration += elapsedTime;\n\t          }\n\n\t          return;\n\t      }\n\n\t      parentFiber = parentFiber.return;\n\t    }\n\t  }\n\t}\n\n\tfunction startLayoutEffectTimer() {\n\n\t  layoutEffectStartTime = now$1();\n\t}\n\n\tfunction startPassiveEffectTimer() {\n\n\t  passiveEffectStartTime = now$1();\n\t}\n\n\tfunction transferActualDuration(fiber) {\n\t  // Transfer time spent rendering these children so we don't lose it\n\t  // after we rerender. This is used as a helper in special cases\n\t  // where we should count the work of multiple passes.\n\t  var child = fiber.child;\n\n\t  while (child) {\n\t    fiber.actualDuration += child.actualDuration;\n\t    child = child.sibling;\n\t  }\n\t}\n\n\tfunction createCapturedValueAtFiber(value, source) {\n\t  // If the value is an error, call this function immediately after it is thrown\n\t  // so the stack is accurate.\n\t  return {\n\t    value: value,\n\t    source: source,\n\t    stack: getStackByFiberInDevAndProd(source),\n\t    digest: null\n\t  };\n\t}\n\tfunction createCapturedValue(value, digest, stack) {\n\t  return {\n\t    value: value,\n\t    source: null,\n\t    stack: stack != null ? stack : null,\n\t    digest: digest != null ? digest : null\n\t  };\n\t}\n\n\t// This module is forked in different environments.\n\t// By default, return `true` to log errors to the console.\n\t// Forks can return `false` if this isn't desirable.\n\tfunction showErrorDialog(boundary, errorInfo) {\n\t  return true;\n\t}\n\n\tfunction logCapturedError(boundary, errorInfo) {\n\t  try {\n\t    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n\t    // This enables renderers like ReactNative to better manage redbox behavior.\n\n\t    if (logError === false) {\n\t      return;\n\t    }\n\n\t    var error = errorInfo.value;\n\n\t    if (true) {\n\t      var source = errorInfo.source;\n\t      var stack = errorInfo.stack;\n\t      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\n\t      // `preventDefault()` in window `error` handler.\n\t      // We record this information as an expando on the error.\n\n\t      if (error != null && error._suppressLogging) {\n\t        if (boundary.tag === ClassComponent) {\n\t          // The error is recoverable and was silenced.\n\t          // Ignore it and don't print the stack addendum.\n\t          // This is handy for testing error boundaries without noise.\n\t          return;\n\t        } // The error is fatal. Since the silencing might have\n\t        // been accidental, we'll surface it anyway.\n\t        // However, the browser would have silenced the original error\n\t        // so we'll print it first, and then print the stack addendum.\n\n\n\t        console['error'](error); // Don't transform to our wrapper\n\t        // For a more detailed description of this block, see:\n\t        // https://github.com/facebook/react/pull/13384\n\t      }\n\n\t      var componentName = source ? getComponentNameFromFiber(source) : null;\n\t      var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : 'The above error occurred in one of your React components:';\n\t      var errorBoundaryMessage;\n\n\t      if (boundary.tag === HostRoot) {\n\t        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n\t      } else {\n\t        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';\n\t        errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n\t      }\n\n\t      var combinedMessage = componentNameMessage + \"\\n\" + componentStack + \"\\n\\n\" + (\"\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n\t      // We don't include the original error message and JS stack because the browser\n\t      // has already printed it. Even if the application swallows the error, it is still\n\t      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n\t      console['error'](combinedMessage); // Don't transform to our wrapper\n\t    }\n\t  } catch (e) {\n\t    // This method must not throw, or React internal state will get messed up.\n\t    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n\t    // we want to report this error outside of the normal stack as a last resort.\n\t    // https://github.com/facebook/react/issues/13188\n\t    setTimeout(function () {\n\t      throw e;\n\t    });\n\t  }\n\t}\n\n\tvar PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;\n\n\tfunction createRootErrorUpdate(fiber, errorInfo, lane) {\n\t  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.\n\n\t  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n\t  // being called \"element\".\n\n\t  update.payload = {\n\t    element: null\n\t  };\n\t  var error = errorInfo.value;\n\n\t  update.callback = function () {\n\t    onUncaughtError(error);\n\t    logCapturedError(fiber, errorInfo);\n\t  };\n\n\t  return update;\n\t}\n\n\tfunction createClassErrorUpdate(fiber, errorInfo, lane) {\n\t  var update = createUpdate(NoTimestamp, lane);\n\t  update.tag = CaptureUpdate;\n\t  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n\n\t  if (typeof getDerivedStateFromError === 'function') {\n\t    var error$1 = errorInfo.value;\n\n\t    update.payload = function () {\n\t      return getDerivedStateFromError(error$1);\n\t    };\n\n\t    update.callback = function () {\n\t      {\n\t        markFailedErrorBoundaryForHotReloading(fiber);\n\t      }\n\n\t      logCapturedError(fiber, errorInfo);\n\t    };\n\t  }\n\n\t  var inst = fiber.stateNode;\n\n\t  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n\t    update.callback = function callback() {\n\t      {\n\t        markFailedErrorBoundaryForHotReloading(fiber);\n\t      }\n\n\t      logCapturedError(fiber, errorInfo);\n\n\t      if (typeof getDerivedStateFromError !== 'function') {\n\t        // To preserve the preexisting retry behavior of error boundaries,\n\t        // we keep track of which ones already failed during this batch.\n\t        // This gets reset before we yield back to the browser.\n\t        // TODO: Warn in strict mode if getDerivedStateFromError is\n\t        // not defined.\n\t        markLegacyErrorBoundaryAsFailed(this);\n\t      }\n\n\t      var error$1 = errorInfo.value;\n\t      var stack = errorInfo.stack;\n\t      this.componentDidCatch(error$1, {\n\t        componentStack: stack !== null ? stack : ''\n\t      });\n\n\t      {\n\t        if (typeof getDerivedStateFromError !== 'function') {\n\t          // If componentDidCatch is the only error boundary method defined,\n\t          // then it needs to call setState to recover from errors.\n\t          // If no state update is scheduled then the boundary will swallow the error.\n\t          if (!includesSomeLane(fiber.lanes, SyncLane)) {\n\t            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');\n\t          }\n\t        }\n\t      }\n\t    };\n\t  }\n\n\t  return update;\n\t}\n\n\tfunction attachPingListener(root, wakeable, lanes) {\n\t  // Attach a ping listener\n\t  //\n\t  // The data might resolve before we have a chance to commit the fallback. Or,\n\t  // in the case of a refresh, we'll never commit a fallback. So we need to\n\t  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n\t  // try rendering the tree again.\n\t  //\n\t  // Only attach a listener if one does not already exist for the lanes\n\t  // we're currently rendering (which acts like a \"thread ID\" here).\n\t  //\n\t  // We only need to do this in concurrent mode. Legacy Suspense always\n\t  // commits fallbacks synchronously, so there are no pings.\n\t  var pingCache = root.pingCache;\n\t  var threadIDs;\n\n\t  if (pingCache === null) {\n\t    pingCache = root.pingCache = new PossiblyWeakMap$1();\n\t    threadIDs = new Set();\n\t    pingCache.set(wakeable, threadIDs);\n\t  } else {\n\t    threadIDs = pingCache.get(wakeable);\n\n\t    if (threadIDs === undefined) {\n\t      threadIDs = new Set();\n\t      pingCache.set(wakeable, threadIDs);\n\t    }\n\t  }\n\n\t  if (!threadIDs.has(lanes)) {\n\t    // Memoize using the thread ID to prevent redundant listeners.\n\t    threadIDs.add(lanes);\n\t    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n\n\t    {\n\t      if (isDevToolsPresent) {\n\t        // If we have pending work still, restore the original updaters\n\t        restorePendingUpdaters(root, lanes);\n\t      }\n\t    }\n\n\t    wakeable.then(ping, ping);\n\t  }\n\t}\n\n\tfunction attachRetryListener(suspenseBoundary, root, wakeable, lanes) {\n\t  // Retry listener\n\t  //\n\t  // If the fallback does commit, we need to attach a different type of\n\t  // listener. This one schedules an update on the Suspense boundary to turn\n\t  // the fallback state off.\n\t  //\n\t  // Stash the wakeable on the boundary fiber so we can access it in the\n\t  // commit phase.\n\t  //\n\t  // When the wakeable resolves, we'll attempt to render the boundary\n\t  // again (\"retry\").\n\t  var wakeables = suspenseBoundary.updateQueue;\n\n\t  if (wakeables === null) {\n\t    var updateQueue = new Set();\n\t    updateQueue.add(wakeable);\n\t    suspenseBoundary.updateQueue = updateQueue;\n\t  } else {\n\t    wakeables.add(wakeable);\n\t  }\n\t}\n\n\tfunction resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n\t  // A legacy mode Suspense quirk, only relevant to hook components.\n\n\n\t  var tag = sourceFiber.tag;\n\n\t  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n\t    var currentSource = sourceFiber.alternate;\n\n\t    if (currentSource) {\n\t      sourceFiber.updateQueue = currentSource.updateQueue;\n\t      sourceFiber.memoizedState = currentSource.memoizedState;\n\t      sourceFiber.lanes = currentSource.lanes;\n\t    } else {\n\t      sourceFiber.updateQueue = null;\n\t      sourceFiber.memoizedState = null;\n\t    }\n\t  }\n\t}\n\n\tfunction getNearestSuspenseBoundaryToCapture(returnFiber) {\n\t  var node = returnFiber;\n\n\t  do {\n\t    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {\n\t      return node;\n\t    } // This boundary already captured during this render. Continue to the next\n\t    // boundary.\n\n\n\t    node = node.return;\n\t  } while (node !== null);\n\n\t  return null;\n\t}\n\n\tfunction markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n\t  // This marks a Suspense boundary so that when we're unwinding the stack,\n\t  // it captures the suspended \"exception\" and does a second (fallback) pass.\n\t  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n\t    // Legacy Mode Suspense\n\t    //\n\t    // If the boundary is in legacy mode, we should *not*\n\t    // suspend the commit. Pretend as if the suspended component rendered\n\t    // null and keep rendering. When the Suspense boundary completes,\n\t    // we'll do a second pass to render the fallback.\n\t    if (suspenseBoundary === returnFiber) {\n\t      // Special case where we suspended while reconciling the children of\n\t      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n\t      // when a React.lazy component is a direct child of a\n\t      // Suspense boundary.\n\t      //\n\t      // Suspense boundaries are implemented as multiple fibers, but they\n\t      // are a single conceptual unit. The legacy mode behavior where we\n\t      // pretend the suspended fiber committed as `null` won't work,\n\t      // because in this case the \"suspended\" fiber is the inner\n\t      // Offscreen wrapper.\n\t      //\n\t      // Because the contents of the boundary haven't started rendering\n\t      // yet (i.e. nothing in the tree has partially rendered) we can\n\t      // switch to the regular, concurrent mode behavior: mark the\n\t      // boundary with ShouldCapture and enter the unwind phase.\n\t      suspenseBoundary.flags |= ShouldCapture;\n\t    } else {\n\t      suspenseBoundary.flags |= DidCapture;\n\t      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n\t      // But we shouldn't call any lifecycle methods or callbacks. Remove\n\t      // all lifecycle effect tags.\n\n\t      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n\t      if (sourceFiber.tag === ClassComponent) {\n\t        var currentSourceFiber = sourceFiber.alternate;\n\n\t        if (currentSourceFiber === null) {\n\t          // This is a new mount. Change the tag so it's not mistaken for a\n\t          // completed class component. For example, we should not call\n\t          // componentWillUnmount if it is deleted.\n\t          sourceFiber.tag = IncompleteClassComponent;\n\t        } else {\n\t          // When we try rendering again, we should not reuse the current fiber,\n\t          // since it's known to be in an inconsistent state. Use a force update to\n\t          // prevent a bail out.\n\t          var update = createUpdate(NoTimestamp, SyncLane);\n\t          update.tag = ForceUpdate;\n\t          enqueueUpdate(sourceFiber, update, SyncLane);\n\t        }\n\t      } // The source fiber did not complete. Mark it with Sync priority to\n\t      // indicate that it still has pending work.\n\n\n\t      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n\t    }\n\n\t    return suspenseBoundary;\n\t  } // Confirmed that the boundary is in a concurrent mode tree. Continue\n\t  // with the normal suspend path.\n\t  //\n\t  // After this we'll use a set of heuristics to determine whether this\n\t  // render pass will run to completion or restart or \"suspend\" the commit.\n\t  // The actual logic for this is spread out in different places.\n\t  //\n\t  // This first principle is that if we're going to suspend when we complete\n\t  // a root, then we should also restart if we get an update or ping that\n\t  // might unsuspend it, and vice versa. The only reason to suspend is\n\t  // because you think you might want to restart before committing. However,\n\t  // it doesn't make sense to restart only while in the period we're suspended.\n\t  //\n\t  // Restarting too aggressively is also not good because it starves out any\n\t  // intermediate loading state. So we use heuristics to determine when.\n\t  // Suspense Heuristics\n\t  //\n\t  // If nothing threw a Promise or all the same fallbacks are already showing,\n\t  // then don't suspend/restart.\n\t  //\n\t  // If this is an initial render of a new tree of Suspense boundaries and\n\t  // those trigger a fallback, then don't suspend/restart. We want to ensure\n\t  // that we can show the initial loading state as quickly as possible.\n\t  //\n\t  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n\t  // a fallback, then we should always suspend/restart. Transitions apply\n\t  // to this case. If none is defined, JND is used instead.\n\t  //\n\t  // If we're already showing a fallback and it gets \"retried\", allowing us to show\n\t  // another level, but there's still an inner boundary that would show a fallback,\n\t  // then we suspend/restart for 500ms since the last time we showed a fallback\n\t  // anywhere in the tree. This effectively throttles progressive loading into a\n\t  // consistent train of commits. This also gives us an opportunity to restart to\n\t  // get to the completed state slightly earlier.\n\t  //\n\t  // If there's ambiguity due to batching it's resolved in preference of:\n\t  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n\t  //\n\t  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n\t  // ensure that new initial loading states can commit as soon as possible.\n\n\n\t  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n\t  // the begin phase to prevent an early bailout.\n\n\t  suspenseBoundary.lanes = rootRenderLanes;\n\t  return suspenseBoundary;\n\t}\n\n\tfunction throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n\t  // The source fiber did not complete.\n\t  sourceFiber.flags |= Incomplete;\n\n\t  {\n\t    if (isDevToolsPresent) {\n\t      // If we have pending work still, restore the original updaters\n\t      restorePendingUpdaters(root, rootRenderLanes);\n\t    }\n\t  }\n\n\t  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {\n\t    // This is a wakeable. The component suspended.\n\t    var wakeable = value;\n\t    resetSuspendedComponent(sourceFiber);\n\n\t    {\n\t      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n\t        markDidThrowWhileHydratingDEV();\n\t      }\n\t    }\n\n\n\t    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n\n\t    if (suspenseBoundary !== null) {\n\t      suspenseBoundary.flags &= ~ForceClientRender;\n\t      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always\n\t      // commits fallbacks synchronously, so there are no pings.\n\n\t      if (suspenseBoundary.mode & ConcurrentMode) {\n\t        attachPingListener(root, wakeable, rootRenderLanes);\n\t      }\n\n\t      attachRetryListener(suspenseBoundary, root, wakeable);\n\t      return;\n\t    } else {\n\t      // No boundary was found. Unless this is a sync update, this is OK.\n\t      // We can suspend and wait for more data to arrive.\n\t      if (!includesSyncLane(rootRenderLanes)) {\n\t        // This is not a sync update. Suspend. Since we're not activating a\n\t        // Suspense boundary, this will unwind all the way to the root without\n\t        // performing a second pass to render a fallback. (This is arguably how\n\t        // refresh transitions should work, too, since we're not going to commit\n\t        // the fallbacks anyway.)\n\t        //\n\t        // This case also applies to initial hydration.\n\t        attachPingListener(root, wakeable, rootRenderLanes);\n\t        renderDidSuspendDelayIfPossible();\n\t        return;\n\t      } // This is a sync/discrete update. We treat this case like an error\n\t      // because discrete renders are expected to produce a complete tree\n\t      // synchronously to maintain consistency with external state.\n\n\n\t      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.\n\t      // The error will be caught by the nearest suspense boundary.\n\n\t      value = uncaughtSuspenseError;\n\t    }\n\t  } else {\n\t    // This is a regular error, not a Suspense wakeable.\n\t    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n\t      markDidThrowWhileHydratingDEV();\n\n\t      var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by\n\t      // discarding the dehydrated content and switching to a client render.\n\t      // Instead of surfacing the error, find the nearest Suspense boundary\n\t      // and render it again without hydration.\n\n\n\t      if (_suspenseBoundary !== null) {\n\t        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n\t          // Set a flag to indicate that we should try rendering the normal\n\t          // children again, not the fallback.\n\t          _suspenseBoundary.flags |= ForceClientRender;\n\t        }\n\n\t        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should\n\t        // still log it so it can be fixed.\n\n\t        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\n\t        return;\n\t      }\n\t    }\n\t  }\n\n\t  value = createCapturedValueAtFiber(value, sourceFiber);\n\t  renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start\n\t  // over and traverse parent path again, this time treating the exception\n\t  // as an error.\n\n\t  var workInProgress = returnFiber;\n\n\t  do {\n\t    switch (workInProgress.tag) {\n\t      case HostRoot:\n\t        {\n\t          var _errorInfo = value;\n\t          workInProgress.flags |= ShouldCapture;\n\t          var lane = pickArbitraryLane(rootRenderLanes);\n\t          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n\t          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n\t          enqueueCapturedUpdate(workInProgress, update);\n\t          return;\n\t        }\n\n\t      case ClassComponent:\n\t        // Capture and retry\n\t        var errorInfo = value;\n\t        var ctor = workInProgress.type;\n\t        var instance = workInProgress.stateNode;\n\n\t        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n\t          workInProgress.flags |= ShouldCapture;\n\n\t          var _lane = pickArbitraryLane(rootRenderLanes);\n\n\t          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n\n\t          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n\n\t          enqueueCapturedUpdate(workInProgress, _update);\n\t          return;\n\t        }\n\n\t        break;\n\t    }\n\n\t    workInProgress = workInProgress.return;\n\t  } while (workInProgress !== null);\n\t}\n\n\tfunction getSuspendedCache() {\n\t  {\n\t    return null;\n\t  } // This function is called when a Suspense boundary suspends. It returns the\n\t}\n\n\tvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n\tvar didReceiveUpdate = false;\n\tvar didWarnAboutBadClass;\n\tvar didWarnAboutModulePatternComponent;\n\tvar didWarnAboutContextTypeOnFunctionComponent;\n\tvar didWarnAboutGetDerivedStateOnFunctionComponent;\n\tvar didWarnAboutFunctionRefs;\n\tvar didWarnAboutReassigningProps;\n\tvar didWarnAboutRevealOrder;\n\tvar didWarnAboutTailOptions;\n\n\t{\n\t  didWarnAboutBadClass = {};\n\t  didWarnAboutModulePatternComponent = {};\n\t  didWarnAboutContextTypeOnFunctionComponent = {};\n\t  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n\t  didWarnAboutFunctionRefs = {};\n\t  didWarnAboutReassigningProps = false;\n\t  didWarnAboutRevealOrder = {};\n\t  didWarnAboutTailOptions = {};\n\t}\n\n\tfunction reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n\t  if (current === null) {\n\t    // If this is a fresh new component that hasn't been rendered yet, we\n\t    // won't update its child set by applying minimal side-effects. Instead,\n\t    // we will add them all to the child before it gets rendered. That means\n\t    // we can optimize this reconciliation pass by not tracking side-effects.\n\t    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n\t  } else {\n\t    // If the current child is the same as the work in progress, it means that\n\t    // we haven't yet started any work on these children. Therefore, we use\n\t    // the clone algorithm to create a copy of all the current children.\n\t    // If we had any progressed work already, that is invalid at this point so\n\t    // let's throw it out.\n\t    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n\t  }\n\t}\n\n\tfunction forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n\t  // This function is fork of reconcileChildren. It's used in cases where we\n\t  // want to reconcile without matching against the existing set. This has the\n\t  // effect of all current children being unmounted; even if the type and key\n\t  // are the same, the old child is unmounted and a new child is created.\n\t  //\n\t  // To do this, we're going to go through the reconcile algorithm twice. In\n\t  // the first pass, we schedule a deletion for all the current children by\n\t  // passing null.\n\t  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n\t  // pass null in place of where we usually pass the current child set. This has\n\t  // the effect of remounting all children regardless of whether their\n\t  // identities match.\n\n\t  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n\t}\n\n\tfunction updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n\t  // TODO: current can be non-null here even if the component\n\t  // hasn't yet mounted. This happens after the first render suspends.\n\t  // We'll need to figure out if this is fine or can cause issues.\n\t  {\n\t    if (workInProgress.type !== workInProgress.elementType) {\n\t      // Lazy component props can't be validated in createElement\n\t      // because they're only guaranteed to be resolved here.\n\t      var innerPropTypes = Component.propTypes;\n\n\t      if (innerPropTypes) {\n\t        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n\t        'prop', getComponentNameFromType(Component));\n\t      }\n\t    }\n\t  }\n\n\t  var render = Component.render;\n\t  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n\n\t  var nextChildren;\n\t  var hasId;\n\t  prepareToReadContext(workInProgress, renderLanes);\n\n\t  {\n\t    markComponentRenderStarted(workInProgress);\n\t  }\n\n\t  {\n\t    ReactCurrentOwner$1.current = workInProgress;\n\t    setIsRendering(true);\n\t    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n\t    hasId = checkDidRenderIdHook();\n\n\t    if ( workInProgress.mode & StrictLegacyMode) {\n\t      setIsStrictModeForDevtools(true);\n\n\t      try {\n\t        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n\t        hasId = checkDidRenderIdHook();\n\t      } finally {\n\t        setIsStrictModeForDevtools(false);\n\t      }\n\t    }\n\n\t    setIsRendering(false);\n\t  }\n\n\t  {\n\t    markComponentRenderStopped();\n\t  }\n\n\t  if (current !== null && !didReceiveUpdate) {\n\t    bailoutHooks(current, workInProgress, renderLanes);\n\t    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t  }\n\n\t  if (getIsHydrating() && hasId) {\n\t    pushMaterializedTreeId(workInProgress);\n\t  } // React DevTools reads this flag.\n\n\n\t  workInProgress.flags |= PerformedWork;\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n\t  if (current === null) {\n\t    var type = Component.type;\n\n\t    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\n\t    Component.defaultProps === undefined) {\n\t      var resolvedType = type;\n\n\t      {\n\t        resolvedType = resolveFunctionForHotReloading(type);\n\t      } // If this is a plain function component without default props,\n\t      // and with only the default shallow comparison, we upgrade it\n\t      // to a SimpleMemoComponent to allow fast path updates.\n\n\n\t      workInProgress.tag = SimpleMemoComponent;\n\t      workInProgress.type = resolvedType;\n\n\t      {\n\t        validateFunctionComponentInDev(workInProgress, type);\n\t      }\n\n\t      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n\t    }\n\n\t    {\n\t      var innerPropTypes = type.propTypes;\n\n\t      if (innerPropTypes) {\n\t        // Inner memo component props aren't currently validated in createElement.\n\t        // We could move it there, but we'd still need this for lazy code path.\n\t        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n\t        'prop', getComponentNameFromType(type));\n\t      }\n\t    }\n\n\t    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n\t    child.ref = workInProgress.ref;\n\t    child.return = workInProgress;\n\t    workInProgress.child = child;\n\t    return child;\n\t  }\n\n\t  {\n\t    var _type = Component.type;\n\t    var _innerPropTypes = _type.propTypes;\n\n\t    if (_innerPropTypes) {\n\t      // Inner memo component props aren't currently validated in createElement.\n\t      // We could move it there, but we'd still need this for lazy code path.\n\t      checkPropTypes(_innerPropTypes, nextProps, // Resolved props\n\t      'prop', getComponentNameFromType(_type));\n\t    }\n\t  }\n\n\t  var currentChild = current.child; // This is always exactly one child\n\n\t  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n\t  if (!hasScheduledUpdateOrContext) {\n\t    // This will be the props with resolved defaultProps,\n\t    // unlike current.memoizedProps which will be the unresolved ones.\n\t    var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n\t    var compare = Component.compare;\n\t    compare = compare !== null ? compare : shallowEqual;\n\n\t    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n\t      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t    }\n\t  } // React DevTools reads this flag.\n\n\n\t  workInProgress.flags |= PerformedWork;\n\t  var newChild = createWorkInProgress(currentChild, nextProps);\n\t  newChild.ref = workInProgress.ref;\n\t  newChild.return = workInProgress;\n\t  workInProgress.child = newChild;\n\t  return newChild;\n\t}\n\n\tfunction updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n\t  // TODO: current can be non-null here even if the component\n\t  // hasn't yet mounted. This happens when the inner render suspends.\n\t  // We'll need to figure out if this is fine or can cause issues.\n\t  {\n\t    if (workInProgress.type !== workInProgress.elementType) {\n\t      // Lazy component props can't be validated in createElement\n\t      // because they're only guaranteed to be resolved here.\n\t      var outerMemoType = workInProgress.elementType;\n\n\t      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n\t        // We warn when you define propTypes on lazy()\n\t        // so let's just skip over it to find memo() outer wrapper.\n\t        // Inner props for memo are validated later.\n\t        var lazyComponent = outerMemoType;\n\t        var payload = lazyComponent._payload;\n\t        var init = lazyComponent._init;\n\n\t        try {\n\t          outerMemoType = init(payload);\n\t        } catch (x) {\n\t          outerMemoType = null;\n\t        } // Inner propTypes will be validated in the function component path.\n\n\n\t        var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n\n\t        if (outerPropTypes) {\n\t          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n\t          'prop', getComponentNameFromType(outerMemoType));\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  if (current !== null) {\n\t    var prevProps = current.memoizedProps;\n\n\t    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.\n\t     workInProgress.type === current.type )) {\n\t      didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we\n\t      // would during a normal fiber bailout.\n\t      //\n\t      // We don't have strong guarantees that the props object is referentially\n\t      // equal during updates where we can't bail out anyway — like if the props\n\t      // are shallowly equal, but there's a local state or context update in the\n\t      // same batch.\n\t      //\n\t      // However, as a principle, we should aim to make the behavior consistent\n\t      // across different ways of memoizing a component. For example, React.memo\n\t      // has a different internal Fiber layout if you pass a normal function\n\t      // component (SimpleMemoComponent) versus if you pass a different type\n\t      // like forwardRef (MemoComponent). But this is an implementation detail.\n\t      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n\t      // affect whether the props object is reused during a bailout.\n\n\t      workInProgress.pendingProps = nextProps = prevProps;\n\n\t      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n\t        // The pending lanes were cleared at the beginning of beginWork. We're\n\t        // about to bail out, but there might be other lanes that weren't\n\t        // included in the current render. Usually, the priority level of the\n\t        // remaining updates is accumulated during the evaluation of the\n\t        // component (i.e. when processing the update queue). But since since\n\t        // we're bailing out early *without* evaluating the component, we need\n\t        // to account for it here, too. Reset to the value of the current fiber.\n\t        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n\t        // because a MemoComponent fiber does not have hooks or an update queue;\n\t        // rather, it wraps around an inner component, which may or may not\n\t        // contains hooks.\n\t        // TODO: Move the reset at in beginWork out of the common path so that\n\t        // this is no longer necessary.\n\t        workInProgress.lanes = current.lanes;\n\t        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n\t        // This is a special case that only exists for legacy mode.\n\t        // See https://github.com/facebook/react/pull/19216.\n\t        didReceiveUpdate = true;\n\t      }\n\t    }\n\t  }\n\n\t  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n\t}\n\n\tfunction updateOffscreenComponent(current, workInProgress, renderLanes) {\n\t  var nextProps = workInProgress.pendingProps;\n\t  var nextChildren = nextProps.children;\n\t  var prevState = current !== null ? current.memoizedState : null;\n\n\t  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {\n\t    // Rendering a hidden tree.\n\t    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n\t      // In legacy sync mode, don't defer the subtree. Render it now.\n\t      // TODO: Consider how Offscreen should work with transitions in the future\n\t      var nextState = {\n\t        baseLanes: NoLanes,\n\t        cachePool: null,\n\t        transitions: null\n\t      };\n\t      workInProgress.memoizedState = nextState;\n\n\t      pushRenderLanes(workInProgress, renderLanes);\n\t    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n\t      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out\n\t      // and resume this tree later.\n\n\t      var nextBaseLanes;\n\n\t      if (prevState !== null) {\n\t        var prevBaseLanes = prevState.baseLanes;\n\t        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n\t      } else {\n\t        nextBaseLanes = renderLanes;\n\t      } // Schedule this fiber to re-render at offscreen priority. Then bailout.\n\n\n\t      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n\t      var _nextState = {\n\t        baseLanes: nextBaseLanes,\n\t        cachePool: spawnedCachePool,\n\t        transitions: null\n\t      };\n\t      workInProgress.memoizedState = _nextState;\n\t      workInProgress.updateQueue = null;\n\t      // to avoid a push/pop misalignment.\n\n\n\t      pushRenderLanes(workInProgress, nextBaseLanes);\n\n\t      return null;\n\t    } else {\n\t      // This is the second render. The surrounding visible content has already\n\t      // committed. Now we resume rendering the hidden tree.\n\t      // Rendering at offscreen, so we can clear the base lanes.\n\t      var _nextState2 = {\n\t        baseLanes: NoLanes,\n\t        cachePool: null,\n\t        transitions: null\n\t      };\n\t      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.\n\n\t      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;\n\n\t      pushRenderLanes(workInProgress, subtreeRenderLanes);\n\t    }\n\t  } else {\n\t    // Rendering a visible tree.\n\t    var _subtreeRenderLanes;\n\n\t    if (prevState !== null) {\n\t      // We're going from hidden -> visible.\n\t      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n\n\t      workInProgress.memoizedState = null;\n\t    } else {\n\t      // We weren't previously hidden, and we still aren't, so there's nothing\n\t      // special to do. Need to push to the stack regardless, though, to avoid\n\t      // a push/pop misalignment.\n\t      _subtreeRenderLanes = renderLanes;\n\t    }\n\n\t    pushRenderLanes(workInProgress, _subtreeRenderLanes);\n\t  }\n\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t} // Note: These happen to have identical begin phases, for now. We shouldn't hold\n\n\tfunction updateFragment(current, workInProgress, renderLanes) {\n\t  var nextChildren = workInProgress.pendingProps;\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction updateMode(current, workInProgress, renderLanes) {\n\t  var nextChildren = workInProgress.pendingProps.children;\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction updateProfiler(current, workInProgress, renderLanes) {\n\t  {\n\t    workInProgress.flags |= Update;\n\n\t    {\n\t      // Reset effect durations for the next eventual effect phase.\n\t      // These are reset during render to allow the DevTools commit hook a chance to read them,\n\t      var stateNode = workInProgress.stateNode;\n\t      stateNode.effectDuration = 0;\n\t      stateNode.passiveEffectDuration = 0;\n\t    }\n\t  }\n\n\t  var nextProps = workInProgress.pendingProps;\n\t  var nextChildren = nextProps.children;\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction markRef(current, workInProgress) {\n\t  var ref = workInProgress.ref;\n\n\t  if (current === null && ref !== null || current !== null && current.ref !== ref) {\n\t    // Schedule a Ref effect\n\t    workInProgress.flags |= Ref;\n\n\t    {\n\t      workInProgress.flags |= RefStatic;\n\t    }\n\t  }\n\t}\n\n\tfunction updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n\t  {\n\t    if (workInProgress.type !== workInProgress.elementType) {\n\t      // Lazy component props can't be validated in createElement\n\t      // because they're only guaranteed to be resolved here.\n\t      var innerPropTypes = Component.propTypes;\n\n\t      if (innerPropTypes) {\n\t        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n\t        'prop', getComponentNameFromType(Component));\n\t      }\n\t    }\n\t  }\n\n\t  var context;\n\n\t  {\n\t    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n\t    context = getMaskedContext(workInProgress, unmaskedContext);\n\t  }\n\n\t  var nextChildren;\n\t  var hasId;\n\t  prepareToReadContext(workInProgress, renderLanes);\n\n\t  {\n\t    markComponentRenderStarted(workInProgress);\n\t  }\n\n\t  {\n\t    ReactCurrentOwner$1.current = workInProgress;\n\t    setIsRendering(true);\n\t    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n\t    hasId = checkDidRenderIdHook();\n\n\t    if ( workInProgress.mode & StrictLegacyMode) {\n\t      setIsStrictModeForDevtools(true);\n\n\t      try {\n\t        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n\t        hasId = checkDidRenderIdHook();\n\t      } finally {\n\t        setIsStrictModeForDevtools(false);\n\t      }\n\t    }\n\n\t    setIsRendering(false);\n\t  }\n\n\t  {\n\t    markComponentRenderStopped();\n\t  }\n\n\t  if (current !== null && !didReceiveUpdate) {\n\t    bailoutHooks(current, workInProgress, renderLanes);\n\t    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t  }\n\n\t  if (getIsHydrating() && hasId) {\n\t    pushMaterializedTreeId(workInProgress);\n\t  } // React DevTools reads this flag.\n\n\n\t  workInProgress.flags |= PerformedWork;\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n\t  {\n\t    // This is used by DevTools to force a boundary to error.\n\t    switch (shouldError(workInProgress)) {\n\t      case false:\n\t        {\n\t          var _instance = workInProgress.stateNode;\n\t          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n\t          // Is there a better way to do this?\n\n\t          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n\t          var state = tempInstance.state;\n\n\t          _instance.updater.enqueueSetState(_instance, state, null);\n\n\t          break;\n\t        }\n\n\t      case true:\n\t        {\n\t          workInProgress.flags |= DidCapture;\n\t          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n\n\t          var error$1 = new Error('Simulated error coming from DevTools');\n\t          var lane = pickArbitraryLane(renderLanes);\n\t          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n\n\t          var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);\n\t          enqueueCapturedUpdate(workInProgress, update);\n\t          break;\n\t        }\n\t    }\n\n\t    if (workInProgress.type !== workInProgress.elementType) {\n\t      // Lazy component props can't be validated in createElement\n\t      // because they're only guaranteed to be resolved here.\n\t      var innerPropTypes = Component.propTypes;\n\n\t      if (innerPropTypes) {\n\t        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n\t        'prop', getComponentNameFromType(Component));\n\t      }\n\t    }\n\t  } // Push context providers early to prevent context stack mismatches.\n\t  // During mounting we don't know the child context yet as the instance doesn't exist.\n\t  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n\n\t  var hasContext;\n\n\t  if (isContextProvider(Component)) {\n\t    hasContext = true;\n\t    pushContextProvider(workInProgress);\n\t  } else {\n\t    hasContext = false;\n\t  }\n\n\t  prepareToReadContext(workInProgress, renderLanes);\n\t  var instance = workInProgress.stateNode;\n\t  var shouldUpdate;\n\n\t  if (instance === null) {\n\t    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.\n\n\t    constructClassInstance(workInProgress, Component, nextProps);\n\t    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\t    shouldUpdate = true;\n\t  } else if (current === null) {\n\t    // In a resume, we'll already have an instance we can reuse.\n\t    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\t  } else {\n\t    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n\t  }\n\n\t  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n\n\t  {\n\t    var inst = workInProgress.stateNode;\n\n\t    if (shouldUpdate && inst.props !== nextProps) {\n\t      if (!didWarnAboutReassigningProps) {\n\t        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');\n\t      }\n\n\t      didWarnAboutReassigningProps = true;\n\t    }\n\t  }\n\n\t  return nextUnitOfWork;\n\t}\n\n\tfunction finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n\t  // Refs should update even if shouldComponentUpdate returns false\n\t  markRef(current, workInProgress);\n\t  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n\t  if (!shouldUpdate && !didCaptureError) {\n\t    // Context providers should defer to sCU for rendering\n\t    if (hasContext) {\n\t      invalidateContextProvider(workInProgress, Component, false);\n\t    }\n\n\t    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t  }\n\n\t  var instance = workInProgress.stateNode; // Rerender\n\n\t  ReactCurrentOwner$1.current = workInProgress;\n\t  var nextChildren;\n\n\t  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n\t    // If we captured an error, but getDerivedStateFromError is not defined,\n\t    // unmount all the children. componentDidCatch will schedule an update to\n\t    // re-render a fallback. This is temporary until we migrate everyone to\n\t    // the new API.\n\t    // TODO: Warn in a future release.\n\t    nextChildren = null;\n\n\t    {\n\t      stopProfilerTimerIfRunning();\n\t    }\n\t  } else {\n\t    {\n\t      markComponentRenderStarted(workInProgress);\n\t    }\n\n\t    {\n\t      setIsRendering(true);\n\t      nextChildren = instance.render();\n\n\t      if ( workInProgress.mode & StrictLegacyMode) {\n\t        setIsStrictModeForDevtools(true);\n\n\t        try {\n\t          instance.render();\n\t        } finally {\n\t          setIsStrictModeForDevtools(false);\n\t        }\n\t      }\n\n\t      setIsRendering(false);\n\t    }\n\n\t    {\n\t      markComponentRenderStopped();\n\t    }\n\t  } // React DevTools reads this flag.\n\n\n\t  workInProgress.flags |= PerformedWork;\n\n\t  if (current !== null && didCaptureError) {\n\t    // If we're recovering from an error, reconcile without reusing any of\n\t    // the existing children. Conceptually, the normal children and the children\n\t    // that are shown on error are two different sets, so we shouldn't reuse\n\t    // normal children even if their identities match.\n\t    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n\t  } else {\n\t    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  } // Memoize state using the values we just used to render.\n\t  // TODO: Restructure so we never read values from the instance.\n\n\n\t  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n\t  if (hasContext) {\n\t    invalidateContextProvider(workInProgress, Component, true);\n\t  }\n\n\t  return workInProgress.child;\n\t}\n\n\tfunction pushHostRootContext(workInProgress) {\n\t  var root = workInProgress.stateNode;\n\n\t  if (root.pendingContext) {\n\t    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n\t  } else if (root.context) {\n\t    // Should always be set\n\t    pushTopLevelContextObject(workInProgress, root.context, false);\n\t  }\n\n\t  pushHostContainer(workInProgress, root.containerInfo);\n\t}\n\n\tfunction updateHostRoot(current, workInProgress, renderLanes) {\n\t  pushHostRootContext(workInProgress);\n\n\t  if (current === null) {\n\t    throw new Error('Should have a current fiber. This is a bug in React.');\n\t  }\n\n\t  var nextProps = workInProgress.pendingProps;\n\t  var prevState = workInProgress.memoizedState;\n\t  var prevChildren = prevState.element;\n\t  cloneUpdateQueue(current, workInProgress);\n\t  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n\t  var nextState = workInProgress.memoizedState;\n\t  workInProgress.stateNode;\n\t  // being called \"element\".\n\n\n\t  var nextChildren = nextState.element;\n\n\t  if (supportsHydration && prevState.isDehydrated) {\n\t    // This is a hydration root whose shell has not yet hydrated. We should\n\t    // attempt to hydrate.\n\t    // Flip isDehydrated to false to indicate that when this render\n\t    // finishes, the root will no longer be dehydrated.\n\t    var overrideState = {\n\t      element: nextChildren,\n\t      isDehydrated: false,\n\t      cache: nextState.cache,\n\t      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,\n\t      transitions: nextState.transitions\n\t    };\n\t    var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't\n\t    // have reducer functions so it doesn't need rebasing.\n\n\t    updateQueue.baseState = overrideState;\n\t    workInProgress.memoizedState = overrideState;\n\n\t    if (workInProgress.flags & ForceClientRender) {\n\t      // Something errored during a previous attempt to hydrate the shell, so we\n\t      // forced a client render.\n\t      var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);\n\t      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);\n\t    } else if (nextChildren !== prevChildren) {\n\t      var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);\n\n\t      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);\n\t    } else {\n\t      // The outermost shell has not hydrated yet. Start hydrating.\n\t      enterHydrationState(workInProgress);\n\n\t      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n\t      workInProgress.child = child;\n\t      var node = child;\n\n\t      while (node) {\n\t        // Mark each child as hydrating. This is a fast path to know whether this\n\t        // tree is part of a hydrating tree. This is used to determine if a child\n\t        // node has fully mounted yet, and for scheduling event replaying.\n\t        // Conceptually this is similar to Placement in that a new subtree is\n\t        // inserted into the React tree here. It just happens to not need DOM\n\t        // mutations because it already exists.\n\t        node.flags = node.flags & ~Placement | Hydrating;\n\t        node = node.sibling;\n\t      }\n\t    }\n\t  } else {\n\t    // Root is not dehydrated. Either this is a client-only root, or it\n\t    // already hydrated.\n\t    resetHydrationState();\n\n\t    if (nextChildren === prevChildren) {\n\t      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t    }\n\n\t    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  }\n\n\t  return workInProgress.child;\n\t}\n\n\tfunction mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {\n\t  // Revert to client rendering.\n\t  resetHydrationState();\n\t  queueHydrationError(recoverableError);\n\t  workInProgress.flags |= ForceClientRender;\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction updateHostComponent(current, workInProgress, renderLanes) {\n\t  pushHostContext(workInProgress);\n\n\t  if (current === null) {\n\t    tryToClaimNextHydratableInstance(workInProgress);\n\t  }\n\n\t  var type = workInProgress.type;\n\t  var nextProps = workInProgress.pendingProps;\n\t  var prevProps = current !== null ? current.memoizedProps : null;\n\t  var nextChildren = nextProps.children;\n\t  var isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n\t  if (isDirectTextChild) {\n\t    // We special case a direct text child of a host node. This is a common\n\t    // case. We won't handle it as a reified child. We will instead handle\n\t    // this in the host environment that also has access to this prop. That\n\t    // avoids allocating another HostText fiber and traversing it.\n\t    nextChildren = null;\n\t  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n\t    // If we're switching from a direct text child to a normal child, or to\n\t    // empty, we need to schedule the text content to be reset.\n\t    workInProgress.flags |= ContentReset;\n\t  }\n\n\t  markRef(current, workInProgress);\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction updateHostText(current, workInProgress) {\n\t  if (current === null) {\n\t    tryToClaimNextHydratableInstance(workInProgress);\n\t  } // Nothing to do here. This is terminal. We'll do the completion step\n\t  // immediately after.\n\n\n\t  return null;\n\t}\n\n\tfunction mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n\t  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\t  var props = workInProgress.pendingProps;\n\t  var lazyComponent = elementType;\n\t  var payload = lazyComponent._payload;\n\t  var init = lazyComponent._init;\n\t  var Component = init(payload); // Store the unwrapped component in the type.\n\n\t  workInProgress.type = Component;\n\t  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n\t  var resolvedProps = resolveDefaultProps(Component, props);\n\t  var child;\n\n\t  switch (resolvedTag) {\n\t    case FunctionComponent:\n\t      {\n\t        {\n\t          validateFunctionComponentInDev(workInProgress, Component);\n\t          workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n\t        }\n\n\t        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n\t        return child;\n\t      }\n\n\t    case ClassComponent:\n\t      {\n\t        {\n\t          workInProgress.type = Component = resolveClassForHotReloading(Component);\n\t        }\n\n\t        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n\t        return child;\n\t      }\n\n\t    case ForwardRef:\n\t      {\n\t        {\n\t          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n\t        }\n\n\t        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n\t        return child;\n\t      }\n\n\t    case MemoComponent:\n\t      {\n\t        {\n\t          if (workInProgress.type !== workInProgress.elementType) {\n\t            var outerPropTypes = Component.propTypes;\n\n\t            if (outerPropTypes) {\n\t              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only\n\t              'prop', getComponentNameFromType(Component));\n\t            }\n\t          }\n\t        }\n\n\t        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n\t        renderLanes);\n\t        return child;\n\t      }\n\t  }\n\n\t  var hint = '';\n\n\t  {\n\t    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {\n\t      hint = ' Did you wrap a component in React.lazy() more than once?';\n\t    }\n\t  } // This message intentionally doesn't mention ForwardRef or MemoComponent\n\t  // because the fact that it's a separate type of work is an\n\t  // implementation detail.\n\n\n\t  throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n\t}\n\n\tfunction mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n\t  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.\n\n\t  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n\t  // Push context providers early to prevent context stack mismatches.\n\t  // During mounting we don't know the child context yet as the instance doesn't exist.\n\t  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n\t  var hasContext;\n\n\t  if (isContextProvider(Component)) {\n\t    hasContext = true;\n\t    pushContextProvider(workInProgress);\n\t  } else {\n\t    hasContext = false;\n\t  }\n\n\t  prepareToReadContext(workInProgress, renderLanes);\n\t  constructClassInstance(workInProgress, Component, nextProps);\n\t  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\t  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n\t}\n\n\tfunction mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n\t  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\t  var props = workInProgress.pendingProps;\n\t  var context;\n\n\t  {\n\t    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n\t    context = getMaskedContext(workInProgress, unmaskedContext);\n\t  }\n\n\t  prepareToReadContext(workInProgress, renderLanes);\n\t  var value;\n\t  var hasId;\n\n\t  {\n\t    markComponentRenderStarted(workInProgress);\n\t  }\n\n\t  {\n\t    if (Component.prototype && typeof Component.prototype.render === 'function') {\n\t      var componentName = getComponentNameFromType(Component) || 'Unknown';\n\n\t      if (!didWarnAboutBadClass[componentName]) {\n\t        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n\n\t        didWarnAboutBadClass[componentName] = true;\n\t      }\n\t    }\n\n\t    if (workInProgress.mode & StrictLegacyMode) {\n\t      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n\t    }\n\n\t    setIsRendering(true);\n\t    ReactCurrentOwner$1.current = workInProgress;\n\t    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n\t    hasId = checkDidRenderIdHook();\n\t    setIsRendering(false);\n\t  }\n\n\t  {\n\t    markComponentRenderStopped();\n\t  } // React DevTools reads this flag.\n\n\n\t  workInProgress.flags |= PerformedWork;\n\n\t  {\n\t    // Support for module components is deprecated and is removed behind a flag.\n\t    // Whether or not it would crash later, we want to show a good message in DEV first.\n\t    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n\t      var _componentName = getComponentNameFromType(Component) || 'Unknown';\n\n\t      if (!didWarnAboutModulePatternComponent[_componentName]) {\n\t        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\n\n\t        didWarnAboutModulePatternComponent[_componentName] = true;\n\t      }\n\t    }\n\t  }\n\n\t  if ( // Run these checks in production only if the flag is off.\n\t  // Eventually we'll delete this branch altogether.\n\t   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n\t    {\n\t      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\n\n\t      if (!didWarnAboutModulePatternComponent[_componentName2]) {\n\t        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\n\n\t        didWarnAboutModulePatternComponent[_componentName2] = true;\n\t      }\n\t    } // Proceed under the assumption that this is a class instance\n\n\n\t    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n\t    workInProgress.memoizedState = null;\n\t    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n\t    // During mounting we don't know the child context yet as the instance doesn't exist.\n\t    // We will invalidate the child context in finishClassComponent() right after rendering.\n\n\t    var hasContext = false;\n\n\t    if (isContextProvider(Component)) {\n\t      hasContext = true;\n\t      pushContextProvider(workInProgress);\n\t    } else {\n\t      hasContext = false;\n\t    }\n\n\t    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n\t    initializeUpdateQueue(workInProgress);\n\t    adoptClassInstance(workInProgress, value);\n\t    mountClassInstance(workInProgress, Component, props, renderLanes);\n\t    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n\t  } else {\n\t    // Proceed under the assumption that this is a function component\n\t    workInProgress.tag = FunctionComponent;\n\n\t    {\n\n\t      if ( workInProgress.mode & StrictLegacyMode) {\n\t        setIsStrictModeForDevtools(true);\n\n\t        try {\n\t          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n\t          hasId = checkDidRenderIdHook();\n\t        } finally {\n\t          setIsStrictModeForDevtools(false);\n\t        }\n\t      }\n\t    }\n\n\t    if (getIsHydrating() && hasId) {\n\t      pushMaterializedTreeId(workInProgress);\n\t    }\n\n\t    reconcileChildren(null, workInProgress, value, renderLanes);\n\n\t    {\n\t      validateFunctionComponentInDev(workInProgress, Component);\n\t    }\n\n\t    return workInProgress.child;\n\t  }\n\t}\n\n\tfunction validateFunctionComponentInDev(workInProgress, Component) {\n\t  {\n\t    if (Component) {\n\t      if (Component.childContextTypes) {\n\t        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');\n\t      }\n\t    }\n\n\t    if (workInProgress.ref !== null) {\n\t      var info = '';\n\t      var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n\t      if (ownerName) {\n\t        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n\t      }\n\n\t      var warningKey = ownerName || '';\n\t      var debugSource = workInProgress._debugSource;\n\n\t      if (debugSource) {\n\t        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n\t      }\n\n\t      if (!didWarnAboutFunctionRefs[warningKey]) {\n\t        didWarnAboutFunctionRefs[warningKey] = true;\n\n\t        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);\n\t      }\n\t    }\n\n\t    if (typeof Component.getDerivedStateFromProps === 'function') {\n\t      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\n\n\t      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n\t        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\n\n\t        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n\t      }\n\t    }\n\n\t    if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n\t      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';\n\n\t      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n\t        error('%s: Function components do not support contextType.', _componentName4);\n\n\t        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n\t      }\n\t    }\n\t  }\n\t}\n\n\tvar SUSPENDED_MARKER = {\n\t  dehydrated: null,\n\t  treeContext: null,\n\t  retryLane: NoLane\n\t};\n\n\tfunction mountSuspenseOffscreenState(renderLanes) {\n\t  return {\n\t    baseLanes: renderLanes,\n\t    cachePool: getSuspendedCache(),\n\t    transitions: null\n\t  };\n\t}\n\n\tfunction updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n\t  var cachePool = null;\n\n\t  return {\n\t    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n\t    cachePool: cachePool,\n\t    transitions: prevOffscreenState.transitions\n\t  };\n\t} // TODO: Probably should inline this back\n\n\n\tfunction shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {\n\t  // If we're already showing a fallback, there are cases where we need to\n\t  // remain on that fallback regardless of whether the content has resolved.\n\t  // For example, SuspenseList coordinates when nested content appears.\n\t  if (current !== null) {\n\t    var suspenseState = current.memoizedState;\n\n\t    if (suspenseState === null) {\n\t      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n\t      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n\t      // Note: This is a factoring smell. Can't remain on a fallback if there's\n\t      // no fallback to remain on.\n\t      return false;\n\t    }\n\t  } // Not currently showing content. Consult the Suspense context.\n\n\n\t  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\t}\n\n\tfunction getRemainingWorkInPrimaryTree(current, renderLanes) {\n\t  // TODO: Should not remove render lanes that were pinged during this render\n\t  return removeLanes(current.childLanes, renderLanes);\n\t}\n\n\tfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n\t  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n\t  {\n\t    if (shouldSuspend(workInProgress)) {\n\t      workInProgress.flags |= DidCapture;\n\t    }\n\t  }\n\n\t  var suspenseContext = suspenseStackCursor.current;\n\t  var showFallback = false;\n\t  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n\t  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {\n\t    // Something in this boundary's subtree already suspended. Switch to\n\t    // rendering the fallback children.\n\t    showFallback = true;\n\t    workInProgress.flags &= ~DidCapture;\n\t  } else {\n\t    // Attempting the main content\n\t    if (current === null || current.memoizedState !== null) {\n\t      // This is a new mount or this boundary is already showing a fallback state.\n\t      // Mark this subtree context as having at least one invisible parent that could\n\t      // handle the fallback state.\n\t      // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n\t      {\n\t        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);\n\t      }\n\t    }\n\t  }\n\n\t  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\t  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense\n\t  // boundary's children. This involves some custom reconciliation logic. Two\n\t  // main reasons this is so complicated.\n\t  //\n\t  // First, Legacy Mode has different semantics for backwards compatibility. The\n\t  // primary tree will commit in an inconsistent state, so when we do the\n\t  // second pass to render the fallback, we do some exceedingly, uh, clever\n\t  // hacks to make that not totally break. Like transferring effects and\n\t  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n\t  // because we bailout on the primary tree completely and leave it in its old\n\t  // state, no effects. Same as what we do for Offscreen (except that\n\t  // Offscreen doesn't have the first render pass).\n\t  //\n\t  // Second is hydration. During hydration, the Suspense fiber has a slightly\n\t  // different layout, where the child points to a dehydrated fragment, which\n\t  // contains the DOM rendered by the server.\n\t  //\n\t  // Third, even if you set all that aside, Suspense is like error boundaries in\n\t  // that we first we try to render one tree, and if that fails, we render again\n\t  // and switch to a different tree. Like a try/catch block. So we have to track\n\t  // which branch we're currently rendering. Ideally we would model this using\n\t  // a stack.\n\n\t  if (current === null) {\n\t    // Initial mount\n\t    // Special path for hydration\n\t    // If we're currently hydrating, try to hydrate this boundary.\n\t    tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.\n\n\t    var suspenseState = workInProgress.memoizedState;\n\n\t    if (suspenseState !== null) {\n\t      var dehydrated = suspenseState.dehydrated;\n\n\t      if (dehydrated !== null) {\n\t        return mountDehydratedSuspenseComponent(workInProgress, dehydrated);\n\t      }\n\t    }\n\n\t    var nextPrimaryChildren = nextProps.children;\n\t    var nextFallbackChildren = nextProps.fallback;\n\n\t    if (showFallback) {\n\t      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n\t      var primaryChildFragment = workInProgress.child;\n\t      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n\t      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n\t      return fallbackFragment;\n\t    } else {\n\t      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n\t    }\n\t  } else {\n\t    // This is an update.\n\t    // Special path for hydration\n\t    var prevState = current.memoizedState;\n\n\t    if (prevState !== null) {\n\t      var _dehydrated = prevState.dehydrated;\n\n\t      if (_dehydrated !== null) {\n\t        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);\n\t      }\n\t    }\n\n\t    if (showFallback) {\n\t      var _nextFallbackChildren = nextProps.fallback;\n\t      var _nextPrimaryChildren = nextProps.children;\n\t      var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);\n\t      var _primaryChildFragment2 = workInProgress.child;\n\t      var prevOffscreenState = current.child.memoizedState;\n\t      _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n\n\t      _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);\n\t      workInProgress.memoizedState = SUSPENDED_MARKER;\n\t      return fallbackChildFragment;\n\t    } else {\n\t      var _nextPrimaryChildren2 = nextProps.children;\n\n\t      var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);\n\n\t      workInProgress.memoizedState = null;\n\t      return _primaryChildFragment3;\n\t    }\n\t  }\n\t}\n\n\tfunction mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n\t  var mode = workInProgress.mode;\n\t  var primaryChildProps = {\n\t    mode: 'visible',\n\t    children: primaryChildren\n\t  };\n\t  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n\t  primaryChildFragment.return = workInProgress;\n\t  workInProgress.child = primaryChildFragment;\n\t  return primaryChildFragment;\n\t}\n\n\tfunction mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n\t  var mode = workInProgress.mode;\n\t  var progressedPrimaryFragment = workInProgress.child;\n\t  var primaryChildProps = {\n\t    mode: 'hidden',\n\t    children: primaryChildren\n\t  };\n\t  var primaryChildFragment;\n\t  var fallbackChildFragment;\n\n\t  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n\t    // In legacy mode, we commit the primary tree as if it successfully\n\t    // completed, even though it's in an inconsistent state.\n\t    primaryChildFragment = progressedPrimaryFragment;\n\t    primaryChildFragment.childLanes = NoLanes;\n\t    primaryChildFragment.pendingProps = primaryChildProps;\n\n\t    if ( workInProgress.mode & ProfileMode) {\n\t      // Reset the durations from the first pass so they aren't included in the\n\t      // final amounts. This seems counterintuitive, since we're intentionally\n\t      // not measuring part of the render phase, but this makes it match what we\n\t      // do in Concurrent Mode.\n\t      primaryChildFragment.actualDuration = 0;\n\t      primaryChildFragment.actualStartTime = -1;\n\t      primaryChildFragment.selfBaseDuration = 0;\n\t      primaryChildFragment.treeBaseDuration = 0;\n\t    }\n\n\t    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n\t  } else {\n\t    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n\t    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n\t  }\n\n\t  primaryChildFragment.return = workInProgress;\n\t  fallbackChildFragment.return = workInProgress;\n\t  primaryChildFragment.sibling = fallbackChildFragment;\n\t  workInProgress.child = primaryChildFragment;\n\t  return fallbackChildFragment;\n\t}\n\n\tfunction mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n\t  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n\t  // this wrapper function to constrain it.\n\t  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n\t}\n\n\tfunction updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n\t  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n\t  // wrapper function to constrain it.\n\t  return createWorkInProgress(current, offscreenProps);\n\t}\n\n\tfunction updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n\t  var currentPrimaryChildFragment = current.child;\n\t  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n\t  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n\t    mode: 'visible',\n\t    children: primaryChildren\n\t  });\n\n\t  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n\t    primaryChildFragment.lanes = renderLanes;\n\t  }\n\n\t  primaryChildFragment.return = workInProgress;\n\t  primaryChildFragment.sibling = null;\n\n\t  if (currentFallbackChildFragment !== null) {\n\t    // Delete the fallback child fragment\n\t    var deletions = workInProgress.deletions;\n\n\t    if (deletions === null) {\n\t      workInProgress.deletions = [currentFallbackChildFragment];\n\t      workInProgress.flags |= ChildDeletion;\n\t    } else {\n\t      deletions.push(currentFallbackChildFragment);\n\t    }\n\t  }\n\n\t  workInProgress.child = primaryChildFragment;\n\t  return primaryChildFragment;\n\t}\n\n\tfunction updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n\t  var mode = workInProgress.mode;\n\t  var currentPrimaryChildFragment = current.child;\n\t  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n\t  var primaryChildProps = {\n\t    mode: 'hidden',\n\t    children: primaryChildren\n\t  };\n\t  var primaryChildFragment;\n\n\t  if ( // In legacy mode, we commit the primary tree as if it successfully\n\t  // completed, even though it's in an inconsistent state.\n\t  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\n\t  // already cloned. In legacy mode, the only case where this isn't true is\n\t  // when DevTools forces us to display a fallback; we skip the first render\n\t  // pass entirely and go straight to rendering the fallback. (In Concurrent\n\t  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n\t  // only codepath.)\n\t  workInProgress.child !== currentPrimaryChildFragment) {\n\t    var progressedPrimaryFragment = workInProgress.child;\n\t    primaryChildFragment = progressedPrimaryFragment;\n\t    primaryChildFragment.childLanes = NoLanes;\n\t    primaryChildFragment.pendingProps = primaryChildProps;\n\n\t    if ( workInProgress.mode & ProfileMode) {\n\t      // Reset the durations from the first pass so they aren't included in the\n\t      // final amounts. This seems counterintuitive, since we're intentionally\n\t      // not measuring part of the render phase, but this makes it match what we\n\t      // do in Concurrent Mode.\n\t      primaryChildFragment.actualDuration = 0;\n\t      primaryChildFragment.actualStartTime = -1;\n\t      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n\t      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n\t    } // The fallback fiber was added as a deletion during the first pass.\n\t    // However, since we're going to remain on the fallback, we no longer want\n\t    // to delete it.\n\n\n\t    workInProgress.deletions = null;\n\t  } else {\n\t    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.\n\t    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n\t    // the current tree; see previous branch.)\n\n\t    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n\t  }\n\n\t  var fallbackChildFragment;\n\n\t  if (currentFallbackChildFragment !== null) {\n\t    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n\t  } else {\n\t    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n\t    // mounted but this is a new fiber.\n\n\t    fallbackChildFragment.flags |= Placement;\n\t  }\n\n\t  fallbackChildFragment.return = workInProgress;\n\t  primaryChildFragment.return = workInProgress;\n\t  primaryChildFragment.sibling = fallbackChildFragment;\n\t  workInProgress.child = primaryChildFragment;\n\t  return fallbackChildFragment;\n\t}\n\n\tfunction retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {\n\t  // Falling back to client rendering. Because this has performance\n\t  // implications, it's considered a recoverable error, even though the user\n\t  // likely won't observe anything wrong with the UI.\n\t  //\n\t  // The error is passed in as an argument to enforce that every caller provide\n\t  // a custom message, or explicitly opt out (currently the only path that opts\n\t  // out is legacy mode; every concurrent path provides an error).\n\t  if (recoverableError !== null) {\n\t    queueHydrationError(recoverableError);\n\t  } // This will add the old fiber to the deletion list\n\n\n\t  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\n\n\t  var nextProps = workInProgress.pendingProps;\n\t  var primaryChildren = nextProps.children;\n\t  var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already\n\t  // mounted but this is a new fiber.\n\n\t  primaryChildFragment.flags |= Placement;\n\t  workInProgress.memoizedState = null;\n\t  return primaryChildFragment;\n\t}\n\n\tfunction mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n\t  var fiberMode = workInProgress.mode;\n\t  var primaryChildProps = {\n\t    mode: 'visible',\n\t    children: primaryChildren\n\t  };\n\t  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\n\t  var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense\n\t  // boundary) already mounted but this is a new fiber.\n\n\t  fallbackChildFragment.flags |= Placement;\n\t  primaryChildFragment.return = workInProgress;\n\t  fallbackChildFragment.return = workInProgress;\n\t  primaryChildFragment.sibling = fallbackChildFragment;\n\t  workInProgress.child = primaryChildFragment;\n\n\t  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n\t    // We will have dropped the effect list which contains the\n\t    // deletion. We need to reconcile to delete the current child.\n\t    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\t  }\n\n\t  return fallbackChildFragment;\n\t}\n\n\tfunction mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {\n\t  // During the first pass, we'll bail out and not drill into the children.\n\t  // Instead, we'll leave the content in place and try to hydrate it later.\n\t  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n\t    {\n\t      error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');\n\t    }\n\n\t    workInProgress.lanes = laneToLanes(SyncLane);\n\t  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n\t    // This is a client-only boundary. Since we won't get any content from the server\n\t    // for this, we need to schedule that at a higher priority based on when it would\n\t    // have timed out. In theory we could render it in this pass but it would have the\n\t    // wrong priority associated with it and will prevent hydration of parent path.\n\t    // Instead, we'll leave work left on it to render it in a separate commit.\n\t    // TODO This time should be the time at which the server rendered response that is\n\t    // a parent to this boundary was displayed. However, since we currently don't have\n\t    // a protocol to transfer that time, we'll just estimate it by using the current\n\t    // time. This will mean that Suspense timeouts are slightly shifted to later than\n\t    // they should be.\n\t    // Schedule a normal pri update to render this content.\n\t    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n\t  } else {\n\t    // We'll continue hydrating the rest at offscreen priority since we'll already\n\t    // be showing the right content coming from the server, it is no rush.\n\t    workInProgress.lanes = laneToLanes(OffscreenLane);\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {\n\t  if (!didSuspend) {\n\t    // This is the first render pass. Attempt to hydrate.\n\t    // We should never be hydrating at this point because it is the first pass,\n\t    // but after we've already committed once.\n\t    warnIfHydrating();\n\n\t    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n\t      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument\n\t      // required — every concurrent mode path that causes hydration to\n\t      // de-opt to client rendering should have an error message.\n\t      null);\n\t    }\n\n\t    if (isSuspenseInstanceFallback(suspenseInstance)) {\n\t      // This boundary is in a permanent fallback state. In this case, we'll never\n\t      // get an update and we'll never be able to hydrate the final content. Let's just try the\n\t      // client side render instead.\n\t      var digest, message, stack;\n\n\t      {\n\t        var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);\n\n\t        digest = _getSuspenseInstanceF.digest;\n\t        message = _getSuspenseInstanceF.message;\n\t        stack = _getSuspenseInstanceF.stack;\n\t      }\n\n\t      var error;\n\n\t      if (message) {\n\t        // eslint-disable-next-line react-internal/prod-error-codes\n\t        error = new Error(message);\n\t      } else {\n\t        error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');\n\t      }\n\n\t      var capturedValue = createCapturedValue(error, digest, stack);\n\t      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);\n\t    }\n\t    // any context has changed, we need to treat is as if the input might have changed.\n\n\n\t    var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n\n\t    if (didReceiveUpdate || hasContextChanged) {\n\t      // This boundary has changed since the first render. This means that we are now unable to\n\t      // hydrate it. We might still be able to hydrate it using a higher priority lane.\n\t      var root = getWorkInProgressRoot();\n\n\t      if (root !== null) {\n\t        var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\n\n\t        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\n\t          // Intentionally mutating since this render will get interrupted. This\n\t          // is one of the very rare times where we mutate the current tree\n\t          // during the render phase.\n\t          suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render\n\n\t          var eventTime = NoTimestamp;\n\t          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n\t          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);\n\t        }\n\t      } // If we have scheduled higher pri work above, this will probably just abort the render\n\t      // since we now have higher priority work, but in case it doesn't, we need to prepare to\n\t      // render something, if we time out. Even if that requires us to delete everything and\n\t      // skip hydration.\n\t      // Delay having to do this as long as the suspense timeout allows us.\n\n\n\t      renderDidSuspendDelayIfPossible();\n\n\t      var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));\n\n\t      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);\n\t    } else if (isSuspenseInstancePending(suspenseInstance)) {\n\t      // This component is still pending more data from the server, so we can't hydrate its\n\t      // content. We treat it as if this component suspended itself. It might seem as if\n\t      // we could just try to render it client-side instead. However, this will perform a\n\t      // lot of unnecessary work and is unlikely to complete since it often will suspend\n\t      // on missing data anyway. Additionally, the server might be able to render more\n\t      // than we can on the client yet. In that case we'd end up with more fallback states\n\t      // on the client than if we just leave it alone. If the server times out or errors\n\t      // these should update this boundary to the permanent Fallback state instead.\n\t      // Mark it as having captured (i.e. suspended).\n\t      workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\n\n\t      workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\n\n\t      var retry = retryDehydratedSuspenseBoundary.bind(null, current);\n\t      registerSuspenseInstanceRetry(suspenseInstance, retry);\n\t      return null;\n\t    } else {\n\t      // This is the first attempt.\n\t      reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);\n\t      var primaryChildren = nextProps.children;\n\t      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this\n\t      // tree is part of a hydrating tree. This is used to determine if a child\n\t      // node has fully mounted yet, and for scheduling event replaying.\n\t      // Conceptually this is similar to Placement in that a new subtree is\n\t      // inserted into the React tree here. It just happens to not need DOM\n\t      // mutations because it already exists.\n\n\t      primaryChildFragment.flags |= Hydrating;\n\t      return primaryChildFragment;\n\t    }\n\t  } else {\n\t    // This is the second render pass. We already attempted to hydrated, but\n\t    // something either suspended or errored.\n\t    if (workInProgress.flags & ForceClientRender) {\n\t      // Something errored during hydration. Try again without hydrating.\n\t      workInProgress.flags &= ~ForceClientRender;\n\n\t      var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));\n\n\t      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);\n\t    } else if (workInProgress.memoizedState !== null) {\n\t      // Something suspended and we should still be in dehydrated mode.\n\t      // Leave the existing child in place.\n\t      workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\n\t      // but the normal suspense pass doesn't.\n\n\t      workInProgress.flags |= DidCapture;\n\t      return null;\n\t    } else {\n\t      // Suspended but we should no longer be in dehydrated mode.\n\t      // Therefore we now have to render the fallback.\n\t      var nextPrimaryChildren = nextProps.children;\n\t      var nextFallbackChildren = nextProps.fallback;\n\t      var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n\t      var _primaryChildFragment4 = workInProgress.child;\n\t      _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);\n\t      workInProgress.memoizedState = SUSPENDED_MARKER;\n\t      return fallbackChildFragment;\n\t    }\n\t  }\n\t}\n\n\tfunction scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n\t  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n\t  var alternate = fiber.alternate;\n\n\t  if (alternate !== null) {\n\t    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n\t  }\n\n\t  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n\t}\n\n\tfunction propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n\t  // Mark any Suspense boundaries with fallbacks as having work to do.\n\t  // If they were previously forced into fallbacks, they may now be able\n\t  // to unblock.\n\t  var node = firstChild;\n\n\t  while (node !== null) {\n\t    if (node.tag === SuspenseComponent) {\n\t      var state = node.memoizedState;\n\n\t      if (state !== null) {\n\t        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n\t      }\n\t    } else if (node.tag === SuspenseListComponent) {\n\t      // If the tail is hidden there might not be an Suspense boundaries\n\t      // to schedule work on. In this case we have to schedule it on the\n\t      // list itself.\n\t      // We don't have to traverse to the children of the list since\n\t      // the list will propagate the change when it rerenders.\n\t      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n\t    } else if (node.child !== null) {\n\t      node.child.return = node;\n\t      node = node.child;\n\t      continue;\n\t    }\n\n\t    if (node === workInProgress) {\n\t      return;\n\t    }\n\n\t    while (node.sibling === null) {\n\t      if (node.return === null || node.return === workInProgress) {\n\t        return;\n\t      }\n\n\t      node = node.return;\n\t    }\n\n\t    node.sibling.return = node.return;\n\t    node = node.sibling;\n\t  }\n\t}\n\n\tfunction findLastContentRow(firstChild) {\n\t  // This is going to find the last row among these children that is already\n\t  // showing content on the screen, as opposed to being in fallback state or\n\t  // new. If a row has multiple Suspense boundaries, any of them being in the\n\t  // fallback state, counts as the whole row being in a fallback state.\n\t  // Note that the \"rows\" will be workInProgress, but any nested children\n\t  // will still be current since we haven't rendered them yet. The mounted\n\t  // order may not be the same as the new order. We use the new order.\n\t  var row = firstChild;\n\t  var lastContentRow = null;\n\n\t  while (row !== null) {\n\t    var currentRow = row.alternate; // New rows can't be content rows.\n\n\t    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n\t      lastContentRow = row;\n\t    }\n\n\t    row = row.sibling;\n\t  }\n\n\t  return lastContentRow;\n\t}\n\n\tfunction validateRevealOrder(revealOrder) {\n\t  {\n\t    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {\n\t      didWarnAboutRevealOrder[revealOrder] = true;\n\n\t      if (typeof revealOrder === 'string') {\n\t        switch (revealOrder.toLowerCase()) {\n\t          case 'together':\n\t          case 'forwards':\n\t          case 'backwards':\n\t            {\n\t              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n\n\t              break;\n\t            }\n\n\t          case 'forward':\n\t          case 'backward':\n\t            {\n\t              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n\n\t              break;\n\t            }\n\n\t          default:\n\t            error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n\n\t            break;\n\t        }\n\t      } else {\n\t        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction validateTailOptions(tailMode, revealOrder) {\n\t  {\n\t    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n\t      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n\t        didWarnAboutTailOptions[tailMode] = true;\n\n\t        error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n\t      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n\t        didWarnAboutTailOptions[tailMode] = true;\n\n\t        error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction validateSuspenseListNestedChild(childSlot, index) {\n\t  {\n\t    var isAnArray = isArray(childSlot);\n\t    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n\n\t    if (isAnArray || isIterable) {\n\t      var type = isAnArray ? 'array' : 'iterable';\n\n\t      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);\n\n\t      return false;\n\t    }\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction validateSuspenseListChildren(children, revealOrder) {\n\t  {\n\t    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {\n\t      if (isArray(children)) {\n\t        for (var i = 0; i < children.length; i++) {\n\t          if (!validateSuspenseListNestedChild(children[i], i)) {\n\t            return;\n\t          }\n\t        }\n\t      } else {\n\t        var iteratorFn = getIteratorFn(children);\n\n\t        if (typeof iteratorFn === 'function') {\n\t          var childrenIterator = iteratorFn.call(children);\n\n\t          if (childrenIterator) {\n\t            var step = childrenIterator.next();\n\t            var _i = 0;\n\n\t            for (; !step.done; step = childrenIterator.next()) {\n\t              if (!validateSuspenseListNestedChild(step.value, _i)) {\n\t                return;\n\t              }\n\n\t              _i++;\n\t            }\n\t          }\n\t        } else {\n\t          error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n\t  var renderState = workInProgress.memoizedState;\n\n\t  if (renderState === null) {\n\t    workInProgress.memoizedState = {\n\t      isBackwards: isBackwards,\n\t      rendering: null,\n\t      renderingStartTime: 0,\n\t      last: lastContentRow,\n\t      tail: tail,\n\t      tailMode: tailMode\n\t    };\n\t  } else {\n\t    // We can reuse the existing object from previous renders.\n\t    renderState.isBackwards = isBackwards;\n\t    renderState.rendering = null;\n\t    renderState.renderingStartTime = 0;\n\t    renderState.last = lastContentRow;\n\t    renderState.tail = tail;\n\t    renderState.tailMode = tailMode;\n\t  }\n\t} // This can end up rendering this component multiple passes.\n\t// The first pass splits the children fibers into two sets. A head and tail.\n\t// We first render the head. If anything is in fallback state, we do another\n\t// pass through beginWork to rerender all children (including the tail) with\n\t// the force suspend context. If the first render didn't have anything in\n\t// in fallback state. Then we render each row in the tail one-by-one.\n\t// That happens in the completeWork phase without going back to beginWork.\n\n\n\tfunction updateSuspenseListComponent(current, workInProgress, renderLanes) {\n\t  var nextProps = workInProgress.pendingProps;\n\t  var revealOrder = nextProps.revealOrder;\n\t  var tailMode = nextProps.tail;\n\t  var newChildren = nextProps.children;\n\t  validateRevealOrder(revealOrder);\n\t  validateTailOptions(tailMode, revealOrder);\n\t  validateSuspenseListChildren(newChildren, revealOrder);\n\t  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\t  var suspenseContext = suspenseStackCursor.current;\n\t  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\n\t  if (shouldForceFallback) {\n\t    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\t    workInProgress.flags |= DidCapture;\n\t  } else {\n\t    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;\n\n\t    if (didSuspendBefore) {\n\t      // If we previously forced a fallback, we need to schedule work\n\t      // on any nested boundaries to let them know to try to render\n\t      // again. This is the same as context updating.\n\t      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n\t    }\n\n\t    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\t  }\n\n\t  pushSuspenseContext(workInProgress, suspenseContext);\n\n\t  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n\t    // In legacy mode, SuspenseList doesn't work so we just\n\t    // use make it a noop by treating it as the default revealOrder.\n\t    workInProgress.memoizedState = null;\n\t  } else {\n\t    switch (revealOrder) {\n\t      case 'forwards':\n\t        {\n\t          var lastContentRow = findLastContentRow(workInProgress.child);\n\t          var tail;\n\n\t          if (lastContentRow === null) {\n\t            // The whole list is part of the tail.\n\t            // TODO: We could fast path by just rendering the tail now.\n\t            tail = workInProgress.child;\n\t            workInProgress.child = null;\n\t          } else {\n\t            // Disconnect the tail rows after the content row.\n\t            // We're going to render them separately later.\n\t            tail = lastContentRow.sibling;\n\t            lastContentRow.sibling = null;\n\t          }\n\n\t          initSuspenseListRenderState(workInProgress, false, // isBackwards\n\t          tail, lastContentRow, tailMode);\n\t          break;\n\t        }\n\n\t      case 'backwards':\n\t        {\n\t          // We're going to find the first row that has existing content.\n\t          // At the same time we're going to reverse the list of everything\n\t          // we pass in the meantime. That's going to be our tail in reverse\n\t          // order.\n\t          var _tail = null;\n\t          var row = workInProgress.child;\n\t          workInProgress.child = null;\n\n\t          while (row !== null) {\n\t            var currentRow = row.alternate; // New rows can't be content rows.\n\n\t            if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n\t              // This is the beginning of the main content.\n\t              workInProgress.child = row;\n\t              break;\n\t            }\n\n\t            var nextRow = row.sibling;\n\t            row.sibling = _tail;\n\t            _tail = row;\n\t            row = nextRow;\n\t          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n\n\t          initSuspenseListRenderState(workInProgress, true, // isBackwards\n\t          _tail, null, // last\n\t          tailMode);\n\t          break;\n\t        }\n\n\t      case 'together':\n\t        {\n\t          initSuspenseListRenderState(workInProgress, false, // isBackwards\n\t          null, // tail\n\t          null, // last\n\t          undefined);\n\t          break;\n\t        }\n\n\t      default:\n\t        {\n\t          // The default reveal order is the same as not having\n\t          // a boundary.\n\t          workInProgress.memoizedState = null;\n\t        }\n\t    }\n\t  }\n\n\t  return workInProgress.child;\n\t}\n\n\tfunction updatePortalComponent(current, workInProgress, renderLanes) {\n\t  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n\t  var nextChildren = workInProgress.pendingProps;\n\n\t  if (current === null) {\n\t    // Portals are special because we don't append the children during mount\n\t    // but at commit. Therefore we need to track insertions which the normal\n\t    // flow doesn't do during mount. This doesn't happen at the root because\n\t    // the root always starts with a \"current\" with a null child.\n\t    // TODO: Consider unifying this with how the root works.\n\t    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n\t  } else {\n\t    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  }\n\n\t  return workInProgress.child;\n\t}\n\n\tvar hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\n\tfunction updateContextProvider(current, workInProgress, renderLanes) {\n\t  var providerType = workInProgress.type;\n\t  var context = providerType._context;\n\t  var newProps = workInProgress.pendingProps;\n\t  var oldProps = workInProgress.memoizedProps;\n\t  var newValue = newProps.value;\n\n\t  {\n\t    if (!('value' in newProps)) {\n\t      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n\t        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n\n\t        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');\n\t      }\n\t    }\n\n\t    var providerPropTypes = workInProgress.type.propTypes;\n\n\t    if (providerPropTypes) {\n\t      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n\t    }\n\t  }\n\n\t  pushProvider(workInProgress, context, newValue);\n\n\t  {\n\t    if (oldProps !== null) {\n\t      var oldValue = oldProps.value;\n\n\t      if (objectIs(oldValue, newValue)) {\n\t        // No change. Bailout early if children are the same.\n\t        if (oldProps.children === newProps.children && !hasContextChanged()) {\n\t          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t        }\n\t      } else {\n\t        // The context value changed. Search for matching consumers and schedule\n\t        // them to update.\n\t        propagateContextChange(workInProgress, context, renderLanes);\n\t      }\n\t    }\n\t  }\n\n\t  var newChildren = newProps.children;\n\t  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tvar hasWarnedAboutUsingContextAsConsumer = false;\n\n\tfunction updateContextConsumer(current, workInProgress, renderLanes) {\n\t  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n\t  // DEV mode, we create a separate object for Context.Consumer that acts\n\t  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n\t  // so we use the old behaviour (Context.Consumer references Context) to\n\t  // reduce size and overhead. The separate object references context via\n\t  // a property called \"_context\", which also gives us the ability to check\n\t  // in DEV mode if this property exists or not and warn if it does not.\n\n\t  {\n\t    if (context._context === undefined) {\n\t      // This may be because it's a Context (rather than a Consumer).\n\t      // Or it may be because it's older React where they're the same thing.\n\t      // We only want to warn if we're sure it's a new React.\n\t      if (context !== context.Consumer) {\n\t        if (!hasWarnedAboutUsingContextAsConsumer) {\n\t          hasWarnedAboutUsingContextAsConsumer = true;\n\n\t          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n\t        }\n\t      }\n\t    } else {\n\t      context = context._context;\n\t    }\n\t  }\n\n\t  var newProps = workInProgress.pendingProps;\n\t  var render = newProps.children;\n\n\t  {\n\t    if (typeof render !== 'function') {\n\t      error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n\t    }\n\t  }\n\n\t  prepareToReadContext(workInProgress, renderLanes);\n\t  var newValue = readContext(context);\n\n\t  {\n\t    markComponentRenderStarted(workInProgress);\n\t  }\n\n\t  var newChildren;\n\n\t  {\n\t    ReactCurrentOwner$1.current = workInProgress;\n\t    setIsRendering(true);\n\t    newChildren = render(newValue);\n\t    setIsRendering(false);\n\t  }\n\n\t  {\n\t    markComponentRenderStopped();\n\t  } // React DevTools reads this flag.\n\n\n\t  workInProgress.flags |= PerformedWork;\n\t  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction markWorkInProgressReceivedUpdate() {\n\t  didReceiveUpdate = true;\n\t}\n\n\tfunction resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n\t  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n\t    if (current !== null) {\n\t      // A lazy component only mounts if it suspended inside a non-\n\t      // concurrent tree, in an inconsistent state. We want to treat it like\n\t      // a new mount, even though an empty version of it already committed.\n\t      // Disconnect the alternate pointers.\n\t      current.alternate = null;\n\t      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n\t      workInProgress.flags |= Placement;\n\t    }\n\t  }\n\t}\n\n\tfunction bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n\t  if (current !== null) {\n\t    // Reuse previous dependencies\n\t    workInProgress.dependencies = current.dependencies;\n\t  }\n\n\t  {\n\t    // Don't update \"base\" render times for bailouts.\n\t    stopProfilerTimerIfRunning();\n\t  }\n\n\t  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n\t  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n\t    // The children don't have any work either. We can skip them.\n\t    // TODO: Once we add back resuming, we should check if the children are\n\t    // a work-in-progress set. If so, we need to transfer their effects.\n\t    {\n\t      return null;\n\t    }\n\t  } // This fiber doesn't have work, but its subtree does. Clone the child\n\t  // fibers and continue.\n\n\n\t  cloneChildFibers(current, workInProgress);\n\t  return workInProgress.child;\n\t}\n\n\tfunction remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n\t  {\n\t    var returnFiber = oldWorkInProgress.return;\n\n\t    if (returnFiber === null) {\n\t      // eslint-disable-next-line react-internal/prod-error-codes\n\t      throw new Error('Cannot swap the root fiber.');\n\t    } // Disconnect from the old current.\n\t    // It will get deleted.\n\n\n\t    current.alternate = null;\n\t    oldWorkInProgress.alternate = null; // Connect to the new tree.\n\n\t    newWorkInProgress.index = oldWorkInProgress.index;\n\t    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n\t    newWorkInProgress.return = oldWorkInProgress.return;\n\t    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\n\n\t    if (oldWorkInProgress === returnFiber.child) {\n\t      returnFiber.child = newWorkInProgress;\n\t    } else {\n\t      var prevSibling = returnFiber.child;\n\n\t      if (prevSibling === null) {\n\t        // eslint-disable-next-line react-internal/prod-error-codes\n\t        throw new Error('Expected parent to have a child.');\n\t      }\n\n\t      while (prevSibling.sibling !== oldWorkInProgress) {\n\t        prevSibling = prevSibling.sibling;\n\n\t        if (prevSibling === null) {\n\t          // eslint-disable-next-line react-internal/prod-error-codes\n\t          throw new Error('Expected to find the previous sibling.');\n\t        }\n\t      }\n\n\t      prevSibling.sibling = newWorkInProgress;\n\t    } // Delete the old fiber and place the new one.\n\t    // Since the old fiber is disconnected, we have to schedule it manually.\n\n\n\t    var deletions = returnFiber.deletions;\n\n\t    if (deletions === null) {\n\t      returnFiber.deletions = [current];\n\t      returnFiber.flags |= ChildDeletion;\n\t    } else {\n\t      deletions.push(current);\n\t    }\n\n\t    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n\n\t    return newWorkInProgress;\n\t  }\n\t}\n\n\tfunction checkScheduledUpdateOrContext(current, renderLanes) {\n\t  // Before performing an early bailout, we must check if there are pending\n\t  // updates or context.\n\t  var updateLanes = current.lanes;\n\n\t  if (includesSomeLane(updateLanes, renderLanes)) {\n\t    return true;\n\t  } // No pending update, but because context is propagated lazily, we need\n\n\t  return false;\n\t}\n\n\tfunction attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n\t  // This fiber does not have any pending work. Bailout without entering\n\t  // the begin phase. There's still some bookkeeping we that needs to be done\n\t  // in this optimized path, mostly pushing stuff onto the stack.\n\t  switch (workInProgress.tag) {\n\t    case HostRoot:\n\t      pushHostRootContext(workInProgress);\n\t      workInProgress.stateNode;\n\n\t      resetHydrationState();\n\t      break;\n\n\t    case HostComponent:\n\t      pushHostContext(workInProgress);\n\t      break;\n\n\t    case ClassComponent:\n\t      {\n\t        var Component = workInProgress.type;\n\n\t        if (isContextProvider(Component)) {\n\t          pushContextProvider(workInProgress);\n\t        }\n\n\t        break;\n\t      }\n\n\t    case HostPortal:\n\t      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n\t      break;\n\n\t    case ContextProvider:\n\t      {\n\t        var newValue = workInProgress.memoizedProps.value;\n\t        var context = workInProgress.type._context;\n\t        pushProvider(workInProgress, context, newValue);\n\t        break;\n\t      }\n\n\t    case Profiler:\n\t      {\n\t        // Profiler should only call onRender when one of its descendants actually rendered.\n\t        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n\t        if (hasChildWork) {\n\t          workInProgress.flags |= Update;\n\t        }\n\n\t        {\n\t          // Reset effect durations for the next eventual effect phase.\n\t          // These are reset during render to allow the DevTools commit hook a chance to read them,\n\t          var stateNode = workInProgress.stateNode;\n\t          stateNode.effectDuration = 0;\n\t          stateNode.passiveEffectDuration = 0;\n\t        }\n\t      }\n\n\t      break;\n\n\t    case SuspenseComponent:\n\t      {\n\t        var state = workInProgress.memoizedState;\n\n\t        if (state !== null) {\n\t          if (state.dehydrated !== null) {\n\t            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has\n\t            // been unsuspended it has committed as a resolved Suspense component.\n\t            // If it needs to be retried, it should have work scheduled on it.\n\n\t            workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\n\t            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n\n\t            return null;\n\t          } // If this boundary is currently timed out, we need to decide\n\t          // whether to retry the primary children, or to skip over it and\n\t          // go straight to the fallback. Check the priority of the primary\n\t          // child fragment.\n\n\n\t          var primaryChildFragment = workInProgress.child;\n\t          var primaryChildLanes = primaryChildFragment.childLanes;\n\n\t          if (includesSomeLane(renderLanes, primaryChildLanes)) {\n\t            // The primary children have pending work. Use the normal path\n\t            // to attempt to render the primary children again.\n\t            return updateSuspenseComponent(current, workInProgress, renderLanes);\n\t          } else {\n\t            // The primary child fragment does not have pending work marked\n\t            // on it\n\t            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient\n\t            // priority. Bailout.\n\n\t            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\n\t            if (child !== null) {\n\t              // The fallback children have pending work. Skip over the\n\t              // primary children and work on the fallback.\n\t              return child.sibling;\n\t            } else {\n\t              // Note: We can return `null` here because we already checked\n\t              // whether there were nested context consumers, via the call to\n\t              // `bailoutOnAlreadyFinishedWork` above.\n\t              return null;\n\t            }\n\t          }\n\t        } else {\n\t          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));\n\t        }\n\n\t        break;\n\t      }\n\n\t    case SuspenseListComponent:\n\t      {\n\t        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n\t        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n\t        if (didSuspendBefore) {\n\t          if (_hasChildWork) {\n\t            // If something was in fallback state last time, and we have all the\n\t            // same children then we're still in progressive loading state.\n\t            // Something might get unblocked by state updates or retries in the\n\t            // tree which will affect the tail. So we need to use the normal\n\t            // path to compute the correct tail.\n\t            return updateSuspenseListComponent(current, workInProgress, renderLanes);\n\t          } // If none of the children had any work, that means that none of\n\t          // them got retried so they'll still be blocked in the same way\n\t          // as before. We can fast bail out.\n\n\n\t          workInProgress.flags |= DidCapture;\n\t        } // If nothing suspended before and we're rendering the same children,\n\t        // then the tail doesn't matter. Anything new that suspends will work\n\t        // in the \"together\" mode, so we can continue from the state we had.\n\n\n\t        var renderState = workInProgress.memoizedState;\n\n\t        if (renderState !== null) {\n\t          // Reset to the \"together\" mode in case we've started a different\n\t          // update in the past but didn't complete it.\n\t          renderState.rendering = null;\n\t          renderState.tail = null;\n\t          renderState.lastEffect = null;\n\t        }\n\n\t        pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n\t        if (_hasChildWork) {\n\t          break;\n\t        } else {\n\t          // If none of the children had any work, that means that none of\n\t          // them got retried so they'll still be blocked in the same way\n\t          // as before. We can fast bail out.\n\t          return null;\n\t        }\n\t      }\n\n\t    case OffscreenComponent:\n\t    case LegacyHiddenComponent:\n\t      {\n\t        // Need to check if the tree still needs to be deferred. This is\n\t        // almost identical to the logic used in the normal update path,\n\t        // so we'll just enter that. The only difference is we'll bail out\n\t        // at the next level instead of this one, because the child props\n\t        // have not changed. Which is fine.\n\t        // TODO: Probably should refactor `beginWork` to split the bailout\n\t        // path from the normal path. I'm tempted to do a labeled break here\n\t        // but I won't :)\n\t        workInProgress.lanes = NoLanes;\n\t        return updateOffscreenComponent(current, workInProgress, renderLanes);\n\t      }\n\t  }\n\n\t  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t}\n\n\tfunction beginWork(current, workInProgress, renderLanes) {\n\t  {\n\t    if (workInProgress._debugNeedsRemount && current !== null) {\n\t      // This will restart the begin phase with a new fiber.\n\t      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n\t    }\n\t  }\n\n\t  if (current !== null) {\n\t    var oldProps = current.memoizedProps;\n\t    var newProps = workInProgress.pendingProps;\n\n\t    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:\n\t     workInProgress.type !== current.type )) {\n\t      // If props or context changed, mark the fiber as having performed work.\n\t      // This may be unset if the props are determined to be equal later (memo).\n\t      didReceiveUpdate = true;\n\t    } else {\n\t      // Neither props nor legacy context changes. Check if there's a pending\n\t      // update or context change.\n\t      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n\t      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\n\t      // may not be work scheduled on `current`, so we check for this flag.\n\t      (workInProgress.flags & DidCapture) === NoFlags) {\n\t        // No pending updates or context. Bail out now.\n\t        didReceiveUpdate = false;\n\t        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n\t      }\n\n\t      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n\t        // This is a special case that only exists for legacy mode.\n\t        // See https://github.com/facebook/react/pull/19216.\n\t        didReceiveUpdate = true;\n\t      } else {\n\t        // An update was scheduled on this fiber, but there are no new props\n\t        // nor legacy context. Set this to false. If an update queue or context\n\t        // consumer produces a changed value, it will set this to true. Otherwise,\n\t        // the component will assume the children have not changed and bail out.\n\t        didReceiveUpdate = false;\n\t      }\n\t    }\n\t  } else {\n\t    didReceiveUpdate = false;\n\n\t    if (getIsHydrating() && isForkedChild(workInProgress)) {\n\t      // Check if this child belongs to a list of muliple children in\n\t      // its parent.\n\t      //\n\t      // In a true multi-threaded implementation, we would render children on\n\t      // parallel threads. This would represent the beginning of a new render\n\t      // thread for this subtree.\n\t      //\n\t      // We only use this for id generation during hydration, which is why the\n\t      // logic is located in this special branch.\n\t      var slotIndex = workInProgress.index;\n\t      var numberOfForks = getForksAtLevel();\n\t      pushTreeId(workInProgress, numberOfForks, slotIndex);\n\t    }\n\t  } // Before entering the begin phase, clear pending update priority.\n\t  // TODO: This assumes that we're about to evaluate the component and process\n\t  // the update queue. However, there's an exception: SimpleMemoComponent\n\t  // sometimes bails out later in the begin phase. This indicates that we should\n\t  // move this assignment out of the common path and into each branch.\n\n\n\t  workInProgress.lanes = NoLanes;\n\n\t  switch (workInProgress.tag) {\n\t    case IndeterminateComponent:\n\t      {\n\t        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n\t      }\n\n\t    case LazyComponent:\n\t      {\n\t        var elementType = workInProgress.elementType;\n\t        return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n\t      }\n\n\t    case FunctionComponent:\n\t      {\n\t        var Component = workInProgress.type;\n\t        var unresolvedProps = workInProgress.pendingProps;\n\t        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n\t        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n\t      }\n\n\t    case ClassComponent:\n\t      {\n\t        var _Component = workInProgress.type;\n\t        var _unresolvedProps = workInProgress.pendingProps;\n\n\t        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n\n\t        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n\t      }\n\n\t    case HostRoot:\n\t      return updateHostRoot(current, workInProgress, renderLanes);\n\n\t    case HostComponent:\n\t      return updateHostComponent(current, workInProgress, renderLanes);\n\n\t    case HostText:\n\t      return updateHostText(current, workInProgress);\n\n\t    case SuspenseComponent:\n\t      return updateSuspenseComponent(current, workInProgress, renderLanes);\n\n\t    case HostPortal:\n\t      return updatePortalComponent(current, workInProgress, renderLanes);\n\n\t    case ForwardRef:\n\t      {\n\t        var type = workInProgress.type;\n\t        var _unresolvedProps2 = workInProgress.pendingProps;\n\n\t        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n\n\t        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n\t      }\n\n\t    case Fragment:\n\t      return updateFragment(current, workInProgress, renderLanes);\n\n\t    case Mode:\n\t      return updateMode(current, workInProgress, renderLanes);\n\n\t    case Profiler:\n\t      return updateProfiler(current, workInProgress, renderLanes);\n\n\t    case ContextProvider:\n\t      return updateContextProvider(current, workInProgress, renderLanes);\n\n\t    case ContextConsumer:\n\t      return updateContextConsumer(current, workInProgress, renderLanes);\n\n\t    case MemoComponent:\n\t      {\n\t        var _type2 = workInProgress.type;\n\t        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n\t        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n\n\t        {\n\t          if (workInProgress.type !== workInProgress.elementType) {\n\t            var outerPropTypes = _type2.propTypes;\n\n\t            if (outerPropTypes) {\n\t              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only\n\t              'prop', getComponentNameFromType(_type2));\n\t            }\n\t          }\n\t        }\n\n\t        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n\t        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\n\t      }\n\n\t    case SimpleMemoComponent:\n\t      {\n\t        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n\t      }\n\n\t    case IncompleteClassComponent:\n\t      {\n\t        var _Component2 = workInProgress.type;\n\t        var _unresolvedProps4 = workInProgress.pendingProps;\n\n\t        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n\n\t        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n\t      }\n\n\t    case SuspenseListComponent:\n\t      {\n\t        return updateSuspenseListComponent(current, workInProgress, renderLanes);\n\t      }\n\n\t    case ScopeComponent:\n\t      {\n\n\t        break;\n\t      }\n\n\t    case OffscreenComponent:\n\t      {\n\t        return updateOffscreenComponent(current, workInProgress, renderLanes);\n\t      }\n\t  }\n\n\t  throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n\t}\n\n\tfunction markUpdate(workInProgress) {\n\t  // Tag the fiber with an update effect. This turns a Placement into\n\t  // a PlacementAndUpdate.\n\t  workInProgress.flags |= Update;\n\t}\n\n\tfunction markRef$1(workInProgress) {\n\t  workInProgress.flags |= Ref;\n\n\t  {\n\t    workInProgress.flags |= RefStatic;\n\t  }\n\t}\n\n\tfunction hadNoMutationsEffects(current, completedWork) {\n\t  var didBailout = current !== null && current.child === completedWork.child;\n\n\t  if (didBailout) {\n\t    return true;\n\t  }\n\n\t  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n\t    return false;\n\t  } // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n\t  // then we only have to check the `completedWork.subtreeFlags`.\n\n\n\t  var child = completedWork.child;\n\n\t  while (child !== null) {\n\t    if ((child.flags & MutationMask) !== NoFlags || (child.subtreeFlags & MutationMask) !== NoFlags) {\n\t      return false;\n\t    }\n\n\t    child = child.sibling;\n\t  }\n\n\t  return true;\n\t}\n\n\tvar appendAllChildren;\n\tvar updateHostContainer;\n\tvar updateHostComponent$1;\n\tvar updateHostText$1;\n\n\tif (supportsMutation) {\n\t  // Mutation mode\n\t  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n\t    // We only have the top Fiber that was created but we need recurse down its\n\t    // children to find all the terminal nodes.\n\t    var node = workInProgress.child;\n\n\t    while (node !== null) {\n\t      if (node.tag === HostComponent || node.tag === HostText) {\n\t        appendInitialChild(parent, node.stateNode);\n\t      } else if (node.tag === HostPortal) ; else if (node.child !== null) {\n\t        node.child.return = node;\n\t        node = node.child;\n\t        continue;\n\t      }\n\n\t      if (node === workInProgress) {\n\t        return;\n\t      }\n\n\t      while (node.sibling === null) {\n\t        if (node.return === null || node.return === workInProgress) {\n\t          return;\n\t        }\n\n\t        node = node.return;\n\t      }\n\n\t      node.sibling.return = node.return;\n\t      node = node.sibling;\n\t    }\n\t  };\n\n\t  updateHostContainer = function (current, workInProgress) {// Noop\n\t  };\n\n\t  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n\t    // If we have an alternate, that means this is an update and we need to\n\t    // schedule a side-effect to do the updates.\n\t    var oldProps = current.memoizedProps;\n\n\t    if (oldProps === newProps) {\n\t      // In mutation mode, this is sufficient for a bailout because\n\t      // we won't touch this node even if children changed.\n\t      return;\n\t    } // If we get updated because one of our children updated, we don't\n\t    // have newProps so we'll have to reuse them.\n\t    // TODO: Split the update API as separate for the props vs. children.\n\t    // Even better would be if children weren't special cased at all tho.\n\n\n\t    var instance = workInProgress.stateNode;\n\t    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\n\t    // component is hitting the resume path. Figure out why. Possibly\n\t    // related to `hidden`.\n\n\t    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.\n\n\t    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n\t    // is a new ref we mark this as an update. All the work is done in commitWork.\n\n\t    if (updatePayload) {\n\t      markUpdate(workInProgress);\n\t    }\n\t  };\n\n\t  updateHostText$1 = function (current, workInProgress, oldText, newText) {\n\t    // If the text differs, mark it as an update. All the work in done in commitWork.\n\t    if (oldText !== newText) {\n\t      markUpdate(workInProgress);\n\t    }\n\t  };\n\t} else if (supportsPersistence) {\n\t  // Persistent host tree mode\n\t  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n\t    // We only have the top Fiber that was created but we need recurse down its\n\t    // children to find all the terminal nodes.\n\t    var node = workInProgress.child;\n\n\t    while (node !== null) {\n\t      // eslint-disable-next-line no-labels\n\t       if (node.tag === HostComponent) {\n\t        var instance = node.stateNode;\n\n\t        if (needsVisibilityToggle && isHidden) {\n\t          // This child is inside a timed out tree. Hide it.\n\t          var props = node.memoizedProps;\n\t          var type = node.type;\n\t          instance = cloneHiddenInstance(instance, type, props, node);\n\t        }\n\n\t        appendInitialChild(parent, instance);\n\t      } else if (node.tag === HostText) {\n\t        var _instance = node.stateNode;\n\n\t        if (needsVisibilityToggle && isHidden) {\n\t          // This child is inside a timed out tree. Hide it.\n\t          var text = node.memoizedProps;\n\t          _instance = cloneHiddenTextInstance(_instance, text, node);\n\t        }\n\n\t        appendInitialChild(parent, _instance);\n\t      } else if (node.tag === HostPortal) ; else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n\t        // The children in this boundary are hidden. Toggle their visibility\n\t        // before appending.\n\t        var child = node.child;\n\n\t        if (child !== null) {\n\t          child.return = node;\n\t        }\n\n\t        appendAllChildren(parent, node, true, true);\n\t      } else if (node.child !== null) {\n\t        node.child.return = node;\n\t        node = node.child;\n\t        continue;\n\t      } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n\t      node = node;\n\n\t      if (node === workInProgress) {\n\t        return;\n\t      }\n\n\t      while (node.sibling === null) {\n\t        if (node.return === null || node.return === workInProgress) {\n\t          return;\n\t        }\n\n\t        node = node.return;\n\t      }\n\n\t      node.sibling.return = node.return;\n\t      node = node.sibling;\n\t    }\n\t  }; // An unfortunate fork of appendAllChildren because we have two different parent types.\n\n\n\t  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {\n\t    // We only have the top Fiber that was created but we need recurse down its\n\t    // children to find all the terminal nodes.\n\t    var node = workInProgress.child;\n\n\t    while (node !== null) {\n\t      // eslint-disable-next-line no-labels\n\t       if (node.tag === HostComponent) {\n\t        var instance = node.stateNode;\n\n\t        if (needsVisibilityToggle && isHidden) {\n\t          // This child is inside a timed out tree. Hide it.\n\t          var props = node.memoizedProps;\n\t          var type = node.type;\n\t          instance = cloneHiddenInstance(instance, type, props, node);\n\t        }\n\n\t        appendChildToContainerChildSet(containerChildSet, instance);\n\t      } else if (node.tag === HostText) {\n\t        var _instance2 = node.stateNode;\n\n\t        if (needsVisibilityToggle && isHidden) {\n\t          // This child is inside a timed out tree. Hide it.\n\t          var text = node.memoizedProps;\n\t          _instance2 = cloneHiddenTextInstance(_instance2, text, node);\n\t        }\n\n\t        appendChildToContainerChildSet(containerChildSet, _instance2);\n\t      } else if (node.tag === HostPortal) ; else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n\t        // The children in this boundary are hidden. Toggle their visibility\n\t        // before appending.\n\t        var child = node.child;\n\n\t        if (child !== null) {\n\t          child.return = node;\n\t        }\n\n\t        appendAllChildrenToContainer(containerChildSet, node, true, true);\n\t      } else if (node.child !== null) {\n\t        node.child.return = node;\n\t        node = node.child;\n\t        continue;\n\t      } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n\t      node = node;\n\n\t      if (node === workInProgress) {\n\t        return;\n\t      }\n\n\t      while (node.sibling === null) {\n\t        if (node.return === null || node.return === workInProgress) {\n\t          return;\n\t        }\n\n\t        node = node.return;\n\t      }\n\n\t      node.sibling.return = node.return;\n\t      node = node.sibling;\n\t    }\n\t  };\n\n\t  updateHostContainer = function (current, workInProgress) {\n\t    var portalOrRoot = workInProgress.stateNode;\n\t    var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n\n\t    if (childrenUnchanged) ; else {\n\t      var container = portalOrRoot.containerInfo;\n\t      var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.\n\n\t      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n\t      portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.\n\n\t      markUpdate(workInProgress);\n\t      finalizeContainerChildren(container, newChildSet);\n\t    }\n\t  };\n\n\t  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n\t    var currentInstance = current.stateNode;\n\t    var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.\n\t    // This guarantees that we can reuse all of them.\n\n\t    var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n\n\t    if (childrenUnchanged && oldProps === newProps) {\n\t      // No changes, just reuse the existing instance.\n\t      // Note that this might release a previous clone.\n\t      workInProgress.stateNode = currentInstance;\n\t      return;\n\t    }\n\n\t    var recyclableInstance = workInProgress.stateNode;\n\t    var currentHostContext = getHostContext();\n\t    var updatePayload = null;\n\n\t    if (oldProps !== newProps) {\n\t      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);\n\t    }\n\n\t    if (childrenUnchanged && updatePayload === null) {\n\t      // No changes, just reuse the existing instance.\n\t      // Note that this might release a previous clone.\n\t      workInProgress.stateNode = currentInstance;\n\t      return;\n\t    }\n\n\t    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);\n\n\t    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {\n\t      markUpdate(workInProgress);\n\t    }\n\n\t    workInProgress.stateNode = newInstance;\n\n\t    if (childrenUnchanged) {\n\t      // If there are no other effects in this tree, we need to flag this node as having one.\n\t      // Even though we're not going to use it for anything.\n\t      // Otherwise parents won't know that there are new children to propagate upwards.\n\t      markUpdate(workInProgress);\n\t    } else {\n\t      // If children might have changed, we have to add them all to the set.\n\t      appendAllChildren(newInstance, workInProgress, false, false);\n\t    }\n\t  };\n\n\t  updateHostText$1 = function (current, workInProgress, oldText, newText) {\n\t    if (oldText !== newText) {\n\t      // If the text content differs, we'll create a new text instance for it.\n\t      var rootContainerInstance = getRootHostContainer();\n\t      var currentHostContext = getHostContext();\n\t      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n\t      // This lets the parents know that at least one of their children has changed.\n\n\t      markUpdate(workInProgress);\n\t    } else {\n\t      workInProgress.stateNode = current.stateNode;\n\t    }\n\t  };\n\t} else {\n\t  // No host operations\n\t  updateHostContainer = function (current, workInProgress) {// Noop\n\t  };\n\n\t  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop\n\t  };\n\n\t  updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop\n\t  };\n\t}\n\n\tfunction cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n\t  if (getIsHydrating()) {\n\t    // If we're hydrating, we should consume as many items as we can\n\t    // so we don't leave any behind.\n\t    return;\n\t  }\n\n\t  switch (renderState.tailMode) {\n\t    case 'hidden':\n\t      {\n\t        // Any insertions at the end of the tail list after this point\n\t        // should be invisible. If there are already mounted boundaries\n\t        // anything before them are not considered for collapsing.\n\t        // Therefore we need to go through the whole tail to find if\n\t        // there are any.\n\t        var tailNode = renderState.tail;\n\t        var lastTailNode = null;\n\n\t        while (tailNode !== null) {\n\t          if (tailNode.alternate !== null) {\n\t            lastTailNode = tailNode;\n\t          }\n\n\t          tailNode = tailNode.sibling;\n\t        } // Next we're simply going to delete all insertions after the\n\t        // last rendered item.\n\n\n\t        if (lastTailNode === null) {\n\t          // All remaining items in the tail are insertions.\n\t          renderState.tail = null;\n\t        } else {\n\t          // Detach the insertion after the last node that was already\n\t          // inserted.\n\t          lastTailNode.sibling = null;\n\t        }\n\n\t        break;\n\t      }\n\n\t    case 'collapsed':\n\t      {\n\t        // Any insertions at the end of the tail list after this point\n\t        // should be invisible. If there are already mounted boundaries\n\t        // anything before them are not considered for collapsing.\n\t        // Therefore we need to go through the whole tail to find if\n\t        // there are any.\n\t        var _tailNode = renderState.tail;\n\t        var _lastTailNode = null;\n\n\t        while (_tailNode !== null) {\n\t          if (_tailNode.alternate !== null) {\n\t            _lastTailNode = _tailNode;\n\t          }\n\n\t          _tailNode = _tailNode.sibling;\n\t        } // Next we're simply going to delete all insertions after the\n\t        // last rendered item.\n\n\n\t        if (_lastTailNode === null) {\n\t          // All remaining items in the tail are insertions.\n\t          if (!hasRenderedATailFallback && renderState.tail !== null) {\n\t            // We suspended during the head. We want to show at least one\n\t            // row at the tail. So we'll keep on and cut off the rest.\n\t            renderState.tail.sibling = null;\n\t          } else {\n\t            renderState.tail = null;\n\t          }\n\t        } else {\n\t          // Detach the insertion after the last node that was already\n\t          // inserted.\n\t          _lastTailNode.sibling = null;\n\t        }\n\n\t        break;\n\t      }\n\t  }\n\t}\n\n\tfunction bubbleProperties(completedWork) {\n\t  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n\t  var newChildLanes = NoLanes;\n\t  var subtreeFlags = NoFlags;\n\n\t  if (!didBailout) {\n\t    // Bubble up the earliest expiration time.\n\t    if ( (completedWork.mode & ProfileMode) !== NoMode) {\n\t      // In profiling mode, resetChildExpirationTime is also used to reset\n\t      // profiler durations.\n\t      var actualDuration = completedWork.actualDuration;\n\t      var treeBaseDuration = completedWork.selfBaseDuration;\n\t      var child = completedWork.child;\n\n\t      while (child !== null) {\n\t        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n\t        subtreeFlags |= child.subtreeFlags;\n\t        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n\t        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n\t        // When work is done, it should bubble to the parent's actualDuration. If\n\t        // the fiber has not been cloned though, (meaning no work was done), then\n\t        // this value will reflect the amount of time spent working on a previous\n\t        // render. In that case it should not bubble. We determine whether it was\n\t        // cloned by comparing the child pointer.\n\n\t        actualDuration += child.actualDuration;\n\t        treeBaseDuration += child.treeBaseDuration;\n\t        child = child.sibling;\n\t      }\n\n\t      completedWork.actualDuration = actualDuration;\n\t      completedWork.treeBaseDuration = treeBaseDuration;\n\t    } else {\n\t      var _child = completedWork.child;\n\n\t      while (_child !== null) {\n\t        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n\t        subtreeFlags |= _child.subtreeFlags;\n\t        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n\t        // smell because it assumes the commit phase is never concurrent with\n\t        // the render phase. Will address during refactor to alternate model.\n\n\t        _child.return = completedWork;\n\t        _child = _child.sibling;\n\t      }\n\t    }\n\n\t    completedWork.subtreeFlags |= subtreeFlags;\n\t  } else {\n\t    // Bubble up the earliest expiration time.\n\t    if ( (completedWork.mode & ProfileMode) !== NoMode) {\n\t      // In profiling mode, resetChildExpirationTime is also used to reset\n\t      // profiler durations.\n\t      var _treeBaseDuration = completedWork.selfBaseDuration;\n\t      var _child2 = completedWork.child;\n\n\t      while (_child2 !== null) {\n\t        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n\t        // so we should bubble those up even during a bailout. All the other\n\t        // flags have a lifetime only of a single render + commit, so we should\n\t        // ignore them.\n\n\t        subtreeFlags |= _child2.subtreeFlags & StaticMask;\n\t        subtreeFlags |= _child2.flags & StaticMask;\n\t        _treeBaseDuration += _child2.treeBaseDuration;\n\t        _child2 = _child2.sibling;\n\t      }\n\n\t      completedWork.treeBaseDuration = _treeBaseDuration;\n\t    } else {\n\t      var _child3 = completedWork.child;\n\n\t      while (_child3 !== null) {\n\t        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n\t        // so we should bubble those up even during a bailout. All the other\n\t        // flags have a lifetime only of a single render + commit, so we should\n\t        // ignore them.\n\n\t        subtreeFlags |= _child3.subtreeFlags & StaticMask;\n\t        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n\t        // smell because it assumes the commit phase is never concurrent with\n\t        // the render phase. Will address during refactor to alternate model.\n\n\t        _child3.return = completedWork;\n\t        _child3 = _child3.sibling;\n\t      }\n\t    }\n\n\t    completedWork.subtreeFlags |= subtreeFlags;\n\t  }\n\n\t  completedWork.childLanes = newChildLanes;\n\t  return didBailout;\n\t}\n\n\tfunction completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {\n\t  if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {\n\t    warnIfUnhydratedTailNodes(workInProgress);\n\t    resetHydrationState();\n\t    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n\t    return false;\n\t  }\n\n\t  var wasHydrated = popHydrationState(workInProgress);\n\n\t  if (nextState !== null && nextState.dehydrated !== null) {\n\t    // We might be inside a hydration state the first time we're picking up this\n\t    // Suspense boundary, and also after we've reentered it for further hydration.\n\t    if (current === null) {\n\t      if (!wasHydrated) {\n\t        throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');\n\t      }\n\n\t      prepareToHydrateHostSuspenseInstance(workInProgress);\n\t      bubbleProperties(workInProgress);\n\n\t      {\n\t        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n\t          var isTimedOutSuspense = nextState !== null;\n\n\t          if (isTimedOutSuspense) {\n\t            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n\t            var primaryChildFragment = workInProgress.child;\n\n\t            if (primaryChildFragment !== null) {\n\t              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n\t              workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n\t            }\n\t          }\n\t        }\n\t      }\n\n\t      return false;\n\t    } else {\n\t      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n\t      // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n\t      resetHydrationState();\n\n\t      if ((workInProgress.flags & DidCapture) === NoFlags) {\n\t        // This boundary did not suspend so it's now hydrated and unsuspended.\n\t        workInProgress.memoizedState = null;\n\t      } // If nothing suspended, we need to schedule an effect to mark this boundary\n\t      // as having hydrated so events know that they're free to be invoked.\n\t      // It's also a signal to replay events and the suspense callback.\n\t      // If something suspended, schedule an effect to attach retry listeners.\n\t      // So we might as well always mark this.\n\n\n\t      workInProgress.flags |= Update;\n\t      bubbleProperties(workInProgress);\n\n\t      {\n\t        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n\t          var _isTimedOutSuspense = nextState !== null;\n\n\t          if (_isTimedOutSuspense) {\n\t            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n\t            var _primaryChildFragment = workInProgress.child;\n\n\t            if (_primaryChildFragment !== null) {\n\t              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n\t              workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;\n\t            }\n\t          }\n\t        }\n\t      }\n\n\t      return false;\n\t    }\n\t  } else {\n\t    // Successfully completed this tree. If this was a forced client render,\n\t    // there may have been recoverable errors during first hydration\n\t    // attempt. If so, add them to a queue so we can log them in the\n\t    // commit phase.\n\t    upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path\n\n\t    return true;\n\t  }\n\t}\n\n\tfunction completeWork(current, workInProgress, renderLanes) {\n\t  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n\t  // to the current tree provider fiber is just as fast and less error-prone.\n\t  // Ideally we would have a special version of the work loop only\n\t  // for hydration.\n\n\t  popTreeContext(workInProgress);\n\n\t  switch (workInProgress.tag) {\n\t    case IndeterminateComponent:\n\t    case LazyComponent:\n\t    case SimpleMemoComponent:\n\t    case FunctionComponent:\n\t    case ForwardRef:\n\t    case Fragment:\n\t    case Mode:\n\t    case Profiler:\n\t    case ContextConsumer:\n\t    case MemoComponent:\n\t      bubbleProperties(workInProgress);\n\t      return null;\n\n\t    case ClassComponent:\n\t      {\n\t        var Component = workInProgress.type;\n\n\t        if (isContextProvider(Component)) {\n\t          popContext(workInProgress);\n\t        }\n\n\t        bubbleProperties(workInProgress);\n\t        return null;\n\t      }\n\n\t    case HostRoot:\n\t      {\n\t        var fiberRoot = workInProgress.stateNode;\n\t        popHostContainer(workInProgress);\n\t        popTopLevelContextObject(workInProgress);\n\t        resetWorkInProgressVersions();\n\n\t        if (fiberRoot.pendingContext) {\n\t          fiberRoot.context = fiberRoot.pendingContext;\n\t          fiberRoot.pendingContext = null;\n\t        }\n\n\t        if (current === null || current.child === null) {\n\t          // If we hydrated, pop so that we can delete any remaining children\n\t          // that weren't hydrated.\n\t          var wasHydrated = popHydrationState(workInProgress);\n\n\t          if (wasHydrated) {\n\t            // If we hydrated, then we'll need to schedule an update for\n\t            // the commit side-effects on the root.\n\t            markUpdate(workInProgress);\n\t          } else {\n\t            if (current !== null) {\n\t              var prevState = current.memoizedState;\n\n\t              if ( // Check if this is a client root\n\t              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\n\t              (workInProgress.flags & ForceClientRender) !== NoFlags) {\n\t                // Schedule an effect to clear this container at the start of the\n\t                // next commit. This handles the case of React rendering into a\n\t                // container with previous children. It's also safe to do for\n\t                // updates too, because current.child would only be null if the\n\t                // previous render was null (so the container would already\n\t                // be empty).\n\t                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n\t                // recoverable errors during first hydration attempt. If so, add\n\t                // them to a queue so we can log them in the commit phase.\n\n\t                upgradeHydrationErrorsToRecoverable();\n\t              }\n\t            }\n\t          }\n\t        }\n\n\t        updateHostContainer(current, workInProgress);\n\t        bubbleProperties(workInProgress);\n\n\t        return null;\n\t      }\n\n\t    case HostComponent:\n\t      {\n\t        popHostContext(workInProgress);\n\t        var rootContainerInstance = getRootHostContainer();\n\t        var type = workInProgress.type;\n\n\t        if (current !== null && workInProgress.stateNode != null) {\n\t          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);\n\n\t          if (current.ref !== workInProgress.ref) {\n\t            markRef$1(workInProgress);\n\t          }\n\t        } else {\n\t          if (!newProps) {\n\t            if (workInProgress.stateNode === null) {\n\t              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n\t            } // This can happen when we abort work.\n\n\n\t            bubbleProperties(workInProgress);\n\t            return null;\n\t          }\n\n\t          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n\t          // \"stack\" as the parent. Then append children as we go in beginWork\n\t          // or completeWork depending on whether we want to add them top->down or\n\t          // bottom->up. Top->down is faster in IE11.\n\n\t          var _wasHydrated = popHydrationState(workInProgress);\n\n\t          if (_wasHydrated) {\n\t            // TODO: Move this and createInstance step into the beginPhase\n\t            // to consolidate.\n\t            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {\n\t              // If changes to the hydrated node need to be applied at the\n\t              // commit-phase we mark this as such.\n\t              markUpdate(workInProgress);\n\t            }\n\t          } else {\n\t            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\n\t            appendAllChildren(instance, workInProgress, false, false);\n\t            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\n\t            // (eg DOM renderer supports auto-focus for certain elements).\n\t            // Make sure such renderers get scheduled for later work.\n\n\t            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {\n\t              markUpdate(workInProgress);\n\t            }\n\t          }\n\n\t          if (workInProgress.ref !== null) {\n\t            // If there is a ref on a host node we need to schedule a callback\n\t            markRef$1(workInProgress);\n\t          }\n\t        }\n\n\t        bubbleProperties(workInProgress);\n\t        return null;\n\t      }\n\n\t    case HostText:\n\t      {\n\t        var newText = newProps;\n\n\t        if (current && workInProgress.stateNode != null) {\n\t          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n\t          // to schedule a side-effect to do the updates.\n\n\t          updateHostText$1(current, workInProgress, oldText, newText);\n\t        } else {\n\t          if (typeof newText !== 'string') {\n\t            if (workInProgress.stateNode === null) {\n\t              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n\t            } // This can happen when we abort work.\n\n\t          }\n\n\t          var _rootContainerInstance = getRootHostContainer();\n\n\t          var _currentHostContext = getHostContext();\n\n\t          var _wasHydrated2 = popHydrationState(workInProgress);\n\n\t          if (_wasHydrated2) {\n\t            if (prepareToHydrateHostTextInstance(workInProgress)) {\n\t              markUpdate(workInProgress);\n\t            }\n\t          } else {\n\t            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);\n\t          }\n\t        }\n\n\t        bubbleProperties(workInProgress);\n\t        return null;\n\t      }\n\n\t    case SuspenseComponent:\n\t      {\n\t        popSuspenseContext(workInProgress);\n\t        var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this\n\t        // to its own fiber type so that we can add other kinds of hydration\n\t        // boundaries that aren't associated with a Suspense tree. In anticipation\n\t        // of such a refactor, all the hydration logic is contained in\n\t        // this branch.\n\n\t        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {\n\t          var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);\n\n\t          if (!fallthroughToNormalSuspensePath) {\n\t            if (workInProgress.flags & ShouldCapture) {\n\t              // Special case. There were remaining unhydrated nodes. We treat\n\t              // this as a mismatch. Revert to client rendering.\n\t              return workInProgress;\n\t            } else {\n\t              // Did not finish hydrating, either because this is the initial\n\t              // render or because something suspended.\n\t              return null;\n\t            }\n\t          } // Continue with the normal Suspense path.\n\n\t        }\n\n\t        if ((workInProgress.flags & DidCapture) !== NoFlags) {\n\t          // Something suspended. Re-render with the fallback children.\n\t          workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n\t          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n\t            transferActualDuration(workInProgress);\n\t          } // Don't bubble properties in this case.\n\n\n\t          return workInProgress;\n\t        }\n\n\t        var nextDidTimeout = nextState !== null;\n\t        var prevDidTimeout = current !== null && current.memoizedState !== null;\n\t        // a passive effect, which is when we process the transitions\n\n\n\t        if (nextDidTimeout !== prevDidTimeout) {\n\t          // an effect to toggle the subtree's visibility. When we switch from\n\t          // fallback -> primary, the inner Offscreen fiber schedules this effect\n\t          // as part of its normal complete phase. But when we switch from\n\t          // primary -> fallback, the inner Offscreen fiber does not have a complete\n\t          // phase. So we need to schedule its effect here.\n\t          //\n\t          // We also use this flag to connect/disconnect the effects, but the same\n\t          // logic applies: when re-connecting, the Offscreen fiber's complete\n\t          // phase will handle scheduling the effect. It's only when the fallback\n\t          // is active that we have to do anything special.\n\n\n\t          if (nextDidTimeout) {\n\t            var _offscreenFiber2 = workInProgress.child;\n\t            _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything\n\t            // in the concurrent tree already suspended during this render.\n\t            // This is a known bug.\n\n\t            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n\t              // TODO: Move this back to throwException because this is too late\n\t              // if this is a large tree which is common for initial loads. We\n\t              // don't know if we should restart a render or not until we get\n\t              // this marker, and this is too late.\n\t              // If this render already had a ping or lower pri updates,\n\t              // and this is the first time we know we're going to suspend we\n\t              // should be able to immediately restart from within throwException.\n\t              var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);\n\n\t              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {\n\t                // If this was in an invisible tree or a new render, then showing\n\t                // this boundary is ok.\n\t                renderDidSuspend();\n\t              } else {\n\t                // Otherwise, we're going to have to hide content so we should\n\t                // suspend for longer if possible.\n\t                renderDidSuspendDelayIfPossible();\n\t              }\n\t            }\n\t          }\n\t        }\n\n\t        var wakeables = workInProgress.updateQueue;\n\n\t        if (wakeables !== null) {\n\t          // Schedule an effect to attach a retry listener to the promise.\n\t          // TODO: Move to passive phase\n\t          workInProgress.flags |= Update;\n\t        }\n\n\t        bubbleProperties(workInProgress);\n\n\t        {\n\t          if ((workInProgress.mode & ProfileMode) !== NoMode) {\n\t            if (nextDidTimeout) {\n\t              // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n\t              var primaryChildFragment = workInProgress.child;\n\n\t              if (primaryChildFragment !== null) {\n\t                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n\t                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n\t              }\n\t            }\n\t          }\n\t        }\n\n\t        return null;\n\t      }\n\n\t    case HostPortal:\n\t      popHostContainer(workInProgress);\n\t      updateHostContainer(current, workInProgress);\n\n\t      if (current === null) {\n\t        preparePortalMount(workInProgress.stateNode.containerInfo);\n\t      }\n\n\t      bubbleProperties(workInProgress);\n\t      return null;\n\n\t    case ContextProvider:\n\t      // Pop provider fiber\n\t      var context = workInProgress.type._context;\n\t      popProvider(context, workInProgress);\n\t      bubbleProperties(workInProgress);\n\t      return null;\n\n\t    case IncompleteClassComponent:\n\t      {\n\t        // Same as class component case. I put it down here so that the tags are\n\t        // sequential to ensure this switch is compiled to a jump table.\n\t        var _Component = workInProgress.type;\n\n\t        if (isContextProvider(_Component)) {\n\t          popContext(workInProgress);\n\t        }\n\n\t        bubbleProperties(workInProgress);\n\t        return null;\n\t      }\n\n\t    case SuspenseListComponent:\n\t      {\n\t        popSuspenseContext(workInProgress);\n\t        var renderState = workInProgress.memoizedState;\n\n\t        if (renderState === null) {\n\t          // We're running in the default, \"independent\" mode.\n\t          // We don't do anything in this mode.\n\t          bubbleProperties(workInProgress);\n\t          return null;\n\t        }\n\n\t        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\t        var renderedTail = renderState.rendering;\n\n\t        if (renderedTail === null) {\n\t          // We just rendered the head.\n\t          if (!didSuspendAlready) {\n\t            // This is the first pass. We need to figure out if anything is still\n\t            // suspended in the rendered set.\n\t            // If new content unsuspended, but there's still some content that\n\t            // didn't. Then we need to do a second pass that forces everything\n\t            // to keep showing their fallbacks.\n\t            // We might be suspended if something in this render pass suspended, or\n\t            // something in the previous committed pass suspended. Otherwise,\n\t            // there's no chance so we can skip the expensive call to\n\t            // findFirstSuspended.\n\t            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);\n\n\t            if (!cannotBeSuspended) {\n\t              var row = workInProgress.child;\n\n\t              while (row !== null) {\n\t                var suspended = findFirstSuspended(row);\n\n\t                if (suspended !== null) {\n\t                  didSuspendAlready = true;\n\t                  workInProgress.flags |= DidCapture;\n\t                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n\t                  // part of the second pass. In that case nothing will subscribe to\n\t                  // its thenables. Instead, we'll transfer its thenables to the\n\t                  // SuspenseList so that it can retry if they resolve.\n\t                  // There might be multiple of these in the list but since we're\n\t                  // going to wait for all of them anyway, it doesn't really matter\n\t                  // which ones gets to ping. In theory we could get clever and keep\n\t                  // track of how many dependencies remain but it gets tricky because\n\t                  // in the meantime, we can add/remove/change items and dependencies.\n\t                  // We might bail out of the loop before finding any but that\n\t                  // doesn't matter since that means that the other boundaries that\n\t                  // we did find already has their listeners attached.\n\n\t                  var newThenables = suspended.updateQueue;\n\n\t                  if (newThenables !== null) {\n\t                    workInProgress.updateQueue = newThenables;\n\t                    workInProgress.flags |= Update;\n\t                  } // Rerender the whole list, but this time, we'll force fallbacks\n\t                  // to stay in place.\n\t                  // Reset the effect flags before doing the second pass since that's now invalid.\n\t                  // Reset the child fibers to their original state.\n\n\n\t                  workInProgress.subtreeFlags = NoFlags;\n\t                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately\n\t                  // rerender the children.\n\n\t                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\n\n\t                  return workInProgress.child;\n\t                }\n\n\t                row = row.sibling;\n\t              }\n\t            }\n\n\t            if (renderState.tail !== null && now() > getRenderTargetTime()) {\n\t              // We have already passed our CPU deadline but we still have rows\n\t              // left in the tail. We'll just give up further attempts to render\n\t              // the main content and only render fallbacks.\n\t              workInProgress.flags |= DidCapture;\n\t              didSuspendAlready = true;\n\t              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n\t              // to get it started back up to attempt the next item. While in terms\n\t              // of priority this work has the same priority as this current render,\n\t              // it's not part of the same transition once the transition has\n\t              // committed. If it's sync, we still want to yield so that it can be\n\t              // painted. Conceptually, this is really the same as pinging.\n\t              // We can use any RetryLane even if it's the one currently rendering\n\t              // since we're leaving it behind on this node.\n\n\t              workInProgress.lanes = SomeRetryLane;\n\t            }\n\t          } else {\n\t            cutOffTailIfNeeded(renderState, false);\n\t          } // Next we're going to render the tail.\n\n\t        } else {\n\t          // Append the rendered row to the child list.\n\t          if (!didSuspendAlready) {\n\t            var _suspended = findFirstSuspended(renderedTail);\n\n\t            if (_suspended !== null) {\n\t              workInProgress.flags |= DidCapture;\n\t              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n\t              // get lost if this row ends up dropped during a second pass.\n\n\t              var _newThenables = _suspended.updateQueue;\n\n\t              if (_newThenables !== null) {\n\t                workInProgress.updateQueue = _newThenables;\n\t                workInProgress.flags |= Update;\n\t              }\n\n\t              cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n\t              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n\t              ) {\n\t                  // We're done.\n\t                  bubbleProperties(workInProgress);\n\t                  return null;\n\t                }\n\t            } else if ( // The time it took to render last row is greater than the remaining\n\t            // time we have to render. So rendering one more row would likely\n\t            // exceed it.\n\t            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n\t              // We have now passed our CPU deadline and we'll just give up further\n\t              // attempts to render the main content and only render fallbacks.\n\t              // The assumption is that this is usually faster.\n\t              workInProgress.flags |= DidCapture;\n\t              didSuspendAlready = true;\n\t              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n\t              // to get it started back up to attempt the next item. While in terms\n\t              // of priority this work has the same priority as this current render,\n\t              // it's not part of the same transition once the transition has\n\t              // committed. If it's sync, we still want to yield so that it can be\n\t              // painted. Conceptually, this is really the same as pinging.\n\t              // We can use any RetryLane even if it's the one currently rendering\n\t              // since we're leaving it behind on this node.\n\n\t              workInProgress.lanes = SomeRetryLane;\n\t            }\n\t          }\n\n\t          if (renderState.isBackwards) {\n\t            // The effect list of the backwards tail will have been added\n\t            // to the end. This breaks the guarantee that life-cycles fire in\n\t            // sibling order but that isn't a strong guarantee promised by React.\n\t            // Especially since these might also just pop in during future commits.\n\t            // Append to the beginning of the list.\n\t            renderedTail.sibling = workInProgress.child;\n\t            workInProgress.child = renderedTail;\n\t          } else {\n\t            var previousSibling = renderState.last;\n\n\t            if (previousSibling !== null) {\n\t              previousSibling.sibling = renderedTail;\n\t            } else {\n\t              workInProgress.child = renderedTail;\n\t            }\n\n\t            renderState.last = renderedTail;\n\t          }\n\t        }\n\n\t        if (renderState.tail !== null) {\n\t          // We still have tail rows to render.\n\t          // Pop a row.\n\t          var next = renderState.tail;\n\t          renderState.rendering = next;\n\t          renderState.tail = next.sibling;\n\t          renderState.renderingStartTime = now();\n\t          next.sibling = null; // Restore the context.\n\t          // TODO: We can probably just avoid popping it instead and only\n\t          // setting it the first time we go from not suspended to suspended.\n\n\t          var suspenseContext = suspenseStackCursor.current;\n\n\t          if (didSuspendAlready) {\n\t            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\t          } else {\n\t            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\t          }\n\n\t          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.\n\t          // Don't bubble properties in this case.\n\n\t          return next;\n\t        }\n\n\t        bubbleProperties(workInProgress);\n\t        return null;\n\t      }\n\n\t    case ScopeComponent:\n\t      {\n\n\t        break;\n\t      }\n\n\t    case OffscreenComponent:\n\t    case LegacyHiddenComponent:\n\t      {\n\t        popRenderLanes(workInProgress);\n\t        var _nextState = workInProgress.memoizedState;\n\t        var nextIsHidden = _nextState !== null;\n\n\t        if (current !== null) {\n\t          var _prevState = current.memoizedState;\n\t          var prevIsHidden = _prevState !== null;\n\n\t          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.\n\t          !enableLegacyHidden )) {\n\t            workInProgress.flags |= Visibility;\n\t          }\n\t        }\n\n\t        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n\t          bubbleProperties(workInProgress);\n\t        } else {\n\t          // Don't bubble properties for hidden children unless we're rendering\n\t          // at offscreen priority.\n\t          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {\n\t            bubbleProperties(workInProgress);\n\n\t            if (supportsMutation) {\n\t              // Check if there was an insertion or update in the hidden subtree.\n\t              // If so, we need to hide those nodes in the commit phase, so\n\t              // schedule a visibility effect.\n\t              if ( workInProgress.subtreeFlags & (Placement | Update)) {\n\t                workInProgress.flags |= Visibility;\n\t              }\n\t            }\n\t          }\n\t        }\n\t        return null;\n\t      }\n\n\t    case CacheComponent:\n\t      {\n\n\t        return null;\n\t      }\n\n\t    case TracingMarkerComponent:\n\t      {\n\n\t        return null;\n\t      }\n\t  }\n\n\t  throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n\t}\n\n\tfunction unwindWork(current, workInProgress, renderLanes) {\n\t  // Note: This intentionally doesn't check if we're hydrating because comparing\n\t  // to the current tree provider fiber is just as fast and less error-prone.\n\t  // Ideally we would have a special version of the work loop only\n\t  // for hydration.\n\t  popTreeContext(workInProgress);\n\n\t  switch (workInProgress.tag) {\n\t    case ClassComponent:\n\t      {\n\t        var Component = workInProgress.type;\n\n\t        if (isContextProvider(Component)) {\n\t          popContext(workInProgress);\n\t        }\n\n\t        var flags = workInProgress.flags;\n\n\t        if (flags & ShouldCapture) {\n\t          workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n\n\t          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n\t            transferActualDuration(workInProgress);\n\t          }\n\n\t          return workInProgress;\n\t        }\n\n\t        return null;\n\t      }\n\n\t    case HostRoot:\n\t      {\n\t        workInProgress.stateNode;\n\t        popHostContainer(workInProgress);\n\t        popTopLevelContextObject(workInProgress);\n\t        resetWorkInProgressVersions();\n\t        var _flags = workInProgress.flags;\n\n\t        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {\n\t          // There was an error during render that wasn't captured by a suspense\n\t          // boundary. Do a second pass on the root to unmount the children.\n\t          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n\t          return workInProgress;\n\t        } // We unwound to the root without completing it. Exit.\n\n\n\t        return null;\n\t      }\n\n\t    case HostComponent:\n\t      {\n\t        // TODO: popHydrationState\n\t        popHostContext(workInProgress);\n\t        return null;\n\t      }\n\n\t    case SuspenseComponent:\n\t      {\n\t        popSuspenseContext(workInProgress);\n\t        var suspenseState = workInProgress.memoizedState;\n\n\t        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n\t          if (workInProgress.alternate === null) {\n\t            throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');\n\t          }\n\n\t          resetHydrationState();\n\t        }\n\n\t        var _flags2 = workInProgress.flags;\n\n\t        if (_flags2 & ShouldCapture) {\n\t          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n\t          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n\t            transferActualDuration(workInProgress);\n\t          }\n\n\t          return workInProgress;\n\t        }\n\n\t        return null;\n\t      }\n\n\t    case SuspenseListComponent:\n\t      {\n\t        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n\t        // caught by a nested boundary. If not, it should bubble through.\n\n\t        return null;\n\t      }\n\n\t    case HostPortal:\n\t      popHostContainer(workInProgress);\n\t      return null;\n\n\t    case ContextProvider:\n\t      var context = workInProgress.type._context;\n\t      popProvider(context, workInProgress);\n\t      return null;\n\n\t    case OffscreenComponent:\n\t    case LegacyHiddenComponent:\n\t      popRenderLanes(workInProgress);\n\t      return null;\n\n\t    case CacheComponent:\n\n\t      return null;\n\n\t    default:\n\t      return null;\n\t  }\n\t}\n\n\tfunction unwindInterruptedWork(current, interruptedWork, renderLanes) {\n\t  // Note: This intentionally doesn't check if we're hydrating because comparing\n\t  // to the current tree provider fiber is just as fast and less error-prone.\n\t  // Ideally we would have a special version of the work loop only\n\t  // for hydration.\n\t  popTreeContext(interruptedWork);\n\n\t  switch (interruptedWork.tag) {\n\t    case ClassComponent:\n\t      {\n\t        var childContextTypes = interruptedWork.type.childContextTypes;\n\n\t        if (childContextTypes !== null && childContextTypes !== undefined) {\n\t          popContext(interruptedWork);\n\t        }\n\n\t        break;\n\t      }\n\n\t    case HostRoot:\n\t      {\n\t        interruptedWork.stateNode;\n\t        popHostContainer(interruptedWork);\n\t        popTopLevelContextObject(interruptedWork);\n\t        resetWorkInProgressVersions();\n\t        break;\n\t      }\n\n\t    case HostComponent:\n\t      {\n\t        popHostContext(interruptedWork);\n\t        break;\n\t      }\n\n\t    case HostPortal:\n\t      popHostContainer(interruptedWork);\n\t      break;\n\n\t    case SuspenseComponent:\n\t      popSuspenseContext(interruptedWork);\n\t      break;\n\n\t    case SuspenseListComponent:\n\t      popSuspenseContext(interruptedWork);\n\t      break;\n\n\t    case ContextProvider:\n\t      var context = interruptedWork.type._context;\n\t      popProvider(context, interruptedWork);\n\t      break;\n\n\t    case OffscreenComponent:\n\t    case LegacyHiddenComponent:\n\t      popRenderLanes(interruptedWork);\n\t      break;\n\t  }\n\t}\n\n\tfunction invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {\n\t  var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n\t  try {\n\t    func.apply(context, funcArgs);\n\t  } catch (error) {\n\t    this.onError(error);\n\t  }\n\t}\n\n\tvar invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n\n\t{\n\t  // In DEV mode, we swap out invokeGuardedCallback for a special version\n\t  // that plays more nicely with the browser's DevTools. The idea is to preserve\n\t  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n\t  // functions in invokeGuardedCallback, and the production version of\n\t  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n\t  // like caught exceptions, and the DevTools won't pause unless the developer\n\t  // takes the extra step of enabling pause on caught exceptions. This is\n\t  // unintuitive, though, because even though React has caught the error, from\n\t  // the developer's perspective, the error is uncaught.\n\t  //\n\t  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n\t  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n\t  // DOM node, and call the user-provided callback from inside an event handler\n\t  // for that fake event. If the callback throws, the error is \"captured\" using\n\t  // a global event handler. But because the error happens in a different\n\t  // event loop context, it does not interrupt the normal program flow.\n\t  // Effectively, this gives us try-catch behavior without actually using\n\t  // try-catch. Neat!\n\t  // Check that the browser supports the APIs we need to implement our special\n\t  // DEV version of invokeGuardedCallback\n\t  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n\t    var fakeNode = document.createElement('react');\n\n\t    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {\n\t      // If document doesn't exist we know for sure we will crash in this method\n\t      // when we call document.createEvent(). However this can cause confusing\n\t      // errors: https://github.com/facebook/create-react-app/issues/3482\n\t      // So we preemptively throw with a better message instead.\n\t      if (typeof document === 'undefined' || document === null) {\n\t        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');\n\t      }\n\n\t      var evt = document.createEvent('Event');\n\t      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We\n\t      // set this to true at the beginning, then set it to false right after\n\t      // calling the function. If the function errors, `didError` will never be\n\t      // set to false. This strategy works even if the browser is flaky and\n\t      // fails to call our global error handler, because it doesn't rely on\n\t      // the error event at all.\n\n\t      var didError = true; // Keeps track of the value of window.event so that we can reset it\n\t      // during the callback to let user code access window.event in the\n\t      // browsers that support it.\n\n\t      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\n\t      // dispatching: https://github.com/facebook/react/issues/13688\n\n\t      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');\n\n\t      function restoreAfterDispatch() {\n\t        // We immediately remove the callback from event listeners so that\n\t        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n\t        // nested call would trigger the fake event handlers of any call higher\n\t        // in the stack.\n\t        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\n\t        // window.event assignment in both IE <= 10 as they throw an error\n\t        // \"Member not found\" in strict mode, and in Firefox which does not\n\t        // support window.event.\n\n\t        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {\n\t          window.event = windowEvent;\n\t        }\n\t      } // Create an event handler for our fake event. We will synchronously\n\t      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n\t      // call the user-provided callback.\n\n\n\t      var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n\t      function callCallback() {\n\t        didCall = true;\n\t        restoreAfterDispatch();\n\t        func.apply(context, funcArgs);\n\t        didError = false;\n\t      } // Create a global error event handler. We use this to capture the value\n\t      // that was thrown. It's possible that this error handler will fire more\n\t      // than once; for example, if non-React code also calls `dispatchEvent`\n\t      // and a handler for that event throws. We should be resilient to most of\n\t      // those cases. Even if our error event handler fires more than once, the\n\t      // last error event is always used. If the callback actually does error,\n\t      // we know that the last error event is the correct one, because it's not\n\t      // possible for anything else to have happened in between our callback\n\t      // erroring and the code that follows the `dispatchEvent` call below. If\n\t      // the callback doesn't error, but the error event was fired, we know to\n\t      // ignore it because `didError` will be false, as described above.\n\n\n\t      var error; // Use this to track whether the error event is ever called.\n\n\t      var didSetError = false;\n\t      var isCrossOriginError = false;\n\n\t      function handleWindowError(event) {\n\t        error = event.error;\n\t        didSetError = true;\n\n\t        if (error === null && event.colno === 0 && event.lineno === 0) {\n\t          isCrossOriginError = true;\n\t        }\n\n\t        if (event.defaultPrevented) {\n\t          // Some other error handler has prevented default.\n\t          // Browsers silence the error report if this happens.\n\t          // We'll remember this to later decide whether to log it or not.\n\t          if (error != null && typeof error === 'object') {\n\t            try {\n\t              error._suppressLogging = true;\n\t            } catch (inner) {// Ignore.\n\t            }\n\t          }\n\t        }\n\t      } // Create a fake event type.\n\n\n\t      var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers\n\n\t      window.addEventListener('error', handleWindowError);\n\t      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\n\t      // errors, it will trigger our global error handler.\n\n\t      evt.initEvent(evtType, false, false);\n\t      fakeNode.dispatchEvent(evt);\n\n\t      if (windowEventDescriptor) {\n\t        Object.defineProperty(window, 'event', windowEventDescriptor);\n\t      }\n\n\t      if (didCall && didError) {\n\t        if (!didSetError) {\n\t          // The callback errored, but the error event never fired.\n\t          // eslint-disable-next-line react-internal/prod-error-codes\n\t          error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n\t        } else if (isCrossOriginError) {\n\t          // eslint-disable-next-line react-internal/prod-error-codes\n\t          error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');\n\t        }\n\n\t        this.onError(error);\n\t      } // Remove our event listeners\n\n\n\t      window.removeEventListener('error', handleWindowError);\n\n\t      if (!didCall) {\n\t        // Something went really wrong, and our event was not dispatched.\n\t        // https://github.com/facebook/react/issues/16734\n\t        // https://github.com/facebook/react/issues/16585\n\t        // Fall back to the production implementation.\n\t        restoreAfterDispatch();\n\t        return invokeGuardedCallbackProd.apply(this, arguments);\n\t      }\n\t    };\n\t  }\n\t}\n\n\tvar invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;\n\n\tvar hasError = false;\n\tvar caughtError = null; // Used by event system to capture/rethrow the first error.\n\tvar reporter = {\n\t  onError: function (error) {\n\t    hasError = true;\n\t    caughtError = error;\n\t  }\n\t};\n\t/**\n\t * Call a function while guarding against errors that happens within it.\n\t * Returns an error if it throws, otherwise null.\n\t *\n\t * In production, this is implemented using a try-catch. The reason we don't\n\t * use a try-catch directly is so that we can swap out a different\n\t * implementation in DEV mode.\n\t *\n\t * @param {String} name of the guard to use for logging or debugging\n\t * @param {Function} func The function to invoke\n\t * @param {*} context The context to use when calling the function\n\t * @param {...*} args Arguments for function\n\t */\n\n\tfunction invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n\t  hasError = false;\n\t  caughtError = null;\n\t  invokeGuardedCallbackImpl$1.apply(reporter, arguments);\n\t}\n\tfunction hasCaughtError() {\n\t  return hasError;\n\t}\n\tfunction clearCaughtError() {\n\t  if (hasError) {\n\t    var error = caughtError;\n\t    hasError = false;\n\t    caughtError = null;\n\t    return error;\n\t  } else {\n\t    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n\t  }\n\t}\n\n\tvar didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n\n\t{\n\t  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n\t} // Used during the commit phase to track the state of the Offscreen component stack.\n\t// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n\t// Only used when enableSuspenseLayoutEffectSemantics is enabled.\n\n\n\tvar offscreenSubtreeIsHidden = false;\n\tvar offscreenSubtreeWasHidden = false;\n\tvar PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\tvar nextEffect = null; // Used for Profiling builds to track updaters.\n\n\tvar inProgressLanes = null;\n\tvar inProgressRoot = null;\n\tfunction reportUncaughtErrorInDEV(error) {\n\t  // Wrapping each small part of the commit phase into a guarded\n\t  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n\t  // But we rely on it to surface errors to DEV tools like overlays\n\t  // (https://github.com/facebook/react/issues/21712).\n\t  // As a compromise, rethrow only caught errors in a guard.\n\t  {\n\t    invokeGuardedCallback(null, function () {\n\t      throw error;\n\t    });\n\t    clearCaughtError();\n\t  }\n\t}\n\n\tvar callComponentWillUnmountWithTimer = function (current, instance) {\n\t  instance.props = current.memoizedProps;\n\t  instance.state = current.memoizedState;\n\n\t  if ( current.mode & ProfileMode) {\n\t    try {\n\t      startLayoutEffectTimer();\n\t      instance.componentWillUnmount();\n\t    } finally {\n\t      recordLayoutEffectDuration(current);\n\t    }\n\t  } else {\n\t    instance.componentWillUnmount();\n\t  }\n\t}; // Capture errors so they don't interrupt mounting.\n\n\n\tfunction safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {\n\t  try {\n\t    commitHookEffectListMount(Layout, current);\n\t  } catch (error) {\n\t    captureCommitPhaseError(current, nearestMountedAncestor, error);\n\t  }\n\t} // Capture errors so they don't interrupt unmounting.\n\n\n\tfunction safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n\t  try {\n\t    callComponentWillUnmountWithTimer(current, instance);\n\t  } catch (error) {\n\t    captureCommitPhaseError(current, nearestMountedAncestor, error);\n\t  }\n\t} // Capture errors so they don't interrupt mounting.\n\n\n\tfunction safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {\n\t  try {\n\t    instance.componentDidMount();\n\t  } catch (error) {\n\t    captureCommitPhaseError(current, nearestMountedAncestor, error);\n\t  }\n\t} // Capture errors so they don't interrupt mounting.\n\n\n\tfunction safelyAttachRef(current, nearestMountedAncestor) {\n\t  try {\n\t    commitAttachRef(current);\n\t  } catch (error) {\n\t    captureCommitPhaseError(current, nearestMountedAncestor, error);\n\t  }\n\t}\n\n\tfunction safelyDetachRef(current, nearestMountedAncestor) {\n\t  var ref = current.ref;\n\n\t  if (ref !== null) {\n\t    if (typeof ref === 'function') {\n\t      var retVal;\n\n\t      try {\n\t        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {\n\t          try {\n\t            startLayoutEffectTimer();\n\t            retVal = ref(null);\n\t          } finally {\n\t            recordLayoutEffectDuration(current);\n\t          }\n\t        } else {\n\t          retVal = ref(null);\n\t        }\n\t      } catch (error) {\n\t        captureCommitPhaseError(current, nearestMountedAncestor, error);\n\t      }\n\n\t      {\n\t        if (typeof retVal === 'function') {\n\t          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));\n\t        }\n\t      }\n\t    } else {\n\t      ref.current = null;\n\t    }\n\t  }\n\t}\n\n\tfunction safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n\t  try {\n\t    destroy();\n\t  } catch (error) {\n\t    captureCommitPhaseError(current, nearestMountedAncestor, error);\n\t  }\n\t}\n\tvar shouldFireAfterActiveInstanceBlur = false;\n\tfunction commitBeforeMutationEffects(root, firstChild) {\n\t  prepareForCommit(root.containerInfo);\n\t  nextEffect = firstChild;\n\t  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n\n\t  var shouldFire = shouldFireAfterActiveInstanceBlur;\n\t  shouldFireAfterActiveInstanceBlur = false;\n\t  return shouldFire;\n\t}\n\n\tfunction commitBeforeMutationEffects_begin() {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n\n\t    var child = fiber.child;\n\n\t    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {\n\t      child.return = fiber;\n\t      nextEffect = child;\n\t    } else {\n\t      commitBeforeMutationEffects_complete();\n\t    }\n\t  }\n\t}\n\n\tfunction commitBeforeMutationEffects_complete() {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\t    setCurrentFiber(fiber);\n\n\t    try {\n\t      commitBeforeMutationEffectsOnFiber(fiber);\n\t    } catch (error) {\n\t      captureCommitPhaseError(fiber, fiber.return, error);\n\t    }\n\n\t    resetCurrentFiber();\n\t    var sibling = fiber.sibling;\n\n\t    if (sibling !== null) {\n\t      sibling.return = fiber.return;\n\t      nextEffect = sibling;\n\t      return;\n\t    }\n\n\t    nextEffect = fiber.return;\n\t  }\n\t}\n\n\tfunction commitBeforeMutationEffectsOnFiber(finishedWork) {\n\t  var current = finishedWork.alternate;\n\t  var flags = finishedWork.flags;\n\n\t  if ((flags & Snapshot) !== NoFlags) {\n\t    setCurrentFiber(finishedWork);\n\n\t    switch (finishedWork.tag) {\n\t      case FunctionComponent:\n\t      case ForwardRef:\n\t      case SimpleMemoComponent:\n\t        {\n\t          break;\n\t        }\n\n\t      case ClassComponent:\n\t        {\n\t          if (current !== null) {\n\t            var prevProps = current.memoizedProps;\n\t            var prevState = current.memoizedState;\n\t            var instance = finishedWork.stateNode; // We could update instance props and state here,\n\t            // but instead we rely on them being set during last render.\n\t            // TODO: revisit this when we implement resuming.\n\n\t            {\n\t              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n\t                if (instance.props !== finishedWork.memoizedProps) {\n\t                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                }\n\n\t                if (instance.state !== finishedWork.memoizedState) {\n\t                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                }\n\t              }\n\t            }\n\n\t            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n\n\t            {\n\t              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n\n\t              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n\t                didWarnSet.add(finishedWork.type);\n\n\t                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));\n\t              }\n\t            }\n\n\t            instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n\t          }\n\n\t          break;\n\t        }\n\n\t      case HostRoot:\n\t        {\n\t          if (supportsMutation) {\n\t            var root = finishedWork.stateNode;\n\t            clearContainer(root.containerInfo);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case HostComponent:\n\t      case HostText:\n\t      case HostPortal:\n\t      case IncompleteClassComponent:\n\t        // Nothing to do for these component types\n\t        break;\n\n\t      default:\n\t        {\n\t          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n\t        }\n\t    }\n\n\t    resetCurrentFiber();\n\t  }\n\t}\n\n\tfunction commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n\t  var updateQueue = finishedWork.updateQueue;\n\t  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n\t  if (lastEffect !== null) {\n\t    var firstEffect = lastEffect.next;\n\t    var effect = firstEffect;\n\n\t    do {\n\t      if ((effect.tag & flags) === flags) {\n\t        // Unmount\n\t        var destroy = effect.destroy;\n\t        effect.destroy = undefined;\n\n\t        if (destroy !== undefined) {\n\t          {\n\t            if ((flags & Passive$1) !== NoFlags$1) {\n\t              markComponentPassiveEffectUnmountStarted(finishedWork);\n\t            } else if ((flags & Layout) !== NoFlags$1) {\n\t              markComponentLayoutEffectUnmountStarted(finishedWork);\n\t            }\n\t          }\n\n\t          {\n\t            if ((flags & Insertion) !== NoFlags$1) {\n\t              setIsRunningInsertionEffect(true);\n\t            }\n\t          }\n\n\t          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n\n\t          {\n\t            if ((flags & Insertion) !== NoFlags$1) {\n\t              setIsRunningInsertionEffect(false);\n\t            }\n\t          }\n\n\t          {\n\t            if ((flags & Passive$1) !== NoFlags$1) {\n\t              markComponentPassiveEffectUnmountStopped();\n\t            } else if ((flags & Layout) !== NoFlags$1) {\n\t              markComponentLayoutEffectUnmountStopped();\n\t            }\n\t          }\n\t        }\n\t      }\n\n\t      effect = effect.next;\n\t    } while (effect !== firstEffect);\n\t  }\n\t}\n\n\tfunction commitHookEffectListMount(flags, finishedWork) {\n\t  var updateQueue = finishedWork.updateQueue;\n\t  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n\t  if (lastEffect !== null) {\n\t    var firstEffect = lastEffect.next;\n\t    var effect = firstEffect;\n\n\t    do {\n\t      if ((effect.tag & flags) === flags) {\n\t        {\n\t          if ((flags & Passive$1) !== NoFlags$1) {\n\t            markComponentPassiveEffectMountStarted(finishedWork);\n\t          } else if ((flags & Layout) !== NoFlags$1) {\n\t            markComponentLayoutEffectMountStarted(finishedWork);\n\t          }\n\t        } // Mount\n\n\n\t        var create = effect.create;\n\n\t        {\n\t          if ((flags & Insertion) !== NoFlags$1) {\n\t            setIsRunningInsertionEffect(true);\n\t          }\n\t        }\n\n\t        effect.destroy = create();\n\n\t        {\n\t          if ((flags & Insertion) !== NoFlags$1) {\n\t            setIsRunningInsertionEffect(false);\n\t          }\n\t        }\n\n\t        {\n\t          if ((flags & Passive$1) !== NoFlags$1) {\n\t            markComponentPassiveEffectMountStopped();\n\t          } else if ((flags & Layout) !== NoFlags$1) {\n\t            markComponentLayoutEffectMountStopped();\n\t          }\n\t        }\n\n\t        {\n\t          var destroy = effect.destroy;\n\n\t          if (destroy !== undefined && typeof destroy !== 'function') {\n\t            var hookName = void 0;\n\n\t            if ((effect.tag & Layout) !== NoFlags) {\n\t              hookName = 'useLayoutEffect';\n\t            } else if ((effect.tag & Insertion) !== NoFlags) {\n\t              hookName = 'useInsertionEffect';\n\t            } else {\n\t              hookName = 'useEffect';\n\t            }\n\n\t            var addendum = void 0;\n\n\t            if (destroy === null) {\n\t              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\n\t            } else if (typeof destroy.then === 'function') {\n\t              addendum = '\\n\\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + hookName + '(() => {\\n' + '  async function fetchData() {\\n' + '    // You can await here\\n' + '    const response = await MyAPI.getData(someId);\\n' + '    // ...\\n' + '  }\\n' + '  fetchData();\\n' + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n\t            } else {\n\t              addendum = ' You returned: ' + destroy;\n\t            }\n\n\t            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);\n\t          }\n\t        }\n\t      }\n\n\t      effect = effect.next;\n\t    } while (effect !== firstEffect);\n\t  }\n\t}\n\n\tfunction commitPassiveEffectDurations(finishedRoot, finishedWork) {\n\t  {\n\t    // Only Profilers with work in their subtree will have an Update effect scheduled.\n\t    if ((finishedWork.flags & Update) !== NoFlags) {\n\t      switch (finishedWork.tag) {\n\t        case Profiler:\n\t          {\n\t            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n\t            var _finishedWork$memoize = finishedWork.memoizedProps,\n\t                id = _finishedWork$memoize.id,\n\t                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n\t            // It does not get reset until the start of the next commit phase.\n\n\t            var commitTime = getCommitTime();\n\t            var phase = finishedWork.alternate === null ? 'mount' : 'update';\n\n\t            {\n\t              if (isCurrentUpdateNested()) {\n\t                phase = 'nested-update';\n\t              }\n\t            }\n\n\t            if (typeof onPostCommit === 'function') {\n\t              onPostCommit(id, phase, passiveEffectDuration, commitTime);\n\t            } // Bubble times to the next nearest ancestor Profiler.\n\t            // After we process that Profiler, we'll bubble further up.\n\n\n\t            var parentFiber = finishedWork.return;\n\n\t            outer: while (parentFiber !== null) {\n\t              switch (parentFiber.tag) {\n\t                case HostRoot:\n\t                  var root = parentFiber.stateNode;\n\t                  root.passiveEffectDuration += passiveEffectDuration;\n\t                  break outer;\n\n\t                case Profiler:\n\t                  var parentStateNode = parentFiber.stateNode;\n\t                  parentStateNode.passiveEffectDuration += passiveEffectDuration;\n\t                  break outer;\n\t              }\n\n\t              parentFiber = parentFiber.return;\n\t            }\n\n\t            break;\n\t          }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n\t  if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n\t    switch (finishedWork.tag) {\n\t      case FunctionComponent:\n\t      case ForwardRef:\n\t      case SimpleMemoComponent:\n\t        {\n\t          if ( !offscreenSubtreeWasHidden) {\n\t            // At this point layout effects have already been destroyed (during mutation phase).\n\t            // This is done to prevent sibling component effects from interfering with each other,\n\t            // e.g. a destroy function in one component should never override a ref set\n\t            // by a create function in another component during the same commit.\n\t            if ( finishedWork.mode & ProfileMode) {\n\t              try {\n\t                startLayoutEffectTimer();\n\t                commitHookEffectListMount(Layout | HasEffect, finishedWork);\n\t              } finally {\n\t                recordLayoutEffectDuration(finishedWork);\n\t              }\n\t            } else {\n\t              commitHookEffectListMount(Layout | HasEffect, finishedWork);\n\t            }\n\t          }\n\n\t          break;\n\t        }\n\n\t      case ClassComponent:\n\t        {\n\t          var instance = finishedWork.stateNode;\n\n\t          if (finishedWork.flags & Update) {\n\t            if (!offscreenSubtreeWasHidden) {\n\t              if (current === null) {\n\t                // We could update instance props and state here,\n\t                // but instead we rely on them being set during last render.\n\t                // TODO: revisit this when we implement resuming.\n\t                {\n\t                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n\t                    if (instance.props !== finishedWork.memoizedProps) {\n\t                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                    }\n\n\t                    if (instance.state !== finishedWork.memoizedState) {\n\t                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                    }\n\t                  }\n\t                }\n\n\t                if ( finishedWork.mode & ProfileMode) {\n\t                  try {\n\t                    startLayoutEffectTimer();\n\t                    instance.componentDidMount();\n\t                  } finally {\n\t                    recordLayoutEffectDuration(finishedWork);\n\t                  }\n\t                } else {\n\t                  instance.componentDidMount();\n\t                }\n\t              } else {\n\t                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n\t                var prevState = current.memoizedState; // We could update instance props and state here,\n\t                // but instead we rely on them being set during last render.\n\t                // TODO: revisit this when we implement resuming.\n\n\t                {\n\t                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n\t                    if (instance.props !== finishedWork.memoizedProps) {\n\t                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                    }\n\n\t                    if (instance.state !== finishedWork.memoizedState) {\n\t                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                    }\n\t                  }\n\t                }\n\n\t                if ( finishedWork.mode & ProfileMode) {\n\t                  try {\n\t                    startLayoutEffectTimer();\n\t                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n\t                  } finally {\n\t                    recordLayoutEffectDuration(finishedWork);\n\t                  }\n\t                } else {\n\t                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n\t                }\n\t              }\n\t            }\n\t          } // TODO: I think this is now always non-null by the time it reaches the\n\t          // commit phase. Consider removing the type check.\n\n\n\t          var updateQueue = finishedWork.updateQueue;\n\n\t          if (updateQueue !== null) {\n\t            {\n\t              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n\t                if (instance.props !== finishedWork.memoizedProps) {\n\t                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                }\n\n\t                if (instance.state !== finishedWork.memoizedState) {\n\t                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                }\n\t              }\n\t            } // We could update instance props and state here,\n\t            // but instead we rely on them being set during last render.\n\t            // TODO: revisit this when we implement resuming.\n\n\n\t            commitUpdateQueue(finishedWork, updateQueue, instance);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case HostRoot:\n\t        {\n\t          // TODO: I think this is now always non-null by the time it reaches the\n\t          // commit phase. Consider removing the type check.\n\t          var _updateQueue = finishedWork.updateQueue;\n\n\t          if (_updateQueue !== null) {\n\t            var _instance = null;\n\n\t            if (finishedWork.child !== null) {\n\t              switch (finishedWork.child.tag) {\n\t                case HostComponent:\n\t                  _instance = getPublicInstance(finishedWork.child.stateNode);\n\t                  break;\n\n\t                case ClassComponent:\n\t                  _instance = finishedWork.child.stateNode;\n\t                  break;\n\t              }\n\t            }\n\n\t            commitUpdateQueue(finishedWork, _updateQueue, _instance);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case HostComponent:\n\t        {\n\t          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\n\t          // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n\t          // These effects should only be committed when components are first mounted,\n\t          // aka when there is no current/alternate.\n\n\t          if (current === null && finishedWork.flags & Update) {\n\t            var type = finishedWork.type;\n\t            var props = finishedWork.memoizedProps;\n\t            commitMount(_instance2, type, props, finishedWork);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case HostText:\n\t        {\n\t          // We have no life-cycles associated with text.\n\t          break;\n\t        }\n\n\t      case HostPortal:\n\t        {\n\t          // We have no life-cycles associated with portals.\n\t          break;\n\t        }\n\n\t      case Profiler:\n\t        {\n\t          {\n\t            var _finishedWork$memoize2 = finishedWork.memoizedProps,\n\t                onCommit = _finishedWork$memoize2.onCommit,\n\t                onRender = _finishedWork$memoize2.onRender;\n\t            var effectDuration = finishedWork.stateNode.effectDuration;\n\t            var commitTime = getCommitTime();\n\t            var phase = current === null ? 'mount' : 'update';\n\n\t            {\n\t              if (isCurrentUpdateNested()) {\n\t                phase = 'nested-update';\n\t              }\n\t            }\n\n\t            if (typeof onRender === 'function') {\n\t              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n\t            }\n\n\t            {\n\t              if (typeof onCommit === 'function') {\n\t                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n\t              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n\t              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n\t              // because the effect is also where times bubble to parent Profilers.\n\n\n\t              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n\t              // Do not reset these values until the next render so DevTools has a chance to read them first.\n\n\t              var parentFiber = finishedWork.return;\n\n\t              outer: while (parentFiber !== null) {\n\t                switch (parentFiber.tag) {\n\t                  case HostRoot:\n\t                    var root = parentFiber.stateNode;\n\t                    root.effectDuration += effectDuration;\n\t                    break outer;\n\n\t                  case Profiler:\n\t                    var parentStateNode = parentFiber.stateNode;\n\t                    parentStateNode.effectDuration += effectDuration;\n\t                    break outer;\n\t                }\n\n\t                parentFiber = parentFiber.return;\n\t              }\n\t            }\n\t          }\n\n\t          break;\n\t        }\n\n\t      case SuspenseComponent:\n\t        {\n\t          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n\t          break;\n\t        }\n\n\t      case SuspenseListComponent:\n\t      case IncompleteClassComponent:\n\t      case ScopeComponent:\n\t      case OffscreenComponent:\n\t      case LegacyHiddenComponent:\n\t      case TracingMarkerComponent:\n\t        {\n\t          break;\n\t        }\n\n\t      default:\n\t        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n\t    }\n\t  }\n\n\t  if ( !offscreenSubtreeWasHidden) {\n\t    {\n\t      if (finishedWork.flags & Ref) {\n\t        commitAttachRef(finishedWork);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction reappearLayoutEffectsOnFiber(node) {\n\t  // Turn on layout effects in a tree that previously disappeared.\n\t  // TODO (Offscreen) Check: flags & LayoutStatic\n\t  switch (node.tag) {\n\t    case FunctionComponent:\n\t    case ForwardRef:\n\t    case SimpleMemoComponent:\n\t      {\n\t        if ( node.mode & ProfileMode) {\n\t          try {\n\t            startLayoutEffectTimer();\n\t            safelyCallCommitHookLayoutEffectListMount(node, node.return);\n\t          } finally {\n\t            recordLayoutEffectDuration(node);\n\t          }\n\t        } else {\n\t          safelyCallCommitHookLayoutEffectListMount(node, node.return);\n\t        }\n\n\t        break;\n\t      }\n\n\t    case ClassComponent:\n\t      {\n\t        var instance = node.stateNode;\n\n\t        if (typeof instance.componentDidMount === 'function') {\n\t          safelyCallComponentDidMount(node, node.return, instance);\n\t        }\n\n\t        safelyAttachRef(node, node.return);\n\t        break;\n\t      }\n\n\t    case HostComponent:\n\t      {\n\t        safelyAttachRef(node, node.return);\n\t        break;\n\t      }\n\t  }\n\t}\n\n\tfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n\t  // Only hide or unhide the top-most host nodes.\n\t  var hostSubtreeRoot = null;\n\n\t  if (supportsMutation) {\n\t    // We only have the top Fiber that was inserted but we need to recurse down its\n\t    // children to find all the terminal nodes.\n\t    var node = finishedWork;\n\n\t    while (true) {\n\t      if (node.tag === HostComponent) {\n\t        if (hostSubtreeRoot === null) {\n\t          hostSubtreeRoot = node;\n\n\t          try {\n\t            var instance = node.stateNode;\n\n\t            if (isHidden) {\n\t              hideInstance(instance);\n\t            } else {\n\t              unhideInstance(node.stateNode, node.memoizedProps);\n\t            }\n\t          } catch (error) {\n\t            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t          }\n\t        }\n\t      } else if (node.tag === HostText) {\n\t        if (hostSubtreeRoot === null) {\n\t          try {\n\t            var _instance3 = node.stateNode;\n\n\t            if (isHidden) {\n\t              hideTextInstance(_instance3);\n\t            } else {\n\t              unhideTextInstance(_instance3, node.memoizedProps);\n\t            }\n\t          } catch (error) {\n\t            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t          }\n\t        }\n\t      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {\n\t        node.child.return = node;\n\t        node = node.child;\n\t        continue;\n\t      }\n\n\t      if (node === finishedWork) {\n\t        return;\n\t      }\n\n\t      while (node.sibling === null) {\n\t        if (node.return === null || node.return === finishedWork) {\n\t          return;\n\t        }\n\n\t        if (hostSubtreeRoot === node) {\n\t          hostSubtreeRoot = null;\n\t        }\n\n\t        node = node.return;\n\t      }\n\n\t      if (hostSubtreeRoot === node) {\n\t        hostSubtreeRoot = null;\n\t      }\n\n\t      node.sibling.return = node.return;\n\t      node = node.sibling;\n\t    }\n\t  }\n\t}\n\n\tfunction commitAttachRef(finishedWork) {\n\t  var ref = finishedWork.ref;\n\n\t  if (ref !== null) {\n\t    var instance = finishedWork.stateNode;\n\t    var instanceToUse;\n\n\t    switch (finishedWork.tag) {\n\t      case HostComponent:\n\t        instanceToUse = getPublicInstance(instance);\n\t        break;\n\n\t      default:\n\t        instanceToUse = instance;\n\t    } // Moved outside to ensure DCE works with this flag\n\n\t    if (typeof ref === 'function') {\n\t      var retVal;\n\n\t      if ( finishedWork.mode & ProfileMode) {\n\t        try {\n\t          startLayoutEffectTimer();\n\t          retVal = ref(instanceToUse);\n\t        } finally {\n\t          recordLayoutEffectDuration(finishedWork);\n\t        }\n\t      } else {\n\t        retVal = ref(instanceToUse);\n\t      }\n\n\t      {\n\t        if (typeof retVal === 'function') {\n\t          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));\n\t        }\n\t      }\n\t    } else {\n\t      {\n\t        if (!ref.hasOwnProperty('current')) {\n\t          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));\n\t        }\n\t      }\n\n\t      ref.current = instanceToUse;\n\t    }\n\t  }\n\t}\n\n\tfunction detachFiberMutation(fiber) {\n\t  // Cut off the return pointer to disconnect it from the tree.\n\t  // This enables us to detect and warn against state updates on an unmounted component.\n\t  // It also prevents events from bubbling from within disconnected components.\n\t  //\n\t  // Ideally, we should also clear the child pointer of the parent alternate to let this\n\t  // get GC:ed but we don't know which for sure which parent is the current\n\t  // one so we'll settle for GC:ing the subtree of this child.\n\t  // This child itself will be GC:ed when the parent updates the next time.\n\t  //\n\t  // Note that we can't clear child or sibling pointers yet.\n\t  // They're needed for passive effects and for findDOMNode.\n\t  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n\t  //\n\t  // Don't reset the alternate yet, either. We need that so we can detach the\n\t  // alternate's fields in the passive phase. Clearing the return pointer is\n\t  // sufficient for findDOMNode semantics.\n\t  var alternate = fiber.alternate;\n\n\t  if (alternate !== null) {\n\t    alternate.return = null;\n\t  }\n\n\t  fiber.return = null;\n\t}\n\n\tfunction detachFiberAfterEffects(fiber) {\n\t  var alternate = fiber.alternate;\n\n\t  if (alternate !== null) {\n\t    fiber.alternate = null;\n\t    detachFiberAfterEffects(alternate);\n\t  } // Note: Defensively using negation instead of < in case\n\t  // `deletedTreeCleanUpLevel` is undefined.\n\n\n\t  {\n\t    // Clear cyclical Fiber fields. This level alone is designed to roughly\n\t    // approximate the planned Fiber refactor. In that world, `setState` will be\n\t    // bound to a special \"instance\" object instead of a Fiber. The Instance\n\t    // object will not have any of these fields. It will only be connected to\n\t    // the fiber tree via a single link at the root. So if this level alone is\n\t    // sufficient to fix memory issues, that bodes well for our plans.\n\t    fiber.child = null;\n\t    fiber.deletions = null;\n\t    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n\t    // tree, which has its own pointers to children, parents, and siblings.\n\t    // The other host nodes also point back to fibers, so we should detach that\n\t    // one, too.\n\n\t    if (fiber.tag === HostComponent) {\n\t      var hostInstance = fiber.stateNode;\n\n\t      if (hostInstance !== null) {\n\t        detachDeletedInstance(hostInstance);\n\t      }\n\t    }\n\n\t    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We\n\t    // already disconnect the `return` pointer at the root of the deleted\n\t    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n\t    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n\t    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n\t    {\n\t      fiber._debugOwner = null;\n\t    }\n\n\t    {\n\t      // Theoretically, nothing in here should be necessary, because we already\n\t      // disconnected the fiber from the tree. So even if something leaks this\n\t      // particular fiber, it won't leak anything else\n\t      //\n\t      // The purpose of this branch is to be super aggressive so we can measure\n\t      // if there's any difference in memory impact. If there is, that could\n\t      // indicate a React leak we don't know about.\n\t      fiber.return = null;\n\t      fiber.dependencies = null;\n\t      fiber.memoizedProps = null;\n\t      fiber.memoizedState = null;\n\t      fiber.pendingProps = null;\n\t      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n\n\t      fiber.updateQueue = null;\n\t    }\n\t  }\n\t}\n\n\tfunction emptyPortalContainer(current) {\n\t  if (!supportsPersistence) {\n\t    return;\n\t  }\n\n\t  var portal = current.stateNode;\n\t  var containerInfo = portal.containerInfo;\n\t  var emptyChildSet = createContainerChildSet(containerInfo);\n\t  replaceContainerChildren(containerInfo, emptyChildSet);\n\t}\n\n\tfunction getHostParentFiber(fiber) {\n\t  var parent = fiber.return;\n\n\t  while (parent !== null) {\n\t    if (isHostParent(parent)) {\n\t      return parent;\n\t    }\n\n\t    parent = parent.return;\n\t  }\n\n\t  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n\t}\n\n\tfunction isHostParent(fiber) {\n\t  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n\t}\n\n\tfunction getHostSibling(fiber) {\n\t  // We're going to search forward into the tree until we find a sibling host\n\t  // node. Unfortunately, if multiple insertions are done in a row we have to\n\t  // search past them. This leads to exponential search for the next sibling.\n\t  // TODO: Find a more efficient way to do this.\n\t  var node = fiber;\n\n\t  siblings: while (true) {\n\t    // If we didn't find anything, let's try the next sibling.\n\t    while (node.sibling === null) {\n\t      if (node.return === null || isHostParent(node.return)) {\n\t        // If we pop out of the root or hit the parent the fiber we are the\n\t        // last sibling.\n\t        return null;\n\t      }\n\n\t      node = node.return;\n\t    }\n\n\t    node.sibling.return = node.return;\n\t    node = node.sibling;\n\n\t    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {\n\t      // If it is not host node and, we might have a host node inside it.\n\t      // Try to search down until we find one.\n\t      if (node.flags & Placement) {\n\t        // If we don't have a child, try the siblings instead.\n\t        continue siblings;\n\t      } // If we don't have a child, try the siblings instead.\n\t      // We also skip portals because they are not part of this host tree.\n\n\n\t      if (node.child === null || node.tag === HostPortal) {\n\t        continue siblings;\n\t      } else {\n\t        node.child.return = node;\n\t        node = node.child;\n\t      }\n\t    } // Check if this host node is stable or about to be placed.\n\n\n\t    if (!(node.flags & Placement)) {\n\t      // Found it!\n\t      return node.stateNode;\n\t    }\n\t  }\n\t}\n\n\tfunction commitPlacement(finishedWork) {\n\t  if (!supportsMutation) {\n\t    return;\n\t  } // Recursively insert all host nodes into the parent.\n\n\n\t  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\n\n\t  switch (parentFiber.tag) {\n\t    case HostComponent:\n\t      {\n\t        var parent = parentFiber.stateNode;\n\n\t        if (parentFiber.flags & ContentReset) {\n\t          // Reset the text content of the parent before doing any insertions\n\t          resetTextContent(parent); // Clear ContentReset from the effect tag\n\n\t          parentFiber.flags &= ~ContentReset;\n\t        }\n\n\t        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n\t        // children to find all the terminal nodes.\n\n\t        insertOrAppendPlacementNode(finishedWork, before, parent);\n\t        break;\n\t      }\n\n\t    case HostRoot:\n\t    case HostPortal:\n\t      {\n\t        var _parent = parentFiber.stateNode.containerInfo;\n\n\t        var _before = getHostSibling(finishedWork);\n\n\t        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);\n\t        break;\n\t      }\n\t    // eslint-disable-next-line-no-fallthrough\n\n\t    default:\n\t      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n\t  }\n\t}\n\n\tfunction insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n\t  var tag = node.tag;\n\t  var isHost = tag === HostComponent || tag === HostText;\n\n\t  if (isHost) {\n\t    var stateNode = node.stateNode;\n\n\t    if (before) {\n\t      insertInContainerBefore(parent, stateNode, before);\n\t    } else {\n\t      appendChildToContainer(parent, stateNode);\n\t    }\n\t  } else if (tag === HostPortal) ; else {\n\t    var child = node.child;\n\n\t    if (child !== null) {\n\t      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n\t      var sibling = child.sibling;\n\n\t      while (sibling !== null) {\n\t        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n\t        sibling = sibling.sibling;\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction insertOrAppendPlacementNode(node, before, parent) {\n\t  var tag = node.tag;\n\t  var isHost = tag === HostComponent || tag === HostText;\n\n\t  if (isHost) {\n\t    var stateNode = node.stateNode;\n\n\t    if (before) {\n\t      insertBefore(parent, stateNode, before);\n\t    } else {\n\t      appendChild(parent, stateNode);\n\t    }\n\t  } else if (tag === HostPortal) ; else {\n\t    var child = node.child;\n\n\t    if (child !== null) {\n\t      insertOrAppendPlacementNode(child, before, parent);\n\t      var sibling = child.sibling;\n\n\t      while (sibling !== null) {\n\t        insertOrAppendPlacementNode(sibling, before, parent);\n\t        sibling = sibling.sibling;\n\t      }\n\t    }\n\t  }\n\t} // These are tracked on the stack as we recursively traverse a\n\t// deleted subtree.\n\t// TODO: Update these during the whole mutation phase, not just during\n\t// a deletion.\n\n\n\tvar hostParent = null;\n\tvar hostParentIsContainer = false;\n\n\tfunction commitDeletionEffects(root, returnFiber, deletedFiber) {\n\t  if (supportsMutation) {\n\t    // We only have the top Fiber that was deleted but we need to recurse down its\n\t    // children to find all the terminal nodes.\n\t    // Recursively delete all host nodes from the parent, detach refs, clean\n\t    // up mounted layout effects, and call componentWillUnmount.\n\t    // We only need to remove the topmost host child in each branch. But then we\n\t    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n\t    // could split this into two separate traversals functions, where the second\n\t    // one doesn't include any removeChild logic. This is maybe the same\n\t    // function as \"disappearLayoutEffects\" (or whatever that turns into after\n\t    // the layout phase is refactored to use recursion).\n\t    // Before starting, find the nearest host parent on the stack so we know\n\t    // which instance/container to remove the children from.\n\t    // TODO: Instead of searching up the fiber return path on every deletion, we\n\t    // can track the nearest host component on the JS stack as we traverse the\n\t    // tree during the commit phase. This would make insertions faster, too.\n\t    var parent = returnFiber;\n\n\t    findParent: while (parent !== null) {\n\t      switch (parent.tag) {\n\t        case HostComponent:\n\t          {\n\t            hostParent = parent.stateNode;\n\t            hostParentIsContainer = false;\n\t            break findParent;\n\t          }\n\n\t        case HostRoot:\n\t          {\n\t            hostParent = parent.stateNode.containerInfo;\n\t            hostParentIsContainer = true;\n\t            break findParent;\n\t          }\n\n\t        case HostPortal:\n\t          {\n\t            hostParent = parent.stateNode.containerInfo;\n\t            hostParentIsContainer = true;\n\t            break findParent;\n\t          }\n\t      }\n\n\t      parent = parent.return;\n\t    }\n\n\t    if (hostParent === null) {\n\t      throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n\t    }\n\n\t    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n\t    hostParent = null;\n\t    hostParentIsContainer = false;\n\t  } else {\n\t    // Detach refs and call componentWillUnmount() on the whole subtree.\n\t    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n\t  }\n\n\t  detachFiberMutation(deletedFiber);\n\t}\n\n\tfunction recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {\n\t  // TODO: Use a static flag to skip trees that don't have unmount effects\n\t  var child = parent.child;\n\n\t  while (child !== null) {\n\t    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n\t    child = child.sibling;\n\t  }\n\t}\n\n\tfunction commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {\n\t  onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse\n\t  // into their subtree. There are simpler cases in the inner switch\n\t  // that don't modify the stack.\n\n\t  switch (deletedFiber.tag) {\n\t    case HostComponent:\n\t      {\n\t        if (!offscreenSubtreeWasHidden) {\n\t          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n\t        } // Intentional fallthrough to next branch\n\n\t      }\n\t    // eslint-disable-next-line-no-fallthrough\n\n\t    case HostText:\n\t      {\n\t        // We only need to remove the nearest host child. Set the host parent\n\t        // to `null` on the stack to indicate that nested children don't\n\t        // need to be removed.\n\t        if (supportsMutation) {\n\t          var prevHostParent = hostParent;\n\t          var prevHostParentIsContainer = hostParentIsContainer;\n\t          hostParent = null;\n\t          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t          hostParent = prevHostParent;\n\t          hostParentIsContainer = prevHostParentIsContainer;\n\n\t          if (hostParent !== null) {\n\t            // Now that all the child effects have unmounted, we can remove the\n\t            // node from the tree.\n\t            if (hostParentIsContainer) {\n\t              removeChildFromContainer(hostParent, deletedFiber.stateNode);\n\t            } else {\n\t              removeChild(hostParent, deletedFiber.stateNode);\n\t            }\n\t          }\n\t        } else {\n\t          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t        }\n\n\t        return;\n\t      }\n\n\t    case DehydratedFragment:\n\t      {\n\t        // Delete the dehydrated suspense boundary and all of its content.\n\n\n\t        if (supportsMutation) {\n\t          if (hostParent !== null) {\n\t            if (hostParentIsContainer) {\n\t              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);\n\t            } else {\n\t              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);\n\t            }\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case HostPortal:\n\t      {\n\t        if (supportsMutation) {\n\t          // When we go into a portal, it becomes the parent to remove from.\n\t          var _prevHostParent = hostParent;\n\t          var _prevHostParentIsContainer = hostParentIsContainer;\n\t          hostParent = deletedFiber.stateNode.containerInfo;\n\t          hostParentIsContainer = true;\n\t          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t          hostParent = _prevHostParent;\n\t          hostParentIsContainer = _prevHostParentIsContainer;\n\t        } else {\n\t          emptyPortalContainer(deletedFiber);\n\t          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t        }\n\n\t        return;\n\t      }\n\n\t    case FunctionComponent:\n\t    case ForwardRef:\n\t    case MemoComponent:\n\t    case SimpleMemoComponent:\n\t      {\n\t        if (!offscreenSubtreeWasHidden) {\n\t          var updateQueue = deletedFiber.updateQueue;\n\n\t          if (updateQueue !== null) {\n\t            var lastEffect = updateQueue.lastEffect;\n\n\t            if (lastEffect !== null) {\n\t              var firstEffect = lastEffect.next;\n\t              var effect = firstEffect;\n\n\t              do {\n\t                var _effect = effect,\n\t                    destroy = _effect.destroy,\n\t                    tag = _effect.tag;\n\n\t                if (destroy !== undefined) {\n\t                  if ((tag & Insertion) !== NoFlags$1) {\n\t                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n\t                  } else if ((tag & Layout) !== NoFlags$1) {\n\t                    {\n\t                      markComponentLayoutEffectUnmountStarted(deletedFiber);\n\t                    }\n\n\t                    if ( deletedFiber.mode & ProfileMode) {\n\t                      startLayoutEffectTimer();\n\t                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n\t                      recordLayoutEffectDuration(deletedFiber);\n\t                    } else {\n\t                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n\t                    }\n\n\t                    {\n\t                      markComponentLayoutEffectUnmountStopped();\n\t                    }\n\t                  }\n\t                }\n\n\t                effect = effect.next;\n\t              } while (effect !== firstEffect);\n\t            }\n\t          }\n\t        }\n\n\t        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t        return;\n\t      }\n\n\t    case ClassComponent:\n\t      {\n\t        if (!offscreenSubtreeWasHidden) {\n\t          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n\t          var instance = deletedFiber.stateNode;\n\n\t          if (typeof instance.componentWillUnmount === 'function') {\n\t            safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);\n\t          }\n\t        }\n\n\t        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t        return;\n\t      }\n\n\t    case ScopeComponent:\n\t      {\n\n\t        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t        return;\n\t      }\n\n\t    case OffscreenComponent:\n\t      {\n\t        if ( // TODO: Remove this dead flag\n\t         deletedFiber.mode & ConcurrentMode) {\n\t          // If this offscreen component is hidden, we already unmounted it. Before\n\t          // deleting the children, track that it's already unmounted so that we\n\t          // don't attempt to unmount the effects again.\n\t          // TODO: If the tree is hidden, in most cases we should be able to skip\n\t          // over the nested children entirely. An exception is we haven't yet found\n\t          // the topmost host node to delete, which we already track on the stack.\n\t          // But the other case is portals, which need to be detached no matter how\n\t          // deeply they are nested. We should use a subtree flag to track whether a\n\t          // subtree includes a nested portal.\n\t          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n\t          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n\t          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n\t        } else {\n\t          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t        }\n\n\t        break;\n\t      }\n\n\t    default:\n\t      {\n\t        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t        return;\n\t      }\n\t  }\n\t}\n\n\tfunction commitSuspenseCallback(finishedWork) {\n\t  // TODO: Move this to passive phase\n\t  finishedWork.memoizedState;\n\t}\n\n\tfunction commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n\t  if (!supportsHydration) {\n\t    return;\n\t  }\n\n\t  var newState = finishedWork.memoizedState;\n\n\t  if (newState === null) {\n\t    var current = finishedWork.alternate;\n\n\t    if (current !== null) {\n\t      var prevState = current.memoizedState;\n\n\t      if (prevState !== null) {\n\t        var suspenseInstance = prevState.dehydrated;\n\n\t        if (suspenseInstance !== null) {\n\t          commitHydratedSuspenseInstance(suspenseInstance);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction attachSuspenseRetryListeners(finishedWork) {\n\t  // If this boundary just timed out, then it will have a set of wakeables.\n\t  // For each wakeable, attach a listener so that when it resolves, React\n\t  // attempts to re-render the boundary in the primary (pre-timeout) state.\n\t  var wakeables = finishedWork.updateQueue;\n\n\t  if (wakeables !== null) {\n\t    finishedWork.updateQueue = null;\n\t    var retryCache = finishedWork.stateNode;\n\n\t    if (retryCache === null) {\n\t      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n\t    }\n\n\t    wakeables.forEach(function (wakeable) {\n\t      // Memoize using the boundary fiber to prevent redundant listeners.\n\t      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n\n\t      if (!retryCache.has(wakeable)) {\n\t        retryCache.add(wakeable);\n\n\t        {\n\t          if (isDevToolsPresent) {\n\t            if (inProgressLanes !== null && inProgressRoot !== null) {\n\t              // If we have pending work still, associate the original updaters with it.\n\t              restorePendingUpdaters(inProgressRoot, inProgressLanes);\n\t            } else {\n\t              throw Error('Expected finished root and lanes to be set. This is a bug in React.');\n\t            }\n\t          }\n\t        }\n\n\t        wakeable.then(retry, retry);\n\t      }\n\t    });\n\t  }\n\t} // This function detects when a Suspense boundary goes from visible to hidden.\n\tfunction commitMutationEffects(root, finishedWork, committedLanes) {\n\t  inProgressLanes = committedLanes;\n\t  inProgressRoot = root;\n\t  setCurrentFiber(finishedWork);\n\t  commitMutationEffectsOnFiber(finishedWork, root);\n\t  setCurrentFiber(finishedWork);\n\t  inProgressLanes = null;\n\t  inProgressRoot = null;\n\t}\n\n\tfunction recursivelyTraverseMutationEffects(root, parentFiber, lanes) {\n\t  // Deletions effects can be scheduled on any fiber type. They need to happen\n\t  // before the children effects hae fired.\n\t  var deletions = parentFiber.deletions;\n\n\t  if (deletions !== null) {\n\t    for (var i = 0; i < deletions.length; i++) {\n\t      var childToDelete = deletions[i];\n\n\t      try {\n\t        commitDeletionEffects(root, parentFiber, childToDelete);\n\t      } catch (error) {\n\t        captureCommitPhaseError(childToDelete, parentFiber, error);\n\t      }\n\t    }\n\t  }\n\n\t  var prevDebugFiber = getCurrentFiber();\n\n\t  if (parentFiber.subtreeFlags & MutationMask) {\n\t    var child = parentFiber.child;\n\n\t    while (child !== null) {\n\t      setCurrentFiber(child);\n\t      commitMutationEffectsOnFiber(child, root);\n\t      child = child.sibling;\n\t    }\n\t  }\n\n\t  setCurrentFiber(prevDebugFiber);\n\t}\n\n\tfunction commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n\t  var current = finishedWork.alternate;\n\t  var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,\n\t  // because the fiber tag is more specific. An exception is any flag related\n\t  // to reconcilation, because those can be set on all fiber types.\n\n\t  switch (finishedWork.tag) {\n\t    case FunctionComponent:\n\t    case ForwardRef:\n\t    case MemoComponent:\n\t    case SimpleMemoComponent:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Update) {\n\t          try {\n\t            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n\t            commitHookEffectListMount(Insertion | HasEffect, finishedWork);\n\t          } catch (error) {\n\t            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t          } // Layout effects are destroyed during the mutation phase so that all\n\t          // destroy functions for all fibers are called before any create functions.\n\t          // This prevents sibling component effects from interfering with each other,\n\t          // e.g. a destroy function in one component should never override a ref set\n\t          // by a create function in another component during the same commit.\n\n\n\t          if ( finishedWork.mode & ProfileMode) {\n\t            try {\n\t              startLayoutEffectTimer();\n\t              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n\t            } catch (error) {\n\t              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t            }\n\n\t            recordLayoutEffectDuration(finishedWork);\n\t          } else {\n\t            try {\n\t              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n\t            } catch (error) {\n\t              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t            }\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case ClassComponent:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Ref) {\n\t          if (current !== null) {\n\t            safelyDetachRef(current, current.return);\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case HostComponent:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Ref) {\n\t          if (current !== null) {\n\t            safelyDetachRef(current, current.return);\n\t          }\n\t        }\n\n\t        if (supportsMutation) {\n\t          // TODO: ContentReset gets cleared by the children during the commit\n\t          // phase. This is a refactor hazard because it means we must read\n\t          // flags the flags after `commitReconciliationEffects` has already run;\n\t          // the order matters. We should refactor so that ContentReset does not\n\t          // rely on mutating the flag during commit. Like by setting a flag\n\t          // during the render phase instead.\n\t          if (finishedWork.flags & ContentReset) {\n\t            var instance = finishedWork.stateNode;\n\n\t            try {\n\t              resetTextContent(instance);\n\t            } catch (error) {\n\t              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t            }\n\t          }\n\n\t          if (flags & Update) {\n\t            var _instance4 = finishedWork.stateNode;\n\n\t            if (_instance4 != null) {\n\t              // Commit the work prepared earlier.\n\t              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n\t              // as the newProps. The updatePayload will contain the real change in\n\t              // this case.\n\n\t              var oldProps = current !== null ? current.memoizedProps : newProps;\n\t              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n\t              var updatePayload = finishedWork.updateQueue;\n\t              finishedWork.updateQueue = null;\n\n\t              if (updatePayload !== null) {\n\t                try {\n\t                  commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);\n\t                } catch (error) {\n\t                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t                }\n\t              }\n\t            }\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case HostText:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Update) {\n\t          if (supportsMutation) {\n\t            if (finishedWork.stateNode === null) {\n\t              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n\t            }\n\n\t            var textInstance = finishedWork.stateNode;\n\t            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n\t            // as the newProps. The updatePayload will contain the real change in\n\t            // this case.\n\n\t            var oldText = current !== null ? current.memoizedProps : newText;\n\n\t            try {\n\t              commitTextUpdate(textInstance, oldText, newText);\n\t            } catch (error) {\n\t              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t            }\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case HostRoot:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Update) {\n\t          if (supportsMutation && supportsHydration) {\n\t            if (current !== null) {\n\t              var prevRootState = current.memoizedState;\n\n\t              if (prevRootState.isDehydrated) {\n\t                try {\n\t                  commitHydratedContainer(root.containerInfo);\n\t                } catch (error) {\n\t                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t                }\n\t              }\n\t            }\n\t          }\n\n\t          if (supportsPersistence) {\n\t            var containerInfo = root.containerInfo;\n\t            var pendingChildren = root.pendingChildren;\n\n\t            try {\n\t              replaceContainerChildren(containerInfo, pendingChildren);\n\t            } catch (error) {\n\t              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t            }\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case HostPortal:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Update) {\n\t          if (supportsPersistence) {\n\t            var portal = finishedWork.stateNode;\n\t            var _containerInfo = portal.containerInfo;\n\t            var _pendingChildren = portal.pendingChildren;\n\n\t            try {\n\t              replaceContainerChildren(_containerInfo, _pendingChildren);\n\t            } catch (error) {\n\t              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t            }\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case SuspenseComponent:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\t        var offscreenFiber = finishedWork.child;\n\n\t        if (offscreenFiber.flags & Visibility) {\n\t          var offscreenInstance = offscreenFiber.stateNode;\n\t          var newState = offscreenFiber.memoizedState;\n\t          var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can\n\t          // read it during an event\n\n\t          offscreenInstance.isHidden = isHidden;\n\n\t          if (isHidden) {\n\t            var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;\n\n\t            if (!wasHidden) {\n\t              // TODO: Move to passive phase\n\t              markCommitTimeOfFallback();\n\t            }\n\t          }\n\t        }\n\n\t        if (flags & Update) {\n\t          try {\n\t            commitSuspenseCallback(finishedWork);\n\t          } catch (error) {\n\t            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t          }\n\n\t          attachSuspenseRetryListeners(finishedWork);\n\t        }\n\n\t        return;\n\t      }\n\n\t    case OffscreenComponent:\n\t      {\n\t        var _wasHidden = current !== null && current.memoizedState !== null;\n\n\t        if ( // TODO: Remove this dead flag\n\t         finishedWork.mode & ConcurrentMode) {\n\t          // Before committing the children, track on the stack whether this\n\t          // offscreen subtree was already hidden, so that we don't unmount the\n\t          // effects again.\n\t          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n\t          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;\n\t          recursivelyTraverseMutationEffects(root, finishedWork);\n\t          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n\t        } else {\n\t          recursivelyTraverseMutationEffects(root, finishedWork);\n\t        }\n\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Visibility) {\n\t          var _offscreenInstance = finishedWork.stateNode;\n\t          var _newState = finishedWork.memoizedState;\n\n\t          var _isHidden = _newState !== null;\n\n\t          var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can\n\t          // read it during an event\n\n\t          _offscreenInstance.isHidden = _isHidden;\n\n\t          {\n\t            if (_isHidden) {\n\t              if (!_wasHidden) {\n\t                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n\t                  nextEffect = offscreenBoundary;\n\t                  var offscreenChild = offscreenBoundary.child;\n\n\t                  while (offscreenChild !== null) {\n\t                    nextEffect = offscreenChild;\n\t                    disappearLayoutEffects_begin(offscreenChild);\n\t                    offscreenChild = offscreenChild.sibling;\n\t                  }\n\t                }\n\t              }\n\t            }\n\t          }\n\n\t          if (supportsMutation) {\n\t            // TODO: This needs to run whenever there's an insertion or update\n\t            // inside a hidden Offscreen tree.\n\t            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case SuspenseListComponent:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Update) {\n\t          attachSuspenseRetryListeners(finishedWork);\n\t        }\n\n\t        return;\n\t      }\n\n\t    case ScopeComponent:\n\t      {\n\n\t        return;\n\t      }\n\n\t    default:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\t        return;\n\t      }\n\t  }\n\t}\n\n\tfunction commitReconciliationEffects(finishedWork) {\n\t  // Placement effects (insertions, reorders) can be scheduled on any fiber\n\t  // type. They needs to happen after the children effects have fired, but\n\t  // before the effects on this fiber have fired.\n\t  var flags = finishedWork.flags;\n\n\t  if (flags & Placement) {\n\t    try {\n\t      commitPlacement(finishedWork);\n\t    } catch (error) {\n\t      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t    } // Clear the \"placement\" from effect tag so that we know that this is\n\t    // inserted, before any life-cycles like componentDidMount gets called.\n\t    // TODO: findDOMNode doesn't rely on this any more but isMounted does\n\t    // and isMounted is deprecated anyway so we should be able to kill this.\n\n\n\t    finishedWork.flags &= ~Placement;\n\t  }\n\n\t  if (flags & Hydrating) {\n\t    finishedWork.flags &= ~Hydrating;\n\t  }\n\t}\n\n\tfunction commitLayoutEffects(finishedWork, root, committedLanes) {\n\t  inProgressLanes = committedLanes;\n\t  inProgressRoot = root;\n\t  nextEffect = finishedWork;\n\t  commitLayoutEffects_begin(finishedWork, root, committedLanes);\n\t  inProgressLanes = null;\n\t  inProgressRoot = null;\n\t}\n\n\tfunction commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {\n\t  // Suspense layout effects semantics don't change for legacy roots.\n\t  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\t    var firstChild = fiber.child;\n\n\t    if ( fiber.tag === OffscreenComponent && isModernRoot) {\n\t      // Keep track of the current Offscreen stack's state.\n\t      var isHidden = fiber.memoizedState !== null;\n\t      var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n\n\t      if (newOffscreenSubtreeIsHidden) {\n\t        // The Offscreen tree is hidden. Skip over its layout effects.\n\t        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n\t        continue;\n\t      } else {\n\t        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n\t        var current = fiber.alternate;\n\t        var wasHidden = current !== null && current.memoizedState !== null;\n\t        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\n\t        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n\t        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.\n\n\t        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n\t        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n\t        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n\t          // This is the root of a reappearing boundary. Turn its layout effects\n\t          // back on.\n\t          nextEffect = fiber;\n\t          reappearLayoutEffects_begin(fiber);\n\t        }\n\n\t        var child = firstChild;\n\n\t        while (child !== null) {\n\t          nextEffect = child;\n\t          commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.\n\t          root, committedLanes);\n\t          child = child.sibling;\n\t        } // Restore Offscreen state and resume in our-progress traversal.\n\n\n\t        nextEffect = fiber;\n\t        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n\t        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n\t        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n\t        continue;\n\t      }\n\t    }\n\n\t    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n\t      firstChild.return = fiber;\n\t      nextEffect = firstChild;\n\t    } else {\n\t      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n\t    }\n\t  }\n\t}\n\n\tfunction commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\n\t    if ((fiber.flags & LayoutMask) !== NoFlags) {\n\t      var current = fiber.alternate;\n\t      setCurrentFiber(fiber);\n\n\t      try {\n\t        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n\t      } catch (error) {\n\t        captureCommitPhaseError(fiber, fiber.return, error);\n\t      }\n\n\t      resetCurrentFiber();\n\t    }\n\n\t    if (fiber === subtreeRoot) {\n\t      nextEffect = null;\n\t      return;\n\t    }\n\n\t    var sibling = fiber.sibling;\n\n\t    if (sibling !== null) {\n\t      sibling.return = fiber.return;\n\t      nextEffect = sibling;\n\t      return;\n\t    }\n\n\t    nextEffect = fiber.return;\n\t  }\n\t}\n\n\tfunction disappearLayoutEffects_begin(subtreeRoot) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\t    var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n\n\t    switch (fiber.tag) {\n\t      case FunctionComponent:\n\t      case ForwardRef:\n\t      case MemoComponent:\n\t      case SimpleMemoComponent:\n\t        {\n\t          if ( fiber.mode & ProfileMode) {\n\t            try {\n\t              startLayoutEffectTimer();\n\t              commitHookEffectListUnmount(Layout, fiber, fiber.return);\n\t            } finally {\n\t              recordLayoutEffectDuration(fiber);\n\t            }\n\t          } else {\n\t            commitHookEffectListUnmount(Layout, fiber, fiber.return);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case ClassComponent:\n\t        {\n\t          // TODO (Offscreen) Check: flags & RefStatic\n\t          safelyDetachRef(fiber, fiber.return);\n\t          var instance = fiber.stateNode;\n\n\t          if (typeof instance.componentWillUnmount === 'function') {\n\t            safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case HostComponent:\n\t        {\n\t          safelyDetachRef(fiber, fiber.return);\n\t          break;\n\t        }\n\n\t      case OffscreenComponent:\n\t        {\n\t          // Check if this is a\n\t          var isHidden = fiber.memoizedState !== null;\n\n\t          if (isHidden) {\n\t            // Nested Offscreen tree is already hidden. Don't disappear\n\t            // its effects.\n\t            disappearLayoutEffects_complete(subtreeRoot);\n\t            continue;\n\t          }\n\n\t          break;\n\t        }\n\t    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n\n\t    if (firstChild !== null) {\n\t      firstChild.return = fiber;\n\t      nextEffect = firstChild;\n\t    } else {\n\t      disappearLayoutEffects_complete(subtreeRoot);\n\t    }\n\t  }\n\t}\n\n\tfunction disappearLayoutEffects_complete(subtreeRoot) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\n\t    if (fiber === subtreeRoot) {\n\t      nextEffect = null;\n\t      return;\n\t    }\n\n\t    var sibling = fiber.sibling;\n\n\t    if (sibling !== null) {\n\t      sibling.return = fiber.return;\n\t      nextEffect = sibling;\n\t      return;\n\t    }\n\n\t    nextEffect = fiber.return;\n\t  }\n\t}\n\n\tfunction reappearLayoutEffects_begin(subtreeRoot) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\t    var firstChild = fiber.child;\n\n\t    if (fiber.tag === OffscreenComponent) {\n\t      var isHidden = fiber.memoizedState !== null;\n\n\t      if (isHidden) {\n\t        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n\t        reappearLayoutEffects_complete(subtreeRoot);\n\t        continue;\n\t      }\n\t    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n\n\t    if (firstChild !== null) {\n\t      // This node may have been reused from a previous render, so we can't\n\t      // assume its return pointer is correct.\n\t      firstChild.return = fiber;\n\t      nextEffect = firstChild;\n\t    } else {\n\t      reappearLayoutEffects_complete(subtreeRoot);\n\t    }\n\t  }\n\t}\n\n\tfunction reappearLayoutEffects_complete(subtreeRoot) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic\n\n\t    setCurrentFiber(fiber);\n\n\t    try {\n\t      reappearLayoutEffectsOnFiber(fiber);\n\t    } catch (error) {\n\t      captureCommitPhaseError(fiber, fiber.return, error);\n\t    }\n\n\t    resetCurrentFiber();\n\n\t    if (fiber === subtreeRoot) {\n\t      nextEffect = null;\n\t      return;\n\t    }\n\n\t    var sibling = fiber.sibling;\n\n\t    if (sibling !== null) {\n\t      // This node may have been reused from a previous render, so we can't\n\t      // assume its return pointer is correct.\n\t      sibling.return = fiber.return;\n\t      nextEffect = sibling;\n\t      return;\n\t    }\n\n\t    nextEffect = fiber.return;\n\t  }\n\t}\n\n\tfunction commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {\n\t  nextEffect = finishedWork;\n\t  commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);\n\t}\n\n\tfunction commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\t    var firstChild = fiber.child;\n\n\t    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n\t      firstChild.return = fiber;\n\t      nextEffect = firstChild;\n\t    } else {\n\t      commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);\n\t    }\n\t  }\n\t}\n\n\tfunction commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\n\t    if ((fiber.flags & Passive) !== NoFlags) {\n\t      setCurrentFiber(fiber);\n\n\t      try {\n\t        commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);\n\t      } catch (error) {\n\t        captureCommitPhaseError(fiber, fiber.return, error);\n\t      }\n\n\t      resetCurrentFiber();\n\t    }\n\n\t    if (fiber === subtreeRoot) {\n\t      nextEffect = null;\n\t      return;\n\t    }\n\n\t    var sibling = fiber.sibling;\n\n\t    if (sibling !== null) {\n\t      sibling.return = fiber.return;\n\t      nextEffect = sibling;\n\t      return;\n\t    }\n\n\t    nextEffect = fiber.return;\n\t  }\n\t}\n\n\tfunction commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {\n\t  switch (finishedWork.tag) {\n\t    case FunctionComponent:\n\t    case ForwardRef:\n\t    case SimpleMemoComponent:\n\t      {\n\t        if ( finishedWork.mode & ProfileMode) {\n\t          startPassiveEffectTimer();\n\n\t          try {\n\t            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n\t          } finally {\n\t            recordPassiveEffectDuration(finishedWork);\n\t          }\n\t        } else {\n\t          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n\t        }\n\n\t        break;\n\t      }\n\t  }\n\t}\n\n\tfunction commitPassiveUnmountEffects(firstChild) {\n\t  nextEffect = firstChild;\n\t  commitPassiveUnmountEffects_begin();\n\t}\n\n\tfunction commitPassiveUnmountEffects_begin() {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\t    var child = fiber.child;\n\n\t    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n\t      var deletions = fiber.deletions;\n\n\t      if (deletions !== null) {\n\t        for (var i = 0; i < deletions.length; i++) {\n\t          var fiberToDelete = deletions[i];\n\t          nextEffect = fiberToDelete;\n\t          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);\n\t        }\n\n\t        {\n\t          // A fiber was deleted from this parent fiber, but it's still part of\n\t          // the previous (alternate) parent fiber's list of children. Because\n\t          // children are a linked list, an earlier sibling that's still alive\n\t          // will be connected to the deleted fiber via its `alternate`:\n\t          //\n\t          //   live fiber\n\t          //   --alternate--> previous live fiber\n\t          //   --sibling--> deleted fiber\n\t          //\n\t          // We can't disconnect `alternate` on nodes that haven't been deleted\n\t          // yet, but we can disconnect the `sibling` and `child` pointers.\n\t          var previousFiber = fiber.alternate;\n\n\t          if (previousFiber !== null) {\n\t            var detachedChild = previousFiber.child;\n\n\t            if (detachedChild !== null) {\n\t              previousFiber.child = null;\n\n\t              do {\n\t                var detachedSibling = detachedChild.sibling;\n\t                detachedChild.sibling = null;\n\t                detachedChild = detachedSibling;\n\t              } while (detachedChild !== null);\n\t            }\n\t          }\n\t        }\n\n\t        nextEffect = fiber;\n\t      }\n\t    }\n\n\t    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n\t      child.return = fiber;\n\t      nextEffect = child;\n\t    } else {\n\t      commitPassiveUnmountEffects_complete();\n\t    }\n\t  }\n\t}\n\n\tfunction commitPassiveUnmountEffects_complete() {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\n\t    if ((fiber.flags & Passive) !== NoFlags) {\n\t      setCurrentFiber(fiber);\n\t      commitPassiveUnmountOnFiber(fiber);\n\t      resetCurrentFiber();\n\t    }\n\n\t    var sibling = fiber.sibling;\n\n\t    if (sibling !== null) {\n\t      sibling.return = fiber.return;\n\t      nextEffect = sibling;\n\t      return;\n\t    }\n\n\t    nextEffect = fiber.return;\n\t  }\n\t}\n\n\tfunction commitPassiveUnmountOnFiber(finishedWork) {\n\t  switch (finishedWork.tag) {\n\t    case FunctionComponent:\n\t    case ForwardRef:\n\t    case SimpleMemoComponent:\n\t      {\n\t        if ( finishedWork.mode & ProfileMode) {\n\t          startPassiveEffectTimer();\n\t          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n\t          recordPassiveEffectDuration(finishedWork);\n\t        } else {\n\t          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n\t        }\n\n\t        break;\n\t      }\n\t  }\n\t}\n\n\tfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect; // Deletion effects fire in parent -> child order\n\t    // TODO: Check if fiber has a PassiveStatic flag\n\n\t    setCurrentFiber(fiber);\n\t    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n\t    resetCurrentFiber();\n\t    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n\t    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n\n\t    if (child !== null) {\n\t      child.return = fiber;\n\t      nextEffect = child;\n\t    } else {\n\t      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n\t    }\n\t  }\n\t}\n\n\tfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\t    var sibling = fiber.sibling;\n\t    var returnFiber = fiber.return;\n\n\t    {\n\t      // Recursively traverse the entire deleted tree and clean up fiber fields.\n\t      // This is more aggressive than ideal, and the long term goal is to only\n\t      // have to detach the deleted tree at the root.\n\t      detachFiberAfterEffects(fiber);\n\n\t      if (fiber === deletedSubtreeRoot) {\n\t        nextEffect = null;\n\t        return;\n\t      }\n\t    }\n\n\t    if (sibling !== null) {\n\t      sibling.return = returnFiber;\n\t      nextEffect = sibling;\n\t      return;\n\t    }\n\n\t    nextEffect = returnFiber;\n\t  }\n\t}\n\n\tfunction commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n\t  switch (current.tag) {\n\t    case FunctionComponent:\n\t    case ForwardRef:\n\t    case SimpleMemoComponent:\n\t      {\n\t        if ( current.mode & ProfileMode) {\n\t          startPassiveEffectTimer();\n\t          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n\t          recordPassiveEffectDuration(current);\n\t        } else {\n\t          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n\t        }\n\n\t        break;\n\t      }\n\t  }\n\t} // TODO: Reuse reappearLayoutEffects traversal here?\n\n\n\tfunction invokeLayoutEffectMountInDEV(fiber) {\n\t  {\n\t    // We don't need to re-check StrictEffectsMode here.\n\t    // This function is only called if that check has already passed.\n\t    switch (fiber.tag) {\n\t      case FunctionComponent:\n\t      case ForwardRef:\n\t      case SimpleMemoComponent:\n\t        {\n\t          try {\n\t            commitHookEffectListMount(Layout | HasEffect, fiber);\n\t          } catch (error) {\n\t            captureCommitPhaseError(fiber, fiber.return, error);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case ClassComponent:\n\t        {\n\t          var instance = fiber.stateNode;\n\n\t          try {\n\t            instance.componentDidMount();\n\t          } catch (error) {\n\t            captureCommitPhaseError(fiber, fiber.return, error);\n\t          }\n\n\t          break;\n\t        }\n\t    }\n\t  }\n\t}\n\n\tfunction invokePassiveEffectMountInDEV(fiber) {\n\t  {\n\t    // We don't need to re-check StrictEffectsMode here.\n\t    // This function is only called if that check has already passed.\n\t    switch (fiber.tag) {\n\t      case FunctionComponent:\n\t      case ForwardRef:\n\t      case SimpleMemoComponent:\n\t        {\n\t          try {\n\t            commitHookEffectListMount(Passive$1 | HasEffect, fiber);\n\t          } catch (error) {\n\t            captureCommitPhaseError(fiber, fiber.return, error);\n\t          }\n\n\t          break;\n\t        }\n\t    }\n\t  }\n\t}\n\n\tfunction invokeLayoutEffectUnmountInDEV(fiber) {\n\t  {\n\t    // We don't need to re-check StrictEffectsMode here.\n\t    // This function is only called if that check has already passed.\n\t    switch (fiber.tag) {\n\t      case FunctionComponent:\n\t      case ForwardRef:\n\t      case SimpleMemoComponent:\n\t        {\n\t          try {\n\t            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);\n\t          } catch (error) {\n\t            captureCommitPhaseError(fiber, fiber.return, error);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case ClassComponent:\n\t        {\n\t          var instance = fiber.stateNode;\n\n\t          if (typeof instance.componentWillUnmount === 'function') {\n\t            safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n\t          }\n\n\t          break;\n\t        }\n\t    }\n\t  }\n\t}\n\n\tfunction invokePassiveEffectUnmountInDEV(fiber) {\n\t  {\n\t    // We don't need to re-check StrictEffectsMode here.\n\t    // This function is only called if that check has already passed.\n\t    switch (fiber.tag) {\n\t      case FunctionComponent:\n\t      case ForwardRef:\n\t      case SimpleMemoComponent:\n\t        {\n\t          try {\n\t            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);\n\t          } catch (error) {\n\t            captureCommitPhaseError(fiber, fiber.return, error);\n\t          }\n\t        }\n\t    }\n\t  }\n\t}\n\n\tvar COMPONENT_TYPE = 0;\n\tvar HAS_PSEUDO_CLASS_TYPE = 1;\n\tvar ROLE_TYPE = 2;\n\tvar TEST_NAME_TYPE = 3;\n\tvar TEXT_TYPE = 4;\n\n\tif (typeof Symbol === 'function' && Symbol.for) {\n\t  var symbolFor = Symbol.for;\n\t  COMPONENT_TYPE = symbolFor('selector.component');\n\t  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n\t  ROLE_TYPE = symbolFor('selector.role');\n\t  TEST_NAME_TYPE = symbolFor('selector.test_id');\n\t  TEXT_TYPE = symbolFor('selector.text');\n\t}\n\n\tfunction createComponentSelector(component) {\n\t  return {\n\t    $$typeof: COMPONENT_TYPE,\n\t    value: component\n\t  };\n\t}\n\tfunction createHasPseudoClassSelector(selectors) {\n\t  return {\n\t    $$typeof: HAS_PSEUDO_CLASS_TYPE,\n\t    value: selectors\n\t  };\n\t}\n\tfunction createRoleSelector(role) {\n\t  return {\n\t    $$typeof: ROLE_TYPE,\n\t    value: role\n\t  };\n\t}\n\tfunction createTextSelector(text) {\n\t  return {\n\t    $$typeof: TEXT_TYPE,\n\t    value: text\n\t  };\n\t}\n\tfunction createTestNameSelector(id) {\n\t  return {\n\t    $$typeof: TEST_NAME_TYPE,\n\t    value: id\n\t  };\n\t}\n\n\tfunction findFiberRootForHostRoot(hostRoot) {\n\t  var maybeFiber = getInstanceFromNode(hostRoot);\n\n\t  if (maybeFiber != null) {\n\t    if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {\n\t      throw new Error('Invalid host root specified. Should be either a React container or a node with a testname attribute.');\n\t    }\n\n\t    return maybeFiber;\n\t  } else {\n\t    var fiberRoot = findFiberRoot(hostRoot);\n\n\t    if (fiberRoot === null) {\n\t      throw new Error('Could not find React container within specified host subtree.');\n\t    } // The Flow type for FiberRoot is a little funky.\n\t    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n\n\n\t    return fiberRoot.stateNode.current;\n\t  }\n\t}\n\n\tfunction matchSelector(fiber, selector) {\n\t  switch (selector.$$typeof) {\n\t    case COMPONENT_TYPE:\n\t      if (fiber.type === selector.value) {\n\t        return true;\n\t      }\n\n\t      break;\n\n\t    case HAS_PSEUDO_CLASS_TYPE:\n\t      return hasMatchingPaths(fiber, selector.value);\n\n\t    case ROLE_TYPE:\n\t      if (fiber.tag === HostComponent) {\n\t        var node = fiber.stateNode;\n\n\t        if (matchAccessibilityRole(node, selector.value)) {\n\t          return true;\n\t        }\n\t      }\n\n\t      break;\n\n\t    case TEXT_TYPE:\n\t      if (fiber.tag === HostComponent || fiber.tag === HostText) {\n\t        var textContent = getTextContent(fiber);\n\n\t        if (textContent !== null && textContent.indexOf(selector.value) >= 0) {\n\t          return true;\n\t        }\n\t      }\n\n\t      break;\n\n\t    case TEST_NAME_TYPE:\n\t      if (fiber.tag === HostComponent) {\n\t        var dataTestID = fiber.memoizedProps['data-testname'];\n\n\t        if (typeof dataTestID === 'string' && dataTestID.toLowerCase() === selector.value.toLowerCase()) {\n\t          return true;\n\t        }\n\t      }\n\n\t      break;\n\n\t    default:\n\t      throw new Error('Invalid selector type specified.');\n\t  }\n\n\t  return false;\n\t}\n\n\tfunction selectorToString(selector) {\n\t  switch (selector.$$typeof) {\n\t    case COMPONENT_TYPE:\n\t      var displayName = getComponentNameFromType(selector.value) || 'Unknown';\n\t      return \"<\" + displayName + \">\";\n\n\t    case HAS_PSEUDO_CLASS_TYPE:\n\t      return \":has(\" + (selectorToString(selector) || '') + \")\";\n\n\t    case ROLE_TYPE:\n\t      return \"[role=\\\"\" + selector.value + \"\\\"]\";\n\n\t    case TEXT_TYPE:\n\t      return \"\\\"\" + selector.value + \"\\\"\";\n\n\t    case TEST_NAME_TYPE:\n\t      return \"[data-testname=\\\"\" + selector.value + \"\\\"]\";\n\n\t    default:\n\t      throw new Error('Invalid selector type specified.');\n\t  }\n\t}\n\n\tfunction findPaths(root, selectors) {\n\t  var matchingFibers = [];\n\t  var stack = [root, 0];\n\t  var index = 0;\n\n\t  while (index < stack.length) {\n\t    var fiber = stack[index++];\n\t    var selectorIndex = stack[index++];\n\t    var selector = selectors[selectorIndex];\n\n\t    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n\t      continue;\n\t    } else {\n\t      while (selector != null && matchSelector(fiber, selector)) {\n\t        selectorIndex++;\n\t        selector = selectors[selectorIndex];\n\t      }\n\t    }\n\n\t    if (selectorIndex === selectors.length) {\n\t      matchingFibers.push(fiber);\n\t    } else {\n\t      var child = fiber.child;\n\n\t      while (child !== null) {\n\t        stack.push(child, selectorIndex);\n\t        child = child.sibling;\n\t      }\n\t    }\n\t  }\n\n\t  return matchingFibers;\n\t} // Same as findPaths but with eager bailout on first match\n\n\n\tfunction hasMatchingPaths(root, selectors) {\n\t  var stack = [root, 0];\n\t  var index = 0;\n\n\t  while (index < stack.length) {\n\t    var fiber = stack[index++];\n\t    var selectorIndex = stack[index++];\n\t    var selector = selectors[selectorIndex];\n\n\t    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n\t      continue;\n\t    } else {\n\t      while (selector != null && matchSelector(fiber, selector)) {\n\t        selectorIndex++;\n\t        selector = selectors[selectorIndex];\n\t      }\n\t    }\n\n\t    if (selectorIndex === selectors.length) {\n\t      return true;\n\t    } else {\n\t      var child = fiber.child;\n\n\t      while (child !== null) {\n\t        stack.push(child, selectorIndex);\n\t        child = child.sibling;\n\t      }\n\t    }\n\t  }\n\n\t  return false;\n\t}\n\n\tfunction findAllNodes(hostRoot, selectors) {\n\t  if (!supportsTestSelectors) {\n\t    throw new Error('Test selector API is not supported by this renderer.');\n\t  }\n\n\t  var root = findFiberRootForHostRoot(hostRoot);\n\t  var matchingFibers = findPaths(root, selectors);\n\t  var instanceRoots = [];\n\t  var stack = Array.from(matchingFibers);\n\t  var index = 0;\n\n\t  while (index < stack.length) {\n\t    var node = stack[index++];\n\n\t    if (node.tag === HostComponent) {\n\t      if (isHiddenSubtree(node)) {\n\t        continue;\n\t      }\n\n\t      instanceRoots.push(node.stateNode);\n\t    } else {\n\t      var child = node.child;\n\n\t      while (child !== null) {\n\t        stack.push(child);\n\t        child = child.sibling;\n\t      }\n\t    }\n\t  }\n\n\t  return instanceRoots;\n\t}\n\tfunction getFindAllNodesFailureDescription(hostRoot, selectors) {\n\t  if (!supportsTestSelectors) {\n\t    throw new Error('Test selector API is not supported by this renderer.');\n\t  }\n\n\t  var root = findFiberRootForHostRoot(hostRoot);\n\t  var maxSelectorIndex = 0;\n\t  var matchedNames = []; // The logic of this loop should be kept in sync with findPaths()\n\n\t  var stack = [root, 0];\n\t  var index = 0;\n\n\t  while (index < stack.length) {\n\t    var fiber = stack[index++];\n\t    var selectorIndex = stack[index++];\n\t    var selector = selectors[selectorIndex];\n\n\t    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n\t      continue;\n\t    } else if (matchSelector(fiber, selector)) {\n\t      matchedNames.push(selectorToString(selector));\n\t      selectorIndex++;\n\n\t      if (selectorIndex > maxSelectorIndex) {\n\t        maxSelectorIndex = selectorIndex;\n\t      }\n\t    }\n\n\t    if (selectorIndex < selectors.length) {\n\t      var child = fiber.child;\n\n\t      while (child !== null) {\n\t        stack.push(child, selectorIndex);\n\t        child = child.sibling;\n\t      }\n\t    }\n\t  }\n\n\t  if (maxSelectorIndex < selectors.length) {\n\t    var unmatchedNames = [];\n\n\t    for (var i = maxSelectorIndex; i < selectors.length; i++) {\n\t      unmatchedNames.push(selectorToString(selectors[i]));\n\t    }\n\n\t    return 'findAllNodes was able to match part of the selector:\\n' + (\"  \" + matchedNames.join(' > ') + \"\\n\\n\") + 'No matching component was found for:\\n' + (\"  \" + unmatchedNames.join(' > '));\n\t  }\n\n\t  return null;\n\t}\n\tfunction findBoundingRects(hostRoot, selectors) {\n\t  if (!supportsTestSelectors) {\n\t    throw new Error('Test selector API is not supported by this renderer.');\n\t  }\n\n\t  var instanceRoots = findAllNodes(hostRoot, selectors);\n\t  var boundingRects = [];\n\n\t  for (var i = 0; i < instanceRoots.length; i++) {\n\t    boundingRects.push(getBoundingRect(instanceRoots[i]));\n\t  }\n\n\t  for (var _i = boundingRects.length - 1; _i > 0; _i--) {\n\t    var targetRect = boundingRects[_i];\n\t    var targetLeft = targetRect.x;\n\t    var targetRight = targetLeft + targetRect.width;\n\t    var targetTop = targetRect.y;\n\t    var targetBottom = targetTop + targetRect.height;\n\n\t    for (var j = _i - 1; j >= 0; j--) {\n\t      if (_i !== j) {\n\t        var otherRect = boundingRects[j];\n\t        var otherLeft = otherRect.x;\n\t        var otherRight = otherLeft + otherRect.width;\n\t        var otherTop = otherRect.y;\n\t        var otherBottom = otherTop + otherRect.height; // Merging all rects to the minimums set would be complicated,\n\t        // but we can handle the most common cases:\n\t        // 1. completely overlapping rects\n\t        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n\t        //\n\t        // Even given the above constraints,\n\t        // we still won't end up with the fewest possible rects without doing multiple passes,\n\t        // but it's good enough for this purpose.\n\n\t        if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {\n\t          // Complete overlapping rects; remove the inner one.\n\t          boundingRects.splice(_i, 1);\n\t          break;\n\t        } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {\n\t          // Adjacent vertical rects; merge them.\n\t          if (otherTop > targetTop) {\n\t            otherRect.height += otherTop - targetTop;\n\t            otherRect.y = targetTop;\n\t          }\n\n\t          if (otherBottom < targetBottom) {\n\t            otherRect.height = targetBottom - otherTop;\n\t          }\n\n\t          boundingRects.splice(_i, 1);\n\t          break;\n\t        } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {\n\t          // Adjacent horizontal rects; merge them.\n\t          if (otherLeft > targetLeft) {\n\t            otherRect.width += otherLeft - targetLeft;\n\t            otherRect.x = targetLeft;\n\t          }\n\n\t          if (otherRight < targetRight) {\n\t            otherRect.width = targetRight - otherLeft;\n\t          }\n\n\t          boundingRects.splice(_i, 1);\n\t          break;\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  return boundingRects;\n\t}\n\tfunction focusWithin(hostRoot, selectors) {\n\t  if (!supportsTestSelectors) {\n\t    throw new Error('Test selector API is not supported by this renderer.');\n\t  }\n\n\t  var root = findFiberRootForHostRoot(hostRoot);\n\t  var matchingFibers = findPaths(root, selectors);\n\t  var stack = Array.from(matchingFibers);\n\t  var index = 0;\n\n\t  while (index < stack.length) {\n\t    var fiber = stack[index++];\n\n\t    if (isHiddenSubtree(fiber)) {\n\t      continue;\n\t    }\n\n\t    if (fiber.tag === HostComponent) {\n\t      var node = fiber.stateNode;\n\n\t      if (setFocusIfFocusable(node)) {\n\t        return true;\n\t      }\n\t    }\n\n\t    var child = fiber.child;\n\n\t    while (child !== null) {\n\t      stack.push(child);\n\t      child = child.sibling;\n\t    }\n\t  }\n\n\t  return false;\n\t}\n\tvar commitHooks = [];\n\tfunction onCommitRoot$1() {\n\t  if (supportsTestSelectors) {\n\t    commitHooks.forEach(function (commitHook) {\n\t      return commitHook();\n\t    });\n\t  }\n\t}\n\tfunction observeVisibleRects(hostRoot, selectors, callback, options) {\n\t  if (!supportsTestSelectors) {\n\t    throw new Error('Test selector API is not supported by this renderer.');\n\t  }\n\n\t  var instanceRoots = findAllNodes(hostRoot, selectors);\n\n\t  var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options),\n\t      disconnect = _setupIntersectionObs.disconnect,\n\t      observe = _setupIntersectionObs.observe,\n\t      unobserve = _setupIntersectionObs.unobserve; // When React mutates the host environment, we may need to change what we're listening to.\n\n\n\t  var commitHook = function () {\n\t    var nextInstanceRoots = findAllNodes(hostRoot, selectors);\n\t    instanceRoots.forEach(function (target) {\n\t      if (nextInstanceRoots.indexOf(target) < 0) {\n\t        unobserve(target);\n\t      }\n\t    });\n\t    nextInstanceRoots.forEach(function (target) {\n\t      if (instanceRoots.indexOf(target) < 0) {\n\t        observe(target);\n\t      }\n\t    });\n\t  };\n\n\t  commitHooks.push(commitHook);\n\t  return {\n\t    disconnect: function () {\n\t      // Stop listening for React mutations:\n\t      var index = commitHooks.indexOf(commitHook);\n\n\t      if (index >= 0) {\n\t        commitHooks.splice(index, 1);\n\t      } // Disconnect the host observer:\n\n\n\t      disconnect();\n\t    }\n\t  };\n\t}\n\n\tvar ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\n\tfunction isLegacyActEnvironment(fiber) {\n\t  {\n\t    // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n\t    // act environment whenever `jest` is defined, but you can still turn off\n\t    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n\t    // to false.\n\t    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n\t    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest\n\n\t    var jestIsDefined = typeof jest !== 'undefined';\n\t    return warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false;\n\t  }\n\t}\n\tfunction isConcurrentActEnvironment() {\n\t  {\n\t    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n\t    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;\n\n\t    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n\t      // TODO: Include link to relevant documentation page.\n\t      error('The current testing environment is not configured to support ' + 'act(...)');\n\t    }\n\n\t    return isReactActEnvironmentGlobal;\n\t  }\n\t}\n\n\tvar ceil = Math.ceil;\n\tvar ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,\n\t    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,\n\t    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,\n\t    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\n\tvar NoContext =\n\t/*             */\n\t0;\n\tvar BatchedContext =\n\t/*               */\n\t1;\n\tvar RenderContext =\n\t/*                */\n\t2;\n\tvar CommitContext =\n\t/*                */\n\t4;\n\tvar RootInProgress = 0;\n\tvar RootFatalErrored = 1;\n\tvar RootErrored = 2;\n\tvar RootSuspended = 3;\n\tvar RootSuspendedWithDelay = 4;\n\tvar RootCompleted = 5;\n\tvar RootDidNotComplete = 6; // Describes where we are in the React execution stack\n\n\tvar executionContext = NoContext; // The root we're working on\n\n\tvar workInProgressRoot = null; // The fiber we're working on\n\n\tvar workInProgress = null; // The lanes we're rendering\n\n\tvar workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree\n\t// This is a superset of the lanes we started working on at the root. The only\n\t// case where it's different from `workInProgressRootRenderLanes` is when we\n\t// enter a subtree that is hidden and needs to be unhidden: Suspense and\n\t// Offscreen component.\n\t//\n\t// Most things in the work loop should deal with workInProgressRootRenderLanes.\n\t// Most things in begin/complete phases should deal with subtreeRenderLanes.\n\n\tvar subtreeRenderLanes = NoLanes;\n\tvar subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.\n\n\tvar workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\n\n\tvar workInProgressRootFatalError = null; // \"Included\" lanes refer to lanes that were worked on during this render. It's\n\t// includes unprocessed updates, not work in bailed out children.\n\n\tvar workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\n\tvar workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n\n\tvar workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.\n\n\tvar workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n\t// We will log them once the tree commits.\n\n\tvar workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train\n\t// model where we don't commit new loading states in too quick succession.\n\n\tvar globalMostRecentFallbackTime = 0;\n\tvar FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering\n\t// more and prefer CPU suspense heuristics instead.\n\n\tvar workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n\t// suspense heuristics and opt out of rendering more content.\n\n\tvar RENDER_TIMEOUT_MS = 500;\n\tvar workInProgressTransitions = null;\n\n\tfunction resetRenderTimer() {\n\t  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n\t}\n\n\tfunction getRenderTargetTime() {\n\t  return workInProgressRootRenderTargetTime;\n\t}\n\tvar hasUncaughtError = false;\n\tvar firstUncaughtError = null;\n\tvar legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;\n\tvar rootDoesHavePassiveEffects = false;\n\tvar rootWithPendingPassiveEffects = null;\n\tvar pendingPassiveEffectsLanes = NoLanes;\n\tvar pendingPassiveProfilerEffects = [];\n\tvar pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates\n\n\tvar NESTED_UPDATE_LIMIT = 50;\n\tvar nestedUpdateCount = 0;\n\tvar rootWithNestedUpdates = null;\n\tvar isFlushingPassiveEffects = false;\n\tvar didScheduleUpdateDuringPassiveEffects = false;\n\tvar NESTED_PASSIVE_UPDATE_LIMIT = 50;\n\tvar nestedPassiveUpdateCount = 0;\n\tvar rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their\n\t// event times as simultaneous, even if the actual clock time has advanced\n\t// between the first and second call.\n\n\tvar currentEventTime = NoTimestamp;\n\tvar currentEventTransitionLane = NoLanes;\n\tvar isRunningInsertionEffect = false;\n\tfunction getWorkInProgressRoot() {\n\t  return workInProgressRoot;\n\t}\n\tfunction requestEventTime() {\n\t  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n\t    // We're inside React, so it's fine to read the actual time.\n\t    return now();\n\t  } // We're not inside React, so we may be in the middle of a browser event.\n\n\n\t  if (currentEventTime !== NoTimestamp) {\n\t    // Use the same start time for all updates until we enter React again.\n\t    return currentEventTime;\n\t  } // This is the first update since React yielded. Compute a new start time.\n\n\n\t  currentEventTime = now();\n\t  return currentEventTime;\n\t}\n\tfunction requestUpdateLane(fiber) {\n\t  // Special cases\n\t  var mode = fiber.mode;\n\n\t  if ((mode & ConcurrentMode) === NoMode) {\n\t    return SyncLane;\n\t  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n\t    // This is a render phase update. These are not officially supported. The\n\t    // old behavior is to give this the same \"thread\" (lanes) as\n\t    // whatever is currently rendering. So if you call `setState` on a component\n\t    // that happens later in the same render, it will flush. Ideally, we want to\n\t    // remove the special case and treat them as if they came from an\n\t    // interleaved event. Regardless, this pattern is not officially supported.\n\t    // This behavior is only a fallback. The flag only exists until we can roll\n\t    // out the setState warning, since existing code might accidentally rely on\n\t    // the current behavior.\n\t    return pickArbitraryLane(workInProgressRootRenderLanes);\n\t  }\n\n\t  var isTransition = requestCurrentTransition() !== NoTransition;\n\n\t  if (isTransition) {\n\t    if ( ReactCurrentBatchConfig$2.transition !== null) {\n\t      var transition = ReactCurrentBatchConfig$2.transition;\n\n\t      if (!transition._updatedFibers) {\n\t        transition._updatedFibers = new Set();\n\t      }\n\n\t      transition._updatedFibers.add(fiber);\n\t    } // The algorithm for assigning an update to a lane should be stable for all\n\t    // updates at the same priority within the same event. To do this, the\n\t    // inputs to the algorithm must be the same.\n\t    //\n\t    // The trick we use is to cache the first of each of these inputs within an\n\t    // event. Then reset the cached values once we can be sure the event is\n\t    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n\n\n\t    if (currentEventTransitionLane === NoLane) {\n\t      // All transitions within the same event are assigned the same lane.\n\t      currentEventTransitionLane = claimNextTransitionLane();\n\t    }\n\n\t    return currentEventTransitionLane;\n\t  } // Updates originating inside certain React methods, like flushSync, have\n\t  // their priority set by tracking it with a context variable.\n\t  //\n\t  // The opaque type returned by the host config is internally a lane, so we can\n\t  // use that directly.\n\t  // TODO: Move this type conversion to the event priority module.\n\n\n\t  var updateLane = getCurrentUpdatePriority();\n\n\t  if (updateLane !== NoLane) {\n\t    return updateLane;\n\t  } // This update originated outside React. Ask the host environment for an\n\t  // appropriate priority, based on the type of event.\n\t  //\n\t  // The opaque type returned by the host config is internally a lane, so we can\n\t  // use that directly.\n\t  // TODO: Move this type conversion to the event priority module.\n\n\n\t  var eventLane = getCurrentEventPriority();\n\t  return eventLane;\n\t}\n\n\tfunction requestRetryLane(fiber) {\n\t  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n\t  // \"retries\" — a special update that attempts to flip a Suspense boundary\n\t  // from its placeholder state to its primary/resolved state.\n\t  // Special cases\n\t  var mode = fiber.mode;\n\n\t  if ((mode & ConcurrentMode) === NoMode) {\n\t    return SyncLane;\n\t  }\n\n\t  return claimNextRetryLane();\n\t}\n\n\tfunction scheduleUpdateOnFiber(root, fiber, lane, eventTime) {\n\t  checkForNestedUpdates();\n\n\t  {\n\t    if (isRunningInsertionEffect) {\n\t      error('useInsertionEffect must not schedule updates.');\n\t    }\n\t  }\n\n\t  {\n\t    if (isFlushingPassiveEffects) {\n\t      didScheduleUpdateDuringPassiveEffects = true;\n\t    }\n\t  } // Mark that the root has a pending update.\n\n\n\t  markRootUpdated(root, lane, eventTime);\n\n\t  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n\t    // This update was dispatched during the render phase. This is a mistake\n\t    // if the update originates from user space (with the exception of local\n\t    // hook updates, which are handled differently and don't reach this\n\t    // function), but there are some internal React features that use this as\n\t    // an implementation detail, like selective hydration.\n\t    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n\t  } else {\n\t    // This is a normal update, scheduled from outside the render phase. For\n\t    // example, during an input event.\n\t    {\n\t      if (isDevToolsPresent) {\n\t        addFiberToLanesMap(root, fiber, lane);\n\t      }\n\t    }\n\n\t    warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n\t    if (root === workInProgressRoot) {\n\t      // Received an update to a tree that's in the middle of rendering. Mark\n\t      // that there was an interleaved update work on this root. Unless the\n\t      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n\t      // phase update. In that case, we don't treat render phase updates as if\n\t      // they were interleaved, for backwards compat reasons.\n\t      if ( (executionContext & RenderContext) === NoContext) {\n\t        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n\t      }\n\n\t      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n\t        // The root already suspended with a delay, which means this render\n\t        // definitely won't finish. Since we have a new update, let's mark it as\n\t        // suspended now, right before marking the incoming update. This has the\n\t        // effect of interrupting the current render and switching to the update.\n\t        // TODO: Make sure this doesn't override pings that happen while we've\n\t        // already started rendering.\n\t        markRootSuspended$1(root, workInProgressRootRenderLanes);\n\t      }\n\t    }\n\n\t    ensureRootIsScheduled(root, eventTime);\n\n\t    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n\t    !( ReactCurrentActQueue$1.isBatchingLegacy)) {\n\t      // Flush the synchronous work now, unless we're already working or inside\n\t      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n\t      // scheduleCallbackForFiber to preserve the ability to schedule a callback\n\t      // without immediately flushing it. We only do this for user-initiated\n\t      // updates, to preserve historical behavior of legacy mode.\n\t      resetRenderTimer();\n\t      flushSyncCallbacksOnlyInLegacyMode();\n\t    }\n\t  }\n\t}\n\tfunction scheduleInitialHydrationOnRoot(root, lane, eventTime) {\n\t  // This is a special fork of scheduleUpdateOnFiber that is only used to\n\t  // schedule the initial hydration of a root that has just been created. Most\n\t  // of the stuff in scheduleUpdateOnFiber can be skipped.\n\t  //\n\t  // The main reason for this separate path, though, is to distinguish the\n\t  // initial children from subsequent updates. In fully client-rendered roots\n\t  // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n\t  // updates, but hydration roots are special because the initial render must\n\t  // match what was rendered on the server.\n\t  var current = root.current;\n\t  current.lanes = lane;\n\t  markRootUpdated(root, lane, eventTime);\n\t  ensureRootIsScheduled(root, eventTime);\n\t}\n\tfunction isUnsafeClassRenderPhaseUpdate(fiber) {\n\t  // Check if this is a render phase update. Only called by class components,\n\t  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n\t  return (// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We\n\t    // decided not to enable it.\n\t     (executionContext & RenderContext) !== NoContext\n\t  );\n\t} // Use this function to schedule a task for a root. There's only one task per\n\t// root; if a task was already scheduled, we'll check to make sure the priority\n\t// of the existing task is the same as the priority of the next level that the\n\t// root has work on. This function is called on every update, and right before\n\t// exiting a task.\n\n\tfunction ensureRootIsScheduled(root, currentTime) {\n\t  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as\n\t  // expired so we know to work on those next.\n\n\t  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n\t  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n\t  if (nextLanes === NoLanes) {\n\t    // Special case: There's nothing to work on.\n\t    if (existingCallbackNode !== null) {\n\t      cancelCallback$1(existingCallbackNode);\n\t    }\n\n\t    root.callbackNode = null;\n\t    root.callbackPriority = NoLane;\n\t    return;\n\t  } // We use the highest priority lane to represent the priority of the callback.\n\n\n\t  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.\n\n\t  var existingCallbackPriority = root.callbackPriority;\n\n\t  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\n\t  // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n\t  // on the `act` queue.\n\t  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {\n\t    {\n\t      // If we're going to re-use an existing task, it needs to exist.\n\t      // Assume that discrete update microtasks are non-cancellable and null.\n\t      // TODO: Temporary until we confirm this warning is not fired.\n\t      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {\n\t        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');\n\t      }\n\t    } // The priority hasn't changed. We can reuse the existing task. Exit.\n\n\n\t    return;\n\t  }\n\n\t  if (existingCallbackNode != null) {\n\t    // Cancel the existing callback. We'll schedule a new one below.\n\t    cancelCallback$1(existingCallbackNode);\n\t  } // Schedule a new callback.\n\n\n\t  var newCallbackNode;\n\n\t  if (newCallbackPriority === SyncLane) {\n\t    // Special case: Sync React callbacks are scheduled on a special\n\t    // internal queue\n\t    if (root.tag === LegacyRoot) {\n\t      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {\n\t        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;\n\t      }\n\n\t      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n\t    } else {\n\t      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n\t    }\n\n\t    if (supportsMicrotasks) {\n\t      // Flush the queue in a microtask.\n\t      if ( ReactCurrentActQueue$1.current !== null) {\n\t        // Inside `act`, use our internal `act` queue so that these get flushed\n\t        // at the end of the current scope even when using the sync version\n\t        // of `act`.\n\t        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);\n\t      } else {\n\t        scheduleMicrotask(function () {\n\t          // In Safari, appending an iframe forces microtasks to run.\n\t          // https://github.com/facebook/react/issues/22459\n\t          // We don't support running callbacks in the middle of render\n\t          // or commit so we need to check against that.\n\t          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n\t            // Note that this would still prematurely flush the callbacks\n\t            // if this happens outside render or commit phase (e.g. in an event).\n\t            flushSyncCallbacks();\n\t          }\n\t        });\n\t      }\n\t    } else {\n\t      // Flush the queue in an Immediate task.\n\t      scheduleCallback$1(ImmediatePriority, flushSyncCallbacks);\n\t    }\n\n\t    newCallbackNode = null;\n\t  } else {\n\t    var schedulerPriorityLevel;\n\n\t    switch (lanesToEventPriority(nextLanes)) {\n\t      case DiscreteEventPriority:\n\t        schedulerPriorityLevel = ImmediatePriority;\n\t        break;\n\n\t      case ContinuousEventPriority:\n\t        schedulerPriorityLevel = UserBlockingPriority;\n\t        break;\n\n\t      case DefaultEventPriority:\n\t        schedulerPriorityLevel = NormalPriority;\n\t        break;\n\n\t      case IdleEventPriority:\n\t        schedulerPriorityLevel = IdlePriority;\n\t        break;\n\n\t      default:\n\t        schedulerPriorityLevel = NormalPriority;\n\t        break;\n\t    }\n\n\t    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n\t  }\n\n\t  root.callbackPriority = newCallbackPriority;\n\t  root.callbackNode = newCallbackNode;\n\t} // This is the entry point for every concurrent task, i.e. anything that\n\t// goes through Scheduler.\n\n\n\tfunction performConcurrentWorkOnRoot(root, didTimeout) {\n\t  {\n\t    resetNestedUpdateFlag();\n\t  } // Since we know we're in a React event, we can clear the current\n\t  // event time. The next update will compute a new event time.\n\n\n\t  currentEventTime = NoTimestamp;\n\t  currentEventTransitionLane = NoLanes;\n\n\t  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n\t    throw new Error('Should not already be working.');\n\t  } // Flush any pending passive effects before deciding which lanes to work on,\n\t  // in case they schedule additional work.\n\n\n\t  var originalCallbackNode = root.callbackNode;\n\t  var didFlushPassiveEffects = flushPassiveEffects();\n\n\t  if (didFlushPassiveEffects) {\n\t    // Something in the passive effect phase may have canceled the current task.\n\t    // Check if the task node for this root was changed.\n\t    if (root.callbackNode !== originalCallbackNode) {\n\t      // The current task was canceled. Exit. We don't need to call\n\t      // `ensureRootIsScheduled` because the check above implies either that\n\t      // there's a new task, or that there's no remaining work on this root.\n\t      return null;\n\t    }\n\t  } // Determine the next lanes to work on, using the fields stored\n\t  // on the root.\n\n\n\t  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n\t  if (lanes === NoLanes) {\n\t    // Defensive coding. This is never expected to happen.\n\t    return null;\n\t  } // We disable time-slicing in some cases: if the work has been CPU-bound\n\t  // for too long (\"expired\" work, to prevent starvation), or we're in\n\t  // sync-updates-by-default mode.\n\t  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n\t  // bug we're still investigating. Once the bug in Scheduler is fixed,\n\t  // we can remove this, since we track expiration ourselves.\n\n\n\t  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);\n\t  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n\n\t  if (exitStatus !== RootInProgress) {\n\t    if (exitStatus === RootErrored) {\n\t      // If something threw an error, try rendering one more time. We'll\n\t      // render synchronously to block concurrent data mutations, and we'll\n\t      // includes all pending updates are included. If it still fails after\n\t      // the second attempt, we'll give up and commit the resulting tree.\n\t      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n\t      if (errorRetryLanes !== NoLanes) {\n\t        lanes = errorRetryLanes;\n\t        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n\t      }\n\t    }\n\n\t    if (exitStatus === RootFatalErrored) {\n\t      var fatalError = workInProgressRootFatalError;\n\t      prepareFreshStack(root, NoLanes);\n\t      markRootSuspended$1(root, lanes);\n\t      ensureRootIsScheduled(root, now());\n\t      throw fatalError;\n\t    }\n\n\t    if (exitStatus === RootDidNotComplete) {\n\t      // The render unwound without completing the tree. This happens in special\n\t      // cases where need to exit the current render without producing a\n\t      // consistent tree or committing.\n\t      //\n\t      // This should only happen during a concurrent render, not a discrete or\n\t      // synchronous update. We should have already checked for this when we\n\t      // unwound the stack.\n\t      markRootSuspended$1(root, lanes);\n\t    } else {\n\t      // The render completed.\n\t      // Check if this render may have yielded to a concurrent event, and if so,\n\t      // confirm that any newly rendered stores are consistent.\n\t      // TODO: It's possible that even a concurrent render may never have yielded\n\t      // to the main thread, if it was fast enough, or if it expired. We could\n\t      // skip the consistency check in that case, too.\n\t      var renderWasConcurrent = !includesBlockingLane(root, lanes);\n\t      var finishedWork = root.current.alternate;\n\n\t      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n\t        // A store was mutated in an interleaved event. Render again,\n\t        // synchronously, to block further mutations.\n\t        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw\n\n\t        if (exitStatus === RootErrored) {\n\t          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n\t          if (_errorRetryLanes !== NoLanes) {\n\t            lanes = _errorRetryLanes;\n\t            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any\n\t            // concurrent events.\n\t          }\n\t        }\n\n\t        if (exitStatus === RootFatalErrored) {\n\t          var _fatalError = workInProgressRootFatalError;\n\t          prepareFreshStack(root, NoLanes);\n\t          markRootSuspended$1(root, lanes);\n\t          ensureRootIsScheduled(root, now());\n\t          throw _fatalError;\n\t        }\n\t      } // We now have a consistent tree. The next step is either to commit it,\n\t      // or, if something suspended, wait to commit it after a timeout.\n\n\n\t      root.finishedWork = finishedWork;\n\t      root.finishedLanes = lanes;\n\t      finishConcurrentRender(root, exitStatus, lanes);\n\t    }\n\t  }\n\n\t  ensureRootIsScheduled(root, now());\n\n\t  if (root.callbackNode === originalCallbackNode) {\n\t    // The task node scheduled for this root is the same one that's\n\t    // currently executed. Need to return a continuation.\n\t    return performConcurrentWorkOnRoot.bind(null, root);\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction recoverFromConcurrentError(root, errorRetryLanes) {\n\t  // If an error occurred during hydration, discard server response and fall\n\t  // back to client side render.\n\t  // Before rendering again, save the errors from the previous attempt.\n\t  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n\t  if (isRootDehydrated(root)) {\n\t    // The shell failed to hydrate. Set a flag to force a client rendering\n\t    // during the next attempt. To do this, we call prepareFreshStack now\n\t    // to create the root work-in-progress fiber. This is a bit weird in terms\n\t    // of factoring, because it relies on renderRootSync not calling\n\t    // prepareFreshStack again in the call below, which happens because the\n\t    // root and lanes haven't changed.\n\t    //\n\t    // TODO: I think what we should do is set ForceClientRender inside\n\t    // throwException, like we do for nested Suspense boundaries. The reason\n\t    // it's here instead is so we can switch to the synchronous work loop, too.\n\t    // Something to consider for a future refactor.\n\t    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n\t    rootWorkInProgress.flags |= ForceClientRender;\n\n\t    {\n\t      errorHydratingContainer(root.containerInfo);\n\t    }\n\t  }\n\n\t  var exitStatus = renderRootSync(root, errorRetryLanes);\n\n\t  if (exitStatus !== RootErrored) {\n\t    // Successfully finished rendering on retry\n\t    // The errors from the failed first attempt have been recovered. Add\n\t    // them to the collection of recoverable errors. We'll log them in the\n\t    // commit phase.\n\t    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n\t    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n\t    // from the first attempt, to preserve the causal sequence.\n\n\t    if (errorsFromSecondAttempt !== null) {\n\t      queueRecoverableErrors(errorsFromSecondAttempt);\n\t    }\n\t  }\n\n\t  return exitStatus;\n\t}\n\n\tfunction queueRecoverableErrors(errors) {\n\t  if (workInProgressRootRecoverableErrors === null) {\n\t    workInProgressRootRecoverableErrors = errors;\n\t  } else {\n\t    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n\t  }\n\t}\n\n\tfunction finishConcurrentRender(root, exitStatus, lanes) {\n\t  switch (exitStatus) {\n\t    case RootInProgress:\n\t    case RootFatalErrored:\n\t      {\n\t        throw new Error('Root did not complete. This is a bug in React.');\n\t      }\n\t    // Flow knows about invariant, so it complains if I add a break\n\t    // statement, but eslint doesn't know about invariant, so it complains\n\t    // if I do. eslint-disable-next-line no-fallthrough\n\n\t    case RootErrored:\n\t      {\n\t        // We should have already attempted to retry this tree. If we reached\n\t        // this point, it errored again. Commit it.\n\t        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n\t        break;\n\t      }\n\n\t    case RootSuspended:\n\t      {\n\t        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we\n\t        // should immediately commit it or wait a bit.\n\n\t        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope\n\t        !shouldForceFlushFallbacksInDEV()) {\n\t          // This render only included retries, no updates. Throttle committing\n\t          // retries so that we don't show too many loading states too quickly.\n\t          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.\n\n\t          if (msUntilTimeout > 10) {\n\t            var nextLanes = getNextLanes(root, NoLanes);\n\n\t            if (nextLanes !== NoLanes) {\n\t              // There's additional work on this root.\n\t              break;\n\t            }\n\n\t            var suspendedLanes = root.suspendedLanes;\n\n\t            if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n\t              // We should prefer to render the fallback of at the last\n\t              // suspended level. Ping the last suspended level to try\n\t              // rendering it again.\n\t              // FIXME: What if the suspended lanes are Idle? Should not restart.\n\t              requestEventTime();\n\t              markRootPinged(root, suspendedLanes);\n\t              break;\n\t            } // The render is suspended, it hasn't timed out, and there's no\n\t            // lower priority work to do. Instead of committing the fallback\n\t            // immediately, wait for more data to arrive.\n\n\n\t            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);\n\t            break;\n\t          }\n\t        } // The work expired. Commit immediately.\n\n\n\t        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n\t        break;\n\t      }\n\n\t    case RootSuspendedWithDelay:\n\t      {\n\t        markRootSuspended$1(root, lanes);\n\n\t        if (includesOnlyTransitions(lanes)) {\n\t          // This is a transition, so we should exit without committing a\n\t          // placeholder and without scheduling a timeout. Delay indefinitely\n\t          // until we receive more data.\n\t          break;\n\t        }\n\n\t        if (!shouldForceFlushFallbacksInDEV()) {\n\t          // This is not a transition, but we did trigger an avoided state.\n\t          // Schedule a placeholder to display after a short delay, using the Just\n\t          // Noticeable Difference.\n\t          // TODO: Is the JND optimization worth the added complexity? If this is\n\t          // the only reason we track the event time, then probably not.\n\t          // Consider removing.\n\t          var mostRecentEventTime = getMostRecentEventTime(root, lanes);\n\t          var eventTimeMs = mostRecentEventTime;\n\t          var timeElapsedMs = now() - eventTimeMs;\n\n\t          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.\n\n\n\t          if (_msUntilTimeout > 10) {\n\t            // Instead of committing the fallback immediately, wait for more data\n\t            // to arrive.\n\t            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);\n\t            break;\n\t          }\n\t        } // Commit the placeholder.\n\n\n\t        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n\t        break;\n\t      }\n\n\t    case RootCompleted:\n\t      {\n\t        // The work completed. Ready to commit.\n\t        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n\t        break;\n\t      }\n\n\t    default:\n\t      {\n\t        throw new Error('Unknown root exit status.');\n\t      }\n\t  }\n\t}\n\n\tfunction isRenderConsistentWithExternalStores(finishedWork) {\n\t  // Search the rendered tree for external store reads, and check whether the\n\t  // stores were mutated in a concurrent event. Intentionally using an iterative\n\t  // loop instead of recursion so we can exit early.\n\t  var node = finishedWork;\n\n\t  while (true) {\n\t    if (node.flags & StoreConsistency) {\n\t      var updateQueue = node.updateQueue;\n\n\t      if (updateQueue !== null) {\n\t        var checks = updateQueue.stores;\n\n\t        if (checks !== null) {\n\t          for (var i = 0; i < checks.length; i++) {\n\t            var check = checks[i];\n\t            var getSnapshot = check.getSnapshot;\n\t            var renderedValue = check.value;\n\n\t            try {\n\t              if (!objectIs(getSnapshot(), renderedValue)) {\n\t                // Found an inconsistent store.\n\t                return false;\n\t              }\n\t            } catch (error) {\n\t              // If `getSnapshot` throws, return `false`. This will schedule\n\t              // a re-render, and the error will be rethrown during render.\n\t              return false;\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    var child = node.child;\n\n\t    if (node.subtreeFlags & StoreConsistency && child !== null) {\n\t      child.return = node;\n\t      node = child;\n\t      continue;\n\t    }\n\n\t    if (node === finishedWork) {\n\t      return true;\n\t    }\n\n\t    while (node.sibling === null) {\n\t      if (node.return === null || node.return === finishedWork) {\n\t        return true;\n\t      }\n\n\t      node = node.return;\n\t    }\n\n\t    node.sibling.return = node.return;\n\t    node = node.sibling;\n\t  } // Flow doesn't know this is unreachable, but eslint does\n\t  // eslint-disable-next-line no-unreachable\n\n\n\t  return true;\n\t}\n\n\tfunction markRootSuspended$1(root, suspendedLanes) {\n\t  // When suspending, we should always exclude lanes that were pinged or (more\n\t  // rarely, since we try to avoid it) updated during the render phase.\n\t  // TODO: Lol maybe there's a better way to factor this besides this\n\t  // obnoxiously named function :)\n\t  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n\t  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n\t  markRootSuspended(root, suspendedLanes);\n\t} // This is the entry point for synchronous tasks that don't go\n\t// through Scheduler\n\n\n\tfunction performSyncWorkOnRoot(root) {\n\t  {\n\t    syncNestedUpdateFlag();\n\t  }\n\n\t  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n\t    throw new Error('Should not already be working.');\n\t  }\n\n\t  flushPassiveEffects();\n\t  var lanes = getNextLanes(root, NoLanes);\n\n\t  if (!includesSomeLane(lanes, SyncLane)) {\n\t    // There's no remaining sync work left.\n\t    ensureRootIsScheduled(root, now());\n\t    return null;\n\t  }\n\n\t  var exitStatus = renderRootSync(root, lanes);\n\n\t  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n\t    // If something threw an error, try rendering one more time. We'll render\n\t    // synchronously to block concurrent data mutations, and we'll includes\n\t    // all pending updates are included. If it still fails after the second\n\t    // attempt, we'll give up and commit the resulting tree.\n\t    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n\t    if (errorRetryLanes !== NoLanes) {\n\t      lanes = errorRetryLanes;\n\t      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n\t    }\n\t  }\n\n\t  if (exitStatus === RootFatalErrored) {\n\t    var fatalError = workInProgressRootFatalError;\n\t    prepareFreshStack(root, NoLanes);\n\t    markRootSuspended$1(root, lanes);\n\t    ensureRootIsScheduled(root, now());\n\t    throw fatalError;\n\t  }\n\n\t  if (exitStatus === RootDidNotComplete) {\n\t    throw new Error('Root did not complete. This is a bug in React.');\n\t  } // We now have a consistent tree. Because this is a sync render, we\n\t  // will commit it even if something suspended.\n\n\n\t  var finishedWork = root.current.alternate;\n\t  root.finishedWork = finishedWork;\n\t  root.finishedLanes = lanes;\n\t  commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next\n\t  // pending level.\n\n\t  ensureRootIsScheduled(root, now());\n\t  return null;\n\t}\n\n\tfunction flushRoot(root, lanes) {\n\t  if (lanes !== NoLanes) {\n\t    markRootEntangled(root, mergeLanes(lanes, SyncLane));\n\t    ensureRootIsScheduled(root, now());\n\n\t    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n\t      resetRenderTimer();\n\t      flushSyncCallbacks();\n\t    }\n\t  }\n\t}\n\tfunction deferredUpdates(fn) {\n\t  var previousPriority = getCurrentUpdatePriority();\n\t  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n\t  try {\n\t    ReactCurrentBatchConfig$2.transition = null;\n\t    setCurrentUpdatePriority(DefaultEventPriority);\n\t    return fn();\n\t  } finally {\n\t    setCurrentUpdatePriority(previousPriority);\n\t    ReactCurrentBatchConfig$2.transition = prevTransition;\n\t  }\n\t}\n\tfunction batchedUpdates(fn, a) {\n\t  var prevExecutionContext = executionContext;\n\t  executionContext |= BatchedContext;\n\n\t  try {\n\t    return fn(a);\n\t  } finally {\n\t    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n\t    // most batchedUpdates-like method.\n\n\t    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n\t    !( ReactCurrentActQueue$1.isBatchingLegacy)) {\n\t      resetRenderTimer();\n\t      flushSyncCallbacksOnlyInLegacyMode();\n\t    }\n\t  }\n\t}\n\tfunction discreteUpdates(fn, a, b, c, d) {\n\t  var previousPriority = getCurrentUpdatePriority();\n\t  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n\t  try {\n\t    ReactCurrentBatchConfig$2.transition = null;\n\t    setCurrentUpdatePriority(DiscreteEventPriority);\n\t    return fn(a, b, c, d);\n\t  } finally {\n\t    setCurrentUpdatePriority(previousPriority);\n\t    ReactCurrentBatchConfig$2.transition = prevTransition;\n\n\t    if (executionContext === NoContext) {\n\t      resetRenderTimer();\n\t    }\n\t  }\n\t} // Overload the definition to the two valid signatures.\n\t// Warning, this opts-out of checking the function body.\n\n\t// eslint-disable-next-line no-redeclare\n\tfunction flushSync(fn) {\n\t  // In legacy mode, we flush pending passive effects at the beginning of the\n\t  // next event, not at the end of the previous one.\n\t  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n\t    flushPassiveEffects();\n\t  }\n\n\t  var prevExecutionContext = executionContext;\n\t  executionContext |= BatchedContext;\n\t  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\t  var previousPriority = getCurrentUpdatePriority();\n\n\t  try {\n\t    ReactCurrentBatchConfig$2.transition = null;\n\t    setCurrentUpdatePriority(DiscreteEventPriority);\n\n\t    if (fn) {\n\t      return fn();\n\t    } else {\n\t      return undefined;\n\t    }\n\t  } finally {\n\t    setCurrentUpdatePriority(previousPriority);\n\t    ReactCurrentBatchConfig$2.transition = prevTransition;\n\t    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n\t    // Note that this will happen even if batchedUpdates is higher up\n\t    // the stack.\n\n\t    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n\t      flushSyncCallbacks();\n\t    }\n\t  }\n\t}\n\tfunction isAlreadyRendering() {\n\t  // Used by the renderer to print a warning if certain APIs are called from\n\t  // the wrong context.\n\t  return  (executionContext & (RenderContext | CommitContext)) !== NoContext;\n\t}\n\tfunction flushControlled(fn) {\n\t  var prevExecutionContext = executionContext;\n\t  executionContext |= BatchedContext;\n\t  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\t  var previousPriority = getCurrentUpdatePriority();\n\n\t  try {\n\t    ReactCurrentBatchConfig$2.transition = null;\n\t    setCurrentUpdatePriority(DiscreteEventPriority);\n\t    fn();\n\t  } finally {\n\t    setCurrentUpdatePriority(previousPriority);\n\t    ReactCurrentBatchConfig$2.transition = prevTransition;\n\t    executionContext = prevExecutionContext;\n\n\t    if (executionContext === NoContext) {\n\t      // Flush the immediate callbacks that were scheduled during this batch\n\t      resetRenderTimer();\n\t      flushSyncCallbacks();\n\t    }\n\t  }\n\t}\n\tfunction pushRenderLanes(fiber, lanes) {\n\t  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n\t  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n\t}\n\tfunction popRenderLanes(fiber) {\n\t  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n\t  pop(subtreeRenderLanesCursor, fiber);\n\t}\n\n\tfunction prepareFreshStack(root, lanes) {\n\t  root.finishedWork = null;\n\t  root.finishedLanes = NoLanes;\n\t  var timeoutHandle = root.timeoutHandle;\n\n\t  if (timeoutHandle !== noTimeout) {\n\t    // The root previous suspended and scheduled a timeout to commit a fallback\n\t    // state. Now that we have additional work, cancel the timeout.\n\t    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n\n\t    cancelTimeout(timeoutHandle);\n\t  }\n\n\t  if (workInProgress !== null) {\n\t    var interruptedWork = workInProgress.return;\n\n\t    while (interruptedWork !== null) {\n\t      var current = interruptedWork.alternate;\n\t      unwindInterruptedWork(current, interruptedWork);\n\t      interruptedWork = interruptedWork.return;\n\t    }\n\t  }\n\n\t  workInProgressRoot = root;\n\t  var rootWorkInProgress = createWorkInProgress(root.current, null);\n\t  workInProgress = rootWorkInProgress;\n\t  workInProgressRootRenderLanes = subtreeRenderLanes = lanes;\n\t  workInProgressRootExitStatus = RootInProgress;\n\t  workInProgressRootFatalError = null;\n\t  workInProgressRootSkippedLanes = NoLanes;\n\t  workInProgressRootInterleavedUpdatedLanes = NoLanes;\n\t  workInProgressRootPingedLanes = NoLanes;\n\t  workInProgressRootConcurrentErrors = null;\n\t  workInProgressRootRecoverableErrors = null;\n\t  finishQueueingConcurrentUpdates();\n\n\t  {\n\t    ReactStrictModeWarnings.discardPendingWarnings();\n\t  }\n\n\t  return rootWorkInProgress;\n\t}\n\n\tfunction handleError(root, thrownValue) {\n\t  do {\n\t    var erroredWork = workInProgress;\n\n\t    try {\n\t      // Reset module-level state that was set during the render phase.\n\t      resetContextDependencies();\n\t      resetHooksAfterThrow();\n\t      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a\n\t      // separate issue. Write a regression test using string refs.\n\n\t      ReactCurrentOwner$2.current = null;\n\n\t      if (erroredWork === null || erroredWork.return === null) {\n\t        // Expected to be working on a non-root fiber. This is a fatal error\n\t        // because there's no ancestor that can handle it; the root is\n\t        // supposed to capture all errors that weren't caught by an error\n\t        // boundary.\n\t        workInProgressRootExitStatus = RootFatalErrored;\n\t        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next\n\t        // sibling, or the parent if there are no siblings. But since the root\n\t        // has no siblings nor a parent, we set it to null. Usually this is\n\t        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n\t        // intentionally not calling those, we need set it here.\n\t        // TODO: Consider calling `unwindWork` to pop the contexts.\n\n\t        workInProgress = null;\n\t        return;\n\t      }\n\n\t      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n\t        // Record the time spent rendering before an error was thrown. This\n\t        // avoids inaccurate Profiler durations in the case of a\n\t        // suspended render.\n\t        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n\t      }\n\n\t      if (enableSchedulingProfiler) {\n\t        markComponentRenderStopped();\n\n\t        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {\n\t          var wakeable = thrownValue;\n\t          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);\n\t        } else {\n\t          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);\n\t        }\n\t      }\n\n\t      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);\n\t      completeUnitOfWork(erroredWork);\n\t    } catch (yetAnotherThrownValue) {\n\t      // Something in the return path also threw.\n\t      thrownValue = yetAnotherThrownValue;\n\n\t      if (workInProgress === erroredWork && erroredWork !== null) {\n\t        // If this boundary has already errored, then we had trouble processing\n\t        // the error. Bubble it to the next boundary.\n\t        erroredWork = erroredWork.return;\n\t        workInProgress = erroredWork;\n\t      } else {\n\t        erroredWork = workInProgress;\n\t      }\n\n\t      continue;\n\t    } // Return to the normal work loop.\n\n\n\t    return;\n\t  } while (true);\n\t}\n\n\tfunction pushDispatcher() {\n\t  var prevDispatcher = ReactCurrentDispatcher$2.current;\n\t  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;\n\n\t  if (prevDispatcher === null) {\n\t    // The React isomorphic package does not include a default dispatcher.\n\t    // Instead the first renderer will lazily attach one, in order to give\n\t    // nicer error messages.\n\t    return ContextOnlyDispatcher;\n\t  } else {\n\t    return prevDispatcher;\n\t  }\n\t}\n\n\tfunction popDispatcher(prevDispatcher) {\n\t  ReactCurrentDispatcher$2.current = prevDispatcher;\n\t}\n\n\tfunction markCommitTimeOfFallback() {\n\t  globalMostRecentFallbackTime = now();\n\t}\n\tfunction markSkippedUpdateLanes(lane) {\n\t  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n\t}\n\tfunction renderDidSuspend() {\n\t  if (workInProgressRootExitStatus === RootInProgress) {\n\t    workInProgressRootExitStatus = RootSuspended;\n\t  }\n\t}\n\tfunction renderDidSuspendDelayIfPossible() {\n\t  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {\n\t    workInProgressRootExitStatus = RootSuspendedWithDelay;\n\t  } // Check if there are updates that we skipped tree that might have unblocked\n\t  // this render.\n\n\n\t  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {\n\t    // Mark the current render as suspended so that we switch to working on\n\t    // the updates that were skipped. Usually we only suspend at the end of\n\t    // the render phase.\n\t    // TODO: We should probably always mark the root as suspended immediately\n\t    // (inside this function), since by suspending at the end of the render\n\t    // phase introduces a potential mistake where we suspend lanes that were\n\t    // pinged or updated while we were rendering.\n\t    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);\n\t  }\n\t}\n\tfunction renderDidError(error) {\n\t  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n\t    workInProgressRootExitStatus = RootErrored;\n\t  }\n\n\t  if (workInProgressRootConcurrentErrors === null) {\n\t    workInProgressRootConcurrentErrors = [error];\n\t  } else {\n\t    workInProgressRootConcurrentErrors.push(error);\n\t  }\n\t} // Called during render to determine if anything has suspended.\n\t// Returns false if we're not sure.\n\n\tfunction renderHasNotSuspendedYet() {\n\t  // If something errored or completed, we can't really be sure,\n\t  // so those are false.\n\t  return workInProgressRootExitStatus === RootInProgress;\n\t}\n\n\tfunction renderRootSync(root, lanes) {\n\t  var prevExecutionContext = executionContext;\n\t  executionContext |= RenderContext;\n\t  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n\t  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n\t  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n\t    {\n\t      if (isDevToolsPresent) {\n\t        var memoizedUpdaters = root.memoizedUpdaters;\n\n\t        if (memoizedUpdaters.size > 0) {\n\t          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n\t          memoizedUpdaters.clear();\n\t        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n\t        // If we bailout on this work, we'll move them back (like above).\n\t        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n\t        // That way we can keep the current update and future updates separate.\n\n\n\t        movePendingFibersToMemoized(root, lanes);\n\t      }\n\t    }\n\n\t    workInProgressTransitions = getTransitionsForLanes();\n\t    prepareFreshStack(root, lanes);\n\t  }\n\n\t  {\n\t    markRenderStarted(lanes);\n\t  }\n\n\t  do {\n\t    try {\n\t      workLoopSync();\n\t      break;\n\t    } catch (thrownValue) {\n\t      handleError(root, thrownValue);\n\t    }\n\t  } while (true);\n\n\t  resetContextDependencies();\n\t  executionContext = prevExecutionContext;\n\t  popDispatcher(prevDispatcher);\n\n\t  if (workInProgress !== null) {\n\t    // This is a sync render, so we should have finished the whole tree.\n\t    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');\n\t  }\n\n\t  {\n\t    markRenderStopped();\n\t  } // Set this to null to indicate there's no in-progress render.\n\n\n\t  workInProgressRoot = null;\n\t  workInProgressRootRenderLanes = NoLanes;\n\t  return workInProgressRootExitStatus;\n\t} // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n\t/** @noinline */\n\n\n\tfunction workLoopSync() {\n\t  // Already timed out, so perform work without checking if we need to yield.\n\t  while (workInProgress !== null) {\n\t    performUnitOfWork(workInProgress);\n\t  }\n\t}\n\n\tfunction renderRootConcurrent(root, lanes) {\n\t  var prevExecutionContext = executionContext;\n\t  executionContext |= RenderContext;\n\t  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n\t  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n\t  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n\t    {\n\t      if (isDevToolsPresent) {\n\t        var memoizedUpdaters = root.memoizedUpdaters;\n\n\t        if (memoizedUpdaters.size > 0) {\n\t          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n\t          memoizedUpdaters.clear();\n\t        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n\t        // If we bailout on this work, we'll move them back (like above).\n\t        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n\t        // That way we can keep the current update and future updates separate.\n\n\n\t        movePendingFibersToMemoized(root, lanes);\n\t      }\n\t    }\n\n\t    workInProgressTransitions = getTransitionsForLanes();\n\t    resetRenderTimer();\n\t    prepareFreshStack(root, lanes);\n\t  }\n\n\t  {\n\t    markRenderStarted(lanes);\n\t  }\n\n\t  do {\n\t    try {\n\t      workLoopConcurrent();\n\t      break;\n\t    } catch (thrownValue) {\n\t      handleError(root, thrownValue);\n\t    }\n\t  } while (true);\n\n\t  resetContextDependencies();\n\t  popDispatcher(prevDispatcher);\n\t  executionContext = prevExecutionContext;\n\n\n\t  if (workInProgress !== null) {\n\t    // Still work remaining.\n\t    {\n\t      markRenderYielded();\n\t    }\n\n\t    return RootInProgress;\n\t  } else {\n\t    // Completed the tree.\n\t    {\n\t      markRenderStopped();\n\t    } // Set this to null to indicate there's no in-progress render.\n\n\n\t    workInProgressRoot = null;\n\t    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.\n\n\t    return workInProgressRootExitStatus;\n\t  }\n\t}\n\t/** @noinline */\n\n\n\tfunction workLoopConcurrent() {\n\t  // Perform work until Scheduler asks us to yield\n\t  while (workInProgress !== null && !shouldYield()) {\n\t    performUnitOfWork(workInProgress);\n\t  }\n\t}\n\n\tfunction performUnitOfWork(unitOfWork) {\n\t  // The current, flushed, state of this fiber is the alternate. Ideally\n\t  // nothing should rely on this, but relying on it here means that we don't\n\t  // need an additional field on the work in progress.\n\t  var current = unitOfWork.alternate;\n\t  setCurrentFiber(unitOfWork);\n\t  var next;\n\n\t  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {\n\t    startProfilerTimer(unitOfWork);\n\t    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n\t    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n\t  } else {\n\t    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n\t  }\n\n\t  resetCurrentFiber();\n\t  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n\t  if (next === null) {\n\t    // If this doesn't spawn new work, complete the current work.\n\t    completeUnitOfWork(unitOfWork);\n\t  } else {\n\t    workInProgress = next;\n\t  }\n\n\t  ReactCurrentOwner$2.current = null;\n\t}\n\n\tfunction completeUnitOfWork(unitOfWork) {\n\t  // Attempt to complete the current unit of work, then move to the next\n\t  // sibling. If there are no more siblings, return to the parent fiber.\n\t  var completedWork = unitOfWork;\n\n\t  do {\n\t    // The current, flushed, state of this fiber is the alternate. Ideally\n\t    // nothing should rely on this, but relying on it here means that we don't\n\t    // need an additional field on the work in progress.\n\t    var current = completedWork.alternate;\n\t    var returnFiber = completedWork.return; // Check if the work completed or if something threw.\n\n\t    if ((completedWork.flags & Incomplete) === NoFlags) {\n\t      setCurrentFiber(completedWork);\n\t      var next = void 0;\n\n\t      if ( (completedWork.mode & ProfileMode) === NoMode) {\n\t        next = completeWork(current, completedWork, subtreeRenderLanes);\n\t      } else {\n\t        startProfilerTimer(completedWork);\n\t        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.\n\n\t        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\t      }\n\n\t      resetCurrentFiber();\n\n\t      if (next !== null) {\n\t        // Completing this fiber spawned new work. Work on that next.\n\t        workInProgress = next;\n\t        return;\n\t      }\n\t    } else {\n\t      // This fiber did not complete because something threw. Pop values off\n\t      // the stack without entering the complete phase. If this is a boundary,\n\t      // capture values if possible.\n\t      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.\n\n\n\t      if (_next !== null) {\n\t        // If completing this work spawned new work, do that next. We'll come\n\t        // back here again.\n\t        // Since we're restarting, remove anything that is not a host effect\n\t        // from the effect tag.\n\t        _next.flags &= HostEffectMask;\n\t        workInProgress = _next;\n\t        return;\n\t      }\n\n\t      if ( (completedWork.mode & ProfileMode) !== NoMode) {\n\t        // Record the render duration for the fiber that errored.\n\t        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.\n\n\t        var actualDuration = completedWork.actualDuration;\n\t        var child = completedWork.child;\n\n\t        while (child !== null) {\n\t          actualDuration += child.actualDuration;\n\t          child = child.sibling;\n\t        }\n\n\t        completedWork.actualDuration = actualDuration;\n\t      }\n\n\t      if (returnFiber !== null) {\n\t        // Mark the parent fiber as incomplete and clear its subtree flags.\n\t        returnFiber.flags |= Incomplete;\n\t        returnFiber.subtreeFlags = NoFlags;\n\t        returnFiber.deletions = null;\n\t      } else {\n\t        // We've unwound all the way to the root.\n\t        workInProgressRootExitStatus = RootDidNotComplete;\n\t        workInProgress = null;\n\t        return;\n\t      }\n\t    }\n\n\t    var siblingFiber = completedWork.sibling;\n\n\t    if (siblingFiber !== null) {\n\t      // If there is more work to do in this returnFiber, do that next.\n\t      workInProgress = siblingFiber;\n\t      return;\n\t    } // Otherwise, return to the parent\n\n\n\t    completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n\t    workInProgress = completedWork;\n\t  } while (completedWork !== null); // We've reached the root.\n\n\n\t  if (workInProgressRootExitStatus === RootInProgress) {\n\t    workInProgressRootExitStatus = RootCompleted;\n\t  }\n\t}\n\n\tfunction commitRoot(root, recoverableErrors, transitions) {\n\t  // TODO: This no longer makes any sense. We already wrap the mutation and\n\t  // layout phases. Should be able to remove.\n\t  var previousUpdateLanePriority = getCurrentUpdatePriority();\n\t  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n\t  try {\n\t    ReactCurrentBatchConfig$2.transition = null;\n\t    setCurrentUpdatePriority(DiscreteEventPriority);\n\t    commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);\n\t  } finally {\n\t    ReactCurrentBatchConfig$2.transition = prevTransition;\n\t    setCurrentUpdatePriority(previousUpdateLanePriority);\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {\n\t  do {\n\t    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n\t    // means `flushPassiveEffects` will sometimes result in additional\n\t    // passive effects. So we need to keep flushing in a loop until there are\n\t    // no more pending effects.\n\t    // TODO: Might be better if `flushPassiveEffects` did not automatically\n\t    // flush synchronous work at the end, to avoid factoring hazards like this.\n\t    flushPassiveEffects();\n\t  } while (rootWithPendingPassiveEffects !== null);\n\n\t  flushRenderPhaseStrictModeWarningsInDEV();\n\n\t  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n\t    throw new Error('Should not already be working.');\n\t  }\n\n\t  var finishedWork = root.finishedWork;\n\t  var lanes = root.finishedLanes;\n\n\t  {\n\t    markCommitStarted(lanes);\n\t  }\n\n\t  if (finishedWork === null) {\n\n\t    {\n\t      markCommitStopped();\n\t    }\n\n\t    return null;\n\t  } else {\n\t    {\n\t      if (lanes === NoLanes) {\n\t        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');\n\t      }\n\t    }\n\t  }\n\n\t  root.finishedWork = null;\n\t  root.finishedLanes = NoLanes;\n\n\t  if (finishedWork === root.current) {\n\t    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n\t  } // commitRoot never returns a continuation; it always finishes synchronously.\n\t  // So we can clear these now to allow a new callback to be scheduled.\n\n\n\t  root.callbackNode = null;\n\t  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first\n\t  // pending time is whatever is left on the root fiber.\n\n\t  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n\t  markRootFinished(root, remainingLanes);\n\n\t  if (root === workInProgressRoot) {\n\t    // We can reset these now that they are finished.\n\t    workInProgressRoot = null;\n\t    workInProgress = null;\n\t    workInProgressRootRenderLanes = NoLanes;\n\t  } // If there are pending passive effects, schedule a callback to process them.\n\t  // Do this as early as possible, so it is queued before anything else that\n\t  // might get scheduled in the commit phase. (See #16714.)\n\t  // TODO: Delete all other places that schedule the passive effect callback\n\t  // They're redundant.\n\n\n\t  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {\n\t    if (!rootDoesHavePassiveEffects) {\n\t      rootDoesHavePassiveEffects = true;\n\t      // to store it in pendingPassiveTransitions until they get processed\n\t      // We need to pass this through as an argument to commitRoot\n\t      // because workInProgressTransitions might have changed between\n\t      // the previous render and commit if we throttle the commit\n\t      // with setTimeout\n\n\t      pendingPassiveTransitions = transitions;\n\t      scheduleCallback$1(NormalPriority, function () {\n\t        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n\t        // *after* passive effects fire to avoid freeing a cache pool that may\n\t        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n\n\t        return null;\n\t      });\n\t    }\n\t  } // Check if there are any effects in the whole tree.\n\t  // TODO: This is left over from the effect list implementation, where we had\n\t  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n\t  // only other reason this optimization exists is because it affects profiling.\n\t  // Reconsider whether this is necessary.\n\n\n\t  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n\t  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n\n\t  if (subtreeHasEffects || rootHasEffect) {\n\t    var prevTransition = ReactCurrentBatchConfig$2.transition;\n\t    ReactCurrentBatchConfig$2.transition = null;\n\t    var previousPriority = getCurrentUpdatePriority();\n\t    setCurrentUpdatePriority(DiscreteEventPriority);\n\t    var prevExecutionContext = executionContext;\n\t    executionContext |= CommitContext; // Reset this to null before calling lifecycles\n\n\t    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n\t    // of the effect list for each phase: all mutation effects come before all\n\t    // layout effects, and so on.\n\t    // The first phase a \"before mutation\" phase. We use this phase to read the\n\t    // state of the host tree right before we mutate it. This is where\n\t    // getSnapshotBeforeUpdate is called.\n\n\t    commitBeforeMutationEffects(root, finishedWork);\n\n\t    {\n\t      // Mark the current commit time to be shared by all Profilers in this\n\t      // batch. This enables them to be grouped later.\n\t      recordCommitTime();\n\t    }\n\n\n\t    commitMutationEffects(root, finishedWork, lanes);\n\n\t    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n\t    // the mutation phase, so that the previous tree is still current during\n\t    // componentWillUnmount, but before the layout phase, so that the finished\n\t    // work is current during componentDidMount/Update.\n\n\t    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n\n\t    {\n\t      markLayoutEffectsStarted(lanes);\n\t    }\n\n\t    commitLayoutEffects(finishedWork, root, lanes);\n\n\t    {\n\t      markLayoutEffectsStopped();\n\t    }\n\t    // opportunity to paint.\n\n\n\t    requestPaint();\n\t    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n\n\t    setCurrentUpdatePriority(previousPriority);\n\t    ReactCurrentBatchConfig$2.transition = prevTransition;\n\t  } else {\n\t    // No effects.\n\t    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n\t    // no effects.\n\t    // TODO: Maybe there's a better way to report this.\n\n\t    {\n\t      recordCommitTime();\n\t    }\n\t  }\n\n\t  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n\t  if (rootDoesHavePassiveEffects) {\n\t    // This commit has passive effects. Stash a reference to them. But don't\n\t    // schedule a callback until after flushing layout work.\n\t    rootDoesHavePassiveEffects = false;\n\t    rootWithPendingPassiveEffects = root;\n\t    pendingPassiveEffectsLanes = lanes;\n\t  } else {\n\n\t    {\n\t      nestedPassiveUpdateCount = 0;\n\t      rootWithPassiveNestedUpdates = null;\n\t    }\n\t  } // Read this again, since an effect might have updated it\n\n\n\t  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n\t  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n\t  // is to detect whether something might have called setState inside\n\t  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n\t  // inside `componentDidCatch` is itself flawed — that's why we recommend\n\t  // `getDerivedStateFromError` instead. However, it could be improved by\n\t  // checking if remainingLanes includes Sync work, instead of whether there's\n\t  // any work remaining at all (which would also include stuff like Suspense\n\t  // retries or transitions). It's been like this for a while, though, so fixing\n\t  // it probably isn't that urgent.\n\n\t  if (remainingLanes === NoLanes) {\n\t    // If there's no remaining work, we can clear the set of already failed\n\t    // error boundaries.\n\t    legacyErrorBoundariesThatAlreadyFailed = null;\n\t  }\n\n\t  {\n\t    if (!rootDidHavePassiveEffects) {\n\t      commitDoubleInvokeEffectsInDEV(root.current, false);\n\t    }\n\t  }\n\n\t  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n\n\t  {\n\t    if (isDevToolsPresent) {\n\t      root.memoizedUpdaters.clear();\n\t    }\n\t  }\n\n\t  {\n\t    onCommitRoot$1();\n\t  } // Always call this before exiting `commitRoot`, to ensure that any\n\t  // additional work on this root is scheduled.\n\n\n\t  ensureRootIsScheduled(root, now());\n\n\t  if (recoverableErrors !== null) {\n\t    // There were errors during this render, but recovered from them without\n\t    // needing to surface it to the UI. We log them here.\n\t    var onRecoverableError = root.onRecoverableError;\n\n\t    for (var i = 0; i < recoverableErrors.length; i++) {\n\t      var recoverableError = recoverableErrors[i];\n\t      var componentStack = recoverableError.stack;\n\t      var digest = recoverableError.digest;\n\t      onRecoverableError(recoverableError.value, {\n\t        componentStack: componentStack,\n\t        digest: digest\n\t      });\n\t    }\n\t  }\n\n\t  if (hasUncaughtError) {\n\t    hasUncaughtError = false;\n\t    var error$1 = firstUncaughtError;\n\t    firstUncaughtError = null;\n\t    throw error$1;\n\t  } // If the passive effects are the result of a discrete render, flush them\n\t  // synchronously at the end of the current task so that the result is\n\t  // immediately observable. Otherwise, we assume that they are not\n\t  // order-dependent and do not need to be observed by external systems, so we\n\t  // can wait until after paint.\n\t  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n\t  // currently schedule the callback in multiple places, will wait until those\n\t  // are consolidated.\n\n\n\t  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {\n\t    flushPassiveEffects();\n\t  } // Read this again, since a passive effect might have updated it\n\n\n\t  remainingLanes = root.pendingLanes;\n\n\t  if (includesSomeLane(remainingLanes, SyncLane)) {\n\t    {\n\t      markNestedUpdateScheduled();\n\t    } // Count the number of times the root synchronously re-renders without\n\t    // finishing. If there are too many, it indicates an infinite update loop.\n\n\n\t    if (root === rootWithNestedUpdates) {\n\t      nestedUpdateCount++;\n\t    } else {\n\t      nestedUpdateCount = 0;\n\t      rootWithNestedUpdates = root;\n\t    }\n\t  } else {\n\t    nestedUpdateCount = 0;\n\t  } // If layout work was scheduled, flush it now.\n\n\n\t  flushSyncCallbacks();\n\n\t  {\n\t    markCommitStopped();\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction flushPassiveEffects() {\n\t  // Returns whether passive effects were flushed.\n\t  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n\t  // probably just combine the two functions. I believe they were only separate\n\t  // in the first place because we used to wrap it with\n\t  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n\t  // priority within React itself, so we can mutate the variable directly.\n\t  if (rootWithPendingPassiveEffects !== null) {\n\t    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n\t    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n\t    var prevTransition = ReactCurrentBatchConfig$2.transition;\n\t    var previousPriority = getCurrentUpdatePriority();\n\n\t    try {\n\t      ReactCurrentBatchConfig$2.transition = null;\n\t      setCurrentUpdatePriority(priority);\n\t      return flushPassiveEffectsImpl();\n\t    } finally {\n\t      setCurrentUpdatePriority(previousPriority);\n\t      ReactCurrentBatchConfig$2.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n\t    }\n\t  }\n\n\t  return false;\n\t}\n\tfunction enqueuePendingPassiveProfilerEffect(fiber) {\n\t  {\n\t    pendingPassiveProfilerEffects.push(fiber);\n\n\t    if (!rootDoesHavePassiveEffects) {\n\t      rootDoesHavePassiveEffects = true;\n\t      scheduleCallback$1(NormalPriority, function () {\n\t        flushPassiveEffects();\n\t        return null;\n\t      });\n\t    }\n\t  }\n\t}\n\n\tfunction flushPassiveEffectsImpl() {\n\t  if (rootWithPendingPassiveEffects === null) {\n\t    return false;\n\t  } // Cache and clear the transitions flag\n\n\n\t  var transitions = pendingPassiveTransitions;\n\t  pendingPassiveTransitions = null;\n\t  var root = rootWithPendingPassiveEffects;\n\t  var lanes = pendingPassiveEffectsLanes;\n\t  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n\t  // Figure out why and fix it. It's not causing any known issues (probably\n\t  // because it's only used for profiling), but it's a refactor hazard.\n\n\t  pendingPassiveEffectsLanes = NoLanes;\n\n\t  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n\t    throw new Error('Cannot flush passive effects while already rendering.');\n\t  }\n\n\t  {\n\t    isFlushingPassiveEffects = true;\n\t    didScheduleUpdateDuringPassiveEffects = false;\n\t  }\n\n\t  {\n\t    markPassiveEffectsStarted(lanes);\n\t  }\n\n\t  var prevExecutionContext = executionContext;\n\t  executionContext |= CommitContext;\n\t  commitPassiveUnmountEffects(root.current);\n\t  commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects\n\n\t  {\n\t    var profilerEffects = pendingPassiveProfilerEffects;\n\t    pendingPassiveProfilerEffects = [];\n\n\t    for (var i = 0; i < profilerEffects.length; i++) {\n\t      var _fiber = profilerEffects[i];\n\t      commitPassiveEffectDurations(root, _fiber);\n\t    }\n\t  }\n\n\t  {\n\t    markPassiveEffectsStopped();\n\t  }\n\n\t  {\n\t    commitDoubleInvokeEffectsInDEV(root.current, true);\n\t  }\n\n\t  executionContext = prevExecutionContext;\n\t  flushSyncCallbacks();\n\n\t  {\n\t    // If additional passive effects were scheduled, increment a counter. If this\n\t    // exceeds the limit, we'll fire a warning.\n\t    if (didScheduleUpdateDuringPassiveEffects) {\n\t      if (root === rootWithPassiveNestedUpdates) {\n\t        nestedPassiveUpdateCount++;\n\t      } else {\n\t        nestedPassiveUpdateCount = 0;\n\t        rootWithPassiveNestedUpdates = root;\n\t      }\n\t    } else {\n\t      nestedPassiveUpdateCount = 0;\n\t    }\n\n\t    isFlushingPassiveEffects = false;\n\t    didScheduleUpdateDuringPassiveEffects = false;\n\t  } // TODO: Move to commitPassiveMountEffects\n\n\n\t  onPostCommitRoot(root);\n\n\t  {\n\t    var stateNode = root.current.stateNode;\n\t    stateNode.effectDuration = 0;\n\t    stateNode.passiveEffectDuration = 0;\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction isAlreadyFailedLegacyErrorBoundary(instance) {\n\t  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n\t}\n\tfunction markLegacyErrorBoundaryAsFailed(instance) {\n\t  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n\t    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n\t  } else {\n\t    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n\t  }\n\t}\n\n\tfunction prepareToThrowUncaughtError(error) {\n\t  if (!hasUncaughtError) {\n\t    hasUncaughtError = true;\n\t    firstUncaughtError = error;\n\t  }\n\t}\n\n\tvar onUncaughtError = prepareToThrowUncaughtError;\n\n\tfunction captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n\t  var errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n\t  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n\t  var root = enqueueUpdate(rootFiber, update, SyncLane);\n\t  var eventTime = requestEventTime();\n\n\t  if (root !== null) {\n\t    markRootUpdated(root, SyncLane, eventTime);\n\t    ensureRootIsScheduled(root, eventTime);\n\t  }\n\t}\n\n\tfunction captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n\t  {\n\t    reportUncaughtErrorInDEV(error$1);\n\t    setIsRunningInsertionEffect(false);\n\t  }\n\n\t  if (sourceFiber.tag === HostRoot) {\n\t    // Error was thrown at the root. There is no parent, so the root\n\t    // itself should capture it.\n\t    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n\t    return;\n\t  }\n\n\t  var fiber = null;\n\n\t  {\n\t    fiber = nearestMountedAncestor;\n\t  }\n\n\t  while (fiber !== null) {\n\t    if (fiber.tag === HostRoot) {\n\t      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n\t      return;\n\t    } else if (fiber.tag === ClassComponent) {\n\t      var ctor = fiber.type;\n\t      var instance = fiber.stateNode;\n\n\t      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n\t        var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);\n\t        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n\t        var root = enqueueUpdate(fiber, update, SyncLane);\n\t        var eventTime = requestEventTime();\n\n\t        if (root !== null) {\n\t          markRootUpdated(root, SyncLane, eventTime);\n\t          ensureRootIsScheduled(root, eventTime);\n\t        }\n\n\t        return;\n\t      }\n\t    }\n\n\t    fiber = fiber.return;\n\t  }\n\n\t  {\n\t    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n\t    // will fire for errors that are thrown by destroy functions inside deleted\n\t    // trees. What it should instead do is propagate the error to the parent of\n\t    // the deleted tree. In the meantime, do not add this warning to the\n\t    // allowlist; this is only for our internal use.\n\t    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\\n\\n' + 'Error message:\\n\\n%s', error$1);\n\t  }\n\t}\n\tfunction pingSuspendedRoot(root, wakeable, pingedLanes) {\n\t  var pingCache = root.pingCache;\n\n\t  if (pingCache !== null) {\n\t    // The wakeable resolved, so we no longer need to memoize, because it will\n\t    // never be thrown again.\n\t    pingCache.delete(wakeable);\n\t  }\n\n\t  var eventTime = requestEventTime();\n\t  markRootPinged(root, pingedLanes);\n\t  warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n\t  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n\t    // Received a ping at the same priority level at which we're currently\n\t    // rendering. We might want to restart this render. This should mirror\n\t    // the logic of whether or not a root suspends once it completes.\n\t    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n\t    // we should probably never restart.\n\t    // If we're suspended with delay, or if it's a retry, we'll always suspend\n\t    // so we can always restart.\n\t    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n\t      // Restart from the root.\n\t      prepareFreshStack(root, NoLanes);\n\t    } else {\n\t      // Even though we can't restart right now, we might get an\n\t      // opportunity later. So we mark this render as having a ping.\n\t      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n\t    }\n\t  }\n\n\t  ensureRootIsScheduled(root, eventTime);\n\t}\n\n\tfunction retryTimedOutBoundary(boundaryFiber, retryLane) {\n\t  // The boundary fiber (a Suspense component or SuspenseList component)\n\t  // previously was rendered in its fallback state. One of the promises that\n\t  // suspended it has resolved, which means at least part of the tree was\n\t  // likely unblocked. Try rendering again, at a new lanes.\n\t  if (retryLane === NoLane) {\n\t    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n\t    // unnecessary entanglement?\n\t    retryLane = requestRetryLane(boundaryFiber);\n\t  } // TODO: Special case idle priority?\n\n\n\t  var eventTime = requestEventTime();\n\t  var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n\n\t  if (root !== null) {\n\t    markRootUpdated(root, retryLane, eventTime);\n\t    ensureRootIsScheduled(root, eventTime);\n\t  }\n\t}\n\n\tfunction retryDehydratedSuspenseBoundary(boundaryFiber) {\n\t  var suspenseState = boundaryFiber.memoizedState;\n\t  var retryLane = NoLane;\n\n\t  if (suspenseState !== null) {\n\t    retryLane = suspenseState.retryLane;\n\t  }\n\n\t  retryTimedOutBoundary(boundaryFiber, retryLane);\n\t}\n\tfunction resolveRetryWakeable(boundaryFiber, wakeable) {\n\t  var retryLane = NoLane; // Default\n\n\t  var retryCache;\n\n\t  switch (boundaryFiber.tag) {\n\t    case SuspenseComponent:\n\t      retryCache = boundaryFiber.stateNode;\n\t      var suspenseState = boundaryFiber.memoizedState;\n\n\t      if (suspenseState !== null) {\n\t        retryLane = suspenseState.retryLane;\n\t      }\n\n\t      break;\n\n\t    case SuspenseListComponent:\n\t      retryCache = boundaryFiber.stateNode;\n\t      break;\n\n\t    default:\n\t      throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');\n\t  }\n\n\t  if (retryCache !== null) {\n\t    // The wakeable resolved, so we no longer need to memoize, because it will\n\t    // never be thrown again.\n\t    retryCache.delete(wakeable);\n\t  }\n\n\t  retryTimedOutBoundary(boundaryFiber, retryLane);\n\t} // Computes the next Just Noticeable Difference (JND) boundary.\n\t// The theory is that a person can't tell the difference between small differences in time.\n\t// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n\t// difference in the experience. However, waiting for longer might mean that we can avoid\n\t// showing an intermediate loading state. The longer we have already waited, the harder it\n\t// is to tell small differences in time. Therefore, the longer we've already waited,\n\t// the longer we can wait additionally. At some point we have to give up though.\n\t// We pick a train model where the next boundary commits at a consistent schedule.\n\t// These particular numbers are vague estimates. We expect to adjust them based on research.\n\n\tfunction jnd(timeElapsed) {\n\t  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;\n\t}\n\n\tfunction checkForNestedUpdates() {\n\t  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n\t    nestedUpdateCount = 0;\n\t    rootWithNestedUpdates = null;\n\t    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');\n\t  }\n\n\t  {\n\t    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n\t      nestedPassiveUpdateCount = 0;\n\t      rootWithPassiveNestedUpdates = null;\n\n\t      error('Maximum update depth exceeded. This can happen when a component ' + \"calls setState inside useEffect, but useEffect either doesn't \" + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');\n\t    }\n\t  }\n\t}\n\n\tfunction flushRenderPhaseStrictModeWarningsInDEV() {\n\t  {\n\t    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n\t    {\n\t      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n\t    }\n\t  }\n\t}\n\n\tfunction commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\n\t  {\n\t    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n\t    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n\t    // Maybe not a big deal since this is DEV only behavior.\n\t    setCurrentFiber(fiber);\n\t    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n\n\t    if (hasPassiveEffects) {\n\t      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);\n\t    }\n\n\t    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n\n\t    if (hasPassiveEffects) {\n\t      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n\t    }\n\n\t    resetCurrentFiber();\n\t  }\n\t}\n\n\tfunction invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\n\t  {\n\t    // We don't need to re-check StrictEffectsMode here.\n\t    // This function is only called if that check has already passed.\n\t    var current = firstChild;\n\t    var subtreeRoot = null;\n\n\t    while (current !== null) {\n\t      var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n\n\t      if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {\n\t        current = current.child;\n\t      } else {\n\t        if ((current.flags & fiberFlags) !== NoFlags) {\n\t          invokeEffectFn(current);\n\t        }\n\n\t        if (current.sibling !== null) {\n\t          current = current.sibling;\n\t        } else {\n\t          current = subtreeRoot = current.return;\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tvar didWarnStateUpdateForNotYetMountedComponent = null;\n\tfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n\t  {\n\t    if ((executionContext & RenderContext) !== NoContext) {\n\t      // We let the other warning about render phase updates deal with this one.\n\t      return;\n\t    }\n\n\t    if (!(fiber.mode & ConcurrentMode)) {\n\t      return;\n\t    }\n\n\t    var tag = fiber.tag;\n\n\t    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n\t      // Only warn for user-defined components, not internal ones like Suspense.\n\t      return;\n\t    } // We show the whole stack but dedupe on the top component's name because\n\t    // the problematic code almost always lies inside that component.\n\n\n\t    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n\n\t    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n\t      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n\t        return;\n\t      }\n\n\t      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n\t    } else {\n\t      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n\t    }\n\n\t    var previousFiber = current;\n\n\t    try {\n\t      setCurrentFiber(fiber);\n\n\t      error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');\n\t    } finally {\n\t      if (previousFiber) {\n\t        setCurrentFiber(fiber);\n\t      } else {\n\t        resetCurrentFiber();\n\t      }\n\t    }\n\t  }\n\t}\n\tvar beginWork$1;\n\n\t{\n\t  var dummyFiber = null;\n\n\t  beginWork$1 = function (current, unitOfWork, lanes) {\n\t    // If a component throws an error, we replay it again in a synchronously\n\t    // dispatched event, so that the debugger will treat it as an uncaught\n\t    // error See ReactErrorUtils for more information.\n\t    // Before entering the begin phase, copy the work-in-progress onto a dummy\n\t    // fiber. If beginWork throws, we'll use this to reset the state.\n\t    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);\n\n\t    try {\n\t      return beginWork(current, unitOfWork, lanes);\n\t    } catch (originalError) {\n\t      if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {\n\t        // Don't replay promises.\n\t        // Don't replay errors if we are hydrating and have already suspended or handled an error\n\t        throw originalError;\n\t      } // Keep this code in sync with handleError; any changes here must have\n\t      // corresponding changes there.\n\n\n\t      resetContextDependencies();\n\t      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the\n\t      // same fiber again.\n\t      // Unwind the failed stack frame\n\n\t      unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.\n\n\t      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n\t      if ( unitOfWork.mode & ProfileMode) {\n\t        // Reset the profiler timer.\n\t        startProfilerTimer(unitOfWork);\n\t      } // Run beginWork again.\n\n\n\t      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);\n\n\t      if (hasCaughtError()) {\n\t        var replayError = clearCaughtError();\n\n\t        if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {\n\t          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n\t          originalError._suppressLogging = true;\n\t        }\n\t      } // We always throw the original error in case the second render pass is not idempotent.\n\t      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n\n\n\t      throw originalError;\n\t    }\n\t  };\n\t}\n\n\tvar didWarnAboutUpdateInRender = false;\n\tvar didWarnAboutUpdateInRenderForAnotherComponent;\n\n\t{\n\t  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n\t}\n\n\tfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n\t  {\n\t    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {\n\t      switch (fiber.tag) {\n\t        case FunctionComponent:\n\t        case ForwardRef:\n\t        case SimpleMemoComponent:\n\t          {\n\t            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.\n\n\t            var dedupeKey = renderingComponentName;\n\n\t            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n\t              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n\t              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n\t              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);\n\t            }\n\n\t            break;\n\t          }\n\n\t        case ClassComponent:\n\t          {\n\t            if (!didWarnAboutUpdateInRender) {\n\t              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');\n\n\t              didWarnAboutUpdateInRender = true;\n\t            }\n\n\t            break;\n\t          }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction restorePendingUpdaters(root, lanes) {\n\t  {\n\t    if (isDevToolsPresent) {\n\t      var memoizedUpdaters = root.memoizedUpdaters;\n\t      memoizedUpdaters.forEach(function (schedulingFiber) {\n\t        addFiberToLanesMap(root, schedulingFiber, lanes);\n\t      }); // This function intentionally does not clear memoized updaters.\n\t      // Those may still be relevant to the current commit\n\t      // and a future one (e.g. Suspense).\n\t    }\n\t  }\n\t}\n\tvar fakeActCallbackNode = {};\n\n\tfunction scheduleCallback$1(priorityLevel, callback) {\n\t  {\n\t    // If we're currently inside an `act` scope, bypass Scheduler and push to\n\t    // the `act` queue instead.\n\t    var actQueue = ReactCurrentActQueue$1.current;\n\n\t    if (actQueue !== null) {\n\t      actQueue.push(callback);\n\t      return fakeActCallbackNode;\n\t    } else {\n\t      return scheduleCallback(priorityLevel, callback);\n\t    }\n\t  }\n\t}\n\n\tfunction cancelCallback$1(callbackNode) {\n\t  if ( callbackNode === fakeActCallbackNode) {\n\t    return;\n\t  } // In production, always call Scheduler. This function will be stripped out.\n\n\n\t  return cancelCallback(callbackNode);\n\t}\n\n\tfunction shouldForceFlushFallbacksInDEV() {\n\t  // Never force flush in production. This function should get stripped out.\n\t  return  ReactCurrentActQueue$1.current !== null;\n\t}\n\n\tfunction warnIfUpdatesNotWrappedWithActDEV(fiber) {\n\t  {\n\t    if (fiber.mode & ConcurrentMode) {\n\t      if (!isConcurrentActEnvironment()) {\n\t        // Not in an act environment. No need to warn.\n\t        return;\n\t      }\n\t    } else {\n\t      // Legacy mode has additional cases where we suppress a warning.\n\t      if (!isLegacyActEnvironment()) {\n\t        // Not in an act environment. No need to warn.\n\t        return;\n\t      }\n\n\t      if (executionContext !== NoContext) {\n\t        // Legacy mode doesn't warn if the update is batched, i.e.\n\t        // batchedUpdates or flushSync.\n\t        return;\n\t      }\n\n\t      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\n\t        // For backwards compatibility with pre-hooks code, legacy mode only\n\t        // warns for updates that originate from a hook.\n\t        return;\n\t      }\n\t    }\n\n\t    if (ReactCurrentActQueue$1.current === null) {\n\t      var previousFiber = current;\n\n\t      try {\n\t        setCurrentFiber(fiber);\n\n\t        error('An update to %s inside a test was not wrapped in act(...).\\n\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\n\\n' + 'act(() => {\\n' + '  /* fire events that update state */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));\n\t      } finally {\n\t        if (previousFiber) {\n\t          setCurrentFiber(fiber);\n\t        } else {\n\t          resetCurrentFiber();\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n\t  {\n\t    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {\n\t      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\\n\\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\\n\\n' + 'act(() => {\\n' + '  /* finish loading suspended data */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');\n\t    }\n\t  }\n\t}\n\n\tfunction setIsRunningInsertionEffect(isRunning) {\n\t  {\n\t    isRunningInsertionEffect = isRunning;\n\t  }\n\t}\n\n\t/* eslint-disable react-internal/prod-error-codes */\n\tvar resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.\n\n\tvar failedBoundaries = null;\n\tvar setRefreshHandler = function (handler) {\n\t  {\n\t    resolveFamily = handler;\n\t  }\n\t};\n\tfunction resolveFunctionForHotReloading(type) {\n\t  {\n\t    if (resolveFamily === null) {\n\t      // Hot reloading is disabled.\n\t      return type;\n\t    }\n\n\t    var family = resolveFamily(type);\n\n\t    if (family === undefined) {\n\t      return type;\n\t    } // Use the latest known implementation.\n\n\n\t    return family.current;\n\t  }\n\t}\n\tfunction resolveClassForHotReloading(type) {\n\t  // No implementation differences.\n\t  return resolveFunctionForHotReloading(type);\n\t}\n\tfunction resolveForwardRefForHotReloading(type) {\n\t  {\n\t    if (resolveFamily === null) {\n\t      // Hot reloading is disabled.\n\t      return type;\n\t    }\n\n\t    var family = resolveFamily(type);\n\n\t    if (family === undefined) {\n\t      // Check if we're dealing with a real forwardRef. Don't want to crash early.\n\t      if (type !== null && type !== undefined && typeof type.render === 'function') {\n\t        // ForwardRef is special because its resolved .type is an object,\n\t        // but it's possible that we only have its inner render function in the map.\n\t        // If that inner render function is different, we'll build a new forwardRef type.\n\t        var currentRender = resolveFunctionForHotReloading(type.render);\n\n\t        if (type.render !== currentRender) {\n\t          var syntheticType = {\n\t            $$typeof: REACT_FORWARD_REF_TYPE,\n\t            render: currentRender\n\t          };\n\n\t          if (type.displayName !== undefined) {\n\t            syntheticType.displayName = type.displayName;\n\t          }\n\n\t          return syntheticType;\n\t        }\n\t      }\n\n\t      return type;\n\t    } // Use the latest known implementation.\n\n\n\t    return family.current;\n\t  }\n\t}\n\tfunction isCompatibleFamilyForHotReloading(fiber, element) {\n\t  {\n\t    if (resolveFamily === null) {\n\t      // Hot reloading is disabled.\n\t      return false;\n\t    }\n\n\t    var prevType = fiber.elementType;\n\t    var nextType = element.type; // If we got here, we know types aren't === equal.\n\n\t    var needsCompareFamilies = false;\n\t    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;\n\n\t    switch (fiber.tag) {\n\t      case ClassComponent:\n\t        {\n\t          if (typeof nextType === 'function') {\n\t            needsCompareFamilies = true;\n\t          }\n\n\t          break;\n\t        }\n\n\t      case FunctionComponent:\n\t        {\n\t          if (typeof nextType === 'function') {\n\t            needsCompareFamilies = true;\n\t          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n\t            // We don't know the inner type yet.\n\t            // We're going to assume that the lazy inner type is stable,\n\t            // and so it is sufficient to avoid reconciling it away.\n\t            // We're not going to unwrap or actually use the new lazy type.\n\t            needsCompareFamilies = true;\n\t          }\n\n\t          break;\n\t        }\n\n\t      case ForwardRef:\n\t        {\n\t          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n\t            needsCompareFamilies = true;\n\t          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n\t            needsCompareFamilies = true;\n\t          }\n\n\t          break;\n\t        }\n\n\t      case MemoComponent:\n\t      case SimpleMemoComponent:\n\t        {\n\t          if ($$typeofNextType === REACT_MEMO_TYPE) {\n\t            // TODO: if it was but can no longer be simple,\n\t            // we shouldn't set this.\n\t            needsCompareFamilies = true;\n\t          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n\t            needsCompareFamilies = true;\n\t          }\n\n\t          break;\n\t        }\n\n\t      default:\n\t        return false;\n\t    } // Check if both types have a family and it's the same one.\n\n\n\t    if (needsCompareFamilies) {\n\t      // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n\t      // This means both of them need to be registered to preserve state.\n\t      // If we unwrapped and compared the inner types for wrappers instead,\n\t      // then we would risk falsely saying two separate memo(Foo)\n\t      // calls are equivalent because they wrap the same Foo function.\n\t      var prevFamily = resolveFamily(prevType);\n\n\t      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n\t        return true;\n\t      }\n\t    }\n\n\t    return false;\n\t  }\n\t}\n\tfunction markFailedErrorBoundaryForHotReloading(fiber) {\n\t  {\n\t    if (resolveFamily === null) {\n\t      // Hot reloading is disabled.\n\t      return;\n\t    }\n\n\t    if (typeof WeakSet !== 'function') {\n\t      return;\n\t    }\n\n\t    if (failedBoundaries === null) {\n\t      failedBoundaries = new WeakSet();\n\t    }\n\n\t    failedBoundaries.add(fiber);\n\t  }\n\t}\n\tvar scheduleRefresh = function (root, update) {\n\t  {\n\t    if (resolveFamily === null) {\n\t      // Hot reloading is disabled.\n\t      return;\n\t    }\n\n\t    var staleFamilies = update.staleFamilies,\n\t        updatedFamilies = update.updatedFamilies;\n\t    flushPassiveEffects();\n\t    flushSync(function () {\n\t      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n\t    });\n\t  }\n\t};\n\tvar scheduleRoot = function (root, element) {\n\t  {\n\t    if (root.context !== emptyContextObject) {\n\t      // Super edge case: root has a legacy _renderSubtree context\n\t      // but we don't know the parentComponent so we can't pass it.\n\t      // Just ignore. We'll delete this with _renderSubtree code path later.\n\t      return;\n\t    }\n\n\t    flushPassiveEffects();\n\t    flushSync(function () {\n\t      updateContainer(element, root, null, null);\n\t    });\n\t  }\n\t};\n\n\tfunction scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n\t  {\n\t    var alternate = fiber.alternate,\n\t        child = fiber.child,\n\t        sibling = fiber.sibling,\n\t        tag = fiber.tag,\n\t        type = fiber.type;\n\t    var candidateType = null;\n\n\t    switch (tag) {\n\t      case FunctionComponent:\n\t      case SimpleMemoComponent:\n\t      case ClassComponent:\n\t        candidateType = type;\n\t        break;\n\n\t      case ForwardRef:\n\t        candidateType = type.render;\n\t        break;\n\t    }\n\n\t    if (resolveFamily === null) {\n\t      throw new Error('Expected resolveFamily to be set during hot reload.');\n\t    }\n\n\t    var needsRender = false;\n\t    var needsRemount = false;\n\n\t    if (candidateType !== null) {\n\t      var family = resolveFamily(candidateType);\n\n\t      if (family !== undefined) {\n\t        if (staleFamilies.has(family)) {\n\t          needsRemount = true;\n\t        } else if (updatedFamilies.has(family)) {\n\t          if (tag === ClassComponent) {\n\t            needsRemount = true;\n\t          } else {\n\t            needsRender = true;\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    if (failedBoundaries !== null) {\n\t      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n\t        needsRemount = true;\n\t      }\n\t    }\n\n\t    if (needsRemount) {\n\t      fiber._debugNeedsRemount = true;\n\t    }\n\n\t    if (needsRemount || needsRender) {\n\t      var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t      if (_root !== null) {\n\t        scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);\n\t      }\n\t    }\n\n\t    if (child !== null && !needsRemount) {\n\t      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n\t    }\n\n\t    if (sibling !== null) {\n\t      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n\t    }\n\t  }\n\t}\n\n\tvar findHostInstancesForRefresh = function (root, families) {\n\t  {\n\t    var hostInstances = new Set();\n\t    var types = new Set(families.map(function (family) {\n\t      return family.current;\n\t    }));\n\t    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n\t    return hostInstances;\n\t  }\n\t};\n\n\tfunction findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n\t  {\n\t    var child = fiber.child,\n\t        sibling = fiber.sibling,\n\t        tag = fiber.tag,\n\t        type = fiber.type;\n\t    var candidateType = null;\n\n\t    switch (tag) {\n\t      case FunctionComponent:\n\t      case SimpleMemoComponent:\n\t      case ClassComponent:\n\t        candidateType = type;\n\t        break;\n\n\t      case ForwardRef:\n\t        candidateType = type.render;\n\t        break;\n\t    }\n\n\t    var didMatch = false;\n\n\t    if (candidateType !== null) {\n\t      if (types.has(candidateType)) {\n\t        didMatch = true;\n\t      }\n\t    }\n\n\t    if (didMatch) {\n\t      // We have a match. This only drills down to the closest host components.\n\t      // There's no need to search deeper because for the purpose of giving\n\t      // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n\t      findHostInstancesForFiberShallowly(fiber, hostInstances);\n\t    } else {\n\t      // If there's no match, maybe there will be one further down in the child tree.\n\t      if (child !== null) {\n\t        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n\t      }\n\t    }\n\n\t    if (sibling !== null) {\n\t      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n\t    }\n\t  }\n\t}\n\n\tfunction findHostInstancesForFiberShallowly(fiber, hostInstances) {\n\t  {\n\t    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n\n\t    if (foundHostInstances) {\n\t      return;\n\t    } // If we didn't find any host children, fallback to closest host parent.\n\n\n\t    var node = fiber;\n\n\t    while (true) {\n\t      switch (node.tag) {\n\t        case HostComponent:\n\t          hostInstances.add(node.stateNode);\n\t          return;\n\n\t        case HostPortal:\n\t          hostInstances.add(node.stateNode.containerInfo);\n\t          return;\n\n\t        case HostRoot:\n\t          hostInstances.add(node.stateNode.containerInfo);\n\t          return;\n\t      }\n\n\t      if (node.return === null) {\n\t        throw new Error('Expected to reach root first.');\n\t      }\n\n\t      node = node.return;\n\t    }\n\t  }\n\t}\n\n\tfunction findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n\t  {\n\t    var node = fiber;\n\t    var foundHostInstances = false;\n\n\t    while (true) {\n\t      if (node.tag === HostComponent) {\n\t        // We got a match.\n\t        foundHostInstances = true;\n\t        hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n\t      } else if (node.child !== null) {\n\t        node.child.return = node;\n\t        node = node.child;\n\t        continue;\n\t      }\n\n\t      if (node === fiber) {\n\t        return foundHostInstances;\n\t      }\n\n\t      while (node.sibling === null) {\n\t        if (node.return === null || node.return === fiber) {\n\t          return foundHostInstances;\n\t        }\n\n\t        node = node.return;\n\t      }\n\n\t      node.sibling.return = node.return;\n\t      node = node.sibling;\n\t    }\n\t  }\n\n\t  return false;\n\t}\n\n\tvar hasBadMapPolyfill;\n\n\t{\n\t  hasBadMapPolyfill = false;\n\n\t  try {\n\t    var nonExtensibleObject = Object.preventExtensions({});\n\t    /* eslint-disable no-new */\n\n\t    new Map([[nonExtensibleObject, null]]);\n\t    new Set([nonExtensibleObject]);\n\t    /* eslint-enable no-new */\n\t  } catch (e) {\n\t    // TODO: Consider warning about bad polyfills\n\t    hasBadMapPolyfill = true;\n\t  }\n\t}\n\n\tfunction FiberNode(tag, pendingProps, key, mode) {\n\t  // Instance\n\t  this.tag = tag;\n\t  this.key = key;\n\t  this.elementType = null;\n\t  this.type = null;\n\t  this.stateNode = null; // Fiber\n\n\t  this.return = null;\n\t  this.child = null;\n\t  this.sibling = null;\n\t  this.index = 0;\n\t  this.ref = null;\n\t  this.pendingProps = pendingProps;\n\t  this.memoizedProps = null;\n\t  this.updateQueue = null;\n\t  this.memoizedState = null;\n\t  this.dependencies = null;\n\t  this.mode = mode; // Effects\n\n\t  this.flags = NoFlags;\n\t  this.subtreeFlags = NoFlags;\n\t  this.deletions = null;\n\t  this.lanes = NoLanes;\n\t  this.childLanes = NoLanes;\n\t  this.alternate = null;\n\n\t  {\n\t    // Note: The following is done to avoid a v8 performance cliff.\n\t    //\n\t    // Initializing the fields below to smis and later updating them with\n\t    // double values will cause Fibers to end up having separate shapes.\n\t    // This behavior/bug has something to do with Object.preventExtension().\n\t    // Fortunately this only impacts DEV builds.\n\t    // Unfortunately it makes React unusably slow for some applications.\n\t    // To work around this, initialize the fields below with doubles.\n\t    //\n\t    // Learn more about this here:\n\t    // https://github.com/facebook/react/issues/14365\n\t    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n\t    this.actualDuration = Number.NaN;\n\t    this.actualStartTime = Number.NaN;\n\t    this.selfBaseDuration = Number.NaN;\n\t    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n\t    // This won't trigger the performance cliff mentioned above,\n\t    // and it simplifies other profiler code (including DevTools).\n\n\t    this.actualDuration = 0;\n\t    this.actualStartTime = -1;\n\t    this.selfBaseDuration = 0;\n\t    this.treeBaseDuration = 0;\n\t  }\n\n\t  {\n\t    // This isn't directly used but is handy for debugging internals:\n\t    this._debugSource = null;\n\t    this._debugOwner = null;\n\t    this._debugNeedsRemount = false;\n\t    this._debugHookTypes = null;\n\n\t    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n\t      Object.preventExtensions(this);\n\t    }\n\t  }\n\t} // This is a constructor function, rather than a POJO constructor, still\n\t// please ensure we do the following:\n\t// 1) Nobody should add any instance methods on this. Instance methods can be\n\t//    more difficult to predict when they get optimized and they are almost\n\t//    never inlined properly in static compilers.\n\t// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n\t//    always know when it is a fiber.\n\t// 3) We might want to experiment with using numeric keys since they are easier\n\t//    to optimize in a non-JIT environment.\n\t// 4) We can easily go from a constructor to a createFiber object literal if that\n\t//    is faster.\n\t// 5) It should be easy to port this to a C struct and keep a C implementation\n\t//    compatible.\n\n\n\tvar createFiber = function (tag, pendingProps, key, mode) {\n\t  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n\t  return new FiberNode(tag, pendingProps, key, mode);\n\t};\n\n\tfunction shouldConstruct$1(Component) {\n\t  var prototype = Component.prototype;\n\t  return !!(prototype && prototype.isReactComponent);\n\t}\n\n\tfunction isSimpleFunctionComponent(type) {\n\t  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;\n\t}\n\tfunction resolveLazyComponentTag(Component) {\n\t  if (typeof Component === 'function') {\n\t    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;\n\t  } else if (Component !== undefined && Component !== null) {\n\t    var $$typeof = Component.$$typeof;\n\n\t    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n\t      return ForwardRef;\n\t    }\n\n\t    if ($$typeof === REACT_MEMO_TYPE) {\n\t      return MemoComponent;\n\t    }\n\t  }\n\n\t  return IndeterminateComponent;\n\t} // This is used to create an alternate fiber to do work on.\n\n\tfunction createWorkInProgress(current, pendingProps) {\n\t  var workInProgress = current.alternate;\n\n\t  if (workInProgress === null) {\n\t    // We use a double buffering pooling technique because we know that we'll\n\t    // only ever need at most two versions of a tree. We pool the \"other\" unused\n\t    // node that we're free to reuse. This is lazily created to avoid allocating\n\t    // extra objects for things that are never updated. It also allow us to\n\t    // reclaim the extra memory if needed.\n\t    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n\t    workInProgress.elementType = current.elementType;\n\t    workInProgress.type = current.type;\n\t    workInProgress.stateNode = current.stateNode;\n\n\t    {\n\t      // DEV-only fields\n\t      workInProgress._debugSource = current._debugSource;\n\t      workInProgress._debugOwner = current._debugOwner;\n\t      workInProgress._debugHookTypes = current._debugHookTypes;\n\t    }\n\n\t    workInProgress.alternate = current;\n\t    current.alternate = workInProgress;\n\t  } else {\n\t    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n\t    workInProgress.type = current.type; // We already have an alternate.\n\t    // Reset the effect tag.\n\n\t    workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n\t    workInProgress.subtreeFlags = NoFlags;\n\t    workInProgress.deletions = null;\n\n\t    {\n\t      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n\t      // This prevents time from endlessly accumulating in new commits.\n\t      // This has the downside of resetting values for different priority renders,\n\t      // But works for yielding (the common case) and should support resuming.\n\t      workInProgress.actualDuration = 0;\n\t      workInProgress.actualStartTime = -1;\n\t    }\n\t  } // Reset all effects except static ones.\n\t  // Static effects are not specific to a render.\n\n\n\t  workInProgress.flags = current.flags & StaticMask;\n\t  workInProgress.childLanes = current.childLanes;\n\t  workInProgress.lanes = current.lanes;\n\t  workInProgress.child = current.child;\n\t  workInProgress.memoizedProps = current.memoizedProps;\n\t  workInProgress.memoizedState = current.memoizedState;\n\t  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n\t  // it cannot be shared with the current fiber.\n\n\t  var currentDependencies = current.dependencies;\n\t  workInProgress.dependencies = currentDependencies === null ? null : {\n\t    lanes: currentDependencies.lanes,\n\t    firstContext: currentDependencies.firstContext\n\t  }; // These will be overridden during the parent's reconciliation\n\n\t  workInProgress.sibling = current.sibling;\n\t  workInProgress.index = current.index;\n\t  workInProgress.ref = current.ref;\n\n\t  {\n\t    workInProgress.selfBaseDuration = current.selfBaseDuration;\n\t    workInProgress.treeBaseDuration = current.treeBaseDuration;\n\t  }\n\n\t  {\n\t    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n\t    switch (workInProgress.tag) {\n\t      case IndeterminateComponent:\n\t      case FunctionComponent:\n\t      case SimpleMemoComponent:\n\t        workInProgress.type = resolveFunctionForHotReloading(current.type);\n\t        break;\n\n\t      case ClassComponent:\n\t        workInProgress.type = resolveClassForHotReloading(current.type);\n\t        break;\n\n\t      case ForwardRef:\n\t        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n\t        break;\n\t    }\n\t  }\n\n\t  return workInProgress;\n\t} // Used to reuse a Fiber for a second pass.\n\n\tfunction resetWorkInProgress(workInProgress, renderLanes) {\n\t  // This resets the Fiber to what createFiber or createWorkInProgress would\n\t  // have set the values to before during the first pass. Ideally this wouldn't\n\t  // be necessary but unfortunately many code paths reads from the workInProgress\n\t  // when they should be reading from current and writing to workInProgress.\n\t  // We assume pendingProps, index, key, ref, return are still untouched to\n\t  // avoid doing another reconciliation.\n\t  // Reset the effect flags but keep any Placement tags, since that's something\n\t  // that child fiber is setting, not the reconciliation.\n\t  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n\t  var current = workInProgress.alternate;\n\n\t  if (current === null) {\n\t    // Reset to createFiber's initial values.\n\t    workInProgress.childLanes = NoLanes;\n\t    workInProgress.lanes = renderLanes;\n\t    workInProgress.child = null;\n\t    workInProgress.subtreeFlags = NoFlags;\n\t    workInProgress.memoizedProps = null;\n\t    workInProgress.memoizedState = null;\n\t    workInProgress.updateQueue = null;\n\t    workInProgress.dependencies = null;\n\t    workInProgress.stateNode = null;\n\n\t    {\n\t      // Note: We don't reset the actualTime counts. It's useful to accumulate\n\t      // actual time across multiple render passes.\n\t      workInProgress.selfBaseDuration = 0;\n\t      workInProgress.treeBaseDuration = 0;\n\t    }\n\t  } else {\n\t    // Reset to the cloned values that createWorkInProgress would've.\n\t    workInProgress.childLanes = current.childLanes;\n\t    workInProgress.lanes = current.lanes;\n\t    workInProgress.child = current.child;\n\t    workInProgress.subtreeFlags = NoFlags;\n\t    workInProgress.deletions = null;\n\t    workInProgress.memoizedProps = current.memoizedProps;\n\t    workInProgress.memoizedState = current.memoizedState;\n\t    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n\t    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n\t    // it cannot be shared with the current fiber.\n\n\t    var currentDependencies = current.dependencies;\n\t    workInProgress.dependencies = currentDependencies === null ? null : {\n\t      lanes: currentDependencies.lanes,\n\t      firstContext: currentDependencies.firstContext\n\t    };\n\n\t    {\n\t      // Note: We don't reset the actualTime counts. It's useful to accumulate\n\t      // actual time across multiple render passes.\n\t      workInProgress.selfBaseDuration = current.selfBaseDuration;\n\t      workInProgress.treeBaseDuration = current.treeBaseDuration;\n\t    }\n\t  }\n\n\t  return workInProgress;\n\t}\n\tfunction createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n\t  var mode;\n\n\t  if (tag === ConcurrentRoot) {\n\t    mode = ConcurrentMode;\n\n\t    if (isStrictMode === true) {\n\t      mode |= StrictLegacyMode;\n\n\t      {\n\t        mode |= StrictEffectsMode;\n\t      }\n\t    }\n\t  } else {\n\t    mode = NoMode;\n\t  }\n\n\t  if ( isDevToolsPresent) {\n\t    // Always collect profile timings when DevTools are present.\n\t    // This enables DevTools to start capturing timing at any point–\n\t    // Without some nodes in the tree having empty base times.\n\t    mode |= ProfileMode;\n\t  }\n\n\t  return createFiber(HostRoot, null, null, mode);\n\t}\n\tfunction createFiberFromTypeAndProps(type, // React$ElementType\n\tkey, pendingProps, owner, mode, lanes) {\n\t  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n\t  var resolvedType = type;\n\n\t  if (typeof type === 'function') {\n\t    if (shouldConstruct$1(type)) {\n\t      fiberTag = ClassComponent;\n\n\t      {\n\t        resolvedType = resolveClassForHotReloading(resolvedType);\n\t      }\n\t    } else {\n\t      {\n\t        resolvedType = resolveFunctionForHotReloading(resolvedType);\n\t      }\n\t    }\n\t  } else if (typeof type === 'string') {\n\t    fiberTag = HostComponent;\n\t  } else {\n\t    getTag: switch (type) {\n\t      case REACT_FRAGMENT_TYPE:\n\t        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n\n\t      case REACT_STRICT_MODE_TYPE:\n\t        fiberTag = Mode;\n\t        mode |= StrictLegacyMode;\n\n\t        if ( (mode & ConcurrentMode) !== NoMode) {\n\t          // Strict effects should never run on legacy roots\n\t          mode |= StrictEffectsMode;\n\t        }\n\n\t        break;\n\n\t      case REACT_PROFILER_TYPE:\n\t        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n\t      case REACT_SUSPENSE_TYPE:\n\t        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n\t      case REACT_SUSPENSE_LIST_TYPE:\n\t        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n\t      case REACT_OFFSCREEN_TYPE:\n\t        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n\t      case REACT_LEGACY_HIDDEN_TYPE:\n\n\t      // eslint-disable-next-line no-fallthrough\n\n\t      case REACT_SCOPE_TYPE:\n\n\t      // eslint-disable-next-line no-fallthrough\n\n\t      case REACT_CACHE_TYPE:\n\n\t      // eslint-disable-next-line no-fallthrough\n\n\t      case REACT_TRACING_MARKER_TYPE:\n\n\t      // eslint-disable-next-line no-fallthrough\n\n\t      case REACT_DEBUG_TRACING_MODE_TYPE:\n\n\t      // eslint-disable-next-line no-fallthrough\n\n\t      default:\n\t        {\n\t          if (typeof type === 'object' && type !== null) {\n\t            switch (type.$$typeof) {\n\t              case REACT_PROVIDER_TYPE:\n\t                fiberTag = ContextProvider;\n\t                break getTag;\n\n\t              case REACT_CONTEXT_TYPE:\n\t                // This is a consumer\n\t                fiberTag = ContextConsumer;\n\t                break getTag;\n\n\t              case REACT_FORWARD_REF_TYPE:\n\t                fiberTag = ForwardRef;\n\n\t                {\n\t                  resolvedType = resolveForwardRefForHotReloading(resolvedType);\n\t                }\n\n\t                break getTag;\n\n\t              case REACT_MEMO_TYPE:\n\t                fiberTag = MemoComponent;\n\t                break getTag;\n\n\t              case REACT_LAZY_TYPE:\n\t                fiberTag = LazyComponent;\n\t                resolvedType = null;\n\t                break getTag;\n\t            }\n\t          }\n\n\t          var info = '';\n\n\t          {\n\t            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n\t              info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n\t            }\n\n\t            var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n\n\t            if (ownerName) {\n\t              info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n\t            }\n\t          }\n\n\t          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n\t        }\n\t    }\n\t  }\n\n\t  var fiber = createFiber(fiberTag, pendingProps, key, mode);\n\t  fiber.elementType = type;\n\t  fiber.type = resolvedType;\n\t  fiber.lanes = lanes;\n\n\t  {\n\t    fiber._debugOwner = owner;\n\t  }\n\n\t  return fiber;\n\t}\n\tfunction createFiberFromElement(element, mode, lanes) {\n\t  var owner = null;\n\n\t  {\n\t    owner = element._owner;\n\t  }\n\n\t  var type = element.type;\n\t  var key = element.key;\n\t  var pendingProps = element.props;\n\t  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n\n\t  {\n\t    fiber._debugSource = element._source;\n\t    fiber._debugOwner = element._owner;\n\t  }\n\n\t  return fiber;\n\t}\n\tfunction createFiberFromFragment(elements, mode, lanes, key) {\n\t  var fiber = createFiber(Fragment, elements, key, mode);\n\t  fiber.lanes = lanes;\n\t  return fiber;\n\t}\n\n\tfunction createFiberFromProfiler(pendingProps, mode, lanes, key) {\n\t  {\n\t    if (typeof pendingProps.id !== 'string') {\n\t      error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n\t    }\n\t  }\n\n\t  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n\t  fiber.elementType = REACT_PROFILER_TYPE;\n\t  fiber.lanes = lanes;\n\n\t  {\n\t    fiber.stateNode = {\n\t      effectDuration: 0,\n\t      passiveEffectDuration: 0\n\t    };\n\t  }\n\n\t  return fiber;\n\t}\n\n\tfunction createFiberFromSuspense(pendingProps, mode, lanes, key) {\n\t  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n\t  fiber.elementType = REACT_SUSPENSE_TYPE;\n\t  fiber.lanes = lanes;\n\t  return fiber;\n\t}\n\tfunction createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n\t  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n\t  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n\t  fiber.lanes = lanes;\n\t  return fiber;\n\t}\n\tfunction createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n\t  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n\t  fiber.elementType = REACT_OFFSCREEN_TYPE;\n\t  fiber.lanes = lanes;\n\t  var primaryChildInstance = {\n\t    isHidden: false\n\t  };\n\t  fiber.stateNode = primaryChildInstance;\n\t  return fiber;\n\t}\n\tfunction createFiberFromText(content, mode, lanes) {\n\t  var fiber = createFiber(HostText, content, null, mode);\n\t  fiber.lanes = lanes;\n\t  return fiber;\n\t}\n\tfunction createFiberFromHostInstanceForDeletion() {\n\t  var fiber = createFiber(HostComponent, null, null, NoMode);\n\t  fiber.elementType = 'DELETED';\n\t  return fiber;\n\t}\n\tfunction createFiberFromDehydratedFragment(dehydratedNode) {\n\t  var fiber = createFiber(DehydratedFragment, null, null, NoMode);\n\t  fiber.stateNode = dehydratedNode;\n\t  return fiber;\n\t}\n\tfunction createFiberFromPortal(portal, mode, lanes) {\n\t  var pendingProps = portal.children !== null ? portal.children : [];\n\t  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n\t  fiber.lanes = lanes;\n\t  fiber.stateNode = {\n\t    containerInfo: portal.containerInfo,\n\t    pendingChildren: null,\n\t    // Used by persistent updates\n\t    implementation: portal.implementation\n\t  };\n\t  return fiber;\n\t} // Used for stashing WIP properties to replay failed work in DEV.\n\n\tfunction assignFiberPropertiesInDEV(target, source) {\n\t  if (target === null) {\n\t    // This Fiber's initial properties will always be overwritten.\n\t    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n\t    target = createFiber(IndeterminateComponent, null, null, NoMode);\n\t  } // This is intentionally written as a list of all properties.\n\t  // We tried to use Object.assign() instead but this is called in\n\t  // the hottest path, and Object.assign() was too slow:\n\t  // https://github.com/facebook/react/issues/12502\n\t  // This code is DEV-only so size is not a concern.\n\n\n\t  target.tag = source.tag;\n\t  target.key = source.key;\n\t  target.elementType = source.elementType;\n\t  target.type = source.type;\n\t  target.stateNode = source.stateNode;\n\t  target.return = source.return;\n\t  target.child = source.child;\n\t  target.sibling = source.sibling;\n\t  target.index = source.index;\n\t  target.ref = source.ref;\n\t  target.pendingProps = source.pendingProps;\n\t  target.memoizedProps = source.memoizedProps;\n\t  target.updateQueue = source.updateQueue;\n\t  target.memoizedState = source.memoizedState;\n\t  target.dependencies = source.dependencies;\n\t  target.mode = source.mode;\n\t  target.flags = source.flags;\n\t  target.subtreeFlags = source.subtreeFlags;\n\t  target.deletions = source.deletions;\n\t  target.lanes = source.lanes;\n\t  target.childLanes = source.childLanes;\n\t  target.alternate = source.alternate;\n\n\t  {\n\t    target.actualDuration = source.actualDuration;\n\t    target.actualStartTime = source.actualStartTime;\n\t    target.selfBaseDuration = source.selfBaseDuration;\n\t    target.treeBaseDuration = source.treeBaseDuration;\n\t  }\n\n\t  target._debugSource = source._debugSource;\n\t  target._debugOwner = source._debugOwner;\n\t  target._debugNeedsRemount = source._debugNeedsRemount;\n\t  target._debugHookTypes = source._debugHookTypes;\n\t  return target;\n\t}\n\n\tfunction FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {\n\t  this.tag = tag;\n\t  this.containerInfo = containerInfo;\n\t  this.pendingChildren = null;\n\t  this.current = null;\n\t  this.pingCache = null;\n\t  this.finishedWork = null;\n\t  this.timeoutHandle = noTimeout;\n\t  this.context = null;\n\t  this.pendingContext = null;\n\t  this.callbackNode = null;\n\t  this.callbackPriority = NoLane;\n\t  this.eventTimes = createLaneMap(NoLanes);\n\t  this.expirationTimes = createLaneMap(NoTimestamp);\n\t  this.pendingLanes = NoLanes;\n\t  this.suspendedLanes = NoLanes;\n\t  this.pingedLanes = NoLanes;\n\t  this.expiredLanes = NoLanes;\n\t  this.mutableReadLanes = NoLanes;\n\t  this.finishedLanes = NoLanes;\n\t  this.entangledLanes = NoLanes;\n\t  this.entanglements = createLaneMap(NoLanes);\n\t  this.identifierPrefix = identifierPrefix;\n\t  this.onRecoverableError = onRecoverableError;\n\n\t  if (supportsHydration) {\n\t    this.mutableSourceEagerHydrationData = null;\n\t  }\n\n\t  {\n\t    this.effectDuration = 0;\n\t    this.passiveEffectDuration = 0;\n\t  }\n\n\t  {\n\t    this.memoizedUpdaters = new Set();\n\t    var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\n\n\t    for (var _i = 0; _i < TotalLanes; _i++) {\n\t      pendingUpdatersLaneMap.push(new Set());\n\t    }\n\t  }\n\n\t  {\n\t    switch (tag) {\n\t      case ConcurrentRoot:\n\t        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n\t        break;\n\n\t      case LegacyRoot:\n\t        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n\t        break;\n\t    }\n\t  }\n\t}\n\n\tfunction createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the\n\t// host config, but because they are passed in at runtime, we have to thread\n\t// them through the root constructor. Perhaps we should put them all into a\n\t// single type, like a DynamicHostConfig that is defined by the renderer.\n\tidentifierPrefix, onRecoverableError, transitionCallbacks) {\n\t  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);\n\t  // stateNode is any.\n\n\n\t  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n\t  root.current = uninitializedFiber;\n\t  uninitializedFiber.stateNode = root;\n\n\t  {\n\t    var _initialState = {\n\t      element: initialChildren,\n\t      isDehydrated: hydrate,\n\t      cache: null,\n\t      // not enabled yet\n\t      transitions: null,\n\t      pendingSuspenseBoundaries: null\n\t    };\n\t    uninitializedFiber.memoizedState = _initialState;\n\t  }\n\n\t  initializeUpdateQueue(uninitializedFiber);\n\t  return root;\n\t}\n\n\tvar ReactVersion = '18.2.0';\n\n\tfunction createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.\n\timplementation) {\n\t  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n\t  {\n\t    checkKeyStringCoercion(key);\n\t  }\n\n\t  return {\n\t    // This tag allow us to uniquely identify this as a React Portal\n\t    $$typeof: REACT_PORTAL_TYPE,\n\t    key: key == null ? null : '' + key,\n\t    children: children,\n\t    containerInfo: containerInfo,\n\t    implementation: implementation\n\t  };\n\t}\n\n\tvar didWarnAboutNestedUpdates;\n\tvar didWarnAboutFindNodeInStrictMode;\n\n\t{\n\t  didWarnAboutNestedUpdates = false;\n\t  didWarnAboutFindNodeInStrictMode = {};\n\t}\n\n\tfunction getContextForSubtree(parentComponent) {\n\t  if (!parentComponent) {\n\t    return emptyContextObject;\n\t  }\n\n\t  var fiber = get(parentComponent);\n\t  var parentContext = findCurrentUnmaskedContext(fiber);\n\n\t  if (fiber.tag === ClassComponent) {\n\t    var Component = fiber.type;\n\n\t    if (isContextProvider(Component)) {\n\t      return processChildContext(fiber, Component, parentContext);\n\t    }\n\t  }\n\n\t  return parentContext;\n\t}\n\n\tfunction findHostInstance(component) {\n\t  var fiber = get(component);\n\n\t  if (fiber === undefined) {\n\t    if (typeof component.render === 'function') {\n\t      throw new Error('Unable to find node on an unmounted component.');\n\t    } else {\n\t      var keys = Object.keys(component).join(',');\n\t      throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n\t    }\n\t  }\n\n\t  var hostFiber = findCurrentHostFiber(fiber);\n\n\t  if (hostFiber === null) {\n\t    return null;\n\t  }\n\n\t  return hostFiber.stateNode;\n\t}\n\n\tfunction findHostInstanceWithWarning(component, methodName) {\n\t  {\n\t    var fiber = get(component);\n\n\t    if (fiber === undefined) {\n\t      if (typeof component.render === 'function') {\n\t        throw new Error('Unable to find node on an unmounted component.');\n\t      } else {\n\t        var keys = Object.keys(component).join(',');\n\t        throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n\t      }\n\t    }\n\n\t    var hostFiber = findCurrentHostFiber(fiber);\n\n\t    if (hostFiber === null) {\n\t      return null;\n\t    }\n\n\t    if (hostFiber.mode & StrictLegacyMode) {\n\t      var componentName = getComponentNameFromFiber(fiber) || 'Component';\n\n\t      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n\t        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\t        var previousFiber = current;\n\n\t        try {\n\t          setCurrentFiber(hostFiber);\n\n\t          if (fiber.mode & StrictLegacyMode) {\n\t            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n\t          } else {\n\t            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n\t          }\n\t        } finally {\n\t          // Ideally this should reset to previous but this shouldn't be called in\n\t          // render and there's another warning for that anyway.\n\t          if (previousFiber) {\n\t            setCurrentFiber(previousFiber);\n\t          } else {\n\t            resetCurrentFiber();\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    return hostFiber.stateNode;\n\t  }\n\t}\n\n\tfunction createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n\t  var hydrate = false;\n\t  var initialChildren = null;\n\t  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\n\t}\n\tfunction createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.\n\tcallback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n\t  var hydrate = true;\n\t  var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor\n\n\t  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from\n\t  // a regular update because the initial render must match was was rendered\n\t  // on the server.\n\t  // NOTE: This update intentionally doesn't have a payload. We're only using\n\t  // the update to schedule work on the root fiber (and, for legacy roots, to\n\t  // enqueue the callback if one is provided).\n\n\t  var current = root.current;\n\t  var eventTime = requestEventTime();\n\t  var lane = requestUpdateLane(current);\n\t  var update = createUpdate(eventTime, lane);\n\t  update.callback = callback !== undefined && callback !== null ? callback : null;\n\t  enqueueUpdate(current, update, lane);\n\t  scheduleInitialHydrationOnRoot(root, lane, eventTime);\n\t  return root;\n\t}\n\tfunction updateContainer(element, container, parentComponent, callback) {\n\t  {\n\t    onScheduleRoot(container, element);\n\t  }\n\n\t  var current$1 = container.current;\n\t  var eventTime = requestEventTime();\n\t  var lane = requestUpdateLane(current$1);\n\n\t  {\n\t    markRenderScheduled(lane);\n\t  }\n\n\t  var context = getContextForSubtree(parentComponent);\n\n\t  if (container.context === null) {\n\t    container.context = context;\n\t  } else {\n\t    container.pendingContext = context;\n\t  }\n\n\t  {\n\t    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n\t      didWarnAboutNestedUpdates = true;\n\n\t      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');\n\t    }\n\t  }\n\n\t  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property\n\t  // being called \"element\".\n\n\t  update.payload = {\n\t    element: element\n\t  };\n\t  callback = callback === undefined ? null : callback;\n\n\t  if (callback !== null) {\n\t    {\n\t      if (typeof callback !== 'function') {\n\t        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n\t      }\n\t    }\n\n\t    update.callback = callback;\n\t  }\n\n\t  var root = enqueueUpdate(current$1, update, lane);\n\n\t  if (root !== null) {\n\t    scheduleUpdateOnFiber(root, current$1, lane, eventTime);\n\t    entangleTransitions(root, current$1, lane);\n\t  }\n\n\t  return lane;\n\t}\n\tfunction getPublicRootInstance(container) {\n\t  var containerFiber = container.current;\n\n\t  if (!containerFiber.child) {\n\t    return null;\n\t  }\n\n\t  switch (containerFiber.child.tag) {\n\t    case HostComponent:\n\t      return getPublicInstance(containerFiber.child.stateNode);\n\n\t    default:\n\t      return containerFiber.child.stateNode;\n\t  }\n\t}\n\tfunction attemptSynchronousHydration(fiber) {\n\t  switch (fiber.tag) {\n\t    case HostRoot:\n\t      {\n\t        var root = fiber.stateNode;\n\n\t        if (isRootDehydrated(root)) {\n\t          // Flush the first scheduled \"update\".\n\t          var lanes = getHighestPriorityPendingLanes(root);\n\t          flushRoot(root, lanes);\n\t        }\n\n\t        break;\n\t      }\n\n\t    case SuspenseComponent:\n\t      {\n\t        flushSync(function () {\n\t          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t          if (root !== null) {\n\t            var eventTime = requestEventTime();\n\t            scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);\n\t          }\n\t        }); // If we're still blocked after this, we need to increase\n\t        // the priority of any promises resolving within this\n\t        // boundary so that they next attempt also has higher pri.\n\n\t        var retryLane = SyncLane;\n\t        markRetryLaneIfNotHydrated(fiber, retryLane);\n\t        break;\n\t      }\n\t  }\n\t}\n\n\tfunction markRetryLaneImpl(fiber, retryLane) {\n\t  var suspenseState = fiber.memoizedState;\n\n\t  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n\t    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);\n\t  }\n\t} // Increases the priority of thenables when they resolve within this boundary.\n\n\n\tfunction markRetryLaneIfNotHydrated(fiber, retryLane) {\n\t  markRetryLaneImpl(fiber, retryLane);\n\t  var alternate = fiber.alternate;\n\n\t  if (alternate) {\n\t    markRetryLaneImpl(alternate, retryLane);\n\t  }\n\t}\n\n\tfunction attemptDiscreteHydration(fiber) {\n\t  if (fiber.tag !== SuspenseComponent) {\n\t    // We ignore HostRoots here because we can't increase\n\t    // their priority and they should not suspend on I/O,\n\t    // since you have to wrap anything that might suspend in\n\t    // Suspense.\n\t    return;\n\t  }\n\n\t  var lane = SyncLane;\n\t  var root = enqueueConcurrentRenderForLane(fiber, lane);\n\n\t  if (root !== null) {\n\t    var eventTime = requestEventTime();\n\t    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t  }\n\n\t  markRetryLaneIfNotHydrated(fiber, lane);\n\t}\n\tfunction attemptContinuousHydration(fiber) {\n\t  if (fiber.tag !== SuspenseComponent) {\n\t    // We ignore HostRoots here because we can't increase\n\t    // their priority and they should not suspend on I/O,\n\t    // since you have to wrap anything that might suspend in\n\t    // Suspense.\n\t    return;\n\t  }\n\n\t  var lane = SelectiveHydrationLane;\n\t  var root = enqueueConcurrentRenderForLane(fiber, lane);\n\n\t  if (root !== null) {\n\t    var eventTime = requestEventTime();\n\t    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t  }\n\n\t  markRetryLaneIfNotHydrated(fiber, lane);\n\t}\n\tfunction attemptHydrationAtCurrentPriority(fiber) {\n\t  if (fiber.tag !== SuspenseComponent) {\n\t    // We ignore HostRoots here because we can't increase\n\t    // their priority other than synchronously flush it.\n\t    return;\n\t  }\n\n\t  var lane = requestUpdateLane(fiber);\n\t  var root = enqueueConcurrentRenderForLane(fiber, lane);\n\n\t  if (root !== null) {\n\t    var eventTime = requestEventTime();\n\t    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t  }\n\n\t  markRetryLaneIfNotHydrated(fiber, lane);\n\t}\n\tfunction findHostInstanceWithNoPortals(fiber) {\n\t  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n\n\t  if (hostFiber === null) {\n\t    return null;\n\t  }\n\n\t  return hostFiber.stateNode;\n\t}\n\n\tvar shouldErrorImpl = function (fiber) {\n\t  return null;\n\t};\n\n\tfunction shouldError(fiber) {\n\t  return shouldErrorImpl(fiber);\n\t}\n\n\tvar shouldSuspendImpl = function (fiber) {\n\t  return false;\n\t};\n\n\tfunction shouldSuspend(fiber) {\n\t  return shouldSuspendImpl(fiber);\n\t}\n\tvar overrideHookState = null;\n\tvar overrideHookStateDeletePath = null;\n\tvar overrideHookStateRenamePath = null;\n\tvar overrideProps = null;\n\tvar overridePropsDeletePath = null;\n\tvar overridePropsRenamePath = null;\n\tvar scheduleUpdate = null;\n\tvar setErrorHandler = null;\n\tvar setSuspenseHandler = null;\n\n\t{\n\t  var copyWithDeleteImpl = function (obj, path, index) {\n\t    var key = path[index];\n\t    var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n\t    if (index + 1 === path.length) {\n\t      if (isArray(updated)) {\n\t        updated.splice(key, 1);\n\t      } else {\n\t        delete updated[key];\n\t      }\n\n\t      return updated;\n\t    } // $FlowFixMe number or string is fine here\n\n\n\t    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n\t    return updated;\n\t  };\n\n\t  var copyWithDelete = function (obj, path) {\n\t    return copyWithDeleteImpl(obj, path, 0);\n\t  };\n\n\t  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n\t    var oldKey = oldPath[index];\n\t    var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n\t    if (index + 1 === oldPath.length) {\n\t      var newKey = newPath[index]; // $FlowFixMe number or string is fine here\n\n\t      updated[newKey] = updated[oldKey];\n\n\t      if (isArray(updated)) {\n\t        updated.splice(oldKey, 1);\n\t      } else {\n\t        delete updated[oldKey];\n\t      }\n\t    } else {\n\t      // $FlowFixMe number or string is fine here\n\t      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here\n\t      obj[oldKey], oldPath, newPath, index + 1);\n\t    }\n\n\t    return updated;\n\t  };\n\n\t  var copyWithRename = function (obj, oldPath, newPath) {\n\t    if (oldPath.length !== newPath.length) {\n\t      warn('copyWithRename() expects paths of the same length');\n\n\t      return;\n\t    } else {\n\t      for (var i = 0; i < newPath.length - 1; i++) {\n\t        if (oldPath[i] !== newPath[i]) {\n\t          warn('copyWithRename() expects paths to be the same except for the deepest key');\n\n\t          return;\n\t        }\n\t      }\n\t    }\n\n\t    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n\t  };\n\n\t  var copyWithSetImpl = function (obj, path, index, value) {\n\t    if (index >= path.length) {\n\t      return value;\n\t    }\n\n\t    var key = path[index];\n\t    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here\n\n\t    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n\t    return updated;\n\t  };\n\n\t  var copyWithSet = function (obj, path, value) {\n\t    return copyWithSetImpl(obj, path, 0, value);\n\t  };\n\n\t  var findHook = function (fiber, id) {\n\t    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n\t    // This may change in the future with e.g. nested hooks.\n\t    var currentHook = fiber.memoizedState;\n\n\t    while (currentHook !== null && id > 0) {\n\t      currentHook = currentHook.next;\n\t      id--;\n\t    }\n\n\t    return currentHook;\n\t  }; // Support DevTools editable values for useState and useReducer.\n\n\n\t  overrideHookState = function (fiber, id, path, value) {\n\t    var hook = findHook(fiber, id);\n\n\t    if (hook !== null) {\n\t      var newState = copyWithSet(hook.memoizedState, path, value);\n\t      hook.memoizedState = newState;\n\t      hook.baseState = newState; // We aren't actually adding an update to the queue,\n\t      // because there is no update we can add for useReducer hooks that won't trigger an error.\n\t      // (There's no appropriate action type for DevTools overrides.)\n\t      // As a result though, React will see the scheduled update as a noop and bailout.\n\t      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n\t      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n\t      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t      if (root !== null) {\n\t        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t      }\n\t    }\n\t  };\n\n\t  overrideHookStateDeletePath = function (fiber, id, path) {\n\t    var hook = findHook(fiber, id);\n\n\t    if (hook !== null) {\n\t      var newState = copyWithDelete(hook.memoizedState, path);\n\t      hook.memoizedState = newState;\n\t      hook.baseState = newState; // We aren't actually adding an update to the queue,\n\t      // because there is no update we can add for useReducer hooks that won't trigger an error.\n\t      // (There's no appropriate action type for DevTools overrides.)\n\t      // As a result though, React will see the scheduled update as a noop and bailout.\n\t      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n\t      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n\t      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t      if (root !== null) {\n\t        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t      }\n\t    }\n\t  };\n\n\t  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n\t    var hook = findHook(fiber, id);\n\n\t    if (hook !== null) {\n\t      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n\t      hook.memoizedState = newState;\n\t      hook.baseState = newState; // We aren't actually adding an update to the queue,\n\t      // because there is no update we can add for useReducer hooks that won't trigger an error.\n\t      // (There's no appropriate action type for DevTools overrides.)\n\t      // As a result though, React will see the scheduled update as a noop and bailout.\n\t      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n\t      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n\t      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t      if (root !== null) {\n\t        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t      }\n\t    }\n\t  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n\n\t  overrideProps = function (fiber, path, value) {\n\t    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n\n\t    if (fiber.alternate) {\n\t      fiber.alternate.pendingProps = fiber.pendingProps;\n\t    }\n\n\t    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t    if (root !== null) {\n\t      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t    }\n\t  };\n\n\t  overridePropsDeletePath = function (fiber, path) {\n\t    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n\n\t    if (fiber.alternate) {\n\t      fiber.alternate.pendingProps = fiber.pendingProps;\n\t    }\n\n\t    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t    if (root !== null) {\n\t      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t    }\n\t  };\n\n\t  overridePropsRenamePath = function (fiber, oldPath, newPath) {\n\t    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n\n\t    if (fiber.alternate) {\n\t      fiber.alternate.pendingProps = fiber.pendingProps;\n\t    }\n\n\t    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t    if (root !== null) {\n\t      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t    }\n\t  };\n\n\t  scheduleUpdate = function (fiber) {\n\t    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t    if (root !== null) {\n\t      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t    }\n\t  };\n\n\t  setErrorHandler = function (newShouldErrorImpl) {\n\t    shouldErrorImpl = newShouldErrorImpl;\n\t  };\n\n\t  setSuspenseHandler = function (newShouldSuspendImpl) {\n\t    shouldSuspendImpl = newShouldSuspendImpl;\n\t  };\n\t}\n\n\tfunction findHostInstanceByFiber(fiber) {\n\t  var hostFiber = findCurrentHostFiber(fiber);\n\n\t  if (hostFiber === null) {\n\t    return null;\n\t  }\n\n\t  return hostFiber.stateNode;\n\t}\n\n\tfunction emptyFindFiberByHostInstance(instance) {\n\t  return null;\n\t}\n\n\tfunction getCurrentFiberForDevTools() {\n\t  return current;\n\t}\n\n\tfunction injectIntoDevTools(devToolsConfig) {\n\t  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n\t  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n\t  return injectInternals({\n\t    bundleType: devToolsConfig.bundleType,\n\t    version: devToolsConfig.version,\n\t    rendererPackageName: devToolsConfig.rendererPackageName,\n\t    rendererConfig: devToolsConfig.rendererConfig,\n\t    overrideHookState: overrideHookState,\n\t    overrideHookStateDeletePath: overrideHookStateDeletePath,\n\t    overrideHookStateRenamePath: overrideHookStateRenamePath,\n\t    overrideProps: overrideProps,\n\t    overridePropsDeletePath: overridePropsDeletePath,\n\t    overridePropsRenamePath: overridePropsRenamePath,\n\t    setErrorHandler: setErrorHandler,\n\t    setSuspenseHandler: setSuspenseHandler,\n\t    scheduleUpdate: scheduleUpdate,\n\t    currentDispatcherRef: ReactCurrentDispatcher,\n\t    findHostInstanceByFiber: findHostInstanceByFiber,\n\t    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n\t    // React Refresh\n\t    findHostInstancesForRefresh:  findHostInstancesForRefresh ,\n\t    scheduleRefresh:  scheduleRefresh ,\n\t    scheduleRoot:  scheduleRoot ,\n\t    setRefreshHandler:  setRefreshHandler ,\n\t    // Enables DevTools to append owner stacks to error messages in DEV mode.\n\t    getCurrentFiber:  getCurrentFiberForDevTools ,\n\t    // Enables DevTools to detect reconciler version rather than renderer version\n\t    // which may not match for third party renderers.\n\t    reconcilerVersion: ReactVersion\n\t  });\n\t}\n\n\texports.attemptContinuousHydration = attemptContinuousHydration;\n\texports.attemptDiscreteHydration = attemptDiscreteHydration;\n\texports.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;\n\texports.attemptSynchronousHydration = attemptSynchronousHydration;\n\texports.batchedUpdates = batchedUpdates;\n\texports.createComponentSelector = createComponentSelector;\n\texports.createContainer = createContainer;\n\texports.createHasPseudoClassSelector = createHasPseudoClassSelector;\n\texports.createHydrationContainer = createHydrationContainer;\n\texports.createPortal = createPortal;\n\texports.createRoleSelector = createRoleSelector;\n\texports.createTestNameSelector = createTestNameSelector;\n\texports.createTextSelector = createTextSelector;\n\texports.deferredUpdates = deferredUpdates;\n\texports.discreteUpdates = discreteUpdates;\n\texports.findAllNodes = findAllNodes;\n\texports.findBoundingRects = findBoundingRects;\n\texports.findHostInstance = findHostInstance;\n\texports.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;\n\texports.findHostInstanceWithWarning = findHostInstanceWithWarning;\n\texports.flushControlled = flushControlled;\n\texports.flushPassiveEffects = flushPassiveEffects;\n\texports.flushSync = flushSync;\n\texports.focusWithin = focusWithin;\n\texports.getCurrentUpdatePriority = getCurrentUpdatePriority;\n\texports.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;\n\texports.getPublicRootInstance = getPublicRootInstance;\n\texports.injectIntoDevTools = injectIntoDevTools;\n\texports.isAlreadyRendering = isAlreadyRendering;\n\texports.observeVisibleRects = observeVisibleRects;\n\texports.registerMutableSourceForHydration = registerMutableSourceForHydration;\n\texports.runWithPriority = runWithPriority;\n\texports.shouldError = shouldError;\n\texports.shouldSuspend = shouldSuspend;\n\texports.updateContainer = updateContainer;\n\t    return exports;\n\t  };\n\t}\n\treturn reactReconciler_development.exports;\n}\n\nvar hasRequiredReactReconciler;\n\nfunction requireReactReconciler () {\n\tif (hasRequiredReactReconciler) return reactReconciler.exports;\n\thasRequiredReactReconciler = 1;\n\t(function (module) {\n\n\t\t{\n\t\t  module.exports = requireReactReconciler_development();\n\t\t}\n} (reactReconciler));\n\treturn reactReconciler.exports;\n}\n\nvar reactReconcilerExports = requireReactReconciler();\n\nconst entityComponent = {\n    uiText: undefined,\n    uiBackground: undefined,\n    uiTransform: undefined,\n    onClick: undefined\n};\nconst componentKeys = Object.keys(entityComponent);\nfunction isEqual(val1, val2) {\n    if (!val1 && !val2) {\n        return true;\n    }\n    if (!val1 || !val2) {\n        return val1 === val2;\n    }\n    if (val1 === val2) {\n        return true;\n    }\n    if (typeof val1 !== typeof val2) {\n        return false;\n    }\n    if (typeof val1 !== 'object') {\n        return val1 === val2;\n    }\n    if (Array.isArray(val1) && Array.isArray(val2)) {\n        if (val1.length !== val2.length) {\n            return false;\n        }\n    }\n    if (Object.keys(val1).length !== Object.keys(val2).length) {\n        return false;\n    }\n    if (JSON.stringify(val1) === JSON.stringify(val2)) {\n        return true;\n    }\n    for (const key in val1) {\n        if (!isEqual(val1[key], val2[key])) {\n            return false;\n        }\n    }\n    /* istanbul ignore next */\n    return true;\n}\nconst isNotUndefined = (val) => {\n    return !!val;\n};\nconst noopConfig = {\n    supportsMutation: true,\n    supportsPersistence: false,\n    noTimeout: -1,\n    isPrimaryRenderer: true,\n    supportsHydration: false,\n    /* istanbul ignore next */\n    insertInContainerBefore(_container, _child, _beforeChild) { },\n    detachDeletedInstance(_node) { },\n    /* istanbul ignore next */\n    hideInstance(_instance) { },\n    /* istanbul ignore next */\n    hideTextInstance(_textInstance) { },\n    /* istanbul ignore next */\n    unhideInstance(_instance, _props) { },\n    /* istanbul ignore next */\n    unhideTextInstance(_textInstance, _text) { },\n    /* istanbul ignore next */\n    clearContainer(_container) { },\n    /* istanbul ignore next */\n    getCurrentEventPriority() {\n        /* istanbul ignore next */\n        return 0;\n    },\n    /* istanbul ignore next */\n    getInstanceFromNode(_node) {\n        /* istanbul ignore next */\n        return null;\n    },\n    /* istanbul ignore next */\n    beforeActiveInstanceBlur() { },\n    /* istanbul ignore next */\n    afterActiveInstanceBlur() { },\n    /* istanbul ignore next */\n    prepareScopeUpdate() { },\n    /* istanbul ignore next */\n    getInstanceFromScope() {\n        /* istanbul ignore next */\n        return null;\n    },\n    /* istanbul ignore next */\n    removeChildFromContainer() { },\n    /* istanbul ignore next */\n    commitMount(_instance, _type, _props, _internalInstanceHandle) { },\n    /* istanbul ignore next */\n    resetTextContent(_instance) { },\n    /* istanbul ignore next */\n    commitTextUpdate(_textInstance, _oldText, _newText) { },\n    prepareForCommit(_containerInfo) {\n        return null;\n    },\n    resetAfterCommit(_containerInfo) { },\n    /* istanbul ignore next */\n    preparePortalMount(_containerInfo) { },\n    /* istanbul ignore next */\n    createTextInstance(_text, _rootContainer, _hostContext, _internalHandle) {\n        /* istanbul ignore next */\n        return {};\n    },\n    /* istanbul ignore next */\n    scheduleTimeout(_fn, _delay) { },\n    /* istanbul ignore next */\n    cancelTimeout(_id) { },\n    shouldSetTextContent(_type, _props) {\n        return false;\n    },\n    getRootHostContext(_rootContainer) {\n        return null;\n    },\n    getChildHostContext(_parentHostContext, _type, _rootContainer) {\n        /* istanbul ignore next */\n        return null;\n    },\n    /* istanbul ignore next */\n    getPublicInstance(instance) {\n        /* istanbul ignore next */\n        return instance;\n    },\n    finalizeInitialChildren(_instance, _type, _props, _rootContainer, _hostContext) {\n        return false;\n    }\n};\n\n// TODO: export InputAction types.\nconst IA_POINTER = 0;\nfunction propsChanged(component, prevProps, nextProps) {\n    if (prevProps && !nextProps) {\n        return { type: 'delete', component };\n    }\n    if (!nextProps) {\n        return;\n    }\n    if (!prevProps && nextProps) {\n        return { type: 'add', props: nextProps, component };\n    }\n    if (isListener(component)) {\n        if (!isEqual(prevProps, nextProps)) {\n            return { type: 'put', component, props: nextProps };\n        }\n    }\n    const changes = {};\n    // TODO: array and object types. For now only primitives\n    for (const k in prevProps) {\n        const propKey = k;\n        if (!isEqual(prevProps[propKey], nextProps[propKey])) {\n            changes[propKey] = nextProps[propKey];\n        }\n    }\n    if (!Object.keys(changes).length) {\n        return;\n    }\n    return { type: 'put', props: changes, component };\n}\nfunction createReconciler(engine) {\n    const entities = new Set();\n    const getComponentId = {\n        uiTransform: engine.baseComponents.UiTransform._id,\n        uiText: engine.baseComponents.UiText._id,\n        uiBackground: engine.baseComponents.UiBackground._id\n    };\n    function updateTree(instance, props) {\n        upsertComponent(instance, props, 'uiTransform');\n    }\n    function upsertListener(instance, update) {\n        // TODO: This handles only onClick listener for the moment\n        if (update.type === 'delete' || !update.props) {\n            EventsSystem.removeOnPointerDown(instance.entity);\n            return;\n        }\n        if (update.props) {\n            EventsSystem.onPointerDown(instance.entity, update.props, {\n                button: IA_POINTER,\n                hoverText: ''\n            });\n        }\n    }\n    function removeComponent(instance, component) {\n        const Component = engine.getComponent(getComponentId[component]);\n        Component.deleteFrom(instance.entity);\n    }\n    function upsertComponent(instance, props, componentName) {\n        const componentId = getComponentId[componentName];\n        const Component = engine.getComponent(componentId);\n        const component = Component.getMutableOrNull(instance.entity) ||\n            Component.create(instance.entity);\n        for (const key in props) {\n            const keyProp = key;\n            component[keyProp] = props[keyProp];\n        }\n    }\n    function removeChildEntity(instance) {\n        engine.removeEntity(instance.entity);\n        for (const child of instance._child) {\n            removeChildEntity(child);\n        }\n    }\n    function appendChild(parent, child) {\n        if (!child || !Object.keys(parent).length)\n            return;\n        const isReorder = parent._child.find((c) => c.entity === child.entity);\n        // If its a reorder its seems that its a mutation of an array with key prop\n        // We need to move the child to the end of the array\n        // And update the order of the parent_.child array\n        // child.rightOf => Latest entity of the array\n        // childThatWasAtRightOfEntity = childEntity.rightOf\n        if (isReorder) {\n            const rightOfChild = parent._child.find((c) => c.rightOf === child.entity);\n            if (rightOfChild) {\n                rightOfChild.rightOf = child.rightOf;\n                // Re-order parent._child array\n                parent._child = parent._child.filter((c) => c.entity !== child.entity);\n                parent._child.push(child);\n                updateTree(rightOfChild, { rightOf: rightOfChild.rightOf });\n            }\n            // Its a re-order. We are the last element, so we need to fetch the element before us.\n            child.rightOf = parent._child[parent._child.length - 2]?.entity;\n        }\n        else {\n            // Its an append. Put it at the end\n            child.rightOf = parent._child[parent._child.length - 1]?.entity;\n            parent._child.push(child);\n        }\n        child.parent = parent.entity;\n        updateTree(child, { rightOf: child.rightOf, parent: parent.entity });\n    }\n    function removeChild(parentInstance, child) {\n        const childIndex = parentInstance._child.findIndex((c) => c.entity === child.entity);\n        const childToModify = parentInstance._child[childIndex + 1];\n        if (childToModify) {\n            childToModify.rightOf = child.rightOf;\n            updateTree(childToModify, { rightOf: child.rightOf });\n        }\n        // Mutate 💀\n        parentInstance._child.splice(childIndex, 1);\n        removeChildEntity(child);\n    }\n    const hostConfig = {\n        ...noopConfig,\n        createInstance(type, props) {\n            const entity = engine.addEntity();\n            entities.add(entity);\n            const instance = {\n                entity,\n                _child: [],\n                parent: CANVAS_ROOT_ENTITY,\n                rightOf: undefined\n            };\n            for (const key in props) {\n                const keyTyped = key;\n                if (keyTyped === 'children' || keyTyped === 'key') {\n                    continue;\n                }\n                if (isListener(keyTyped)) {\n                    upsertListener(instance, {\n                        type: 'add',\n                        props: props[keyTyped],\n                        component: keyTyped\n                    });\n                }\n                else {\n                    upsertComponent(instance, props[keyTyped], keyTyped);\n                }\n            }\n            return instance;\n        },\n        appendChild,\n        appendChildToContainer: appendChild,\n        appendInitialChild: appendChild,\n        removeChild: removeChild,\n        prepareUpdate(_instance, _type, oldProps, newProps) {\n            return componentKeys\n                .map((component) => propsChanged(component, oldProps[component], newProps[component]))\n                .filter(isNotUndefined);\n        },\n        commitUpdate(instance, updatePayload, _type, _prevPropsProps, _nextProps, _internalHandle) {\n            for (const update of updatePayload) {\n                if (isListener(update.component)) {\n                    upsertListener(instance, update);\n                    continue;\n                }\n                if (update.type === 'delete') {\n                    removeComponent(instance, update.component);\n                }\n                else {\n                    upsertComponent(instance, update.props, update.component);\n                }\n            }\n        },\n        insertBefore(parentInstance, child, beforeChild) {\n            const beforeChildIndex = parentInstance._child.findIndex((c) => c.entity === beforeChild.entity);\n            parentInstance._child = [\n                ...parentInstance._child.slice(0, beforeChildIndex),\n                child,\n                ...parentInstance._child.slice(beforeChildIndex)\n            ];\n            child.rightOf = beforeChild.rightOf;\n            beforeChild.rightOf = child.entity;\n            child.parent = parentInstance.entity;\n            updateTree(child, { rightOf: child.rightOf, parent: child.parent });\n            updateTree(beforeChild, { rightOf: beforeChild.rightOf });\n        }\n    };\n    const reconciler = reactReconcilerExports(hostConfig);\n    const root = reconciler.createContainer({}, 0, null, false, null, '', \n    /* istanbul ignore next */\n    function () { }, null);\n    return {\n        update: function (component) {\n            return reconciler.updateContainer(component, root, null);\n        },\n        getEntities: () => Array.from(entities)\n    };\n}\n\nconst uiContainer = [];\nfunction renderUi(ui) {\n    const renderer = createReconciler(engine);\n    function update() {\n        renderer.update(ui());\n    }\n    engine.addSystem(update);\n    return uiContainer.push({ update, getEntities: renderer.getEntities }) - 1;\n}\nfunction removeUi(index) {\n    const ui = uiContainer[index];\n    if (!ui)\n        return;\n    uiContainer.splice(index, 1);\n    engine.removeSystem(ui.update);\n    for (const entity of ui.getEntities()) {\n        engine.removeEntity(entity);\n    }\n}\n\nvar ReactEcs = ReactEcs$1;\n\nexport { Container, Font, ReactEcs$1 as ReactEcs, TextAlignMode, UiEntity, YGAlign, YGDisplay, YGFlexDirection, YGJustify, YGOverflow, YGPositionType, YGUnit, YGWrap, ReactEcs as default, isListener, removeUi, renderUi };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n","export class ObserverEventState {\n    constructor(mask, skipNextObservers = false, target, currentTarget) {\n        this.initalize(mask, skipNextObservers, target, currentTarget);\n    }\n    initalize(mask, skipNextObservers = false, target, currentTarget) {\n        this.mask = mask;\n        this.skipNextObservers = skipNextObservers;\n        this.target = target;\n        this.currentTarget = currentTarget;\n        return this;\n    }\n}\nexport class Observer {\n    constructor(callback, mask, scope = null) {\n        this.callback = callback;\n        this.mask = mask;\n        this.scope = scope;\n        this.unregisterOnNextCall = false;\n        this._willBeUnregistered = false;\n    }\n}\nexport class Observable {\n    constructor(onObserverAdded) {\n        this._observers = new Array();\n        this._onObserverAdded = null;\n        this._eventState = new ObserverEventState(0);\n        if (onObserverAdded) {\n            this._onObserverAdded = onObserverAdded;\n        }\n    }\n    add(callback, mask = -1, insertFirst = false, scope = null, unregisterOnFirstCall = false) {\n        if (!callback) {\n            return null;\n        }\n        const observer = new Observer(callback, mask, scope);\n        observer.unregisterOnNextCall = unregisterOnFirstCall;\n        if (insertFirst) {\n            this._observers.unshift(observer);\n        }\n        else {\n            this._observers.push(observer);\n        }\n        if (this._onObserverAdded) {\n            this._onObserverAdded(observer);\n        }\n        return observer;\n    }\n    addOnce(callback) {\n        return this.add(callback, undefined, undefined, undefined, true);\n    }\n    remove(observer) {\n        if (!observer) {\n            return false;\n        }\n        const index = this._observers.indexOf(observer);\n        if (index !== -1) {\n            this._deferUnregister(observer);\n            return true;\n        }\n        return false;\n    }\n    removeCallback(callback, scope) {\n        for (let index = 0; index < this._observers.length; index++) {\n            if (this._observers[index].callback === callback &&\n                (!scope || scope === this._observers[index].scope)) {\n                this._deferUnregister(this._observers[index]);\n                return true;\n            }\n        }\n        return false;\n    }\n    notifyObservers(eventData, mask = -1, target, currentTarget) {\n        if (!this._observers.length) {\n            return true;\n        }\n        const state = this._eventState;\n        state.mask = mask;\n        state.target = target;\n        state.currentTarget = currentTarget;\n        state.skipNextObservers = false;\n        state.lastReturnValue = eventData;\n        for (const obs of this._observers) {\n            if (obs._willBeUnregistered) {\n                continue;\n            }\n            if (obs.mask & mask) {\n                if (obs.scope) {\n                    state.lastReturnValue = obs.callback.apply(obs.scope, [\n                        eventData,\n                        state\n                    ]);\n                }\n                else {\n                    state.lastReturnValue = obs.callback(eventData, state);\n                }\n                if (obs.unregisterOnNextCall) {\n                    this._deferUnregister(obs);\n                }\n            }\n            if (state.skipNextObservers) {\n                return false;\n            }\n        }\n        return true;\n    }\n    notifyObserversWithPromise(eventData, mask = -1, target, currentTarget) {\n        let p = Promise.resolve(eventData);\n        if (!this._observers.length) {\n            return p;\n        }\n        const state = this._eventState;\n        state.mask = mask;\n        state.target = target;\n        state.currentTarget = currentTarget;\n        state.skipNextObservers = false;\n        this._observers.forEach((obs) => {\n            if (state.skipNextObservers) {\n                return;\n            }\n            if (obs._willBeUnregistered) {\n                return;\n            }\n            if (obs.mask & mask) {\n                if (obs.scope) {\n                    p = p.then((lastReturnedValue) => {\n                        state.lastReturnValue = lastReturnedValue;\n                        return obs.callback.apply(obs.scope, [eventData, state]);\n                    });\n                }\n                else {\n                    p = p.then((lastReturnedValue) => {\n                        state.lastReturnValue = lastReturnedValue;\n                        return obs.callback(eventData, state);\n                    });\n                }\n                if (obs.unregisterOnNextCall) {\n                    this._deferUnregister(obs);\n                }\n            }\n        });\n        return p.then(() => {\n            return eventData;\n        });\n    }\n    notifyObserver(observer, eventData, mask = -1) {\n        const state = this._eventState;\n        state.mask = mask;\n        state.skipNextObservers = false;\n        observer.callback(eventData, state);\n    }\n    hasObservers() {\n        return this._observers.length > 0;\n    }\n    clear() {\n        this._observers = new Array();\n        this._onObserverAdded = null;\n    }\n    clone() {\n        const result = new Observable();\n        result._observers = this._observers.slice(0);\n        return result;\n    }\n    hasSpecificMask(mask = -1) {\n        for (const obs of this._observers) {\n            if (obs.mask & mask || obs.mask === mask) {\n                return true;\n            }\n        }\n        return false;\n    }\n    _deferUnregister(observer) {\n        observer.unregisterOnNextCall = false;\n        observer._willBeUnregistered = true;\n        Promise.resolve().then.bind(Promise.resolve())(async () => this._remove(observer));\n    }\n    _remove(observer) {\n        if (!observer) {\n            return false;\n        }\n        const index = this._observers.indexOf(observer);\n        if (index !== -1) {\n            this._observers.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { Observable } from './temp-fp/Observable';\nimport { subscribe, sendBatch } from '~system/EngineApi';\nfunction createSubscriber(eventName) {\n    return () => {\n        subscribe({ eventId: eventName });\n    };\n}\nexport const onEnterSceneObservable = new Observable(createSubscriber('onEnterScene'));\nexport const onEnterScene = onEnterSceneObservable;\nexport const onLeaveSceneObservable = new Observable(createSubscriber('onLeaveScene'));\nexport const onLeaveScene = onLeaveSceneObservable;\nexport const onSceneReadyObservable = new Observable(createSubscriber('sceneStart'));\nexport const onPlayerExpressionObservable = new Observable(createSubscriber('playerExpression'));\nexport const onVideoEvent = new Observable(createSubscriber('videoEvent'));\nexport const onProfileChanged = new Observable(createSubscriber('profileChanged'));\nexport const onPlayerConnectedObservable = new Observable(createSubscriber('playerConnected'));\nexport const onPlayerDisconnectedObservable = new Observable(createSubscriber('playerDisconnected'));\nexport const onRealmChangedObservable = new Observable(createSubscriber('onRealmChanged'));\nexport const onPlayerClickedObservable = new Observable(createSubscriber('playerClicked'));\nexport const onCommsMessage = new Observable(createSubscriber('comms'));\nexport async function pollEvents() {\n    const { events } = await sendBatch({ actions: [] });\n    for (const e of events) {\n        if (e.generic) {\n            const data = JSON.parse(e.generic.eventData);\n            switch (e.generic.eventId) {\n                case 'onEnterScene': {\n                    onEnterSceneObservable.notifyObservers(data);\n                    return;\n                }\n                case 'onLeaveScene': {\n                    onLeaveSceneObservable.notifyObservers(data);\n                    return;\n                }\n                case 'sceneStart': {\n                    onSceneReadyObservable.notifyObservers(data);\n                    return;\n                }\n                case 'playerExpression': {\n                    onPlayerExpressionObservable.notifyObservers(data);\n                    return;\n                }\n                case 'videoEvent': {\n                    const videoData = data;\n                    onVideoEvent.notifyObservers(videoData);\n                    return;\n                }\n                case 'profileChanged': {\n                    onProfileChanged.notifyObservers(data);\n                    return;\n                }\n                case 'playerConnected': {\n                    onPlayerConnectedObservable.notifyObservers(data);\n                    return;\n                }\n                case 'playerDisconnected': {\n                    onPlayerDisconnectedObservable.notifyObservers(data);\n                    return;\n                }\n                case 'onRealmChanged': {\n                    onRealmChangedObservable.notifyObservers(data);\n                    return;\n                }\n                case 'playerClicked': {\n                    onPlayerClickedObservable.notifyObservers(data);\n                    return;\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { engine } from '@dcl/ecs';\nimport { pollEvents } from './observables';\nexport async function runTick(deltaTime) {\n    await engine.update(deltaTime);\n    await pollEvents();\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUNqQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBRTFDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsT0FBTyxDQUFDLFNBQWlCO0lBQzdDLE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUM5QixNQUFNLFVBQVUsRUFBRSxDQUFBO0FBQ3BCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbmdpbmUgfSBmcm9tICdAZGNsL2VjcydcbmltcG9ydCB7IHBvbGxFdmVudHMgfSBmcm9tICcuL29ic2VydmFibGVzJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuVGljayhkZWx0YVRpbWU6IG51bWJlcikge1xuICBhd2FpdCBlbmdpbmUudXBkYXRlKGRlbHRhVGltZSlcbiAgYXdhaXQgcG9sbEV2ZW50cygpXG59XG4iXX0=","import ReactEcs, {\n  UiEntity,\n  YGDisplay,\n  YGJustify,\n  YGAlign,\n  Font,\n  TextAlignMode\n} from '@dcl/react-ecs'\n\nexport const ui = () => (\n  <UiEntity\n    uiTransform={{\n      width: 500,\n      height: 500,\n      padding: { top: 10, right: 10, bottom: 10, left: 10 }\n    }}\n    uiBackground={{ backgroundColor: { r: 10, g: 10, b: 10, a: 0.2 } }}\n  >\n    <UiEntity\n      uiTransform={{\n        width: 100,\n        height: 100,\n        display: YGDisplay.YGD_FLEX,\n        justifyContent: YGJustify.YGJ_CENTER,\n        alignItems: YGAlign.YGA_CENTER\n      }}\n      uiBackground={{ backgroundColor: { r: 255, g: 45, b: 85, a: 0.2 } }}\n    >\n      <UiEntity\n        uiTransform={{ width: 80, height: 20 }}\n        uiText={{\n          value: 'Boedo',\n          textAlign: TextAlignMode.TAM_BOTTOM_CENTER,\n          fontSize: 12,\n          font: Font.F_LIBERATION_SANS\n        }}\n        uiBackground={{ backgroundColor: { r: 255, g: 45, b: 85, a: 1 } }}\n      />\n    </UiEntity>\n  </UiEntity>\n)\n","import { renderUi } from '@dcl/react-ecs'\nimport { engine } from '@dcl/ecs'\nimport * as sdk from '@dcl/sdk'\nimport { ui } from './ui'\n\nrenderUi(ui)\nengine.addEntity()\n\nexport async function onUpdate(dt: number) {\n  await sdk.runTick(dt)\n}\n"],"names":["aspromise","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","base64","exports","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","invalidEncoding","decode","c","charCodeAt","undefined","Error","test","EventEmitter","this","_listeners","eventemitter","prototype","on","evt","off","listeners","splice","emit","args","factory","Float32Array","f32","f8b","Uint8Array","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","log","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","float","inquire","moduleName","mod","eval","replace","Object","keys","e","inquire_1","utf8","len","read","write","c1","c2","pool_1","alloc","size","SIZE","MAX","slab","call","longbits","LongBits","util","require$$0","zero","toNumber","zzEncode","zzDecode","zeroHash","fromNumber","value","from","isString","Long","parseInt","fromString","low","high","unsigned","toLong","Boolean","fromHash","hash","toHash","mask","part0","part1","part2","merge","dst","src","ifNotSet","newError","name","CustomError","message","properties","defineProperty","get","captureStackTrace","stack","create","constructor","toString","asPromise","require$$1","require$$2","require$$3","require$$4","require$$5","pool","require$$6","require$$7","isNode","global","process","versions","node","window","self","emptyArray","freeze","emptyObject","isInteger","Number","isFinite","isObject","isset","isSet","obj","prop","hasOwnProperty","isArray","Buffer","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","bits","fromBits","lcFirst","str","toLowerCase","substring","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","bytes","json","_configure","encoding","allocUnsafe","writer","Writer","BufferWriter","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","subarray","_push","uint32","int32","sint32","uint64","int64","sint64","bool","fixed32","sfixed32","fixed64","sfixed64","double","writeBytes","set","fork","reset","ldelim","finish","BufferWriter_","writer_buffer","writeStringBuffer","writeBytesBuffer","copy","byteLength","reader","Reader","BufferReader","indexOutOfRange","writeLength","RangeError","create_array","isBuffer","readLongVarint","readFixed32_end","readFixed64","_slice","skip","skipType","wireType","BufferReader_","reader_buffer","utf8Slice","min","service","Service","rpcImpl","requestDelimited","responseDelimited","TypeError","rpcCall","method","requestCtor","responseCtor","request","callback","response","setTimeout","endedByRPC","roots","protobuf","configure","build","rpc","minimalExports","requireMinimal","createBasePBAnimator","PBAnimator","_m0","v","PBAnimationState","input","tag","createBasePBAnimationState","clip","playing","weight","speed","loop","shouldReset","COMPONENT_ID","AnimatorSchema","serialize","builder","writeBuffer","deserialize","remainingBytes","createBasePBAudioSource","volume","pitch","audioClipUrl","PBAudioSource","AudioSourceSchema","createBasePBAudioStream","url","PBAudioStream","AudioStreamSchema","AvatarAnchorPointType","createBasePBAvatarAttach","avatarId","anchorPointId","PBAvatarAttach","AvatarAttachSchema","createBaseVector3","x","y","z","Vector3","AvatarModifierType","createBasePBAvatarModifierArea","area","excludeIds","modifiers","PBAvatarModifierArea","end2","AvatarModifierAreaSchema","long","wasm","WebAssembly","Instance","Module","isLong","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","indexOf","radixToPower","result","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","max","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","longExports","requireLong","createBaseColor3","r","g","Color3","createBaseColor4","a","Color4","createBasePBAvatarShape","id","bodyShape","skinColor","hairColor","eyeColor","expressionTriggerId","expressionTriggerTimestamp","talking","wearables","emotes","PBAvatarShape","longToNumber","globalThis","MAX_SAFE_INTEGER","AvatarShapeSchema","BillboardMode","createBasePBBillboard","billboardMode","oppositeDirection","PBBillboard","BillboardSchema","createBasePBCameraMode","mode","PBCameraMode","CameraModeSchema","createBasePBCameraModeArea","PBCameraModeArea","CameraModeAreaSchema","createBasePBGltfContainer","PBGltfContainer","GltfContainerSchema","TextureWrapMode","TextureFilterMode","createBaseTexture","wrapMode","filterMode","Texture","createBaseAvatarTexture","userId","AvatarTexture","createBaseTextureUnion","tex","TextureUnion","$case","texture","avatarTexture","MaterialTransparencyMode","createBasePBMaterial","material","PBMaterial","PBMaterial_UnlitMaterial","unlit","PBMaterial_PbrMaterial","pbr","createBasePBMaterial_UnlitMaterial","alphaTest","castShadows","createBasePBMaterial_PbrMaterial","alphaTexture","emissiveTexture","bumpTexture","albedoColor","emissiveColor","reflectivityColor","transparencyMode","metallic","roughness","glossiness","specularIntensity","emissiveIntensity","directIntensity","MaterialSchema","ColliderLayer","createBasePBMeshCollider","collisionMask","mesh","PBMeshCollider","PBMeshCollider_BoxMesh","box","PBMeshCollider_SphereMesh","sphere","PBMeshCollider_CylinderMesh","cylinder","PBMeshCollider_PlaneMesh","plane","createBasePBMeshCollider_BoxMesh","_","createBasePBMeshCollider_CylinderMesh","radiusTop","radiusBottom","createBasePBMeshCollider_PlaneMesh","createBasePBMeshCollider_SphereMesh","MeshColliderSchema","createBasePBMeshRenderer","PBMeshRenderer","PBMeshRenderer_BoxMesh","PBMeshRenderer_SphereMesh","PBMeshRenderer_CylinderMesh","PBMeshRenderer_PlaneMesh","createBasePBMeshRenderer_BoxMesh","uvs","createBasePBMeshRenderer_CylinderMesh","createBasePBMeshRenderer_PlaneMesh","createBasePBMeshRenderer_SphereMesh","MeshRendererSchema","NftFrameType","createBasePBNftShape","style","color","PBNftShape","NftShapeSchema","createBasePBRaycastResult","timestamp","origin","direction","hits","PBRaycastResult","RaycastHit","createBaseRaycastHit","position","normalHit","meshName","entityId","createBasePBPointerEventsResult","commands","PBPointerEventsResult","PBPointerEventsResult_PointerCommand","createBasePBPointerEventsResult_PointerCommand","button","hit","state","analog","PointerEventsResultSchema","PointerEventType","createBasePBPointerHoverFeedback","pointerEvents","PBPointerHoverFeedback","PBPointerHoverFeedback_Entry","createBasePBPointerHoverFeedback_Info","hoverText","maxDistance","showFeedback","PBPointerHoverFeedback_Info","createBasePBPointerHoverFeedback_Entry","eventType","eventInfo","PointerHoverFeedbackSchema","createBasePBPointerLock","isPointerLocked","PBPointerLock","PointerLockSchema","RaycastQueryType","createBasePBRaycast","queryType","PBRaycast","RaycastSchema","RaycastResultSchema","createBasePBTextShape","text","font","fontSize","fontAutoSize","textAlign","width","height","paddingTop","paddingRight","paddingBottom","paddingLeft","lineSpacing","lineCount","textWrapping","shadowBlur","shadowOffsetX","shadowOffsetY","outlineWidth","shadowColor","outlineColor","textColor","PBTextShape","TextShapeSchema","createBasePBUiBackground","backgroundColor","PBUiBackground","UiBackgroundSchema","createBasePBUiText","PBUiText","UiTextSchema","YGPositionType","YGAlign","YGUnit","YGFlexDirection","YGWrap","YGJustify","YGOverflow","YGDisplay","YGEdge","createBasePBUiTransform","parent","rightOf","alignContent","alignItems","flexWrap","flexShrink","positionType","alignSelf","flexDirection","justifyContent","overflow","display","flexBasisUnit","flexBasis","flexGrow","widthUnit","heightUnit","minWidthUnit","minWidth","minHeightUnit","minHeight","maxWidthUnit","maxWidth","maxHeightUnit","maxHeight","positionLeftUnit","positionLeft","positionTopUnit","positionTop","positionRightUnit","positionRight","positionBottomUnit","positionBottom","marginLeftUnit","marginLeft","marginTopUnit","marginTop","marginRightUnit","marginRight","marginBottomUnit","marginBottom","paddingLeftUnit","paddingTopUnit","paddingRightUnit","paddingBottomUnit","PBUiTransform","UiTransformSchema","createBasePBVisibilityComponent","visible","PBVisibilityComponent","VisibilityComponentSchema","defineLibraryComponents","defineComponentFromSchema","Animator","AnimatorSchema.AnimatorSchema","AnimatorSchema.COMPONENT_ID","AudioSource","AudioSourceSchema.AudioSourceSchema","AudioSourceSchema.COMPONENT_ID","AudioStream","AudioStreamSchema.AudioStreamSchema","AudioStreamSchema.COMPONENT_ID","AvatarAttach","AvatarAttachSchema.AvatarAttachSchema","AvatarAttachSchema.COMPONENT_ID","AvatarModifierArea","AvatarModifierAreaSchema.AvatarModifierAreaSchema","AvatarModifierAreaSchema.COMPONENT_ID","AvatarShape","AvatarShapeSchema.AvatarShapeSchema","AvatarShapeSchema.COMPONENT_ID","Billboard","BillboardSchema.BillboardSchema","BillboardSchema.COMPONENT_ID","CameraMode","CameraModeSchema.CameraModeSchema","CameraModeSchema.COMPONENT_ID","CameraModeArea","CameraModeAreaSchema.CameraModeAreaSchema","CameraModeAreaSchema.COMPONENT_ID","GltfContainer","GltfContainerSchema.GltfContainerSchema","GltfContainerSchema.COMPONENT_ID","Material","MaterialSchema.MaterialSchema","MaterialSchema.COMPONENT_ID","MeshCollider","MeshColliderSchema.MeshColliderSchema","MeshColliderSchema.COMPONENT_ID","MeshRenderer","MeshRendererSchema.MeshRendererSchema","MeshRendererSchema.COMPONENT_ID","NftShape","NftShapeSchema.NftShapeSchema","NftShapeSchema.COMPONENT_ID","PointerEventsResult","PointerEventsResultSchema.PointerEventsResultSchema","PointerEventsResultSchema.COMPONENT_ID","PointerHoverFeedback","PointerHoverFeedbackSchema.PointerHoverFeedbackSchema","PointerHoverFeedbackSchema.COMPONENT_ID","PointerLock","PointerLockSchema.PointerLockSchema","PointerLockSchema.COMPONENT_ID","Raycast","RaycastSchema.RaycastSchema","RaycastSchema.COMPONENT_ID","RaycastResult","RaycastResultSchema.RaycastResultSchema","RaycastResultSchema.COMPONENT_ID","TextShape","TextShapeSchema.TextShapeSchema","TextShapeSchema.COMPONENT_ID","UiBackground","UiBackgroundSchema.UiBackgroundSchema","UiBackgroundSchema.COMPONENT_ID","UiText","UiTextSchema.UiTextSchema","UiTextSchema.COMPONENT_ID","UiTransform","UiTransformSchema.UiTransformSchema","UiTransformSchema.COMPONENT_ID","VisibilityComponent","VisibilityComponentSchema.VisibilityComponentSchema","VisibilityComponentSchema.COMPONENT_ID","TRANSFORM_LENGTH","TransformSchema","ptr","incrementWriteOffset","setFloat32","rotation","w","scale","setUint32","incrementReadOffset","getFloat32","getUint32","defineTransformComponent","defineAnimatorComponent","engine","getComponent","getClipAndAnimator","entity","anim","getMutableOrNull","find","item","getClipOrNull","getClip","animator","playSingleAnimation","stopAllAnimations","resetCursor","defineMeshColliderComponent","getCollisionMask","layers","map","reduce","prev","setBox","colliderLayers","createOrReplace","setPlane","setCylinder","setSphere","defineMeshRendererComponent","TextureHelper","Common","Avatar","defineMaterialComponent","setBasicMaterial","setPbrMaterial","defineSdkComponents","Transform","IArray","type","writeUint32","newArray","readUint32","Bool","writeInt8","readInt8","IEnum","Float32","writeFloat32","readFloat32","Float64","writeFloat64","readFloat64","Int64","writeInt64","BigInt","readInt64","Int32","writeInt32","readInt32","Int16","writeInt16","readInt16","Int8","FlatString","TextEncoder","TextDecoder","readBuffer","EcsString","Color3Schema","Color4Schema","EntitySchema","QuaternionSchema","Vector3Schema","IMap","spec","key","newValue","IOptional","Schemas","Float","Double","Byte","Short","Int","iInt64","Quaternion","Entity","Enum","Map","Optional","dist","types","__createBinding","o","m","k","k2","enumerable","__exportStar","crdtProtocol","stateIterator","sameData","globalBuffer","key1","value1","entries","key2","value2","updateState","data","remoteTimestamp","key1Value","newKey1Value","createEvent","processMessage","current","compareData","getState","distExports","requireDist","getNextSize","currentSize","intendedSize","minNewSize","defaultInitialCapacity","createByteBuffer","options","initialROffset","reading","currentOffset","initialBuffer","initialWOffset","writing","initialCapacity","view","DataView","byteOffset","woffset","roffset","woAdd","amount","newsize","roAdd","bufferLength","resetBuffer","currentReadOffset","currentWriteOffset","getFloat64","getInt8","getInt16","getInt32","getBigInt64","readUint8","getUint8","readUint16","getUint16","readUint64","getBigUint64","toBinary","toCopiedBinary","setFloat64","setInt8","setInt16","setInt32","setBigInt64","writeUint8","setUint8","writeUint16","setUint16","writeUint64","setBigUint64","getInt64","getUint64","setInt64","setUint64","WireMessage","validate","HEADER_LENGTH","readHeader","WireMessage$1","ComponentOperation","EntityUtils","crdtSceneSystem","transports","crdtClient","receivedMessages","transportMessages","getMessages","messagesToProcess","createMessages","dirtyMap","crdtMessages","componentsId","componentId","component","entityComponent","has","event","PUT_COMPONENT","DELETE_COMPONENT","transportMessage","some","filter","Message","messageBuffer","transportBuffer","transport","send","receiveMessages","crdtMessage","deleteFrom","bb","upsertFromBinary","clearDirty","addTransport","transportType","onmessage","chunkMessage","deepReadonly","defineComponent","constructorDefault","dirtyIterator","Set","defaultBuffer","getDefaultValue","prefillValue","_id","default","isDirty","delete","getOrNull","usedValue","getMutable","iterator","writeToByteBuffer","updateFromBinary","clear","EntityContainer","staticEntity","STATIC_ENTITIES_RANGE","dynamicEntity","DYNAMIC_ENTITIES_RANGE","generateEntity","dynamic","removeEntity","entityExists","isReservedEntity","getExistingEntities","range","entityCounter","usedEntities","MESSAGE_HEADER_LENGTH","componentDefinition","startMessageOffset","messageLength","header","common","isInRange","MAX_ENTITIES","DYNAMIC_ENTITIES_START_AT","RESERVED_STATIC_ENTITIES","RESERVED_ENTITIES_RANGE","isDynamicEntity","isStaticEntity","SYSTEMS_REGULAR_PRIORITY","SystemContainer","systems","sort","priority","remove","selector","findIndex","getSystems","preEngine","entityContainer","componentsDefinition","addEntity","newComponent","defComponent","addDynamicEntity","addSystem","removeSystem","getEntitiesWith","components","groupComp","firstComponentDef","componentDefinitions","matches","componentDef","getComponentDefGroup","removeComponentDefinition","Engine","crdtSystem","baseComponents","tranport","getTreeEntityArray","firstEntity","proccesedEntities","removeEntityWithChildren","update","dt","system","dirtySet","definition","_componentId","RootEntity","PlayerEntity","CameraEntity","getAndClean","taskSystem","tasks","async","runTask","task","catch","executeTask","ECSComponentIDs","componentIds","values","createRendererTransport","require","engineApi","rendererTransport","crdtSendToRenderer","byteArray","sendToRenderer","includes","EventsSystem","EventType","getDefaultOpts","opts","eventsMap","getEvent","setHoverFeedback","getPointerEvent","Up","removeEvent","pointerEvent","pointer","removeHoverFeedback","removeOnClick","Click","removeOnPointerDown","Down","removeOnPointerUp","onClick","cb","onPointerDown","onPointerUp","Input","command","getClick","up","getInputCommand","InputCommands","InternalInputStateSchema","timestampLastUpdate","currentTimestamp","buttonState","ts","InternalInputStateComponentId","TimestampUpdateSystemPriority","ButtonStateUpdateSystemPriority","createInput","InternalInputStateComponent","inputAction","findClick","cmd","down","findLastAction","pointerEventType","findInputCommand","isPressed","isClicked","isTriggered","commandToReturn","Components","CameraType","InputAction","TextAlignMode","Font","react","react_development","hasRequiredReact_development","hasRequiredReact","requireReact_development","module","__REACT_DEVTOOLS_GLOBAL_HOOK__","registerInternalModuleStart","REACT_ELEMENT_TYPE","Symbol","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_OFFSCREEN_TYPE","MAYBE_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","ReactCurrentDispatcher","ReactCurrentBatchConfig","transition","ReactCurrentActQueue","isBatchingLegacy","didScheduleLegacyUpdate","ReactCurrentOwner","ReactDebugCurrentFrame","currentExtraStackFrame","setExtraStackFrame","getCurrentStack","getStackAddendum","impl","ReactSharedInternals","warn","format","_len","_key","printWarning","error","_len2","_key2","level","concat","argsWithFormat","unshift","Function","console","didWarnStateUpdateForUnmountedComponent","warnNoop","publicInstance","callerName","_constructor","componentName","displayName","warningKey","ReactNoopUpdateQueue","isMounted","enqueueForceUpdate","enqueueReplaceState","completeState","enqueueSetState","partialState","assign","Component","props","context","updater","refs","isReactComponent","setState","forceUpdate","deprecatedAPIs","replaceState","defineDeprecationWarning","methodName","info","fnName","ComponentDummy","PureComponent","pureComponentPrototype","isPureReactComponent","isArrayImpl","testStringCoercion","checkKeyStringCoercion","willCoercionThrow","toStringTag","typeName","getContextName","getComponentNameFromType","$$typeof","_context","outerType","innerType","wrapperName","functionName","getWrappedName","render","outerName","lazyComponent","payload","_payload","init","_init","specialPropKeyWarningShown","specialPropRefWarningShown","didWarnAboutStringRefs","RESERVED_PROPS","ref","__self","__source","hasValidRef","config","getter","getOwnPropertyDescriptor","isReactWarning","hasValidKey","defineKeyPropWarningGetter","warnAboutAccessingKey","configurable","defineRefPropWarningGetter","warnAboutAccessingRef","warnIfStringRefCannotBeAutoConverted","stateNode","ReactElement","source","owner","element","_owner","_store","writable","createElement","children","propName","childrenLength","childArray","defaultProps","cloneElement","_self","_source","isValidElement","object","didWarnAboutMaps","userProvidedKeyEscapeRegex","escapeUserProvidedKey","getElementKey","escaperLookup","match","mapIntoArray","array","escapedPrefix","nameSoFar","oldElement","newKey","child","invokeCallback","_child","mappedChild","childKey","escapedChildKey","subtreeCount","nextNamePrefix","iteratorFn","iterableChildren","step","ii","done","childrenString","mapChildren","func","count","REACT_MODULE_REFERENCE","lazyInitializer","_status","thenable","ctor","_result","then","moduleObject","resolved","rejected","isValidElementType","getModuleId","resolveDispatcher","dispatcher","prevLog","prevInfo","prevWarn","prevError","prevGroup","prevGroupCollapsed","prevGroupEnd","disabledDepth","disabledLog","__reactDisabledLog","prefix","ReactCurrentDispatcher$1","describeBuiltInComponentFrame","ownerFn","trim","componentFrameCache","reentry","PossiblyWeakMap","WeakMap","describeNativeComponentFrame","construct","control","frame","previousDispatcher","previousPrepareStackTrace","prepareStackTrace","group","groupCollapsed","groupEnd","defineProperties","disableLogs","Fake","Reflect","sample","sampleLines","split","controlLines","s","_frame","reenableLogs","syntheticFrame","describeUnknownElementTypeFrameInDEV","shouldConstruct","propTypesMisspellWarningShown","loggedTypeFailures","ReactDebugCurrentFrame$1","setCurrentlyValidatingElement","setCurrentlyValidatingElement$1","getDeclarationErrorAddendum","getSourceInfoErrorAddendumForProps","elementProps","fileName","lineNumber","ownerHasKeyUseWarning","validateExplicitKey","parentType","validated","currentComponentErrorInfo","parentName","getCurrentComponentErrorInfo","childOwner","validateChildKeys","validatePropTypes","propTypes","typeSpecs","location","typeSpecName","error$1","ex","checkPropTypes","PropTypes","getDefaultProps","isReactClassApproved","validateFragmentProps","fragment","createElementWithValidation","validType","typeString","sourceInfo","didWarnAboutDeprecatedCreateFactory","didWarnAboutMessageChannel","enqueueTaskImpl","actScopeDepth","didWarnNoAwaitAct","popActScope","prevActScopeDepth","recursivelyFlushAsyncActWork","returnValue","queue","flushActQueue","requireString","random","nodeRequire","setImmediate","_err","MessageChannel","channel","port1","port2","postMessage","enqueueTask","isFlushing","createElement$1","cloneElement$1","newElement","createFactory","validatedFactory","Children","forEach","forEachFunc","forEachContext","toArray","only","Fragment","Profiler","StrictMode","Suspense","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","createContext","defaultValue","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_defaultValue","_globalName","hasWarnedAboutUsingNestedContextConsumers","hasWarnedAboutUsingConsumerProvider","hasWarnedAboutDisplayNameOnConsumer","_Provider","_currentRenderer","_currentRenderer2","createRef","refObject","seal","forwardRef","ownName","elementType","lazy","lazyType","newDefaultProps","newPropTypes","memo","startTransition","scope","prevTransition","currentTransition","_updatedFibers","unstable_act","prevIsBatchingLegacy","thenableResult","wasAwaited","_queue","useCallback","deps","useContext","Context","realContext","useDebugValue","formatterFn","useDeferredValue","useEffect","useId","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","reducer","initialArg","useRef","initialValue","useState","initialState","useSyncExternalStore","subscribe","getSnapshot","getServerSnapshot","useTransition","version","registerInternalModuleStop","requireReact","reactExports","ReactEcs$1","capitalize","toUpperCase","isPercent","endsWith","isPoint","parsePositionUnit","getValue","YGU_UNDEFINED","YGU_POINT","YGU_PERCENT","parsePosition","typedKey","propKey","propKeyUnit","unit","parseSize","unitKey","CANVAS_ROOT_ENTITY","parseUiTransform","padding","margin","otherProps","defaultUiTransform","YGD_FLEX","YGJ_FLEX_START","YGA_AUTO","YGFD_ROW","YGPT_RELATIVE","YGO_VISIBLE","listenersKey","isListener","UiEntity","uiTransform","uiTransformProps","reactReconciler","reactReconciler_development","scheduler","scheduler_development","hasRequiredScheduler_development","hasRequiredScheduler","hasRequiredReactReconciler_development","hasRequiredReactReconciler","requireScheduler_development","heap","parentIndex","siftUp","peek","pop","first","last","halfLength","leftIndex","left","rightIndex","right","siftDown","diff","sortIndex","performance","now","localPerformance","unstable_now","localDate","Date","initialTime","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","localSetTimeout","localClearTimeout","clearTimeout","localSetImmediate","advanceTimers","currentTime","timer","startTime","expirationTime","handleTimeout","requestHostCallback","flushWork","firstTimer","requestHostTimeout","hasTimeRemaining","cancelHostTimeout","previousPriorityLevel","shouldYieldToHost","priorityLevel","continuationCallback","workLoop","navigator","scheduling","isInputPending","isMessageLoopRunning","scheduledHostCallback","taskTimeoutID","frameInterval","schedulePerformWorkUntilDeadline","performWorkUntilDeadline","hasMoreWork","port","ms","unstable_requestPaint","unstable_IdlePriority","unstable_ImmediatePriority","unstable_LowPriority","unstable_NormalPriority","unstable_Profiling","unstable_UserBlockingPriority","unstable_cancelCallback","unstable_continueExecution","unstable_forceFrameRate","fps","unstable_getCurrentPriorityLevel","unstable_getFirstCallbackNode","unstable_next","eventHandler","unstable_pauseExecution","unstable_runWithPriority","unstable_scheduleCallback","timeout","delay","newTask","unstable_shouldYield","unstable_wrapCallback","parentPriorityLevel","requireScheduler","requireReactReconciler_development","$$$hostConfig","React","Scheduler","suppressWarning","_reactInternals","enableNewReconciler","ContextProvider","ForwardRef","SuspenseComponent","MemoComponent","SimpleMemoComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","getContextName$1","getComponentNameFromFiber","fiber","ChildDeletion","DidCapture","ForceClientRender","Ref","Snapshot","Passive","Hydrating","Visibility","StoreConsistency","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","Forked","RefStatic","LayoutStatic","MountLayoutDev","MountPassiveDev","BeforeMutationMask","Update","MutationMask","Placement","LayoutMask","PassiveMask","StaticMask","getNearestMountedFiber","nearestMounted","alternate","return","nextNode","flags","assertIsMounted","findCurrentFiberUsingSlowPath","parentA","parentB","nextParent","sibling","didFindChild","findCurrentHostFiber","currentParent","findCurrentHostFiberImpl","findCurrentHostFiberWithNoPortals","findCurrentHostFiberWithNoPortalsImpl","getPublicInstance","getRootHostContext","getChildHostContext","prepareForCommit","resetAfterCommit","createInstance","appendInitialChild","finalizeInitialChildren","prepareUpdate","shouldSetTextContent","createTextInstance","scheduleTimeout","cancelTimeout","noTimeout","isPrimaryRenderer","warnsIfNotActing","supportsMutation","supportsPersistence","supportsHydration","getInstanceFromNode","beforeActiveInstanceBlur","afterActiveInstanceBlur","preparePortalMount","prepareScopeUpdate","getInstanceFromScope","getCurrentEventPriority","detachDeletedInstance","supportsMicrotasks","scheduleMicrotask","supportsTestSelectors","findFiberRoot","getBoundingRect","getTextContent","isHiddenSubtree","matchAccessibilityRole","setFocusIfFocusable","setupIntersectionObserver","appendChild","appendChildToContainer","commitTextUpdate","commitMount","commitUpdate","insertBefore","insertInContainerBefore","removeChild","removeChildFromContainer","resetTextContent","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","clearContainer","cloneInstance","createContainerChildSet","appendChildToContainerChildSet","finalizeContainerChildren","replaceContainerChildren","cloneHiddenInstance","cloneHiddenTextInstance","canHydrateInstance","canHydrateTextInstance","canHydrateSuspenseInstance","isSuspenseInstancePending","isSuspenseInstanceFallback","getSuspenseInstanceFallbackErrorDetails","registerSuspenseInstanceRetry","getNextHydratableSibling","getFirstHydratableChild","getFirstHydratableChildWithinContainer","getFirstHydratableChildWithinSuspenseInstance","hydrateInstance","hydrateTextInstance","hydrateSuspenseInstance","getNextHydratableInstanceAfterSuspenseInstance","commitHydratedContainer","commitHydratedSuspenseInstance","clearSuspenseBoundary","clearSuspenseBoundaryFromContainer","shouldDeleteUnhydratedTailInstances","didNotMatchHydratedContainerTextInstance","didNotMatchHydratedTextInstance","didNotHydrateInstanceWithinContainer","didNotHydrateInstanceWithinSuspenseInstance","didNotHydrateInstance","didNotFindHydratableInstanceWithinContainer","didNotFindHydratableTextInstanceWithinContainer","didNotFindHydratableSuspenseInstanceWithinContainer","didNotFindHydratableInstanceWithinSuspenseInstance","didNotFindHydratableTextInstanceWithinSuspenseInstance","didNotFindHydratableSuspenseInstanceWithinSuspenseInstance","didNotFindHydratableInstance","didNotFindHydratableTextInstance","didNotFindHydratableSuspenseInstance","errorHydratingContainer","describeFunctionComponentFrame","fiberStack","valueStack","warnedAboutMissingGetChildContext","createCursor","cursor","emptyContextObject","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","instance","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","isFiberMounted","StrictEffectsMode","clz32","asUint","DefaultLane","TransitionLanes","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","TransitionLane16","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","RetryLane5","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","getLabelForLane","lane","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","lanes","getHighestPriorityLane","getNextLanes","root","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","entangledLanes","entanglements","pickArbitraryLaneIndex","computeExpirationTime","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","includesNonIdleWork","includesOnlyRetries","includesBlockingLane","InputContinuousHydrationLane","isTransitionLane","claimNextTransitionLane","pickArbitraryLane","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","createLaneMap","initial","laneMap","markRootUpdated","updateLane","eventTime","eventTimes","markRootPinged","markRootEntangled","rootEntangledLanes","addFiberToLanesMap","isDevToolsPresent","pendingUpdatersLaneMap","movePendingFibersToMemoized","memoizedUpdaters","updaters","IdleEventPriority","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","isHigherEventPriority","lanesToEventPriority","scheduleCallback","cancelCallback","shouldYield","requestPaint","ImmediatePriority","UserBlockingPriority","NormalPriority","IdlePriority","unstable_yieldValue","unstable_setDisableYieldValue","rendererID","injectedHook","injectedProfilingHooks","hasLoggedError","setIsStrictModeForDevtools","newIsStrictMode","setStrictMode","injectProfilingHooks","profilingHooks","getLaneLabelMap","label","markCommitStopped","markComponentRenderStarted","markComponentRenderStopped","markComponentLayoutEffectMountStarted","markComponentLayoutEffectUnmountStarted","markComponentLayoutEffectUnmountStopped","markComponentErrored","thrownValue","markComponentSuspended","wakeable","markRenderStarted","markRenderStopped","markStateUpdateScheduled","objectIs","is","syncQueue","includesLegacySyncCallbacks","isFlushingSyncQueue","scheduleSyncCallback","flushSyncCallbacksOnlyInLegacyMode","flushSyncCallbacks","previousUpdatePriority","isRootDehydrated","memoizedState","isDehydrated","forkStack","forkStackIndex","treeForkProvider","treeForkCount","idStack","idStackIndex","treeContextProvider","treeContextId","treeContextOverflow","getTreeId","getBitLength","getLeadingBit","pushTreeFork","totalChildren","warnIfNotHydrating","pushTreeId","baseIdWithLeadingBit","baseOverflow","baseLength","baseId","slot","numberOfOverflowBits","newOverflow","restOfBaseId","restOfBaseLength","restOfLength","pushMaterializedTreeId","number","popTreeContext","getIsHydrating","hydrationParentFiber","nextHydratableInstance","isHydrating","didSuspendOrErrorDEV","hydrationErrors","warnIfHydrating","markDidThrowWhileHydratingDEV","reenterHydrationStateFromDehydratedSuspenseInstance","suspenseInstance","treeContext","suspendedContext","restoreSuspendedTreeContext","warnUnhydratedInstance","returnFiber","containerInfo","isConcurrentMode","memoizedProps","suspenseState","dehydrated","deleteHydratableInstance","childToDelete","createFiber","deletions","warnNonhydratedInstance","parentContainer","pendingProps","parentProps","parentInstance","_type","_props","_text","_isConcurrentMode","_parentInstance","_type2","_props2","_text2","insertNonHydratedInstance","tryHydrate","nextInstance","textInstance","retryLane","dehydratedFragment","dehydratedNode","createFiberFromDehydratedFragment","shouldClientRenderOnMismatch","throwOnHydrationMismatch","tryToClaimNextHydratableInstance","firstAttemptedInstance","prevHydrationParentFiber","popToNextHostParent","popHydrationState","warnIfUnhydratedTailNodes","skipPastDehydratedSuspenseInstance","resetHydrationState","upgradeHydrationErrorsToRecoverable","queueRecoverableErrors","queueHydrationError","shallowEqual","objA","objB","keysA","keysB","currentKey","describeFiber","_debugOwner","_debugSource","getStackByFiberInDevAndProd","isRendering","getCurrentFiberStackInDev","resetCurrentFiber","setCurrentFiber","setIsRendering","rendering","ReactStrictModeWarnings","recordUnsafeLifecycleWarnings","flushPendingUnsafeLifecycleWarnings","recordLegacyContextWarning","flushLegacyContextWarning","discardPendingWarnings","setToSortedString","pendingComponentWillMountWarnings","pendingUNSAFE_ComponentWillMountWarnings","pendingComponentWillReceivePropsWarnings","pendingUNSAFE_ComponentWillReceivePropsWarnings","pendingComponentWillUpdateWarnings","pendingUNSAFE_ComponentWillUpdateWarnings","didWarnAboutUnsafeLifecycles","componentWillMount","__suppressDeprecationWarning","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentWillMountUniqueNames","UNSAFE_componentWillMountUniqueNames","componentWillReceivePropsUniqueNames","UNSAFE_componentWillReceivePropsUniqueNames","componentWillUpdateUniqueNames","UNSAFE_componentWillUpdateUniqueNames","pendingLegacyContextWarning","didWarnAboutLegacyContext","resolveDefaultProps","baseProps","strictRoot","maybeStrictRoot","findStrictRoot","warningsForRoot","fiberArray","firstFiber","uniqueNames","sortedNames","rendererSigil","valueCursor","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","isDisallowedContextReadInDEV","resetContextDependencies","enterDisallowedContextReadInDEV","exitDisallowedContextReadInDEV","pushProvider","providerFiber","nextValue","popProvider","currentValue","scheduleContextWorkOnParentPath","renderLanes","propagationRoot","childLanes","propagateContextChange","nextFiber","list","dependencies","dependency","firstContext","createUpdate","ForceUpdate","updateQueue","sharedQueue","shared","parentSuspense","_alternate","propagateContextChange_eager","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","contextItem","memoizedValue","concurrentQueues","pushConcurrentUpdateQueue","enqueueConcurrentHookUpdate","interleaved","markUpdateLaneFromFiberToRoot","enqueueConcurrentHookUpdateAndEagerlyBailout","enqueueConcurrentRenderForLane","unsafe_markUpdateLaneFromFiberToRoot","sourceFiber","warnAboutUpdateOnNotYetMountedFiberInDEV","didWarnUpdateInsideUpdate","currentlyProcessingQueue","hasForceUpdate","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","effects","cloneUpdateQueue","currentQueue","clone","enqueueUpdate","executionContext","enqueueConcurrentClassUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","processUpdateQueue","pendingQueue","lastPendingUpdate","firstPendingUpdate","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","_clone","_lastPendingUpdate","_firstPendingUpdate","lastInterleaved","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","didWarnAboutStateAssignmentForComponent","didWarnAboutUninitializedState","didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate","didWarnAboutLegacyLifecyclesAndDerivedState","didWarnAboutUndefinedDerivedState","warnOnUndefinedDerivedState","warnOnInvalidCallback","didWarnAboutDirectlyAssigningPropsToState","didWarnAboutContextTypeAndContextTypes","didWarnAboutInvalidateContextType","fakeInternalInstance","emptyRefsObject","didWarnOnInvalidCallback","applyDerivedStateFromProps","getDerivedStateFromProps","didWarnAboutGenerators","ownerHasFunctionTypeWarning","classComponentUpdater","ownerFiber","_warnedAboutRefsInRender","inst","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","markForceUpdateScheduled","checkShouldComponentUpdate","oldProps","newProps","oldState","nextContext","shouldComponentUpdate","shouldUpdate","adoptClassInstance","_reactInternalInstance","constructClassInstance","isLegacyContextConsumer","contextType","addendum","getSnapshotBeforeUpdate","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","_componentName","newApiName","callComponentWillReceiveProps","mountClassInstance","getInitialState","componentShouldUpdate","componentDidUnmount","componentDidReceiveProps","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","hasMutatedProps","componentDidUpdate","getDerivedStateFromError","_state","checkClassInstance","callComponentWillMount","componentDidMount","fiberFlags","warnForMissingKey","coerceRef","mixedRef","resolvedInst","checkPropStringCoercion","stringRef","_stringRef","throwOnInvalidObjectType","newChild","childString","warnOnFunctionType","resolveLazy","ChildReconciler","shouldTrackSideEffects","deleteChild","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","existing","updateElement","updateFragment","isCompatibleFamilyForHotReloading","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","createFiberFromFragment","createChild","_created","_created2","_created3","updateSlot","oldFiber","updateFromMap","newIdx","warnOnInvalidKey","knownKeys","reconcileChildFibers","_existing","_created4","reconcileSingleElement","reconcileSinglePortal","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","_newFiber","_newFiber2","reconcileChildrenArray","newChildrenIterable","_newChildren","_step","_newFiber3","_newFiber4","reconcileChildrenIterator","reconcileSingleTextNode","mountChildFibers","resetChildFibers","resetWorkInProgress","NO_CONTEXT","contextStackCursor$1","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","rootInstance","popHostContext","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","findFirstSuspended","row","revealOrder","workInProgressSources","resetWorkInProgressVersions","mutableSource","_workInProgressVersionPrimary","_workInProgressVersionSecondary","didWarnAboutMismatchedHooksForComponent","didWarnUncachedGetSnapshot","ReactCurrentBatchConfig$1","currentlyRenderingFiber$1","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","localIdCounter","globalClientIdCounter","currentHookNameInDev","hookTypesDev","hookTypesUpdateIndexDev","ignorePreviousDependencies","mountHookTypesDev","hookName","updateHookTypesDev","currentHookName","table","secondColumnStart","oldHookName","newHookName","warnOnHookMismatchInDev","checkDepsAreArrayDev","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","_debugHookTypes","HooksDispatcherOnUpdateInDEV","HooksDispatcherOnMountWithHookTypesInDEV","HooksDispatcherOnMountInDEV","numberOfReRenders","HooksDispatcherOnRerenderInDEV","ContextOnlyDispatcher","didRenderTooFewHooks","checkDidRenderIdHook","didRenderIdHook","bailoutHooks","resetHooksAfterThrow","hook","isUpdatingOpaqueValueInRenderPhase","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","basicStateReducer","action","mountReducer","dispatch","lastRenderedReducer","lastRenderedState","dispatchReducerAction","updateReducer","baseFirst","pendingFirst","newBaseQueueFirst","newBaseQueueLast","hasEagerState","eagerState","interleavedLane","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","mountSyncExternalStore","nextSnapshot","cachedSnapshot","getWorkInProgressRoot","pushStoreConsistencyCheck","mountEffect","subscribeToStore","pushEffect","HasEffect","updateStoreInstance","updateSyncExternalStore","prevSnapshot","snapshotChanged","updateEffect","renderedSnapshot","check","componentUpdateQueue","lastEffect","stores","checkIfSnapshotChanged","forceStoreRerender","latestGetSnapshot","prevValue","mountState","dispatchSetState","rerenderState","destroy","firstEffect","mountRef","_ref2","updateRef","mountEffectImpl","hookFlags","updateEffectImpl","prevEffect","mountInsertionEffect","updateInsertionEffect","mountLayoutEffect","updateLayoutEffect","imperativeHandleEffect","refCallback","_inst","_inst2","mountImperativeHandle","effectDeps","updateImperativeHandle","mountDebugValue","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","updateDeferredValue","updateDeferredValueImpl","rerenderDeferredValue","SyncLane","deferredLane","setPending","previousPriority","mountTransition","_mountState","isPending","updateTransition","rerenderTransition","mountId","identifierPrefix","localId","updateId","isRenderPhaseUpdate","enqueueRenderPhaseUpdate","entangleTransitionUpdate","markUpdateInDevTools","prevDispatcher","InvalidNestedHooksDispatcherOnUpdateInDEV","currentState","useMutableSource","unstable_isNewReconciler","InvalidNestedHooksDispatcherOnMountInDEV","InvalidNestedHooksDispatcherOnRerenderInDEV","warnInvalidContextAccess","warnInvalidHookAccess","now$1","commitTime","layoutEffectStartTime","profilerStartTime","passiveEffectStartTime","currentUpdateIsNested","nestedUpdateScheduled","isCurrentUpdateNested","getCommitTime","recordCommitTime","startProfilerTimer","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration","recordLayoutEffectDuration","parentFiber","effectDuration","recordPassiveEffectDuration","passiveEffectDuration","parentStateNode","startLayoutEffectTimer","startPassiveEffectTimer","transferActualDuration","createCapturedValueAtFiber","digest","createCapturedValue","logCapturedError","boundary","errorInfo","logError","componentStack","_suppressLogging","combinedMessage","PossiblyWeakMap$1","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","markFailedErrorBoundaryForHotReloading","componentDidCatch","legacyErrorBoundariesThatAlreadyFailed","attachPingListener","threadIDs","pingCache","ping","pingSuspendedRoot","restorePendingUpdaters","getNearestSuspenseBoundaryToCapture","markSuspenseBoundaryShouldCapture","suspenseBoundary","rootRenderLanes","throwException","currentSource","resetSuspendedComponent","wakeables","attachRetryListener","renderDidSuspendDelayIfPossible","_suspenseBoundary","workInProgressRootExitStatus","workInProgressRootConcurrentErrors","renderDidError","_errorInfo","isAlreadyFailedLegacyErrorBoundary","_lane","didWarnAboutBadClass","didWarnAboutModulePatternComponent","didWarnAboutContextTypeOnFunctionComponent","didWarnAboutGetDerivedStateOnFunctionComponent","didWarnAboutFunctionRefs","didWarnAboutReassigningProps","didWarnAboutRevealOrder","didWarnAboutTailOptions","ReactCurrentOwner$1","didReceiveUpdate","reconcileChildren","nextChildren","updateForwardRef","innerPropTypes","hasId","bailoutOnAlreadyFinishedWork","updateMemoComponent","shouldConstruct$1","isSimpleFunctionComponent","resolvedType","resolveFunctionForHotReloading","validateFunctionComponentInDev","updateSimpleMemoComponent","createFiberFromTypeAndProps","_innerPropTypes","currentChild","checkScheduledUpdateOrContext","prevProps","outerMemoType","outerPropTypes","updateFunctionComponent","updateOffscreenComponent","_subtreeRenderLanes","baseLanes","cachePool","transitions","pushRenderLanes","nextBaseLanes","_nextState","_nextState2","markRef","updateClassComponent","shouldError","_instance","hasContext","resetSuspendedCurrentOnMountInLegacyMode","oldContext","hasNewLifecycles","_fiberFlags","_fiberFlags2","resumeMountClassInstance","unresolvedOldProps","unresolvedNewProps","updateClassInstance","nextUnitOfWork","finishClassComponent","didCaptureError","forceUnmountCurrentAndReconcile","pushHostRootContext","pendingContext","updateHostRoot","prevChildren","overrideState","pendingSuspenseBoundaries","mountHostRootWithoutHydrating","enterHydrationState","recoverableError","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","resolveClassForHotReloading","resolveForwardRefForHotReloading","hint","ownerName","getCurrentFiberOwnerNameInDevOrNull","debugSource","_componentName3","_componentName4","SUSPENDED_MARKER","mountSuspenseOffscreenState","updateSuspenseComponent","shouldSuspend","suspenseContext","showFallback","didSuspend","shouldRemainOnFallback","mountDehydratedSuspenseComponent","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","primaryChildren","fallbackChildren","primaryChildFragment","fallbackChildFragment","progressedPrimaryFragment","primaryChildProps","treeBaseDuration","mountWorkInProgressOffscreenFiber","mountSuspenseFallbackChildren","mountSuspensePrimaryChildren","_dehydrated","retrySuspenseComponentWithoutHydrating","fiberMode","mountSuspenseFallbackAfterRetryWithoutHydrating","_getSuspenseInstanceF","attemptHydrationAtLane","getBumpedLaneForHydration","retry","retryDehydratedSuspenseBoundary","updateDehydratedSuspenseComponent","_nextFallbackChildren","currentPrimaryChildFragment","currentFallbackChildFragment","updateWorkInProgressOffscreenFiber","subtreeFlags","updateSuspenseFallbackChildren","_primaryChildFragment2","prevOffscreenState","updateSuspenseOffscreenState","getRemainingWorkInPrimaryTree","_primaryChildFragment3","updateSuspensePrimaryChildren","offscreenProps","createFiberFromOffscreen","scheduleSuspenseWorkOnFiber","validateSuspenseListNestedChild","childSlot","isAnArray","isIterable","initSuspenseListRenderState","isBackwards","lastContentRow","tailMode","renderState","renderingStartTime","updateSuspenseListComponent","validateRevealOrder","validateTailOptions","childrenIterator","_i","validateSuspenseListChildren","firstChild","propagateSuspenseContextChange","currentRow","findLastContentRow","_tail","nextRow","hasWarnedAboutUsingNoValuePropOnContextProvider","appendAllChildren","updateHostContainer","updateHostComponent$1","updateHostText$1","hasWarnedAboutUsingContextAsConsumer","cloneChildFibers","beginWork","_debugNeedsRemount","oldWorkInProgress","newWorkInProgress","prevSibling","remountFiber","didSuspendBefore","_hasChildWork","attemptEarlyBailoutIfNoScheduledUpdate","isForkedChild","slotIndex","_componentName2","mountIndeterminateComponent","unresolvedProps","_Component","_unresolvedProps","updateHostComponent","updateHostText","updatePortalComponent","_unresolvedProps2","updateMode","updateProfiler","providerPropTypes","oldValue","updateContextProvider","updateContextConsumer","_resolvedProps3","_Component2","_unresolvedProps4","mountIncompleteClassComponent","markUpdate","markRef$1","hadNoMutationsEffects","completedWork","needsVisibilityToggle","isHidden","rootContainerInstance","currentHostContext","updatePayload","oldText","newText","appendAllChildrenToContainer","containerChildSet","_instance2","portalOrRoot","container","newChildSet","pendingChildren","currentInstance","childrenUnchanged","recyclableInstance","newInstance","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","_tailNode","_lastTailNode","bubbleProperties","didBailout","newChildLanes","_treeBaseDuration","_child2","_child3","completeDehydratedSuspenseBoundary","wasHydrated","prepareToHydrateHostSuspenseInstance","_primaryChildFragment","completeWork","fiberRoot","hostContext","shouldWarnIfMismatchDev","prepareToHydrateHostInstance","_rootContainerInstance","_currentHostContext","_isConcurrentMode2","prepareToHydrateHostTextInstance","nextDidTimeout","unstable_avoidThisFallback","didSuspendAlready","renderedTail","suspended","newThenables","getRenderTargetTime","_suspended","_newThenables","previousSibling","popRenderLanes","nextIsHidden","subtreeRenderLanes","unwindWork","_flags","_flags2","unwindInterruptedWork","interruptedWork","invokeGuardedCallbackProd","d","f","funcArgs","onError","invokeGuardedCallbackImpl","dispatchEvent","document","fakeNode","didCall","didError","windowEvent","windowEventDescriptor","restoreAfterDispatch","removeEventListener","evtType","didSetError","isCrossOriginError","handleWindowError","colno","lineno","defaultPrevented","inner","addEventListener","initEvent","invokeGuardedCallbackImpl$1","hasError","caughtError","reporter","invokeGuardedCallback","clearCaughtError","didWarnAboutUndefinedSnapshotBeforeUpdate","offscreenSubtreeIsHidden","offscreenSubtreeWasHidden","PossiblyWeakSet","WeakSet","nextEffect","inProgressLanes","inProgressRoot","safelyCallCommitHookLayoutEffectListMount","nearestMountedAncestor","commitHookEffectListMount","captureCommitPhaseError","safelyCallComponentWillUnmount","componentWillUnmount","callComponentWillUnmountWithTimer","safelyAttachRef","commitAttachRef","safelyDetachRef","retVal","safelyCallDestroy","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_complete","commitBeforeMutationEffects_begin","shouldFire","commitBeforeMutationEffectsOnFiber","snapshot","didWarnSet","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","markComponentPassiveEffectUnmountStarted","setIsRunningInsertionEffect","markComponentPassiveEffectUnmountStopped","markComponentPassiveEffectMountStarted","markComponentPassiveEffectMountStopped","markComponentLayoutEffectMountStopped","commitPassiveEffectDurations","finishedRoot","_finishedWork$memoize","onPostCommit","phase","outer","commitLayoutEffectOnFiber","committedLanes","Layout","_updateQueue","_finishedWork$memoize2","onCommit","onRender","pendingPassiveProfilerEffects","rootDoesHavePassiveEffects","scheduleCallback$1","flushPassiveEffects","commitSuspenseHydrationCallbacks","reappearLayoutEffectsOnFiber","safelyCallComponentDidMount","instanceToUse","detachFiberAfterEffects","hostInstance","isHostParent","getHostSibling","siblings","commitPlacement","getHostParentFiber","insertOrAppendPlacementNode","_parent","insertOrAppendPlacementNodeIntoContainer","before","hostParent","hostParentIsContainer","commitDeletionEffects","deletedFiber","findParent","commitDeletionEffectsOnFiber","recursivelyTraverseDeletionEffects","onCommitFiberUnmount","onCommitUnmount","prevHostParent","prevHostParentIsContainer","_prevHostParent","_prevHostParentIsContainer","emptyChildSet","emptyPortalContainer","_effect","prevOffscreenSubtreeWasHidden","attachSuspenseRetryListeners","retryCache","resolveRetryWakeable","recursivelyTraverseMutationEffects","prevDebugFiber","commitMutationEffectsOnFiber","commitReconciliationEffects","Insertion","_instance4","_containerInfo","_pendingChildren","offscreenFiber","offscreenInstance","globalMostRecentFallbackTime","commitSuspenseCallback","_wasHidden","_offscreenInstance","_isHidden","offscreenBoundary","offscreenChild","disappearLayoutEffects_begin","hostSubtreeRoot","_instance3","hideOrUnhideAllChildren","commitLayoutEffects","commitLayoutEffects_begin","subtreeRoot","isModernRoot","newOffscreenSubtreeIsHidden","commitLayoutMountEffects_complete","wasHidden","prevOffscreenSubtreeIsHidden","reappearLayoutEffects_begin","disappearLayoutEffects_complete","reappearLayoutEffects_complete","commitPassiveMountEffects","committedTransitions","commitPassiveMountEffects_complete","commitPassiveMountEffects_begin","commitPassiveMountOnFiber","Passive$1","commitPassiveUnmountEffects","fiberToDelete","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","previousFiber","detachedChild","detachedSibling","commitPassiveUnmountEffects_complete","commitPassiveUnmountEffects_begin","commitPassiveUnmountOnFiber","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","invokeLayoutEffectMountInDEV","invokePassiveEffectMountInDEV","invokeLayoutEffectUnmountInDEV","invokePassiveEffectUnmountInDEV","COMPONENT_TYPE","HAS_PSEUDO_CLASS_TYPE","ROLE_TYPE","TEST_NAME_TYPE","TEXT_TYPE","symbolFor","findFiberRootForHostRoot","hostRoot","maybeFiber","matchSelector","selectors","selectorIndex","hasMatchingPaths","dataTestID","selectorToString","findPaths","matchingFibers","findAllNodes","instanceRoots","commitHooks","isConcurrentActEnvironment","isReactActEnvironmentGlobal","IS_REACT_ACT_ENVIRONMENT","ReactCurrentDispatcher$2","ReactCurrentOwner$2","ReactCurrentBatchConfig$2","ReactCurrentActQueue$1","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootFatalError","workInProgressRootSkippedLanes","workInProgressRootInterleavedUpdatedLanes","workInProgressRootPingedLanes","workInProgressRootRecoverableErrors","workInProgressRootRenderTargetTime","workInProgressTransitions","resetRenderTimer","hasUncaughtError","firstUncaughtError","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveTransitions","nestedUpdateCount","rootWithNestedUpdates","isFlushingPassiveEffects","didScheduleUpdateDuringPassiveEffects","nestedPassiveUpdateCount","rootWithPassiveNestedUpdates","currentEventTime","currentEventTransitionLane","isRunningInsertionEffect","requestRetryLane","checkForNestedUpdates","renderingComponentName","dedupeKey","didWarnAboutUpdateInRenderForAnotherComponent","didWarnAboutUpdateInRender","warnAboutRenderPhaseUpdatesInDEV","jestIsDefined","jest","warnIfUpdatesNotWrappedWithActDEV","markRootSuspended$1","ensureRootIsScheduled","existingCallbackNode","callbackNode","expirationTimes","expiredLanes","markStarvedLanesAsExpired","cancelCallback$1","callbackPriority","newCallbackPriority","existingCallbackPriority","fakeActCallbackNode","newCallbackNode","performSyncWorkOnRoot","schedulerPriorityLevel","performConcurrentWorkOnRoot","didTimeout","originalCallbackNode","shouldTimeSlice","includesExpiredLane","exitStatus","prevExecutionContext","pushDispatcher","prepareFreshStack","workLoopConcurrent","handleError","popDispatcher","markRenderYielded","renderRootConcurrent","renderRootSync","errorRetryLanes","recoverFromConcurrentError","fatalError","renderWasConcurrent","checks","renderedValue","isRenderConsistentWithExternalStores","_errorRetryLanes","_fatalError","finishedLanes","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","includesOnlyTransitions","mostRecentEventTime","getMostRecentEventTime","eventTimeMs","timeElapsedMs","_msUntilTimeout","timeElapsed","finishConcurrentRender","errorsFromFirstAttempt","errorsFromSecondAttempt","errors","markRootSuspended","flushSync","rootWorkInProgress","lastInterleavedUpdate","firstInterleavedUpdate","finishQueueingConcurrentUpdates","erroredWork","completeUnitOfWork","yetAnotherThrownValue","workLoopSync","performUnitOfWork","unitOfWork","beginWork$1","_next","siblingFiber","recoverableErrors","previousUpdateLanePriority","renderPriorityLevel","flushRenderPhaseStrictModeWarningsInDEV","markCommitStarted","remainingLanes","noLongerPendingLanes","mutableReadLanes","markRootFinished","subtreeHasEffects","rootHasEffect","commitMutationEffects","markLayoutEffectsStarted","markLayoutEffectsStopped","rootDidHavePassiveEffects","commitDoubleInvokeEffectsInDEV","eventPriority","onCommitFiberRoot","schedulerPriority","onCommitRoot","commitHook","onCommitRoot$1","onRecoverableError","commitRootImpl","renderPriority","markPassiveEffectsStarted","profilerEffects","markPassiveEffectsStopped","onPostCommitFiberRoot","onPostCommitRoot","flushPassiveEffectsImpl","captureCommitPhaseErrorOnRoot","rootFiber","reportUncaughtErrorInDEV","warnIfSuspenseResolutionNotWrappedWithActDEV","retryTimedOutBoundary","boundaryFiber","hasPassiveEffects","invokeEffectsInDev","invokeEffectFn","primarySubtreeFlag","didWarnStateUpdateForNotYetMountedComponent","originalWorkInProgressCopy","assignFiberPropertiesInDEV","originalError","replayError","schedulingFiber","actQueue","isRunning","resolveFamily","failedBoundaries","setRefreshHandler","handler","family","currentRender","syntheticType","prevType","nextType","needsCompareFamilies","$$typeofNextType","prevFamily","scheduleRefresh","staleFamilies","updatedFamilies","scheduleFibersWithFamiliesRecursively","scheduleRoot","updateContainer","candidateType","needsRender","needsRemount","_root","hasBadMapPolyfill","findHostInstancesForRefresh","families","hostInstances","findHostInstancesForMatchingFibersRecursively","didMatch","foundHostInstances","findChildHostInstancesForFiberShallowly","findHostInstancesForFiberShallowly","nonExtensibleObject","preventExtensions","FiberNode","currentDependencies","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","elements","content","target","FiberRootNode","hydrate","mutableSourceEagerHydrationData","_debugRootType","createFiberRoot","initialChildren","hydrationCallbacks","isStrictMode","concurrentUpdatesByDefaultOverride","transitionCallbacks","uninitializedFiber","createHostRootFiber","_initialState","didWarnAboutNestedUpdates","didWarnAboutFindNodeInStrictMode","getContextForSubtree","parentComponent","onScheduleFiberRoot","onScheduleRoot","current$1","markRenderScheduled","markRetryLaneImpl","markRetryLaneIfNotHydrated","shouldErrorImpl","shouldSuspendImpl","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","copyWithDeleteImpl","path","updated","copyWithDelete","copyWithRenameImpl","oldPath","newPath","oldKey","copyWithRename","copyWithSetImpl","copyWithSet","findHook","findHostInstanceByFiber","hostFiber","emptyFindFiberByHostInstance","getCurrentFiberForDevTools","newShouldErrorImpl","newShouldSuspendImpl","attemptContinuousHydration","attemptDiscreteHydration","attemptHydrationAtCurrentPriority","attemptSynchronousHydration","getHighestPriorityPendingLanes","flushRoot","batchedUpdates","createComponentSelector","createContainer","createHasPseudoClassSelector","createHydrationContainer","scheduleInitialHydrationOnRoot","createPortal","createRoleSelector","role","createTestNameSelector","createTextSelector","deferredUpdates","discreteUpdates","findBoundingRects","boundingRects","targetRect","targetLeft","targetRight","targetTop","targetBottom","otherRect","otherLeft","otherRight","otherTop","otherBottom","findHostInstance","findHostInstanceWithNoPortals","findHostInstanceWithWarning","flushControlled","focusWithin","getFindAllNodesFailureDescription","maxSelectorIndex","matchedNames","unmatchedNames","getPublicRootInstance","containerFiber","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","internals","isDisabled","supportsFiber","inject","checkDCE","injectInternals","bundleType","rendererPackageName","rendererConfig","currentDispatcherRef","getCurrentFiber","reconcilerVersion","isAlreadyRendering","observeVisibleRects","_setupIntersectionObs","disconnect","observe","unobserve","nextInstanceRoots","registerMutableSourceForHydration","getVersion","_getVersion","runWithPriority","requireReactReconciler","reactReconcilerExports","uiText","uiBackground","componentKeys","isEqual","val1","val2","JSON","stringify","isNotUndefined","noopConfig","_container","_beforeChild","_node","_textInstance","_internalInstanceHandle","_oldText","_newText","_rootContainer","_hostContext","_internalHandle","_fn","_delay","_parentHostContext","IA_POINTER","propsChanged","changes","createReconciler","entities","getComponentId","updateTree","upsertComponent","upsertListener","removeComponent","keyProp","removeChildEntity","rightOfChild","hostConfig","keyTyped","childIndex","childToModify","_prevPropsProps","_nextProps","beforeChild","beforeChildIndex","reconciler","getEntities","uiContainer","renderUi","ui","renderer","ReactEcs","ObserverEventState","skipNextObservers","currentTarget","initalize","Observer","unregisterOnNextCall","_willBeUnregistered","Observable","onObserverAdded","_observers","_onObserverAdded","_eventState","insertFirst","unregisterOnFirstCall","observer","addOnce","_deferUnregister","removeCallback","notifyObservers","eventData","lastReturnValue","obs","notifyObserversWithPromise","lastReturnedValue","notifyObserver","hasObservers","hasSpecificMask","_remove","createSubscriber","eventName","eventId","onEnterSceneObservable","onLeaveSceneObservable","onSceneReadyObservable","onPlayerExpressionObservable","onVideoEvent","onProfileChanged","onPlayerConnectedObservable","onPlayerDisconnectedObservable","onRealmChangedObservable","onPlayerClickedObservable","pollEvents","events","sendBatch","actions","generic","parse","videoData","runTick","deltaTime","top","bottom","YGJ_CENTER","YGA_CENTER","TAM_BOTTOM_CENTER","F_LIBERATION_SANS","onUpdate","sdk.runTick"],"mappings":"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AAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,E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"}