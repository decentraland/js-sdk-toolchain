import { engine, MeshCollider, MeshRenderer, Transform, pointerEventsSystem } from '@dcl/ecs';
import { Vector3, Quaternion } from '@dcl/sdk/math';
export * from '@dcl/sdk';
function createCube(x, y, z) {
    const meshEntity = engine.addEntity();
    Transform.create(meshEntity, { position: { x, y, z } });
    MeshRenderer.create(meshEntity, { mesh: { $case: 'box', box: { uvs: [] } } });
    MeshCollider.create(meshEntity, { mesh: { $case: 'box', box: {} } });
    return meshEntity;
}
function circularSystem(dt) {
    const entitiesWithMeshRenderer = engine.getEntitiesWith(MeshRenderer, Transform);
    for (const [entity, _meshRenderer, _transform] of entitiesWithMeshRenderer) {
        const mutableTransform = Transform.getMutable(entity);
        mutableTransform.rotation = Quaternion.multiply(mutableTransform.rotation, Quaternion.fromAngleAxis(dt * 10, Vector3.Up()));
    }
}
const initEntity = createCube(8, 1, 8);
pointerEventsSystem.onPointerDown(initEntity, function (event) {
    console.log('Button: ' + event.button);
    createCube(1 + Math.random() * 8, Math.random() * 8, 1 + Math.random() * 8);
}, {
    button: 3,
    hoverText: 'CASLA - BOEDO'
});
engine.addSystem(circularSystem);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUF1QixZQUFZLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUNsSCxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUNuRCxjQUFjLFVBQVUsQ0FBQTtBQUd4QixTQUFTLFVBQVUsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVM7SUFDakQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBQ3JDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdkQsWUFBWSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUM3RSxZQUFZLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUVwRSxPQUFPLFVBQVUsQ0FBQTtBQUNuQixDQUFDO0FBR0QsU0FBUyxjQUFjLENBQUMsRUFBVTtJQUNoQyxNQUFNLHdCQUF3QixHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQ2hGLEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsVUFBVSxDQUFDLElBQUksd0JBQXdCLEVBQUU7UUFDMUUsTUFBTSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRXJELGdCQUFnQixDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUM3QyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQ3pCLFVBQVUsQ0FBQyxhQUFhLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDaEQsQ0FBQTtLQUNGO0FBQ0gsQ0FBQztBQUdELE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBRXRDLG1CQUFtQixDQUFDLGFBQWEsQ0FDL0IsVUFBVSxFQUNWLFVBQVUsS0FBSztJQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN0QyxVQUFVLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBRTdFLENBQUMsRUFDRDtJQUNFLE1BQU0sR0FBb0I7SUFDMUIsU0FBUyxFQUFFLGVBQWU7Q0FDM0IsQ0FDRixDQUFBO0FBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVuZ2luZSwgRW50aXR5LCBJbnB1dEFjdGlvbiwgTWVzaENvbGxpZGVyLCBNZXNoUmVuZGVyZXIsIFRyYW5zZm9ybSwgcG9pbnRlckV2ZW50c1N5c3RlbSB9IGZyb20gJ0BkY2wvZWNzJ1xuaW1wb3J0IHsgVmVjdG9yMywgUXVhdGVybmlvbiB9IGZyb20gJ0BkY2wvc2RrL21hdGgnXG5leHBvcnQgKiBmcm9tICdAZGNsL3NkaydcblxuLy8gQ3ViZSBmYWN0b3J5XG5mdW5jdGlvbiBjcmVhdGVDdWJlKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBFbnRpdHkge1xuICBjb25zdCBtZXNoRW50aXR5ID0gZW5naW5lLmFkZEVudGl0eSgpXG4gIFRyYW5zZm9ybS5jcmVhdGUobWVzaEVudGl0eSwgeyBwb3NpdGlvbjogeyB4LCB5LCB6IH0gfSlcbiAgTWVzaFJlbmRlcmVyLmNyZWF0ZShtZXNoRW50aXR5LCB7IG1lc2g6IHsgJGNhc2U6ICdib3gnLCBib3g6IHsgdXZzOiBbXSB9IH0gfSlcbiAgTWVzaENvbGxpZGVyLmNyZWF0ZShtZXNoRW50aXR5LCB7IG1lc2g6IHsgJGNhc2U6ICdib3gnLCBib3g6IHt9IH0gfSlcblxuICByZXR1cm4gbWVzaEVudGl0eVxufVxuXG4vLyBTeXN0ZW1zXG5mdW5jdGlvbiBjaXJjdWxhclN5c3RlbShkdDogbnVtYmVyKSB7XG4gIGNvbnN0IGVudGl0aWVzV2l0aE1lc2hSZW5kZXJlciA9IGVuZ2luZS5nZXRFbnRpdGllc1dpdGgoTWVzaFJlbmRlcmVyLCBUcmFuc2Zvcm0pXG4gIGZvciAoY29uc3QgW2VudGl0eSwgX21lc2hSZW5kZXJlciwgX3RyYW5zZm9ybV0gb2YgZW50aXRpZXNXaXRoTWVzaFJlbmRlcmVyKSB7XG4gICAgY29uc3QgbXV0YWJsZVRyYW5zZm9ybSA9IFRyYW5zZm9ybS5nZXRNdXRhYmxlKGVudGl0eSlcblxuICAgIG11dGFibGVUcmFuc2Zvcm0ucm90YXRpb24gPSBRdWF0ZXJuaW9uLm11bHRpcGx5KFxuICAgICAgbXV0YWJsZVRyYW5zZm9ybS5yb3RhdGlvbixcbiAgICAgIFF1YXRlcm5pb24uZnJvbUFuZ2xlQXhpcyhkdCAqIDEwLCBWZWN0b3IzLlVwKCkpXG4gICAgKVxuICB9XG59XG5cbi8vIEluaXRcbmNvbnN0IGluaXRFbnRpdHkgPSBjcmVhdGVDdWJlKDgsIDEsIDgpXG5cbnBvaW50ZXJFdmVudHNTeXN0ZW0ub25Qb2ludGVyRG93bihcbiAgaW5pdEVudGl0eSxcbiAgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coJ0J1dHRvbjogJyArIGV2ZW50LmJ1dHRvbilcbiAgICBjcmVhdGVDdWJlKDEgKyBNYXRoLnJhbmRvbSgpICogOCwgTWF0aC5yYW5kb20oKSAqIDgsIDEgKyBNYXRoLnJhbmRvbSgpICogOClcbiAgICAvLyBFdmVudHNTeXN0ZW0ucmVtb3ZlT25Qb2ludGVyRG93bihpbml0RW50aXR5KVxuICB9LFxuICB7XG4gICAgYnV0dG9uOiBJbnB1dEFjdGlvbi5JQV9BTlksXG4gICAgaG92ZXJUZXh0OiAnQ0FTTEEgLSBCT0VETydcbiAgfVxuKVxuXG5lbmdpbmUuYWRkU3lzdGVtKGNpcmN1bGFyU3lzdGVtKVxuLy8gZW5naW5lLmFkZFN5c3RlbShjbGlja1N5c3RlbSlcbiJdfQ==