import { engine, Transform, MeshRenderer, MeshCollider, EventsSystem, Vector3, Raycast, RaycastResult } from '@dcl/ecs';
function createCube(x, y, z, scaleMultiplier = 1) {
    const cubeEntity = engine.addEntity();
    Transform.create(cubeEntity, {
        position: { x, y, z },
        scale: { x: scaleMultiplier, y: scaleMultiplier, z: scaleMultiplier }
    });
    MeshRenderer.create(cubeEntity, { mesh: { $case: 'box', box: { uvs: [] } } });
    MeshCollider.create(cubeEntity, { mesh: { $case: 'box', box: {} } });
    return cubeEntity;
}
const cubeEntity = createCube(8, 1, 8);
const _cubeEntity2 = createCube(8, 1, 13);
const raycastEntity = engine.addEntity();
EventsSystem.onPointerDown(cubeEntity, () => {
    Raycast.createOrReplace(raycastEntity, {
        origin: Vector3.create(8, 1, 0.1),
        direction: Vector3.create(0, 0, 1),
        maxDistance: 16,
        queryType: 1
    });
}, {
    button: 0,
    hoverText: 'CAST RAY'
});
let lastRaycastTimestamp = -1;
engine.addSystem(() => {
    for (const [_entity, result] of engine.getEntitiesWith(RaycastResult)) {
        if (result.hits?.length === 0 || result.timestamp <= lastRaycastTimestamp)
            continue;
        lastRaycastTimestamp = result.timestamp;
        if (result.hits[0] && result.hits[0].position) {
            createCube(result.hits[0].position.x, result.hits[0].position.y, result.hits[0].position.z, 0.3);
        }
        console.log(`Hits (this should be '2' the first time): '${result.hits.length}'`);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFDVCxZQUFZLEVBQ1osWUFBWSxFQUVaLFlBQVksRUFDWixPQUFPLEVBQ1AsT0FBTyxFQUVQLGFBQWEsRUFDZCxNQUFNLFVBQVUsQ0FBQTtBQUVqQixTQUFTLFVBQVUsQ0FDakIsQ0FBUyxFQUNULENBQVMsRUFDVCxDQUFTLEVBQ1Qsa0JBQTBCLENBQUM7SUFFM0IsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBRXJDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO1FBQzNCLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ3JCLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLGVBQWUsRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFO0tBQ3RFLENBQUMsQ0FBQTtJQUVGLFlBQVksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDN0UsWUFBWSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFFcEUsT0FBTyxVQUFVLENBQUE7QUFDbkIsQ0FBQztBQUdELE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3RDLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQ3pDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtBQUd4QyxZQUFZLENBQUMsYUFBYSxDQUN4QixVQUFVLEVBQ1YsR0FBRyxFQUFFO0lBQ0gsT0FBTyxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUU7UUFDckMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDakMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbEMsV0FBVyxFQUFFLEVBQUU7UUFDZixTQUFTLEdBQWdDO0tBQzFDLENBQUMsQ0FBQTtBQUNKLENBQUMsRUFDRDtJQUNFLE1BQU0sR0FBd0I7SUFDOUIsU0FBUyxFQUFFLFVBQVU7Q0FDdEIsQ0FDRixDQUFBO0FBR0QsSUFBSSxvQkFBb0IsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUM3QixNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtJQUNwQixLQUFLLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsRUFBRTtRQUNyRSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxJQUFJLG9CQUFvQjtZQUN2RSxTQUFRO1FBQ1Ysb0JBQW9CLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQTtRQUV2QyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7WUFDN0MsVUFBVSxDQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQ3pCLEdBQUcsQ0FDSixDQUFBO1NBQ0Y7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLDhDQUE4QyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7S0FDakY7QUFDSCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGVuZ2luZSxcbiAgVHJhbnNmb3JtLFxuICBNZXNoUmVuZGVyZXIsXG4gIE1lc2hDb2xsaWRlcixcbiAgSW5wdXRBY3Rpb24sXG4gIEV2ZW50c1N5c3RlbSxcbiAgVmVjdG9yMyxcbiAgUmF5Y2FzdCxcbiAgUmF5Y2FzdFF1ZXJ5VHlwZSxcbiAgUmF5Y2FzdFJlc3VsdFxufSBmcm9tICdAZGNsL2VjcydcblxuZnVuY3Rpb24gY3JlYXRlQ3ViZShcbiAgeDogbnVtYmVyLFxuICB5OiBudW1iZXIsXG4gIHo6IG51bWJlcixcbiAgc2NhbGVNdWx0aXBsaWVyOiBudW1iZXIgPSAxXG4pIHtcbiAgY29uc3QgY3ViZUVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuXG4gIFRyYW5zZm9ybS5jcmVhdGUoY3ViZUVudGl0eSwge1xuICAgIHBvc2l0aW9uOiB7IHgsIHksIHogfSxcbiAgICBzY2FsZTogeyB4OiBzY2FsZU11bHRpcGxpZXIsIHk6IHNjYWxlTXVsdGlwbGllciwgejogc2NhbGVNdWx0aXBsaWVyIH1cbiAgfSlcblxuICBNZXNoUmVuZGVyZXIuY3JlYXRlKGN1YmVFbnRpdHksIHsgbWVzaDogeyAkY2FzZTogJ2JveCcsIGJveDogeyB1dnM6IFtdIH0gfSB9KVxuICBNZXNoQ29sbGlkZXIuY3JlYXRlKGN1YmVFbnRpdHksIHsgbWVzaDogeyAkY2FzZTogJ2JveCcsIGJveDoge30gfSB9KVxuXG4gIHJldHVybiBjdWJlRW50aXR5XG59XG5cbi8vIENyZWF0ZSBjdWJlIHRvIGhpdFxuY29uc3QgY3ViZUVudGl0eSA9IGNyZWF0ZUN1YmUoOCwgMSwgOClcbmNvbnN0IF9jdWJlRW50aXR5MiA9IGNyZWF0ZUN1YmUoOCwgMSwgMTMpXG5jb25zdCByYXljYXN0RW50aXR5ID0gZW5naW5lLmFkZEVudGl0eSgpXG5cbi8vIEFkZCBPblBvaW50ZXJEb3duIGNvbXBvbmVudCB0byBjdWJlIGVudGl0eSB0byB0cmlnZ2VyIHJheSBjYXN0aW5nIG9uIGludGVyYWN0aW9uXG5FdmVudHNTeXN0ZW0ub25Qb2ludGVyRG93bihcbiAgY3ViZUVudGl0eSxcbiAgKCkgPT4ge1xuICAgIFJheWNhc3QuY3JlYXRlT3JSZXBsYWNlKHJheWNhc3RFbnRpdHksIHtcbiAgICAgIG9yaWdpbjogVmVjdG9yMy5jcmVhdGUoOCwgMSwgMC4xKSxcbiAgICAgIGRpcmVjdGlvbjogVmVjdG9yMy5jcmVhdGUoMCwgMCwgMSksXG4gICAgICBtYXhEaXN0YW5jZTogMTYsXG4gICAgICBxdWVyeVR5cGU6IFJheWNhc3RRdWVyeVR5cGUuUlFUX1FVRVJZX0FMTFxuICAgIH0pXG4gIH0sXG4gIHtcbiAgICBidXR0b246IElucHV0QWN0aW9uLklBX1BPSU5URVIsXG4gICAgaG92ZXJUZXh0OiAnQ0FTVCBSQVknXG4gIH1cbilcblxuLy8gU3lzdGVtIHRvIGRldGVjdCBuZXcgcmF5Y2FzdCByZXNwb25zZXMgYW5kIGluc3RhbnRpYXRlIGEgY3ViZSB3aGVyZSB0aGUgcmF5IGhpdHNcbmxldCBsYXN0UmF5Y2FzdFRpbWVzdGFtcCA9IC0xXG5lbmdpbmUuYWRkU3lzdGVtKCgpID0+IHtcbiAgZm9yIChjb25zdCBbX2VudGl0eSwgcmVzdWx0XSBvZiBlbmdpbmUuZ2V0RW50aXRpZXNXaXRoKFJheWNhc3RSZXN1bHQpKSB7XG4gICAgaWYgKHJlc3VsdC5oaXRzPy5sZW5ndGggPT09IDAgfHwgcmVzdWx0LnRpbWVzdGFtcCA8PSBsYXN0UmF5Y2FzdFRpbWVzdGFtcClcbiAgICAgIGNvbnRpbnVlXG4gICAgbGFzdFJheWNhc3RUaW1lc3RhbXAgPSByZXN1bHQudGltZXN0YW1wXG5cbiAgICBpZiAocmVzdWx0LmhpdHNbMF0gJiYgcmVzdWx0LmhpdHNbMF0ucG9zaXRpb24pIHtcbiAgICAgIGNyZWF0ZUN1YmUoXG4gICAgICAgIHJlc3VsdC5oaXRzWzBdLnBvc2l0aW9uLngsXG4gICAgICAgIHJlc3VsdC5oaXRzWzBdLnBvc2l0aW9uLnksXG4gICAgICAgIHJlc3VsdC5oaXRzWzBdLnBvc2l0aW9uLnosXG4gICAgICAgIDAuM1xuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGBIaXRzICh0aGlzIHNob3VsZCBiZSAnMicgdGhlIGZpcnN0IHRpbWUpOiAnJHtyZXN1bHQuaGl0cy5sZW5ndGh9J2ApXG4gIH1cbn0pXG5cbmV4cG9ydCB7fVxuIl19