import { engine, Transform, MeshRenderer, MeshCollider, pointerEventsSystem, Raycast, RaycastResult } from '@dcl/sdk/ecs';
import { Vector3 } from '@dcl/sdk/math';
function createCube(x, y, z, scaleMultiplier = 1) {
    const cubeEntity = engine.addEntity();
    Transform.create(cubeEntity, {
        position: { x, y, z },
        scale: { x: scaleMultiplier, y: scaleMultiplier, z: scaleMultiplier }
    });
    MeshRenderer.create(cubeEntity, { mesh: { $case: 'box', box: { uvs: [] } } });
    MeshCollider.create(cubeEntity, { mesh: { $case: 'box', box: {} } });
    return cubeEntity;
}
const cubeEntity = createCube(8, 1, 8);
const _cubeEntity2 = createCube(8, 1, 13);
const raycastEntity = engine.addEntity();
pointerEventsSystem.onPointerDown(cubeEntity, () => {
    Raycast.createOrReplace(raycastEntity, {
        origin: Vector3.create(8, 1, 0.1),
        direction: Vector3.create(0, 0, 1),
        maxDistance: 16,
        queryType: 1
    });
}, {
    button: 0,
    hoverText: 'CAST RAY'
});
let lastRaycastTimestamp = -1;
engine.addSystem(() => {
    for (const [_entity, result] of engine.getEntitiesWith(RaycastResult)) {
        if (result.hits?.length === 0 || result.timestamp <= lastRaycastTimestamp)
            continue;
        lastRaycastTimestamp = result.timestamp;
        if (result.hits[0] && result.hits[0].position) {
            createCube(result.hits[0].position.x, result.hits[0].position.y, result.hits[0].position.z, 0.3);
        }
        console.log(`Hits (this should be '2' the first time): '${result.hits.length}'`);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFDVCxZQUFZLEVBQ1osWUFBWSxFQUVaLG1CQUFtQixFQUNuQixPQUFPLEVBRVAsYUFBYSxFQUNkLE1BQU0sY0FBYyxDQUFBO0FBQ3JCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDdkMsU0FBUyxVQUFVLENBQ2pCLENBQVMsRUFDVCxDQUFTLEVBQ1QsQ0FBUyxFQUNULGtCQUEwQixDQUFDO0lBRTNCLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtJQUVyQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtRQUMzQixRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNyQixLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLGVBQWUsRUFBRTtLQUN0RSxDQUFDLENBQUE7SUFFRixZQUFZLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQzdFLFlBQVksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBRXBFLE9BQU8sVUFBVSxDQUFBO0FBQ25CLENBQUM7QUFHRCxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN0QyxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUN6QyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUE7QUFHeEMsbUJBQW1CLENBQUMsYUFBYSxDQUMvQixVQUFVLEVBQ1YsR0FBRyxFQUFFO0lBQ0gsT0FBTyxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUU7UUFDckMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDakMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbEMsV0FBVyxFQUFFLEVBQUU7UUFDZixTQUFTLEdBQWdDO0tBQzFDLENBQUMsQ0FBQTtBQUNKLENBQUMsRUFDRDtJQUNFLE1BQU0sR0FBd0I7SUFDOUIsU0FBUyxFQUFFLFVBQVU7Q0FDdEIsQ0FDRixDQUFBO0FBR0QsSUFBSSxvQkFBb0IsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUM3QixNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtJQUNwQixLQUFLLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsRUFBRTtRQUNyRSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxJQUFJLG9CQUFvQjtZQUN2RSxTQUFRO1FBQ1Ysb0JBQW9CLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQTtRQUV2QyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7WUFDN0MsVUFBVSxDQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQ3pCLEdBQUcsQ0FDSixDQUFBO1NBQ0Y7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUNULDhDQUE4QyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUNwRSxDQUFBO0tBQ0Y7QUFDSCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGVuZ2luZSxcbiAgVHJhbnNmb3JtLFxuICBNZXNoUmVuZGVyZXIsXG4gIE1lc2hDb2xsaWRlcixcbiAgSW5wdXRBY3Rpb24sXG4gIHBvaW50ZXJFdmVudHNTeXN0ZW0sXG4gIFJheWNhc3QsXG4gIFJheWNhc3RRdWVyeVR5cGUsXG4gIFJheWNhc3RSZXN1bHRcbn0gZnJvbSAnQGRjbC9zZGsvZWNzJ1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJ0BkY2wvc2RrL21hdGgnXG5mdW5jdGlvbiBjcmVhdGVDdWJlKFxuICB4OiBudW1iZXIsXG4gIHk6IG51bWJlcixcbiAgejogbnVtYmVyLFxuICBzY2FsZU11bHRpcGxpZXI6IG51bWJlciA9IDFcbikge1xuICBjb25zdCBjdWJlRW50aXR5ID0gZW5naW5lLmFkZEVudGl0eSgpXG5cbiAgVHJhbnNmb3JtLmNyZWF0ZShjdWJlRW50aXR5LCB7XG4gICAgcG9zaXRpb246IHsgeCwgeSwgeiB9LFxuICAgIHNjYWxlOiB7IHg6IHNjYWxlTXVsdGlwbGllciwgeTogc2NhbGVNdWx0aXBsaWVyLCB6OiBzY2FsZU11bHRpcGxpZXIgfVxuICB9KVxuXG4gIE1lc2hSZW5kZXJlci5jcmVhdGUoY3ViZUVudGl0eSwgeyBtZXNoOiB7ICRjYXNlOiAnYm94JywgYm94OiB7IHV2czogW10gfSB9IH0pXG4gIE1lc2hDb2xsaWRlci5jcmVhdGUoY3ViZUVudGl0eSwgeyBtZXNoOiB7ICRjYXNlOiAnYm94JywgYm94OiB7fSB9IH0pXG5cbiAgcmV0dXJuIGN1YmVFbnRpdHlcbn1cblxuLy8gQ3JlYXRlIGN1YmUgdG8gaGl0XG5jb25zdCBjdWJlRW50aXR5ID0gY3JlYXRlQ3ViZSg4LCAxLCA4KVxuY29uc3QgX2N1YmVFbnRpdHkyID0gY3JlYXRlQ3ViZSg4LCAxLCAxMylcbmNvbnN0IHJheWNhc3RFbnRpdHkgPSBlbmdpbmUuYWRkRW50aXR5KClcblxuLy8gQWRkIE9uUG9pbnRlckRvd24gY29tcG9uZW50IHRvIGN1YmUgZW50aXR5IHRvIHRyaWdnZXIgcmF5IGNhc3Rpbmcgb24gaW50ZXJhY3Rpb25cbnBvaW50ZXJFdmVudHNTeXN0ZW0ub25Qb2ludGVyRG93bihcbiAgY3ViZUVudGl0eSxcbiAgKCkgPT4ge1xuICAgIFJheWNhc3QuY3JlYXRlT3JSZXBsYWNlKHJheWNhc3RFbnRpdHksIHtcbiAgICAgIG9yaWdpbjogVmVjdG9yMy5jcmVhdGUoOCwgMSwgMC4xKSxcbiAgICAgIGRpcmVjdGlvbjogVmVjdG9yMy5jcmVhdGUoMCwgMCwgMSksXG4gICAgICBtYXhEaXN0YW5jZTogMTYsXG4gICAgICBxdWVyeVR5cGU6IFJheWNhc3RRdWVyeVR5cGUuUlFUX1FVRVJZX0FMTFxuICAgIH0pXG4gIH0sXG4gIHtcbiAgICBidXR0b246IElucHV0QWN0aW9uLklBX1BPSU5URVIsXG4gICAgaG92ZXJUZXh0OiAnQ0FTVCBSQVknXG4gIH1cbilcblxuLy8gU3lzdGVtIHRvIGRldGVjdCBuZXcgcmF5Y2FzdCByZXNwb25zZXMgYW5kIGluc3RhbnRpYXRlIGEgY3ViZSB3aGVyZSB0aGUgcmF5IGhpdHNcbmxldCBsYXN0UmF5Y2FzdFRpbWVzdGFtcCA9IC0xXG5lbmdpbmUuYWRkU3lzdGVtKCgpID0+IHtcbiAgZm9yIChjb25zdCBbX2VudGl0eSwgcmVzdWx0XSBvZiBlbmdpbmUuZ2V0RW50aXRpZXNXaXRoKFJheWNhc3RSZXN1bHQpKSB7XG4gICAgaWYgKHJlc3VsdC5oaXRzPy5sZW5ndGggPT09IDAgfHwgcmVzdWx0LnRpbWVzdGFtcCA8PSBsYXN0UmF5Y2FzdFRpbWVzdGFtcClcbiAgICAgIGNvbnRpbnVlXG4gICAgbGFzdFJheWNhc3RUaW1lc3RhbXAgPSByZXN1bHQudGltZXN0YW1wXG5cbiAgICBpZiAocmVzdWx0LmhpdHNbMF0gJiYgcmVzdWx0LmhpdHNbMF0ucG9zaXRpb24pIHtcbiAgICAgIGNyZWF0ZUN1YmUoXG4gICAgICAgIHJlc3VsdC5oaXRzWzBdLnBvc2l0aW9uLngsXG4gICAgICAgIHJlc3VsdC5oaXRzWzBdLnBvc2l0aW9uLnksXG4gICAgICAgIHJlc3VsdC5oaXRzWzBdLnBvc2l0aW9uLnosXG4gICAgICAgIDAuM1xuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYEhpdHMgKHRoaXMgc2hvdWxkIGJlICcyJyB0aGUgZmlyc3QgdGltZSk6ICcke3Jlc3VsdC5oaXRzLmxlbmd0aH0nYFxuICAgIClcbiAgfVxufSlcblxuZXhwb3J0IHt9XG4iXX0=