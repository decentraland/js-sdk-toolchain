import { engine, Transform, MeshRenderer, MeshCollider, pointerEventsSystem, Vector3, Raycast, RaycastResult } from '@dcl/ecs';
function createCube(x, y, z, scaleMultiplier = 1) {
    const cubeEntity = engine.addEntity();
    Transform.create(cubeEntity, {
        position: { x, y, z },
        scale: { x: scaleMultiplier, y: scaleMultiplier, z: scaleMultiplier }
    });
    MeshRenderer.create(cubeEntity, { mesh: { $case: 'box', box: { uvs: [] } } });
    MeshCollider.create(cubeEntity, { mesh: { $case: 'box', box: {} } });
    return cubeEntity;
}
const cubeEntity = createCube(8, 1, 8);
const _cubeEntity2 = createCube(8, 1, 13);
const raycastEntity = engine.addEntity();
pointerEventsSystem.onPointerDown(cubeEntity, () => {
    Raycast.createOrReplace(raycastEntity, {
        origin: Vector3.create(8, 1, 0.1),
        direction: Vector3.create(0, 0, 1),
        maxDistance: 16,
        queryType: 1
    });
}, {
    button: 0,
    hoverText: 'CAST RAY'
});
let lastRaycastTimestamp = -1;
engine.addSystem(() => {
    for (const [_entity, result] of engine.getEntitiesWith(RaycastResult)) {
        if (result.hits?.length === 0 || result.timestamp <= lastRaycastTimestamp)
            continue;
        lastRaycastTimestamp = result.timestamp;
        if (result.hits[0] && result.hits[0].position) {
            createCube(result.hits[0].position.x, result.hits[0].position.y, result.hits[0].position.z, 0.3);
        }
        console.log(`Hits (this should be '2' the first time): '${result.hits.length}'`);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFDVCxZQUFZLEVBQ1osWUFBWSxFQUVaLG1CQUFtQixFQUNuQixPQUFPLEVBQ1AsT0FBTyxFQUVQLGFBQWEsRUFDZCxNQUFNLFVBQVUsQ0FBQTtBQUVqQixTQUFTLFVBQVUsQ0FDakIsQ0FBUyxFQUNULENBQVMsRUFDVCxDQUFTLEVBQ1Qsa0JBQTBCLENBQUM7SUFFM0IsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBRXJDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO1FBQzNCLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ3JCLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLGVBQWUsRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFO0tBQ3RFLENBQUMsQ0FBQTtJQUVGLFlBQVksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDN0UsWUFBWSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFFcEUsT0FBTyxVQUFVLENBQUE7QUFDbkIsQ0FBQztBQUdELE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3RDLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQ3pDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtBQUd4QyxtQkFBbUIsQ0FBQyxhQUFhLENBQy9CLFVBQVUsRUFDVixHQUFHLEVBQUU7SUFDSCxPQUFPLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRTtRQUNyQyxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNqQyxTQUFTLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsQyxXQUFXLEVBQUUsRUFBRTtRQUNmLFNBQVMsR0FBZ0M7S0FDMUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxFQUNEO0lBQ0UsTUFBTSxHQUF3QjtJQUM5QixTQUFTLEVBQUUsVUFBVTtDQUN0QixDQUNGLENBQUE7QUFHRCxJQUFJLG9CQUFvQixHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQzdCLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO0lBQ3BCLEtBQUssTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQ3JFLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLElBQUksb0JBQW9CO1lBQ3ZFLFNBQVE7UUFDVixvQkFBb0IsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFBO1FBRXZDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRTtZQUM3QyxVQUFVLENBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDekIsR0FBRyxDQUNKLENBQUE7U0FDRjtRQUVELE9BQU8sQ0FBQyxHQUFHLENBQ1QsOENBQThDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQ3BFLENBQUE7S0FDRjtBQUNILENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgZW5naW5lLFxuICBUcmFuc2Zvcm0sXG4gIE1lc2hSZW5kZXJlcixcbiAgTWVzaENvbGxpZGVyLFxuICBJbnB1dEFjdGlvbixcbiAgcG9pbnRlckV2ZW50c1N5c3RlbSxcbiAgVmVjdG9yMyxcbiAgUmF5Y2FzdCxcbiAgUmF5Y2FzdFF1ZXJ5VHlwZSxcbiAgUmF5Y2FzdFJlc3VsdFxufSBmcm9tICdAZGNsL2VjcydcblxuZnVuY3Rpb24gY3JlYXRlQ3ViZShcbiAgeDogbnVtYmVyLFxuICB5OiBudW1iZXIsXG4gIHo6IG51bWJlcixcbiAgc2NhbGVNdWx0aXBsaWVyOiBudW1iZXIgPSAxXG4pIHtcbiAgY29uc3QgY3ViZUVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuXG4gIFRyYW5zZm9ybS5jcmVhdGUoY3ViZUVudGl0eSwge1xuICAgIHBvc2l0aW9uOiB7IHgsIHksIHogfSxcbiAgICBzY2FsZTogeyB4OiBzY2FsZU11bHRpcGxpZXIsIHk6IHNjYWxlTXVsdGlwbGllciwgejogc2NhbGVNdWx0aXBsaWVyIH1cbiAgfSlcblxuICBNZXNoUmVuZGVyZXIuY3JlYXRlKGN1YmVFbnRpdHksIHsgbWVzaDogeyAkY2FzZTogJ2JveCcsIGJveDogeyB1dnM6IFtdIH0gfSB9KVxuICBNZXNoQ29sbGlkZXIuY3JlYXRlKGN1YmVFbnRpdHksIHsgbWVzaDogeyAkY2FzZTogJ2JveCcsIGJveDoge30gfSB9KVxuXG4gIHJldHVybiBjdWJlRW50aXR5XG59XG5cbi8vIENyZWF0ZSBjdWJlIHRvIGhpdFxuY29uc3QgY3ViZUVudGl0eSA9IGNyZWF0ZUN1YmUoOCwgMSwgOClcbmNvbnN0IF9jdWJlRW50aXR5MiA9IGNyZWF0ZUN1YmUoOCwgMSwgMTMpXG5jb25zdCByYXljYXN0RW50aXR5ID0gZW5naW5lLmFkZEVudGl0eSgpXG5cbi8vIEFkZCBPblBvaW50ZXJEb3duIGNvbXBvbmVudCB0byBjdWJlIGVudGl0eSB0byB0cmlnZ2VyIHJheSBjYXN0aW5nIG9uIGludGVyYWN0aW9uXG5wb2ludGVyRXZlbnRzU3lzdGVtLm9uUG9pbnRlckRvd24oXG4gIGN1YmVFbnRpdHksXG4gICgpID0+IHtcbiAgICBSYXljYXN0LmNyZWF0ZU9yUmVwbGFjZShyYXljYXN0RW50aXR5LCB7XG4gICAgICBvcmlnaW46IFZlY3RvcjMuY3JlYXRlKDgsIDEsIDAuMSksXG4gICAgICBkaXJlY3Rpb246IFZlY3RvcjMuY3JlYXRlKDAsIDAsIDEpLFxuICAgICAgbWF4RGlzdGFuY2U6IDE2LFxuICAgICAgcXVlcnlUeXBlOiBSYXljYXN0UXVlcnlUeXBlLlJRVF9RVUVSWV9BTExcbiAgICB9KVxuICB9LFxuICB7XG4gICAgYnV0dG9uOiBJbnB1dEFjdGlvbi5JQV9QT0lOVEVSLFxuICAgIGhvdmVyVGV4dDogJ0NBU1QgUkFZJ1xuICB9XG4pXG5cbi8vIFN5c3RlbSB0byBkZXRlY3QgbmV3IHJheWNhc3QgcmVzcG9uc2VzIGFuZCBpbnN0YW50aWF0ZSBhIGN1YmUgd2hlcmUgdGhlIHJheSBoaXRzXG5sZXQgbGFzdFJheWNhc3RUaW1lc3RhbXAgPSAtMVxuZW5naW5lLmFkZFN5c3RlbSgoKSA9PiB7XG4gIGZvciAoY29uc3QgW19lbnRpdHksIHJlc3VsdF0gb2YgZW5naW5lLmdldEVudGl0aWVzV2l0aChSYXljYXN0UmVzdWx0KSkge1xuICAgIGlmIChyZXN1bHQuaGl0cz8ubGVuZ3RoID09PSAwIHx8IHJlc3VsdC50aW1lc3RhbXAgPD0gbGFzdFJheWNhc3RUaW1lc3RhbXApXG4gICAgICBjb250aW51ZVxuICAgIGxhc3RSYXljYXN0VGltZXN0YW1wID0gcmVzdWx0LnRpbWVzdGFtcFxuXG4gICAgaWYgKHJlc3VsdC5oaXRzWzBdICYmIHJlc3VsdC5oaXRzWzBdLnBvc2l0aW9uKSB7XG4gICAgICBjcmVhdGVDdWJlKFxuICAgICAgICByZXN1bHQuaGl0c1swXS5wb3NpdGlvbi54LFxuICAgICAgICByZXN1bHQuaGl0c1swXS5wb3NpdGlvbi55LFxuICAgICAgICByZXN1bHQuaGl0c1swXS5wb3NpdGlvbi56LFxuICAgICAgICAwLjNcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIGBIaXRzICh0aGlzIHNob3VsZCBiZSAnMicgdGhlIGZpcnN0IHRpbWUpOiAnJHtyZXN1bHQuaGl0cy5sZW5ndGh9J2BcbiAgICApXG4gIH1cbn0pXG5cbmV4cG9ydCB7fVxuIl19