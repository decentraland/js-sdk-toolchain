import { engine, Transform, MeshRenderer, MeshCollider, pointerEventsSystem, Raycast, RaycastResult } from '@dcl/sdk/ecs';
import { Vector3 } from '@dcl/sdk/math';
function createCube(x, y, z, scaleMultiplier = 1) {
    const cubeEntity = engine.addEntity();
    Transform.create(cubeEntity, {
        position: { x, y, z },
        scale: { x: scaleMultiplier, y: scaleMultiplier, z: scaleMultiplier }
    });
    MeshRenderer.create(cubeEntity, { mesh: { $case: 'box', box: { uvs: [] } } });
    MeshCollider.create(cubeEntity, { mesh: { $case: 'box', box: {} } });
    return cubeEntity;
}
const cubeEntity = createCube(8, 1, 8);
const raycastEntity = engine.addEntity();
pointerEventsSystem.onPointerDown(cubeEntity, () => {
    Raycast.createOrReplace(raycastEntity, {
        origin: Vector3.create(8, 1, 0.1),
        direction: Vector3.create(0, 0, 1),
        maxDistance: 16,
        queryType: 0
    });
}, {
    button: 0,
    hoverText: 'CAST RAY'
});
let lastRaycastTimestamp = -1;
engine.addSystem(() => {
    for (const [_entity, result] of engine.getEntitiesWith(RaycastResult)) {
        if (result.hits?.length === 0 || result.timestamp <= lastRaycastTimestamp)
            continue;
        lastRaycastTimestamp = result.timestamp;
        if (result.hits[0] && result.hits[0].position) {
            createCube(result.hits[0].position.x, result.hits[0].position.y, result.hits[0].position.z, 0.3);
        }
        console.log(`Hits (this should be '1'): '${result.hits.length}'`);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFDVCxZQUFZLEVBQ1osWUFBWSxFQUVaLG1CQUFtQixFQUNuQixPQUFPLEVBRVAsYUFBYSxFQUNkLE1BQU0sY0FBYyxDQUFBO0FBQ3JCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFdkMsU0FBUyxVQUFVLENBQ2pCLENBQVMsRUFDVCxDQUFTLEVBQ1QsQ0FBUyxFQUNULGtCQUEwQixDQUFDO0lBRTNCLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtJQUVyQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtRQUMzQixRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNyQixLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLGVBQWUsRUFBRTtLQUN0RSxDQUFDLENBQUE7SUFFRixZQUFZLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQzdFLFlBQVksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBRXBFLE9BQU8sVUFBVSxDQUFBO0FBQ25CLENBQUM7QUFHRCxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN0QyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUE7QUFHeEMsbUJBQW1CLENBQUMsYUFBYSxDQUMvQixVQUFVLEVBQ1YsR0FBRyxFQUFFO0lBQ0gsT0FBTyxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUU7UUFDckMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDakMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbEMsV0FBVyxFQUFFLEVBQUU7UUFDZixTQUFTLEdBQWdDO0tBQzFDLENBQUMsQ0FBQTtBQUNKLENBQUMsRUFDRDtJQUNFLE1BQU0sR0FBd0I7SUFDOUIsU0FBUyxFQUFFLFVBQVU7Q0FDdEIsQ0FDRixDQUFBO0FBR0QsSUFBSSxvQkFBb0IsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUM3QixNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtJQUNwQixLQUFLLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsRUFBRTtRQUNyRSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxJQUFJLG9CQUFvQjtZQUN2RSxTQUFRO1FBQ1Ysb0JBQW9CLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQTtRQUV2QyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7WUFDN0MsVUFBVSxDQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQ3pCLEdBQUcsQ0FDSixDQUFBO1NBQ0Y7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7S0FDbEU7QUFDSCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGVuZ2luZSxcbiAgVHJhbnNmb3JtLFxuICBNZXNoUmVuZGVyZXIsXG4gIE1lc2hDb2xsaWRlcixcbiAgSW5wdXRBY3Rpb24sXG4gIHBvaW50ZXJFdmVudHNTeXN0ZW0sXG4gIFJheWNhc3QsXG4gIFJheWNhc3RRdWVyeVR5cGUsXG4gIFJheWNhc3RSZXN1bHRcbn0gZnJvbSAnQGRjbC9zZGsvZWNzJ1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJ0BkY2wvc2RrL21hdGgnXG5cbmZ1bmN0aW9uIGNyZWF0ZUN1YmUoXG4gIHg6IG51bWJlcixcbiAgeTogbnVtYmVyLFxuICB6OiBudW1iZXIsXG4gIHNjYWxlTXVsdGlwbGllcjogbnVtYmVyID0gMVxuKSB7XG4gIGNvbnN0IGN1YmVFbnRpdHkgPSBlbmdpbmUuYWRkRW50aXR5KClcblxuICBUcmFuc2Zvcm0uY3JlYXRlKGN1YmVFbnRpdHksIHtcbiAgICBwb3NpdGlvbjogeyB4LCB5LCB6IH0sXG4gICAgc2NhbGU6IHsgeDogc2NhbGVNdWx0aXBsaWVyLCB5OiBzY2FsZU11bHRpcGxpZXIsIHo6IHNjYWxlTXVsdGlwbGllciB9XG4gIH0pXG5cbiAgTWVzaFJlbmRlcmVyLmNyZWF0ZShjdWJlRW50aXR5LCB7IG1lc2g6IHsgJGNhc2U6ICdib3gnLCBib3g6IHsgdXZzOiBbXSB9IH0gfSlcbiAgTWVzaENvbGxpZGVyLmNyZWF0ZShjdWJlRW50aXR5LCB7IG1lc2g6IHsgJGNhc2U6ICdib3gnLCBib3g6IHt9IH0gfSlcblxuICByZXR1cm4gY3ViZUVudGl0eVxufVxuXG4vLyBDcmVhdGUgY3ViZSB0byBoaXRcbmNvbnN0IGN1YmVFbnRpdHkgPSBjcmVhdGVDdWJlKDgsIDEsIDgpXG5jb25zdCByYXljYXN0RW50aXR5ID0gZW5naW5lLmFkZEVudGl0eSgpXG5cbi8vIEFkZCBPblBvaW50ZXJEb3duIGNvbXBvbmVudCB0byBjdWJlIGVudGl0eSB0byB0cmlnZ2VyIHJheSBjYXN0aW5nIG9uIGludGVyYWN0aW9uXG5wb2ludGVyRXZlbnRzU3lzdGVtLm9uUG9pbnRlckRvd24oXG4gIGN1YmVFbnRpdHksXG4gICgpID0+IHtcbiAgICBSYXljYXN0LmNyZWF0ZU9yUmVwbGFjZShyYXljYXN0RW50aXR5LCB7XG4gICAgICBvcmlnaW46IFZlY3RvcjMuY3JlYXRlKDgsIDEsIDAuMSksXG4gICAgICBkaXJlY3Rpb246IFZlY3RvcjMuY3JlYXRlKDAsIDAsIDEpLFxuICAgICAgbWF4RGlzdGFuY2U6IDE2LFxuICAgICAgcXVlcnlUeXBlOiBSYXljYXN0UXVlcnlUeXBlLlJRVF9ISVRfRklSU1RcbiAgICB9KVxuICB9LFxuICB7XG4gICAgYnV0dG9uOiBJbnB1dEFjdGlvbi5JQV9QT0lOVEVSLFxuICAgIGhvdmVyVGV4dDogJ0NBU1QgUkFZJ1xuICB9XG4pXG5cbi8vIFN5c3RlbSB0byBkZXRlY3QgbmV3IHJheWNhc3QgcmVzcG9uc2VzIGFuZCBpbnN0YW50aWF0ZSBhIGN1YmUgd2hlcmUgdGhlIHJheSBoaXRzXG5sZXQgbGFzdFJheWNhc3RUaW1lc3RhbXAgPSAtMVxuZW5naW5lLmFkZFN5c3RlbSgoKSA9PiB7XG4gIGZvciAoY29uc3QgW19lbnRpdHksIHJlc3VsdF0gb2YgZW5naW5lLmdldEVudGl0aWVzV2l0aChSYXljYXN0UmVzdWx0KSkge1xuICAgIGlmIChyZXN1bHQuaGl0cz8ubGVuZ3RoID09PSAwIHx8IHJlc3VsdC50aW1lc3RhbXAgPD0gbGFzdFJheWNhc3RUaW1lc3RhbXApXG4gICAgICBjb250aW51ZVxuICAgIGxhc3RSYXljYXN0VGltZXN0YW1wID0gcmVzdWx0LnRpbWVzdGFtcFxuXG4gICAgaWYgKHJlc3VsdC5oaXRzWzBdICYmIHJlc3VsdC5oaXRzWzBdLnBvc2l0aW9uKSB7XG4gICAgICBjcmVhdGVDdWJlKFxuICAgICAgICByZXN1bHQuaGl0c1swXS5wb3NpdGlvbi54LFxuICAgICAgICByZXN1bHQuaGl0c1swXS5wb3NpdGlvbi55LFxuICAgICAgICByZXN1bHQuaGl0c1swXS5wb3NpdGlvbi56LFxuICAgICAgICAwLjNcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhgSGl0cyAodGhpcyBzaG91bGQgYmUgJzEnKTogJyR7cmVzdWx0LmhpdHMubGVuZ3RofSdgKVxuICB9XG59KVxuXG5leHBvcnQge31cbiJdfQ==