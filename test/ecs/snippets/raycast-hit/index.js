import { engine, Transform, MeshRenderer, MeshCollider, pointerEventsSystem, Vector3, Raycast, RaycastResult } from '@dcl/ecs';
function createCube(x, y, z, scaleMultiplier = 1) {
    const cubeEntity = engine.addEntity();
    Transform.create(cubeEntity, {
        position: { x, y, z },
        scale: { x: scaleMultiplier, y: scaleMultiplier, z: scaleMultiplier }
    });
    MeshRenderer.create(cubeEntity, { mesh: { $case: 'box', box: { uvs: [] } } });
    MeshCollider.create(cubeEntity, { mesh: { $case: 'box', box: {} } });
    return cubeEntity;
}
const cubeEntity = createCube(8, 1, 8);
const raycastEntity = engine.addEntity();
pointerEventsSystem.onPointerDown(cubeEntity, () => {
    Raycast.createOrReplace(raycastEntity, {
        origin: Vector3.create(8, 1, 0.1),
        direction: Vector3.create(0, 0, 1),
        maxDistance: 16,
        queryType: 0
    });
}, {
    button: 0,
    hoverText: 'CAST RAY'
});
let lastRaycastTimestamp = -1;
engine.addSystem(() => {
    for (const [_entity, result] of engine.getEntitiesWith(RaycastResult)) {
        if (result.hits?.length === 0 || result.timestamp <= lastRaycastTimestamp)
            continue;
        lastRaycastTimestamp = result.timestamp;
        if (result.hits[0] && result.hits[0].position) {
            createCube(result.hits[0].position.x, result.hits[0].position.y, result.hits[0].position.z, 0.3);
        }
        console.log(`Hits (this should be '1'): '${result.hits.length}'`);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFDVCxZQUFZLEVBQ1osWUFBWSxFQUVaLG1CQUFtQixFQUNuQixPQUFPLEVBQ1AsT0FBTyxFQUVQLGFBQWEsRUFDZCxNQUFNLFVBQVUsQ0FBQTtBQUVqQixTQUFTLFVBQVUsQ0FDakIsQ0FBUyxFQUNULENBQVMsRUFDVCxDQUFTLEVBQ1Qsa0JBQTBCLENBQUM7SUFFM0IsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBRXJDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO1FBQzNCLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ3JCLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLGVBQWUsRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFO0tBQ3RFLENBQUMsQ0FBQTtJQUVGLFlBQVksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDN0UsWUFBWSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFFcEUsT0FBTyxVQUFVLENBQUE7QUFDbkIsQ0FBQztBQUdELE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3RDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtBQUd4QyxtQkFBbUIsQ0FBQyxhQUFhLENBQy9CLFVBQVUsRUFDVixHQUFHLEVBQUU7SUFDSCxPQUFPLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRTtRQUNyQyxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNqQyxTQUFTLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsQyxXQUFXLEVBQUUsRUFBRTtRQUNmLFNBQVMsR0FBZ0M7S0FDMUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxFQUNEO0lBQ0UsTUFBTSxHQUF3QjtJQUM5QixTQUFTLEVBQUUsVUFBVTtDQUN0QixDQUNGLENBQUE7QUFHRCxJQUFJLG9CQUFvQixHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQzdCLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO0lBQ3BCLEtBQUssTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQ3JFLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLElBQUksb0JBQW9CO1lBQ3ZFLFNBQVE7UUFDVixvQkFBb0IsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFBO1FBRXZDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRTtZQUM3QyxVQUFVLENBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDekIsR0FBRyxDQUNKLENBQUE7U0FDRjtRQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsK0JBQStCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtLQUNsRTtBQUNILENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgZW5naW5lLFxuICBUcmFuc2Zvcm0sXG4gIE1lc2hSZW5kZXJlcixcbiAgTWVzaENvbGxpZGVyLFxuICBJbnB1dEFjdGlvbixcbiAgcG9pbnRlckV2ZW50c1N5c3RlbSxcbiAgVmVjdG9yMyxcbiAgUmF5Y2FzdCxcbiAgUmF5Y2FzdFF1ZXJ5VHlwZSxcbiAgUmF5Y2FzdFJlc3VsdFxufSBmcm9tICdAZGNsL2VjcydcblxuZnVuY3Rpb24gY3JlYXRlQ3ViZShcbiAgeDogbnVtYmVyLFxuICB5OiBudW1iZXIsXG4gIHo6IG51bWJlcixcbiAgc2NhbGVNdWx0aXBsaWVyOiBudW1iZXIgPSAxXG4pIHtcbiAgY29uc3QgY3ViZUVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuXG4gIFRyYW5zZm9ybS5jcmVhdGUoY3ViZUVudGl0eSwge1xuICAgIHBvc2l0aW9uOiB7IHgsIHksIHogfSxcbiAgICBzY2FsZTogeyB4OiBzY2FsZU11bHRpcGxpZXIsIHk6IHNjYWxlTXVsdGlwbGllciwgejogc2NhbGVNdWx0aXBsaWVyIH1cbiAgfSlcblxuICBNZXNoUmVuZGVyZXIuY3JlYXRlKGN1YmVFbnRpdHksIHsgbWVzaDogeyAkY2FzZTogJ2JveCcsIGJveDogeyB1dnM6IFtdIH0gfSB9KVxuICBNZXNoQ29sbGlkZXIuY3JlYXRlKGN1YmVFbnRpdHksIHsgbWVzaDogeyAkY2FzZTogJ2JveCcsIGJveDoge30gfSB9KVxuXG4gIHJldHVybiBjdWJlRW50aXR5XG59XG5cbi8vIENyZWF0ZSBjdWJlIHRvIGhpdFxuY29uc3QgY3ViZUVudGl0eSA9IGNyZWF0ZUN1YmUoOCwgMSwgOClcbmNvbnN0IHJheWNhc3RFbnRpdHkgPSBlbmdpbmUuYWRkRW50aXR5KClcblxuLy8gQWRkIE9uUG9pbnRlckRvd24gY29tcG9uZW50IHRvIGN1YmUgZW50aXR5IHRvIHRyaWdnZXIgcmF5IGNhc3Rpbmcgb24gaW50ZXJhY3Rpb25cbnBvaW50ZXJFdmVudHNTeXN0ZW0ub25Qb2ludGVyRG93bihcbiAgY3ViZUVudGl0eSxcbiAgKCkgPT4ge1xuICAgIFJheWNhc3QuY3JlYXRlT3JSZXBsYWNlKHJheWNhc3RFbnRpdHksIHtcbiAgICAgIG9yaWdpbjogVmVjdG9yMy5jcmVhdGUoOCwgMSwgMC4xKSxcbiAgICAgIGRpcmVjdGlvbjogVmVjdG9yMy5jcmVhdGUoMCwgMCwgMSksXG4gICAgICBtYXhEaXN0YW5jZTogMTYsXG4gICAgICBxdWVyeVR5cGU6IFJheWNhc3RRdWVyeVR5cGUuUlFUX0hJVF9GSVJTVFxuICAgIH0pXG4gIH0sXG4gIHtcbiAgICBidXR0b246IElucHV0QWN0aW9uLklBX1BPSU5URVIsXG4gICAgaG92ZXJUZXh0OiAnQ0FTVCBSQVknXG4gIH1cbilcblxuLy8gU3lzdGVtIHRvIGRldGVjdCBuZXcgcmF5Y2FzdCByZXNwb25zZXMgYW5kIGluc3RhbnRpYXRlIGEgY3ViZSB3aGVyZSB0aGUgcmF5IGhpdHNcbmxldCBsYXN0UmF5Y2FzdFRpbWVzdGFtcCA9IC0xXG5lbmdpbmUuYWRkU3lzdGVtKCgpID0+IHtcbiAgZm9yIChjb25zdCBbX2VudGl0eSwgcmVzdWx0XSBvZiBlbmdpbmUuZ2V0RW50aXRpZXNXaXRoKFJheWNhc3RSZXN1bHQpKSB7XG4gICAgaWYgKHJlc3VsdC5oaXRzPy5sZW5ndGggPT09IDAgfHwgcmVzdWx0LnRpbWVzdGFtcCA8PSBsYXN0UmF5Y2FzdFRpbWVzdGFtcClcbiAgICAgIGNvbnRpbnVlXG4gICAgbGFzdFJheWNhc3RUaW1lc3RhbXAgPSByZXN1bHQudGltZXN0YW1wXG5cbiAgICBpZiAocmVzdWx0LmhpdHNbMF0gJiYgcmVzdWx0LmhpdHNbMF0ucG9zaXRpb24pIHtcbiAgICAgIGNyZWF0ZUN1YmUoXG4gICAgICAgIHJlc3VsdC5oaXRzWzBdLnBvc2l0aW9uLngsXG4gICAgICAgIHJlc3VsdC5oaXRzWzBdLnBvc2l0aW9uLnksXG4gICAgICAgIHJlc3VsdC5oaXRzWzBdLnBvc2l0aW9uLnosXG4gICAgICAgIDAuM1xuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGBIaXRzICh0aGlzIHNob3VsZCBiZSAnMScpOiAnJHtyZXN1bHQuaGl0cy5sZW5ndGh9J2ApXG4gIH1cbn0pXG5cbmV4cG9ydCB7fVxuIl19