import { engine, Transform, MeshRenderer, MeshCollider, Vector3, Color4, Input, Quaternion, PointerHoverFeedback } from '@dcl/ecs';
import ReactEcs, { renderUi, UiEntity, YGAlign, YGDisplay, YGJustify } from '@dcl/react-ecs';
let counter = 0;
export const uiComponent = () => (ReactEcs.createElement(UiEntity, { uiTransform: {
        width: 700,
        height: 400,
        margin: { top: '35px', left: '500px' }
    }, uiBackground: { backgroundColor: Color4.create(0.5, 0.8, 0.1, 0.6) } },
    ReactEcs.createElement(UiEntity, { uiTransform: {
            width: '100%',
            height: '20%',
            justifyContent: YGJustify.YGJ_CENTER,
            alignItems: YGAlign.YGA_CENTER,
            display: YGDisplay.YGD_FLEX
        } },
        ReactEcs.createElement(UiEntity, { uiText: { value: 'SDK 7', fontSize: 80 }, uiBackground: { backgroundColor: Color4.fromHexString('#fbf0f0') } })),
    ReactEcs.createElement(UiEntity, { uiTransform: {
            width: '100%',
            height: '20%',
            justifyContent: YGJustify.YGJ_CENTER,
            alignItems: YGAlign.YGA_CENTER,
            display: YGDisplay.YGD_FLEX
        } },
        ReactEcs.createElement(UiEntity, { uiText: { value: `Counter: ${counter}`, fontSize: 60 }, uiBackground: { backgroundColor: Color4.fromHexString('#fbf0f0') } })),
    ReactEcs.createElement(UiEntity, { uiTransform: {
            width: '100%',
            height: '100px',
            justifyContent: YGJustify.YGJ_CENTER,
            alignItems: YGAlign.YGA_CENTER,
            display: YGDisplay.YGD_FLEX
        } },
        ReactEcs.createElement(UiEntity, { uiText: { value: `Player: ${getPlayerPosition()}`, fontSize: 40 }, uiBackground: { backgroundColor: Color4.fromHexString('#fbf0f0') } }))));
function getPlayerPosition() {
    const playerPosition = Transform.getOrNull(engine.PlayerEntity);
    if (!playerPosition)
        return '';
    const { x, y, z } = playerPosition.position;
    return `{x: ${x.toFixed(2)}, y: ${y.toFixed(2)}, z: ${z.toFixed(2)} }`;
}
renderUi(uiComponent);
function createCube(x, y, z, spawner = true) {
    const meshEntity = engine.addEntity();
    Transform.create(meshEntity, { position: { x, y, z } });
    MeshRenderer.create(meshEntity, { mesh: { $case: 'box', box: { uvs: [] } } });
    MeshCollider.create(meshEntity, { mesh: { $case: 'box', box: {} } });
    if (spawner) {
        PointerHoverFeedback.create(meshEntity, {
            pointerEvents: [
                {
                    eventType: 1,
                    eventInfo: {
                        button: 1,
                        hoverText: 'Press E to spawn',
                        maxDistance: 100,
                        showFeedback: true
                    }
                }
            ]
        });
    }
    return meshEntity;
}
function circularSystem(dt) {
    const entitiesWithMeshRenderer = engine.getEntitiesWith(MeshRenderer, Transform);
    for (const [entity, _meshRenderer, _transform] of entitiesWithMeshRenderer) {
        const mutableTransform = Transform.getMutable(entity);
        mutableTransform.rotation = Quaternion.multiply(mutableTransform.rotation, Quaternion.fromAngleAxis(dt * 10, Vector3.Up()));
    }
}
function spawnerSystem() {
    const clickedCubes = engine.getEntitiesWith(PointerHoverFeedback);
    for (const [entity] of clickedCubes) {
        if (Input.isTriggered(1, 1, entity)) {
            counter++;
        }
    }
}
createCube(8, 1, 8);
engine.addSystem(circularSystem);
engine.addSystem(spawnerSystem);
//# sourceMappingURL=data:application/json;base64,