import { engine, pointerEventsSystem, Transform, MeshRenderer, MeshCollider } from '@dcl/sdk/ecs';
import { Quaternion, Vector3 } from '@dcl/sdk/math';
function createCube(x, y, z) {
    const meshEntity = engine.addEntity();
    Transform.create(meshEntity, { position: { x, y, z } });
    MeshRenderer.create(meshEntity, { mesh: { $case: 'box', box: { uvs: [] } } });
    MeshCollider.create(meshEntity, { mesh: { $case: 'box', box: {} } });
    return meshEntity;
}
function circularSystem(dt) {
    const entitiesWithMeshRenderer = engine.getEntitiesWith(MeshRenderer, Transform);
    for (const [entity, _meshRenderer, _transform] of entitiesWithMeshRenderer) {
        const mutableTransform = Transform.getMutable(entity);
        mutableTransform.rotation = Quaternion.multiply(mutableTransform.rotation, Quaternion.fromAngleAxis(dt * 10, Vector3.Up()));
    }
}
const initEntity = createCube(8, 1, 8);
pointerEventsSystem.onPointerDown(initEntity, () => {
    createCube(1 + Math.random() * 8, Math.random() * 8, 1 + Math.random() * 8);
}, { button: 1, hoverText: 'Press E to spawn' });
engine.addSystem(circularSystem);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsTUFBTSxFQUNOLG1CQUFtQixFQUNuQixTQUFTLEVBQ1QsWUFBWSxFQUNaLFlBQVksRUFFYixNQUFNLGNBQWMsQ0FBQTtBQUNyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUduRCxTQUFTLFVBQVUsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVM7SUFDakQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBQ3JDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdkQsWUFBWSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUM3RSxZQUFZLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUVwRSxPQUFPLFVBQVUsQ0FBQTtBQUNuQixDQUFDO0FBR0QsU0FBUyxjQUFjLENBQUMsRUFBVTtJQUNoQyxNQUFNLHdCQUF3QixHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQ3JELFlBQVksRUFDWixTQUFTLENBQ1YsQ0FBQTtJQUNELEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsVUFBVSxDQUFDLElBQUksd0JBQXdCLEVBQUU7UUFDMUUsTUFBTSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRXJELGdCQUFnQixDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUM3QyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQ3pCLFVBQVUsQ0FBQyxhQUFhLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDaEQsQ0FBQTtLQUNGO0FBQ0gsQ0FBQztBQUdELE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3RDLG1CQUFtQixDQUFDLGFBQWEsQ0FDL0IsVUFBVSxFQUNWLEdBQUcsRUFBRTtJQUNILFVBQVUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDN0UsQ0FBQyxFQUNELEVBQUUsTUFBTSxHQUF3QixFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxDQUNsRSxDQUFBO0FBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEVudGl0eSxcbiAgZW5naW5lLFxuICBwb2ludGVyRXZlbnRzU3lzdGVtLFxuICBUcmFuc2Zvcm0sXG4gIE1lc2hSZW5kZXJlcixcbiAgTWVzaENvbGxpZGVyLFxuICBJbnB1dEFjdGlvblxufSBmcm9tICdAZGNsL3Nkay9lY3MnXG5pbXBvcnQgeyBRdWF0ZXJuaW9uLCBWZWN0b3IzIH0gZnJvbSAnQGRjbC9zZGsvbWF0aCdcblxuLy8gQ3ViZSBmYWN0b3J5XG5mdW5jdGlvbiBjcmVhdGVDdWJlKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBFbnRpdHkge1xuICBjb25zdCBtZXNoRW50aXR5ID0gZW5naW5lLmFkZEVudGl0eSgpXG4gIFRyYW5zZm9ybS5jcmVhdGUobWVzaEVudGl0eSwgeyBwb3NpdGlvbjogeyB4LCB5LCB6IH0gfSlcbiAgTWVzaFJlbmRlcmVyLmNyZWF0ZShtZXNoRW50aXR5LCB7IG1lc2g6IHsgJGNhc2U6ICdib3gnLCBib3g6IHsgdXZzOiBbXSB9IH0gfSlcbiAgTWVzaENvbGxpZGVyLmNyZWF0ZShtZXNoRW50aXR5LCB7IG1lc2g6IHsgJGNhc2U6ICdib3gnLCBib3g6IHt9IH0gfSlcblxuICByZXR1cm4gbWVzaEVudGl0eVxufVxuXG4vLyBTeXN0ZW1zXG5mdW5jdGlvbiBjaXJjdWxhclN5c3RlbShkdDogbnVtYmVyKSB7XG4gIGNvbnN0IGVudGl0aWVzV2l0aE1lc2hSZW5kZXJlciA9IGVuZ2luZS5nZXRFbnRpdGllc1dpdGgoXG4gICAgTWVzaFJlbmRlcmVyLFxuICAgIFRyYW5zZm9ybVxuICApXG4gIGZvciAoY29uc3QgW2VudGl0eSwgX21lc2hSZW5kZXJlciwgX3RyYW5zZm9ybV0gb2YgZW50aXRpZXNXaXRoTWVzaFJlbmRlcmVyKSB7XG4gICAgY29uc3QgbXV0YWJsZVRyYW5zZm9ybSA9IFRyYW5zZm9ybS5nZXRNdXRhYmxlKGVudGl0eSlcblxuICAgIG11dGFibGVUcmFuc2Zvcm0ucm90YXRpb24gPSBRdWF0ZXJuaW9uLm11bHRpcGx5KFxuICAgICAgbXV0YWJsZVRyYW5zZm9ybS5yb3RhdGlvbixcbiAgICAgIFF1YXRlcm5pb24uZnJvbUFuZ2xlQXhpcyhkdCAqIDEwLCBWZWN0b3IzLlVwKCkpXG4gICAgKVxuICB9XG59XG5cbi8vIEluaXRcbmNvbnN0IGluaXRFbnRpdHkgPSBjcmVhdGVDdWJlKDgsIDEsIDgpXG5wb2ludGVyRXZlbnRzU3lzdGVtLm9uUG9pbnRlckRvd24oXG4gIGluaXRFbnRpdHksXG4gICgpID0+IHtcbiAgICBjcmVhdGVDdWJlKDEgKyBNYXRoLnJhbmRvbSgpICogOCwgTWF0aC5yYW5kb20oKSAqIDgsIDEgKyBNYXRoLnJhbmRvbSgpICogOClcbiAgfSxcbiAgeyBidXR0b246IElucHV0QWN0aW9uLklBX1BSSU1BUlksIGhvdmVyVGV4dDogJ1ByZXNzIEUgdG8gc3Bhd24nIH1cbilcblxuZW5naW5lLmFkZFN5c3RlbShjaXJjdWxhclN5c3RlbSlcblxuZXhwb3J0IHt9XG4iXX0=