import { engine, pointerEventsSystem, Transform, Vector3, MeshRenderer, MeshCollider, Quaternion } from '@dcl/ecs';
function createCube(x, y, z) {
    const meshEntity = engine.addEntity();
    Transform.create(meshEntity, { position: { x, y, z } });
    MeshRenderer.create(meshEntity, { mesh: { $case: 'box', box: { uvs: [] } } });
    MeshCollider.create(meshEntity, { mesh: { $case: 'box', box: {} } });
    return meshEntity;
}
function circularSystem(dt) {
    const entitiesWithMeshRenderer = engine.getEntitiesWith(MeshRenderer, Transform);
    for (const [entity, _meshRenderer, _transform] of entitiesWithMeshRenderer) {
        const mutableTransform = Transform.getMutable(entity);
        mutableTransform.rotation = Quaternion.multiply(mutableTransform.rotation, Quaternion.fromAngleAxis(dt * 10, Vector3.Up()));
    }
}
const initEntity = createCube(8, 1, 8);
pointerEventsSystem.onPointerDown(initEntity, () => {
    createCube(1 + Math.random() * 8, Math.random() * 8, 1 + Math.random() * 8);
}, { button: 1, hoverText: 'Press E to spawn' });
engine.addSystem(circularSystem);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsTUFBTSxFQUNOLG1CQUFtQixFQUNuQixTQUFTLEVBQ1QsT0FBTyxFQUNQLFlBQVksRUFDWixZQUFZLEVBQ1osVUFBVSxFQUVYLE1BQU0sVUFBVSxDQUFBO0FBR2pCLFNBQVMsVUFBVSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUztJQUNqRCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDckMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUN2RCxZQUFZLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQzdFLFlBQVksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBRXBFLE9BQU8sVUFBVSxDQUFBO0FBQ25CLENBQUM7QUFHRCxTQUFTLGNBQWMsQ0FBQyxFQUFVO0lBQ2hDLE1BQU0sd0JBQXdCLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FDckQsWUFBWSxFQUNaLFNBQVMsQ0FDVixDQUFBO0lBQ0QsS0FBSyxNQUFNLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxVQUFVLENBQUMsSUFBSSx3QkFBd0IsRUFBRTtRQUMxRSxNQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7UUFFckQsZ0JBQWdCLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQzdDLGdCQUFnQixDQUFDLFFBQVEsRUFDekIsVUFBVSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUNoRCxDQUFBO0tBQ0Y7QUFDSCxDQUFDO0FBR0QsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDdEMsbUJBQW1CLENBQUMsYUFBYSxDQUMvQixVQUFVLEVBQ1YsR0FBRyxFQUFFO0lBQ0gsVUFBVSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUM3RSxDQUFDLEVBQ0QsRUFBRSxNQUFNLEdBQXdCLEVBQUUsU0FBUyxFQUFFLGtCQUFrQixFQUFFLENBQ2xFLENBQUE7QUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRW50aXR5LFxuICBlbmdpbmUsXG4gIHBvaW50ZXJFdmVudHNTeXN0ZW0sXG4gIFRyYW5zZm9ybSxcbiAgVmVjdG9yMyxcbiAgTWVzaFJlbmRlcmVyLFxuICBNZXNoQ29sbGlkZXIsXG4gIFF1YXRlcm5pb24sXG4gIElucHV0QWN0aW9uXG59IGZyb20gJ0BkY2wvZWNzJ1xuXG4vLyBDdWJlIGZhY3RvcnlcbmZ1bmN0aW9uIGNyZWF0ZUN1YmUoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcik6IEVudGl0eSB7XG4gIGNvbnN0IG1lc2hFbnRpdHkgPSBlbmdpbmUuYWRkRW50aXR5KClcbiAgVHJhbnNmb3JtLmNyZWF0ZShtZXNoRW50aXR5LCB7IHBvc2l0aW9uOiB7IHgsIHksIHogfSB9KVxuICBNZXNoUmVuZGVyZXIuY3JlYXRlKG1lc2hFbnRpdHksIHsgbWVzaDogeyAkY2FzZTogJ2JveCcsIGJveDogeyB1dnM6IFtdIH0gfSB9KVxuICBNZXNoQ29sbGlkZXIuY3JlYXRlKG1lc2hFbnRpdHksIHsgbWVzaDogeyAkY2FzZTogJ2JveCcsIGJveDoge30gfSB9KVxuXG4gIHJldHVybiBtZXNoRW50aXR5XG59XG5cbi8vIFN5c3RlbXNcbmZ1bmN0aW9uIGNpcmN1bGFyU3lzdGVtKGR0OiBudW1iZXIpIHtcbiAgY29uc3QgZW50aXRpZXNXaXRoTWVzaFJlbmRlcmVyID0gZW5naW5lLmdldEVudGl0aWVzV2l0aChcbiAgICBNZXNoUmVuZGVyZXIsXG4gICAgVHJhbnNmb3JtXG4gIClcbiAgZm9yIChjb25zdCBbZW50aXR5LCBfbWVzaFJlbmRlcmVyLCBfdHJhbnNmb3JtXSBvZiBlbnRpdGllc1dpdGhNZXNoUmVuZGVyZXIpIHtcbiAgICBjb25zdCBtdXRhYmxlVHJhbnNmb3JtID0gVHJhbnNmb3JtLmdldE11dGFibGUoZW50aXR5KVxuXG4gICAgbXV0YWJsZVRyYW5zZm9ybS5yb3RhdGlvbiA9IFF1YXRlcm5pb24ubXVsdGlwbHkoXG4gICAgICBtdXRhYmxlVHJhbnNmb3JtLnJvdGF0aW9uLFxuICAgICAgUXVhdGVybmlvbi5mcm9tQW5nbGVBeGlzKGR0ICogMTAsIFZlY3RvcjMuVXAoKSlcbiAgICApXG4gIH1cbn1cblxuLy8gSW5pdFxuY29uc3QgaW5pdEVudGl0eSA9IGNyZWF0ZUN1YmUoOCwgMSwgOClcbnBvaW50ZXJFdmVudHNTeXN0ZW0ub25Qb2ludGVyRG93bihcbiAgaW5pdEVudGl0eSxcbiAgKCkgPT4ge1xuICAgIGNyZWF0ZUN1YmUoMSArIE1hdGgucmFuZG9tKCkgKiA4LCBNYXRoLnJhbmRvbSgpICogOCwgMSArIE1hdGgucmFuZG9tKCkgKiA4KVxuICB9LFxuICB7IGJ1dHRvbjogSW5wdXRBY3Rpb24uSUFfUFJJTUFSWSwgaG92ZXJUZXh0OiAnUHJlc3MgRSB0byBzcGF3bicgfVxuKVxuXG5lbmdpbmUuYWRkU3lzdGVtKGNpcmN1bGFyU3lzdGVtKVxuXG5leHBvcnQge31cbiJdfQ==