import { engine, Transform, MeshRenderer, MeshCollider, PointerHoverFeedback } from '@dcl/ecs';
function createCube(x, y, z, pointerEvents) {
    const meshEntity = engine.addEntity();
    Transform.create(meshEntity, { position: { x, y, z } });
    MeshRenderer.create(meshEntity, { mesh: { $case: 'box', box: { uvs: [] } } });
    MeshCollider.create(meshEntity, { mesh: { $case: 'box', box: {} } });
    PointerHoverFeedback.create(meshEntity, { pointerEvents });
    return meshEntity;
}
createCube(15, 1, 15, [
    {
        eventType: 1,
        eventInfo: {
            button: 1,
            hoverText: 'PrimaryDown',
            maxDistance: 5,
            showFeedback: true
        }
    }
]);
createCube(13, 1, 15, [
    {
        eventType: 0,
        eventInfo: {
            button: 2,
            hoverText: 'Secondary Up',
            maxDistance: 5,
            showFeedback: true
        }
    }
]);
createCube(11, 1, 15, [
    {
        eventType: 2,
        eventInfo: {
            button: 3,
            hoverText: 'Infinity Hover',
            maxDistance: 10000000,
            showFeedback: true
        }
    }
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsTUFBTSxFQUNOLFNBQVMsRUFDVCxZQUFZLEVBQ1osWUFBWSxFQUdaLG9CQUFvQixFQUVyQixNQUFNLFVBQVUsQ0FBQTtBQUlqQixTQUFTLFVBQVUsQ0FDakIsQ0FBUyxFQUNULENBQVMsRUFDVCxDQUFTLEVBQ1QsYUFBNkM7SUFFN0MsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBQ3JDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdkQsWUFBWSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUM3RSxZQUFZLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNwRSxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQTtJQUMxRCxPQUFPLFVBQVUsQ0FBQTtBQUNuQixDQUFDO0FBRUQsVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO0lBQ3BCO1FBQ0UsU0FBUyxHQUEyQjtRQUNwQyxTQUFTLEVBQUU7WUFDVCxNQUFNLEdBQXdCO1lBQzlCLFNBQVMsRUFBRSxhQUFhO1lBQ3hCLFdBQVcsRUFBRSxDQUFDO1lBQ2QsWUFBWSxFQUFFLElBQUk7U0FDbkI7S0FDRjtDQUNGLENBQUMsQ0FBQTtBQUVGLFVBQVUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUNwQjtRQUNFLFNBQVMsR0FBeUI7UUFDbEMsU0FBUyxFQUFFO1lBQ1QsTUFBTSxHQUEwQjtZQUNoQyxTQUFTLEVBQUUsY0FBYztZQUN6QixXQUFXLEVBQUUsQ0FBQztZQUNkLFlBQVksRUFBRSxJQUFJO1NBQ25CO0tBQ0Y7Q0FDRixDQUFDLENBQUE7QUFFRixVQUFVLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7SUFDcEI7UUFDRSxTQUFTLEdBQWtDO1FBQzNDLFNBQVMsRUFBRTtZQUNULE1BQU0sR0FBb0I7WUFDMUIsU0FBUyxFQUFFLGdCQUFnQjtZQUMzQixXQUFXLEVBQUUsUUFBUTtZQUNyQixZQUFZLEVBQUUsSUFBSTtTQUNuQjtLQUNGO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRW50aXR5LFxuICBlbmdpbmUsXG4gIFRyYW5zZm9ybSxcbiAgTWVzaFJlbmRlcmVyLFxuICBNZXNoQ29sbGlkZXIsXG4gIElucHV0QWN0aW9uLFxuICBQQlBvaW50ZXJIb3ZlckZlZWRiYWNrX0VudHJ5LFxuICBQb2ludGVySG92ZXJGZWVkYmFjayxcbiAgUG9pbnRlckV2ZW50VHlwZVxufSBmcm9tICdAZGNsL2VjcydcblxuXG4vLyBDdWJlIGZhY3RvcnlcbmZ1bmN0aW9uIGNyZWF0ZUN1YmUoXG4gIHg6IG51bWJlcixcbiAgeTogbnVtYmVyLFxuICB6OiBudW1iZXIsXG4gIHBvaW50ZXJFdmVudHM6IFBCUG9pbnRlckhvdmVyRmVlZGJhY2tfRW50cnlbXVxuKTogRW50aXR5IHtcbiAgY29uc3QgbWVzaEVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuICBUcmFuc2Zvcm0uY3JlYXRlKG1lc2hFbnRpdHksIHsgcG9zaXRpb246IHsgeCwgeSwgeiB9IH0pXG4gIE1lc2hSZW5kZXJlci5jcmVhdGUobWVzaEVudGl0eSwgeyBtZXNoOiB7ICRjYXNlOiAnYm94JywgYm94OiB7IHV2czogW10gfSB9IH0pXG4gIE1lc2hDb2xsaWRlci5jcmVhdGUobWVzaEVudGl0eSwgeyBtZXNoOiB7ICRjYXNlOiAnYm94JywgYm94OiB7fSB9IH0pXG4gIFBvaW50ZXJIb3ZlckZlZWRiYWNrLmNyZWF0ZShtZXNoRW50aXR5LCB7IHBvaW50ZXJFdmVudHMgfSlcbiAgcmV0dXJuIG1lc2hFbnRpdHlcbn1cblxuY3JlYXRlQ3ViZSgxNSwgMSwgMTUsIFtcbiAge1xuICAgIGV2ZW50VHlwZTogUG9pbnRlckV2ZW50VHlwZS5QRVRfRE9XTixcbiAgICBldmVudEluZm86IHtcbiAgICAgIGJ1dHRvbjogSW5wdXRBY3Rpb24uSUFfUFJJTUFSWSxcbiAgICAgIGhvdmVyVGV4dDogJ1ByaW1hcnlEb3duJyxcbiAgICAgIG1heERpc3RhbmNlOiA1LFxuICAgICAgc2hvd0ZlZWRiYWNrOiB0cnVlXG4gICAgfVxuICB9XG5dKVxuXG5jcmVhdGVDdWJlKDEzLCAxLCAxNSwgW1xuICB7XG4gICAgZXZlbnRUeXBlOiBQb2ludGVyRXZlbnRUeXBlLlBFVF9VUCxcbiAgICBldmVudEluZm86IHtcbiAgICAgIGJ1dHRvbjogSW5wdXRBY3Rpb24uSUFfU0VDT05EQVJZLFxuICAgICAgaG92ZXJUZXh0OiAnU2Vjb25kYXJ5IFVwJyxcbiAgICAgIG1heERpc3RhbmNlOiA1LFxuICAgICAgc2hvd0ZlZWRiYWNrOiB0cnVlXG4gICAgfVxuICB9XG5dKVxuXG5jcmVhdGVDdWJlKDExLCAxLCAxNSwgW1xuICB7XG4gICAgZXZlbnRUeXBlOiBQb2ludGVyRXZlbnRUeXBlLlBFVF9IT1ZFUl9FTlRFUixcbiAgICBldmVudEluZm86IHtcbiAgICAgIGJ1dHRvbjogSW5wdXRBY3Rpb24uSUFfQU5ZLFxuICAgICAgaG92ZXJUZXh0OiAnSW5maW5pdHkgSG92ZXInLFxuICAgICAgbWF4RGlzdGFuY2U6IDEwMDAwMDAwLFxuICAgICAgc2hvd0ZlZWRiYWNrOiB0cnVlXG4gICAgfVxuICB9XG5dKVxuIl19