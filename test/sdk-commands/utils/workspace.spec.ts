import path from 'path'
import { initComponents } from '../../../packages/@dcl/sdk-commands/src/components'
import { Entity } from '../../../packages/@dcl/sdk-commands/node_modules/@dcl/schemas'
import * as w from '../../../packages/@dcl/sdk-commands/src/logic/workspace-validations'
import { runSdkCommand } from '../../../packages/@dcl/sdk-commands/src/run-command'

describe('workspace', () => {
  test('loads a dcl-workspace.json', async () => {
    const components = await initComponents()
    const validWorkspace = await w.getValidWorkspace(components, 'test/build-ecs/fixtures')
    expect(validWorkspace.rootWorkingDirectory).toEqual(path.resolve('test/build-ecs/fixtures'))
    expect(validWorkspace.projects).toHaveLength(2)
    expect(validWorkspace.projects.map(($) => $.workingDirectory)).toEqual([
      path.resolve('test/build-ecs/fixtures/ecs7-scene'),
      path.resolve('test/build-ecs/fixtures/ecs7-ui')
    ])
  })

  test('build integration test', async () => {
    const components = await initComponents()
    await runSdkCommand(components, 'build', ['--dir=test/build-ecs/fixtures'])
  })

  test('export-static integration test', async () => {
    const components = await initComponents()

    await components.fs.writeFile(
      'test/build-ecs/fixtures/aCaseSensitiveReadme.md',
      'this autogenerated case sensitive filename will help debug issues with normalized filenames'
    )

    await runSdkCommand(components, 'export-static', ['--dir=test/build-ecs/fixtures', '--destination=tmp/ipfs'])
  })

  test('export-static integration test with realm', async () => {
    const components = await initComponents()
    await components.fs.writeFile(
      'test/build-ecs/fixtures/aCaseSensitiveReadme.md',
      'this autogenerated case sensitive filename will help debug issues with normalized filenames'
    )

    const json = await runSdkCommand(components, 'export-static', [
      '--dir=test/build-ecs/fixtures',
      '--destination=tmp/ipfs',
      '--realmName=hola',
      '--baseUrl=https://decentraland.org/'
    ])

    expect(json).toMatchObject({
      scenesUrn: expect.arrayContaining([expect.stringMatching(/^urn:.+/), expect.stringMatching(/^urn:.+/)]),
      entities: expect.arrayContaining([expect.stringMatching(/^ba.+/), expect.stringMatching(/^ba.+/)]),
      destination: path.resolve('tmp/ipfs')
    })

    // validate entities are in a good shape
    for (const entityId of json.entities) {
      const entity = JSON.parse(await components.fs.readFile(path.resolve('tmp/ipfs', entityId), 'utf8')) as Entity
      entity.id = entityId

      expect(Entity.validate(entity)).toBeTruthy()
      expect(Entity.validate.errors || []).toEqual([])

      for (const { file, hash } of entity.content) {
        expect(path.isAbsolute(file)).toBeFalsy()
        expect(await components.fs.fileExists(path.resolve('tmp/ipfs', hash))).toBe(true)
      }
    }
  })
})
