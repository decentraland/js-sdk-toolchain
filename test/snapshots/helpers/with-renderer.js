import { Engine } from '@dcl/ecs/dist/engine';
let called = false;
export function withRenderer(cb) {
    if (called)
        throw new Error('Only call withRenderer once');
    called = true;
    const engine = Engine();
    const outMessages = [];
    const rendererTransport = {
        async send(message) {
            outMessages.push(message);
        },
        filter() {
            return true;
        }
    };
    engine.addTransport(rendererTransport);
    cb(engine);
    module.exports.onServerUpdate = async function (data) {
        if (rendererTransport.onmessage) {
            rendererTransport.onmessage(data);
            await engine.update(0);
            if (outMessages.length > 1) {
                throw new Error('Problem with amount of outgoint messages');
            }
            if (outMessages.length === 1) {
                const r = outMessages.shift();
                return r;
            }
        }
        return new Uint8Array();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aC1yZW5kZXJlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndpdGgtcmVuZGVyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFXLE1BQU0sRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBRXRELElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQTtBQUdsQixNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQTZCO0lBQ3hELElBQUksTUFBTTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtJQUMxRCxNQUFNLEdBQUcsSUFBSSxDQUFBO0lBRWIsTUFBTSxNQUFNLEdBQUcsTUFBTSxFQUFFLENBQUE7SUFFdkIsTUFBTSxXQUFXLEdBQWlCLEVBQUUsQ0FBQTtJQUVwQyxNQUFNLGlCQUFpQixHQUFjO1FBQ25DLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTztZQUNoQixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzNCLENBQUM7UUFDRCxNQUFNO1lBQ0osT0FBTyxJQUFJLENBQUE7UUFDYixDQUFDO0tBQ0YsQ0FBQTtJQUVELE1BQU0sQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtJQUV0QyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQ1Q7SUFBQyxNQUFjLENBQUMsT0FBTyxDQUFDLGNBQWMsR0FBRyxLQUFLLFdBQVcsSUFBZ0I7UUFDeEUsSUFBSSxpQkFBaUIsQ0FBQyxTQUFTLEVBQUU7WUFDL0IsaUJBQWlCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFBO1lBRWpDLE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUV0QixJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUE7YUFDNUQ7WUFFRCxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUM1QixNQUFNLENBQUMsR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUE7Z0JBQzdCLE9BQU8sQ0FBQyxDQUFBO2FBQ1Q7U0FDRjtRQUVELE9BQU8sSUFBSSxVQUFVLEVBQUUsQ0FBQTtJQUN6QixDQUFDLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhbnNwb3J0IH0gZnJvbSAnQGRjbC9lY3MnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgeyBJRW5naW5lLCBFbmdpbmUgfSBmcm9tICdAZGNsL2Vjcy9kaXN0L2VuZ2luZSdcblxubGV0IGNhbGxlZCA9IGZhbHNlXG5kZWNsYXJlIGNvbnN0IG1vZHVsZTogYW55XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoUmVuZGVyZXIoY2I6IChlbmdpbmU6IElFbmdpbmUpID0+IHZvaWQpIHtcbiAgaWYgKGNhbGxlZCkgdGhyb3cgbmV3IEVycm9yKCdPbmx5IGNhbGwgd2l0aFJlbmRlcmVyIG9uY2UnKVxuICBjYWxsZWQgPSB0cnVlXG5cbiAgY29uc3QgZW5naW5lID0gRW5naW5lKClcblxuICBjb25zdCBvdXRNZXNzYWdlczogVWludDhBcnJheVtdID0gW11cblxuICBjb25zdCByZW5kZXJlclRyYW5zcG9ydDogVHJhbnNwb3J0ID0ge1xuICAgIGFzeW5jIHNlbmQobWVzc2FnZSkge1xuICAgICAgb3V0TWVzc2FnZXMucHVzaChtZXNzYWdlKVxuICAgIH0sXG4gICAgZmlsdGVyKCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICBlbmdpbmUuYWRkVHJhbnNwb3J0KHJlbmRlcmVyVHJhbnNwb3J0KVxuXG4gIGNiKGVuZ2luZSlcbiAgOyhtb2R1bGUgYXMgYW55KS5leHBvcnRzLm9uU2VydmVyVXBkYXRlID0gYXN5bmMgZnVuY3Rpb24gKGRhdGE6IFVpbnQ4QXJyYXkpIHtcbiAgICBpZiAocmVuZGVyZXJUcmFuc3BvcnQub25tZXNzYWdlKSB7XG4gICAgICByZW5kZXJlclRyYW5zcG9ydC5vbm1lc3NhZ2UoZGF0YSlcblxuICAgICAgYXdhaXQgZW5naW5lLnVwZGF0ZSgwKVxuXG4gICAgICBpZiAob3V0TWVzc2FnZXMubGVuZ3RoID4gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb2JsZW0gd2l0aCBhbW91bnQgb2Ygb3V0Z29pbnQgbWVzc2FnZXMnKVxuICAgICAgfVxuXG4gICAgICBpZiAob3V0TWVzc2FnZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNvbnN0IHIgPSBvdXRNZXNzYWdlcy5zaGlmdCgpXG4gICAgICAgIHJldHVybiByXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KClcbiAgfVxufVxuIl19