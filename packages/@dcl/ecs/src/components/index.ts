import { ISchema, IEngine } from '../engine'
import {
  defineLibraryComponents,
  LibraryComponents
} from './generated/index.gen'
import {
  defineTransformComponent,
  TransformComponent
} from './legacy/Transform'
import {
  AnimatorComponentDefinition,
  defineAnimatorComponent
} from './extended/Animator'
import {
  defineMeshColliderComponent,
  MeshColliderComponentDefinition
} from './extended/MeshCollider'
import {
  defineMeshRendererComponent,
  MeshRendererComponentDefinition
} from './extended/MeshRenderer'
import {
  defineMaterialComponent,
  MaterialComponentDefinition
} from './extended/Material'
import { ComponentDefinition } from '../engine/component'
export { ISchema, ComponentDefinition }

export type SdkComponents = LibraryComponents & {
  Material: MaterialComponentDefinition
  Animator: AnimatorComponentDefinition
  MeshRenderer: MeshRendererComponentDefinition
  MeshCollider: MeshColliderComponentDefinition
  Transform: TransformComponent
}

export function defineSdkComponents(
  engine: Pick<IEngine, 'defineComponentFromSchema' | 'getComponent'>
): SdkComponents {
  const autogeneratedComponents = defineLibraryComponents(engine)
  return {
    ...autogeneratedComponents,
    Material: defineMaterialComponent(engine),
    Animator: defineAnimatorComponent(engine),
    MeshRenderer: defineMeshRendererComponent(engine),
    MeshCollider: defineMeshColliderComponent(engine),
    Transform: defineTransformComponent(engine)
  }
}
