import { ISchema, IEngine } from '../engine'
import { defineLibraryComponents, LibraryComponents } from './generated/index.gen'
import { defineTransformComponent, TransformComponent } from './legacy/Transform'
import { AnimatorComponentDefinitionExtended, defineAnimatorComponent } from './extended/Animator'
import { defineMeshColliderComponent, MeshColliderComponentDefinitionExtended } from './extended/MeshCollider'
import { defineMeshRendererComponent, MeshRendererComponentDefinitionExtended } from './extended/MeshRenderer'
import { defineMaterialComponent, MaterialComponentDefinitionExtended } from './extended/Material'
import { ComponentDefinition } from '../engine/component'
export { ISchema, ComponentDefinition }

export type SdkComponents = LibraryComponents & {
  Material: MaterialComponentDefinitionExtended
  Animator: AnimatorComponentDefinitionExtended
  MeshRenderer: MeshRendererComponentDefinitionExtended
  MeshCollider: MeshColliderComponentDefinitionExtended
  Transform: TransformComponent
}

export function defineSdkComponents(
  engine: Pick<IEngine, 'defineComponentFromSchema' | 'getComponent'>
): SdkComponents {
  const autogeneratedComponents = defineLibraryComponents(engine)
  return {
    ...autogeneratedComponents,
    Material: defineMaterialComponent(engine),
    Animator: defineAnimatorComponent(engine),
    MeshRenderer: defineMeshRendererComponent(engine),
    MeshCollider: defineMeshColliderComponent(engine),
    Transform: defineTransformComponent(engine)
  }
}
