{
  "root": true,
  "env": {
    "es2021": true,
    "node": true,
    "browser": false
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/typescript",
    /** @see https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin#recommended-configs */
    "plugin:@typescript-eslint/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 12,
    "sourceType": "module"
  },
  "plugins": ["@typescript-eslint", "import"],
  "ignorePatterns": ["node_modules/**", "**/dist/**"],

  "rules": {
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/consistent-type-imports": "error",
    /**
     * Having a semicolon helps the optimizer interpret your code correctly.
     * This avoids rare errors in optimized code.
     * @see https://twitter.com/alex_kozack/status/1364210394328408066
     */
    "semi": ["error", "always"],
    /**
     * This will make the history of changes in the hit a little cleaner
     */
    "comma-dangle": ["warn", "always-multiline"],
    /**
     * Just for beauty
     */
    "quotes": [
      "warn",
      "single",
      {
        "avoidEscape": true
      }
    ],
    "import/order": [
      "error",
      {
        "groups": ["builtin", "external", "internal", "parent", "sibling", "index", "object"],
        "pathGroupsExcludedImportTypes": [
          "react",
          "react-*/**",
          "react-*",
          "@dcl/**",
          "decentraland-*/**",
          "decentraland-*",
          "@mui/*",
          "@dcl/schemas/*",
          "@emotion/*"
        ],
        "pathGroups": [
          { "pattern": "react", "group": "builtin", "position": "before" },
          { "pattern": "react-*/**", "group": "builtin" },
          { "pattern": "react-*", "group": "builtin" },
          { "pattern": "@dcl/**", "group": "external", "position": "after" },
          {
            "pattern": "decentraland-*/**",
            "group": "external",
            "position": "after"
          },
          { "pattern": "decentraland-*", "group": "external", "position": "after" },
          { "pattern": "@mui/*", "group": "internal" },
          { "pattern": "@emotion/*", "group": "internal" },
          { "pattern": "@dcl/schemas/*", "group": "internal" },
          { "pattern": "/shared/*", "group": "internal" },
          { "pattern": "#preload/*", "group": "internal" },
          { "pattern": "/@/**/*", "group": "internal" },
          { "pattern": "lib/**", "group": "internal", "position": "before" },
          { "pattern": "modules/**", "group": "internal", "position": "before" },
          { "pattern": "components/**", "group": "internal", "position": "after" },
          { "pattern": "./*.ts", "group": "sibling", "position": "after" },
          { "pattern": "./*.tsx", "group": "sibling", "position": "after" },
          { "pattern": "./*.styled.tsx", "group": "sibling", "position": "after" },
          { "pattern": "./*.types.ts", "group": "sibling", "position": "after" },
          { "pattern": "./*.css", "group": "sibling", "position": "after" }
        ]
      }
    ]
  }
}
