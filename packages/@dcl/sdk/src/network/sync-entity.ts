import { Entity, NetworkEntity, SyncComponents } from '@dcl/ecs'
import { myProfile } from './utils'

export function syncEntity(entityId: Entity, componentIds: number[], entityEnumId?: number) {
  // Profile not initialized
  if (!myProfile?.networkId) {
    throw new Error('Profile not initialized. Called syncEntity inside the main() function.')
  }

  // If there is an entityEnumId, it means is the same entity for all the clients created on the main funciton.
  // So the networkId should be the same in all the clients to avoid re-creating this entity.
  // For this case we use networkId = 0.
  // If is not defined, then is a entity created in runtime (what we called dynamic/runtime entities).
  // We use the networkId generated by the user address to identify this entity through the network
  const networkEntity =
    entityEnumId !== undefined
      ? { entityId: entityEnumId as Entity, networkId: 0 }
      : { entityId, networkId: myProfile.networkId }
  NetworkEntity.createOrReplace(entityId, networkEntity)
  SyncComponents.createOrReplace(entityId, { componentIds })
}
