{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.33.6",
    "schemaVersion": 1010,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@dcl/playground-assets!",
  "docComment": "",
  "name": "@dcl/playground-assets",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@dcl/playground-assets!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!Animator:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Animator: "
            },
            {
              "kind": "Content",
              "text": "import(\"./components/types\")."
            },
            {
              "kind": "Reference",
              "text": "AnimatorComponentDefinitionExtended",
              "canonicalReference": "@dcl/playground-assets!AnimatorComponentDefinitionExtended:interface"
            }
          ],
          "fileUrlPath": "../ecs/dist/index.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Animator",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!AnimatorComponentDefinition:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AnimatorComponentDefinition = "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBAnimator",
              "canonicalReference": "@dcl/playground-assets!PBAnimator:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "PBAnimator",
              "canonicalReference": "@dcl/playground-assets!PBAnimator:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/extended/Animator.d.ts",
          "releaseTag": "Public",
          "name": "AnimatorComponentDefinition",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!AnimatorComponentDefinitionExtended:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AnimatorComponentDefinitionExtended extends "
            },
            {
              "kind": "Reference",
              "text": "AnimatorComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!AnimatorComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/extended/Animator.d.ts",
          "releaseTag": "Public",
          "name": "AnimatorComponentDefinitionExtended",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@dcl/playground-assets!AnimatorComponentDefinitionExtended#getClip:member(1)",
              "docComment": "/**\n * Get a `mutable` version of animator clip\n *\n * @param entity - entity with Animator component\n *\n * @param name - the field `name` of the component\n *\n * @returns the clip or fails if it isn't found\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getClip(entity: "
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PBAnimationState",
                  "canonicalReference": "@dcl/playground-assets!PBAnimationState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "getClip"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@dcl/playground-assets!AnimatorComponentDefinitionExtended#getClipOrNull:member(1)",
              "docComment": "/**\n * Get a `mutable` version of animator clip\n *\n * @param entity - entity with Animator component\n *\n * @param name - the field `name` of the component\n *\n * @returns the clip or null if it isn't found\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getClipOrNull(entity: "
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PBAnimationState",
                  "canonicalReference": "@dcl/playground-assets!PBAnimationState:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "getClipOrNull"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@dcl/playground-assets!AnimatorComponentDefinitionExtended#playSingleAnimation:member(1)",
              "docComment": "/**\n * Set playing=true the animation `$name`\n *\n * @param entity - entity with Animator component\n *\n * @param name - animation name\n *\n * @param resetCursor - the animation starts at 0 or continues from the current cursor position\n *\n * @returns true in successful playing, false if it doesn't find the Animator or clip\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "playSingleAnimation(entity: "
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", resetCursor?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "resetCursor",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "playSingleAnimation"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@dcl/playground-assets!AnimatorComponentDefinitionExtended#stopAllAnimations:member(1)",
              "docComment": "/**\n * Set playing=false all animations\n *\n * @param entity - entity with Animator component\n *\n * @param resetCursor - the animation stops at 0 or at the current cursor position\n *\n * @returns true in successful playing, false if it doesn't find the Animator\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stopAllAnimations(entity: "
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": ", resetCursor?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "resetCursor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "stopAllAnimations"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!AnimatorSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AnimatorSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBAnimator",
              "canonicalReference": "@dcl/playground-assets!PBAnimator:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/Animator.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AnimatorSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!AudioSource:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AudioSource: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "AudioSourceSchema",
              "canonicalReference": "@dcl/playground-assets!AudioSourceSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AudioSource",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!AudioSourceSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AudioSourceSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBAudioSource",
              "canonicalReference": "@dcl/playground-assets!PBAudioSource:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/AudioSource.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AudioSourceSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!AudioStream:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AudioStream: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "AudioStreamSchema",
              "canonicalReference": "@dcl/playground-assets!AudioStreamSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AudioStream",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!AudioStreamSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AudioStreamSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBAudioStream",
              "canonicalReference": "@dcl/playground-assets!PBAudioStream:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/AudioStream.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AudioStreamSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!AvatarAnchorPointType:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum AvatarAnchorPointType "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_attach.gen.d.ts",
          "releaseTag": "Public",
          "name": "AvatarAnchorPointType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!AvatarAnchorPointType.AAPT_LEFT_HAND:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AAPT_LEFT_HAND = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "AAPT_LEFT_HAND"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!AvatarAnchorPointType.AAPT_NAME_TAG:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AAPT_NAME_TAG = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "AAPT_NAME_TAG"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!AvatarAnchorPointType.AAPT_POSITION:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AAPT_POSITION = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "AAPT_POSITION"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!AvatarAnchorPointType.AAPT_RIGHT_HAND:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AAPT_RIGHT_HAND = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "AAPT_RIGHT_HAND"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!AvatarAttach:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AvatarAttach: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "AvatarAttachSchema",
              "canonicalReference": "@dcl/playground-assets!AvatarAttachSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AvatarAttach",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!AvatarAttachSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AvatarAttachSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBAvatarAttach",
              "canonicalReference": "@dcl/playground-assets!PBAvatarAttach:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/AvatarAttach.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AvatarAttachSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!AvatarModifierArea:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AvatarModifierArea: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "AvatarModifierAreaSchema",
              "canonicalReference": "@dcl/playground-assets!AvatarModifierAreaSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AvatarModifierArea",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!AvatarModifierAreaSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AvatarModifierAreaSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBAvatarModifierArea",
              "canonicalReference": "@dcl/playground-assets!PBAvatarModifierArea:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/AvatarModifierArea.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AvatarModifierAreaSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!AvatarModifierType:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum AvatarModifierType "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_modifier_area.gen.d.ts",
          "releaseTag": "Public",
          "name": "AvatarModifierType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!AvatarModifierType.AMT_DISABLE_PASSPORTS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AMT_DISABLE_PASSPORTS = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "AMT_DISABLE_PASSPORTS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!AvatarModifierType.AMT_HIDE_AVATARS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AMT_HIDE_AVATARS = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "AMT_HIDE_AVATARS"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!AvatarShape:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AvatarShape: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "AvatarShapeSchema",
              "canonicalReference": "@dcl/playground-assets!AvatarShapeSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AvatarShape",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!AvatarShapeSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AvatarShapeSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBAvatarShape",
              "canonicalReference": "@dcl/playground-assets!PBAvatarShape:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/AvatarShape.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AvatarShapeSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!AvatarTexture:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AvatarTexture "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/texture.gen.d.ts",
          "releaseTag": "Public",
          "name": "AvatarTexture",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!AvatarTexture#filterMode:member",
              "docComment": "/**\n * default = FilterMode.Bilinear\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filterMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureFilterMode",
                  "canonicalReference": "@dcl/playground-assets!TextureFilterMode:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "filterMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!AvatarTexture#userId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "userId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!AvatarTexture#wrapMode:member",
              "docComment": "/**\n * default = TextureWrapMode.Clamp\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wrapMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureWrapMode",
                  "canonicalReference": "@dcl/playground-assets!TextureWrapMode:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "wrapMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!AvatarTexture:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AvatarTexture: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "AvatarTexture",
              "canonicalReference": "@dcl/playground-assets!AvatarTexture:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "AvatarTexture",
              "canonicalReference": "@dcl/playground-assets!AvatarTexture:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/texture.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AvatarTexture",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!Billboard:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Billboard: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "BillboardSchema",
              "canonicalReference": "@dcl/playground-assets!BillboardSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Billboard",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!BillboardMode:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum BillboardMode "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/billboard.gen.d.ts",
          "releaseTag": "Public",
          "name": "BillboardMode",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!BillboardMode.BM_ALL_AXES:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BM_ALL_AXES = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "BM_ALL_AXES"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!BillboardMode.BM_Y_AXE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BM_Y_AXE = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "BM_Y_AXE"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!BillboardSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "BillboardSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBBillboard",
              "canonicalReference": "@dcl/playground-assets!PBBillboard:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/Billboard.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "BillboardSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!ByteBuffer:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ByteBuffer = "
            },
            {
              "kind": "Content",
              "text": "{\n    buffer(): "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    bufferLength(): number;\n    resetBuffer(): void;\n    currentReadOffset(): number;\n    currentWriteOffset(): number;\n    incrementReadOffset(amount: number): number;\n    remainingBytes(): number;\n    readFloat32(): number;\n    readFloat64(): number;\n    readInt8(): number;\n    readInt16(): number;\n    readInt32(): number;\n    readInt64(): bigint;\n    readUint8(): number;\n    readUint16(): number;\n    readUint32(): number;\n    readUint64(): bigint;\n    readBuffer(): "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    incrementWriteOffset(amount: number): number;\n    size(): number;\n    toBinary(): "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    toCopiedBinary(): "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    writeBuffer(value: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", writeLength?: boolean): void;\n    writeFloat32(value: number): void;\n    writeFloat64(value: number): void;\n    writeInt8(value: number): void;\n    writeInt16(value: number): void;\n    writeInt32(value: number): void;\n    writeInt64(value: bigint): void;\n    writeUint8(value: number): void;\n    writeUint16(value: number): void;\n    writeUint32(value: number): void;\n    writeUint64(value: bigint): void;\n    getFloat32(offset: number): number;\n    getFloat64(offset: number): number;\n    getInt8(offset: number): number;\n    getInt16(offset: number): number;\n    getInt32(offset: number): number;\n    getInt64(offset: number): bigint;\n    getUint8(offset: number): number;\n    getUint16(offset: number): number;\n    getUint32(offset: number): number;\n    getUint64(offset: number): bigint;\n    setFloat32(offset: number, value: number): void;\n    setFloat64(offset: number, value: number): void;\n    setInt8(offset: number, value: number): void;\n    setInt16(offset: number, value: number): void;\n    setInt32(offset: number, value: number): void;\n    setInt64(offset: number, value: bigint): void;\n    setUint8(offset: number, value: number): void;\n    setUint16(offset: number, value: number): void;\n    setUint32(offset: number, value: number): void;\n    setUint64(offset: number, value: bigint): void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/serialization/ByteBuffer/index.d.ts",
          "releaseTag": "Public",
          "name": "ByteBuffer",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!CameraMode:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CameraMode: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "CameraModeSchema",
              "canonicalReference": "@dcl/playground-assets!CameraModeSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "CameraMode",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!CameraModeArea:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CameraModeArea: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "CameraModeAreaSchema",
              "canonicalReference": "@dcl/playground-assets!CameraModeAreaSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "CameraModeArea",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!CameraModeAreaSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CameraModeAreaSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBCameraModeArea",
              "canonicalReference": "@dcl/playground-assets!PBCameraModeArea:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/CameraModeArea.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "CameraModeAreaSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!CameraModeSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CameraModeSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBCameraMode",
              "canonicalReference": "@dcl/playground-assets!PBCameraMode:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/CameraMode.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "CameraModeSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!CameraType:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum CameraType "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/common/camera_type.gen.d.ts",
          "releaseTag": "Public",
          "name": "CameraType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!CameraType.CT_FIRST_PERSON:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CT_FIRST_PERSON = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CT_FIRST_PERSON"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!CameraType.CT_THIRD_PERSON:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CT_THIRD_PERSON = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CT_THIRD_PERSON"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!CANVAS_ROOT_ENTITY:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CANVAS_ROOT_ENTITY = "
            },
            {
              "kind": "Content",
              "text": "0"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/components/uiTransform/index.d.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "CANVAS_ROOT_ENTITY",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Children:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Children = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/components/types.d.ts",
          "releaseTag": "Public",
          "name": "Children",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!ColliderLayer:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum ColliderLayer "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_collider.gen.d.ts",
          "releaseTag": "Public",
          "name": "ColliderLayer",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!ColliderLayer.CL_NONE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CL_NONE = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CL_NONE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!ColliderLayer.CL_PHYSICS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CL_PHYSICS = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CL_PHYSICS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!ColliderLayer.CL_POINTER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CL_POINTER = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CL_POINTER"
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/playground-assets!Color3:namespace",
          "docComment": "/**\n * Color3 is a type and a namespace.\n * ```\n * // The namespace contains all types and functions to operates with Color3\n * Color3.add(blue, red) // sum component by component resulting pink\n * // The type Color3 is an alias to Color3.ReadonlyColor3\n * const readonlyBlue: Color3 = Color3.Blue()\n * readonlyBlue.r = 0.1 // this FAILS\n *\n * // For mutable usage, use `Color3.Mutable`\n * const blue: Color3.Mutable = Color3.Blue()\n * blue.r = 0.1 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Color3 "
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/Color3.d.ts",
          "releaseTag": "Public",
          "name": "Color3",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.add:function(1)",
              "docComment": "/**\n * Creates Color3 set with the added values of the current Color3 and of the given one\n *\n * @param otherColor - defines the second operand\n *\n * @returns the create\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function add(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "add"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.addToRef:function(1)",
              "docComment": "/**\n * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\n *\n * @param otherColor - defines the second operand\n *\n * @param result - defines Color3 object to store the result into\n *\n * @returns the unmodified current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function addToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "addToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.asArray:function(1)",
              "docComment": "/**\n * Returns a new array populated with 3 numeric elements : red, green and blue values\n *\n * @returns the new array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function asArray(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "asArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.Black:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a black color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Black(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Black"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.Blue:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a blue color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Blue(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Blue"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.clamp:function(1)",
              "docComment": "/**\n * Clamps the rgb values by the min and max values and returns the result\n *\n * @param min - defines minimum clamping value (default is 0)\n *\n * @param max - defines maximum clamping value (default is 1)\n *\n * @returns result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clamp(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", min?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "clamp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.clampToRef:function(1)",
              "docComment": "/**\n * Clamps the rgb values by the min and max values and stores the result into \"result\"\n *\n * @param min - defines minimum clamping value (default is 0)\n *\n * @param max - defines maximum clamping value (default is 1)\n *\n * @param result - defines color to store the result into\n *\n * @returns the original Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clampToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "clampToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.clone:function(1)",
              "docComment": "/**\n * Copy the current object\n *\n * @returns Color3 copied the current one\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clone(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "clone"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.copyFrom:function(1)",
              "docComment": "/**\n * Copies the rgb values from the source in the current Color3\n *\n * @param source - defines the source Color3 object\n *\n * @returns the updated Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function copyFrom(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "copyFrom"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.create:function(1)",
              "docComment": "/**\n * Creates Color3 object from red, green, blue values, all between 0 and 1\n *\n * @param r - defines the red component (between 0 and 1, default is 0)\n *\n * @param g - defines the green component (between 0 and 1, default is 0)\n *\n * @param b - defines the blue component (between 0 and 1, default is 0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function create(\n    r?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    g?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    b?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        r: number;\n        g: number;\n        b: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "create"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.equals:function(1)",
              "docComment": "/**\n * Determines equality between Color3 objects\n *\n * @param otherColor - defines the second operand\n *\n * @returns true if the rgb values are equal to the given ones\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function equals(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.equalsFloats:function(1)",
              "docComment": "/**\n * Determines equality between the current Color3 object and a set of r,b,g values\n *\n * @param r - defines the red component to check\n *\n * @param g - defines the green component to check\n *\n * @param b - defines the blue component to check\n *\n * @returns true if the rgb values are equal to the given ones\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function equalsFloats(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "equalsFloats"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.fromArray:function(1)",
              "docComment": "/**\n * Creates a new Vector3 from the starting index of the given array\n *\n * @param array - defines the source array\n *\n * @param offset - defines an offset in the source array\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "name": "fromArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.fromHexString:function(1)",
              "docComment": "/**\n * Creates a Vector3 from the string containing valid hexadecimal values\n *\n * @param hex - defines a string containing valid hexadecimal values\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromHexString(hex: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hex",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "fromHexString"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.fromInts:function(1)",
              "docComment": "/**\n * Creates a Vector3 from integer values (less than 256)\n *\n * @param r - defines the red component to read from (value between 0 and 255)\n *\n * @param g - defines the green component to read from (value between 0 and 255)\n *\n * @param b - defines the blue component to read from (value between 0 and 255)\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromInts(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "fromInts"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.getHashCode:function(1)",
              "docComment": "/**\n * Compute the Color3 hash code\n *\n * @returns an unique number that can be used to hash Color3 objects\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getHashCode(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getHashCode"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.Gray:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a gray color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Gray(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Gray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.Green:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a green color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Green(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Green"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.lerp:function(1)",
              "docComment": "/**\n * Creates a Vector3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n *\n * @param start - defines the start Color3 value\n *\n * @param end - defines the end Color3 value\n *\n * @param amount - defines the gradient value between start and end\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerp(start: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "lerp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.lerpToRef:function(1)",
              "docComment": "/**\n * Creates a Vector3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n *\n * @param left - defines the start value\n *\n * @param right - defines the end value\n *\n * @param amount - defines the gradient factor\n *\n * @param result - defines the Color3 object where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerpToRef(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "lerpToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.Magenta:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a magenta color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Magenta(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Magenta"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.multiply:function(1)",
              "docComment": "/**\n * Multiply each Color3 rgb values by the given Color3 rgb values in Color3 object\n *\n * @param otherColor - defines the second operand\n *\n * @returns the create object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiply(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.multiplyToRef:function(1)",
              "docComment": "/**\n * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\n *\n * @param otherColor - defines the second operand\n *\n * @param result - defines the Color3 object where to store the result\n *\n * @returns the current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Color3.Mutable:type",
              "docComment": "/**\n * Type with `Color3` for readonly usage, e.g. `const blackColor: Color3 = Color3.Black()`. For mutable, use `Color3.Mutable`, e.g. `const redColor: Color3.Mutable = Color3.Red()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Mutable = "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Mutable",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type",
              "docComment": "/**\n * For external usage, type with `Color3`, e.g. `const blackColor: Color3 = Color3.Black()`. For mutable typing, use `Color3.Mutable`, e.g. `const redColor: Color3.Mutable = Color3.Red()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type MutableColor3 = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        r: number;\n        g: number;\n        b: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MutableColor3",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.Purple:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a purple color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Purple(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Purple"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.Random:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a random color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Random(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Random"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type",
              "docComment": "/**\n * For external use, type with `Color3`, e.g. `const blackColor: Color3 = Color3.Black()`. For mutable typing, use `Color3.Mutable`, e.g. `const redColor: Color3.Mutable = Color3.Red()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ReadonlyColor3 = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly r: number;\n        readonly g: number;\n        readonly b: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ReadonlyColor3",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.Red:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a red color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Red(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Red"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.scale:function(1)",
              "docComment": "/**\n * Multiplies in place each rgb value by scale\n *\n * @param scale - defines the scaling factor\n *\n * @returns the updated Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scale(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "scale"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.scaleAndAddToRef:function(1)",
              "docComment": "/**\n * Scale the current Color3 values by a factor and add the result to a given Color3\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines color to store the result into\n *\n * @returns the unmodified current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scaleAndAddToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "scaleAndAddToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.scaleToRef:function(1)",
              "docComment": "/**\n * Multiplies the rgb values by scale and stores the result into \"result\"\n *\n * @param scale - defines the scaling factor\n *\n * @param result - defines the Color3 object where to store the result\n *\n * @returns the unmodified current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scaleToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "scaleToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.set:function(1)",
              "docComment": "/**\n * Updates the Color3 rgb values from the given floats\n *\n * @param dest - \n *\n * @param r - defines the red component to read from\n *\n * @param g - defines the green component to read from\n *\n * @param b - defines the blue component to read from\n *\n * @returns \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function set(dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "set"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.subtract:function(1)",
              "docComment": "/**\n * Returns Color3 set with the subtracted values of the given one from the current Color3\n *\n * @param otherColor - defines the second operand\n *\n * @returns the create\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function subtract(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.subtractToRef:function(1)",
              "docComment": "/**\n * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\n *\n * @param otherColor - defines the second operand\n *\n * @param result - defines Color3 object to store the result into\n *\n * @returns the unmodified current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function subtractToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "subtractToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.Teal:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a teal color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Teal(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Teal"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.toArray:function(1)",
              "docComment": "/**\n * Stores in the given array from the given starting index the red, green, blue values as successive elements\n *\n * @param array - defines the array where to store the r,g,b components\n *\n * @param index - defines an optional index in the target array to define where to start storing values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toArray(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/playground-assets!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "toArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.toColor4:function(1)",
              "docComment": "/**\n * Returns a new Color4 object from the current Color3 and the given alpha\n *\n * @param alpha - defines the alpha component on the new Color4 object (default is 1)\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toColor4(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", alpha?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4.MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "alpha",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "toColor4"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.toGammaSpace:function(1)",
              "docComment": "/**\n * Computes Color3 converted from the current one to gamma space\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toGammaSpace(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toGammaSpace"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.toGammaSpaceToRef:function(1)",
              "docComment": "/**\n * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\n *\n * @param convertedColor - defines the Color3 object where to store the gamma space version\n *\n * @returns the unmodified Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toGammaSpaceToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", convertedColor: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "convertedColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "toGammaSpaceToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.toHexString:function(1)",
              "docComment": "/**\n * Compute the Color3 hexadecimal code as a string\n *\n * @returns a string containing the hexadecimal representation of the Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toHexString(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toHexString"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.toLinearSpace:function(1)",
              "docComment": "/**\n * Computes Color3 converted from the current one to linear space\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toLinearSpace(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toLinearSpace"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.toLinearSpaceToRef:function(1)",
              "docComment": "/**\n * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\n *\n * @param convertedColor - defines the Color3 object where to store the linear space version\n *\n * @returns the unmodified Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toLinearSpaceToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", convertedColor: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "convertedColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "toLinearSpaceToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.toLuminance:function(1)",
              "docComment": "/**\n * Returns the luminance value\n *\n * @returns a float value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toLuminance(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toLuminance"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.toString:function(1)",
              "docComment": "/**\n * Creates a string with the Color3 current values\n *\n * @returns the string representation of the Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toString(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toString"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.White:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a white color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function White(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "White"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color3.Yellow:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a yellow color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Yellow(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Yellow"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Color3:type",
          "docComment": "/**\n * Color3 is a type and a namespace. - The namespace contains all types and functions to operates with Color3 - The type Color3 is an alias to Color3.ReadonlyColor3\n * ```\n *\n * // Namespace usage example\n * Color3.add(blue, red) // sum component by component resulting pink\n *\n * // Type usage example\n * const readonlyBlue: Color3 = Color3.Blue()\n * readonlyBlue.r = 0.1 // this FAILS\n *\n * // For mutable usage, use `Color3.Mutable`\n * const blue: Color3.Mutable = Color3.Blue()\n * blue.r = 0.1 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Color3 = "
            },
            {
              "kind": "Reference",
              "text": "Color3.ReadonlyColor3",
              "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/Color3.d.ts",
          "releaseTag": "Public",
          "name": "Color3",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Color3Type:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Color3Type = "
            },
            {
              "kind": "Content",
              "text": "{\n    r: number;\n    g: number;\n    b: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/custom/Color3.d.ts",
          "releaseTag": "Public",
          "name": "Color3Type",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/playground-assets!Color4:namespace",
          "docComment": "/**\n * Color4 is a type and a namespace.\n * ```\n * // The namespace contains all types and functions to operates with Color4\n * Color4.add(blue, red) // sum component by component resulting pink\n * // The type Color4 is an alias to Color4.ReadonlyColor4\n * const readonlyBlue: Color4 = Color4.Blue()\n * readonlyBlue.a = 0.1 // this FAILS\n *\n * // For mutable usage, use `Color4.Mutable`\n * const blue: Color4.Mutable = Color4.Blue()\n * blue.a = 0.1 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Color4 "
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/Color4.d.ts",
          "releaseTag": "Public",
          "name": "Color4",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.add:function(1)",
              "docComment": "/**\n * Creates a Color4 set with the added values of the current Color4 and of the given one\n *\n * @param right - defines the second operand\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function add(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "add"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.addToRef:function(1)",
              "docComment": "/**\n * Adds the given Color4 values to the ref Color4 object\n *\n * @param a - defines the first operand\n *\n * @param b - defines the second operand\n *\n * @param ref - defines the result rference\n *\n * @returns \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function addToRef(a: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", ref: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "ref",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "addToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.Black:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a black color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Black(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Black"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.Blue:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a blue color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Blue(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Blue"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.checkColors4:function(1)",
              "docComment": "/**\n * Check the content of a given array and convert it to an array containing RGBA data If the original array was already containing count * 4 values then it is returned directly\n *\n * @param colors - defines the array to check\n *\n * @param count - defines the number of RGBA data to expect\n *\n * @returns an array containing count * 4 values (RGBA)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function checkColors4(colors: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ", count: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "colors",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "count",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "checkColors4"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.clampToRef:function(1)",
              "docComment": "/**\n * Clamps the rgb values by the min and max values and stores the result into \"result\"\n *\n * @param min - defines minimum clamping value (default is 0)\n *\n * @param max - defines maximum clamping value (default is 1)\n *\n * @param result - defines color to store the result into.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clampToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "clampToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.Clear:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a transparent color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Clear(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Clear"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.clone:function(1)",
              "docComment": "/**\n * Creates a Color4 copied from the current one\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clone(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "clone"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.copyFrom:function(1)",
              "docComment": "/**\n * Copies the given Color4 values into the destination\n *\n * @param source - defines the source Color4 object\n *\n * @param dest - defines the destination Color4 object\n *\n * @returns \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function copyFrom(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "copyFrom"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.copyFromFloats:function(1)",
              "docComment": "/**\n * Copies the given float values into the current one\n *\n * @param r - defines the red component to read from\n *\n * @param g - defines the green component to read from\n *\n * @param b - defines the blue component to read from\n *\n * @param a - defines the alpha component to read from\n *\n * @returns the current updated Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function copyFromFloats(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "name": "copyFromFloats"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.create:function(1)",
              "docComment": "/**\n * Creates create mutable Color4 from red, green, blue values, all between 0 and 1\n *\n * @param r - defines the red component (between 0 and 1, default is 0)\n *\n * @param g - defines the green component (between 0 and 1, default is 0)\n *\n * @param b - defines the blue component (between 0 and 1, default is 0)\n *\n * @param a - defines the alpha component (between 0 and 1, default is 1)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function create(\n    r?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    g?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    b?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    a?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "name": "create"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.fromArray:function(1)",
              "docComment": "/**\n * Creates a Color4 from the starting index element of the given array\n *\n * @param array - defines the source array to read from\n *\n * @param offset - defines the offset in the source array\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "name": "fromArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.fromColor3:function(1)",
              "docComment": "/**\n * Creates a Color4 from a Color3 and an alpha value\n *\n * @param color3 - defines the source Color3 to read from\n *\n * @param alpha - defines the alpha component (1.0 by default)\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromColor3(color3: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3.ReadonlyColor3",
                  "canonicalReference": "@dcl/playground-assets!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", alpha?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "color3",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "alpha",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "fromColor3"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.fromHexString:function(1)",
              "docComment": "/**\n * Creates a Color4 from the string containing valid hexadecimal values\n *\n * @param hex - defines a string containing valid hexadecimal values\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromHexString(hex: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hex",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "fromHexString"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.fromInts:function(1)",
              "docComment": "/**\n * Creates a new Color3 from integer values (less than 256)\n *\n * @param r - defines the red component to read from (value between 0 and 255)\n *\n * @param g - defines the green component to read from (value between 0 and 255)\n *\n * @param b - defines the blue component to read from (value between 0 and 255)\n *\n * @param a - defines the alpha component to read from (value between 0 and 255)\n *\n * @returns a new Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromInts(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "fromInts"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.getHashCode:function(1)",
              "docComment": "/**\n * Compute the Color4 hash code\n *\n * @returns an unique number that can be used to hash Color4 objects\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getHashCode(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getHashCode"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.Gray:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a gray color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Gray(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Gray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.Green:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a green color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Green(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Green"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.lerp:function(1)",
              "docComment": "/**\n * Creates create mutable Color4 set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n *\n * @param left - defines the start value\n *\n * @param right - defines the end value\n *\n * @param amount - defines the gradient factor\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerp(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "lerp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.lerpToRef:function(1)",
              "docComment": "/**\n * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n *\n * @param left - defines the start value\n *\n * @param right - defines the end value\n *\n * @param amount - defines the gradient factor\n *\n * @param result - defines the Color4 object where to store data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerpToRef(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "lerpToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.Magenta:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a magenta color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Magenta(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Magenta"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.multiply:function(1)",
              "docComment": "/**\n * Multipy an Color4 value by another and return create mutable Color4\n *\n * @param color - defines the Color4 value to multiply by\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiply(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", color: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "color",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.multiplyToRef:function(1)",
              "docComment": "/**\n * Multipy a Color4 value by another and push the result in a reference value\n *\n * @param color - defines the Color4 value to multiply by\n *\n * @param result - defines the Color4 to fill the result in\n *\n * @returns the result Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", color: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "color",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Color4.Mutable:type",
              "docComment": "/**\n * Type with `Color4` for readonly usage, e.g. `const blackColor: Color4 = Color4.Black()`. For mutable, use `Color4.Mutable`, e.g. `const redColor: Color4.Mutable = Color4.Red()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Mutable = "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Mutable",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type",
              "docComment": "/**\n * For external usage, type with `Color4`, e.g. `const blackColor: Color4 = Color4.Black()`. For mutable typing, use `Color4.Mutable`, e.g. `const redColor: Color4.Mutable = Color4.Red()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type MutableColor4 = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        r: number;\n        g: number;\n        b: number;\n        a: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MutableColor4",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.Purple:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a purple color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Purple(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Purple"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type",
              "docComment": "/**\n * For external use, type with `Color4`, e.g. `const blackColor: Color4 = Color4.Black()`. For mutable typing, use `Color4.Mutable`, e.g. `const redColor: Color4.Mutable = Color4.Red()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ReadonlyColor4 = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly r: number;\n        readonly g: number;\n        readonly b: number;\n        readonly a: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ReadonlyColor4",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.Red:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a red color\n *\n * @returns a new Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Red(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Red"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.scale:function(1)",
              "docComment": "/**\n * Creates a Color4 with the current Color4 values multiplied by scale\n *\n * @param scale - defines the scaling factor to apply\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scale(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "scale"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.scaleAndAddToRef:function(1)",
              "docComment": "/**\n * Scale the current Color4 values by a factor and add the result to a given Color4\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines the Color4 object where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scaleAndAddToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "scaleAndAddToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.scaleToRef:function(1)",
              "docComment": "/**\n * Multiplies the current Color4 values by scale and stores the result in \"result\"\n *\n * @param scale - defines the scaling factor to apply\n *\n * @param result - defines the Color4 object where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scaleToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "scaleToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.set:function(1)",
              "docComment": "/**\n * Copies the given float values into the current one\n *\n * @param r - defines the red component to read from\n *\n * @param g - defines the green component to read from\n *\n * @param b - defines the blue component to read from\n *\n * @param a - defines the alpha component to read from\n *\n * @returns the current updated Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function set(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "name": "set"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.subtract:function(1)",
              "docComment": "/**\n * Creates a Color4 set with the subtracted values of the given one from the current Color4\n *\n * @param right - defines the second operand\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function subtract(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.subtractToRef:function(1)",
              "docComment": "/**\n * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\n *\n * @param right - defines the second operand\n *\n * @param result - defines the Color4 object where to store the result\n *\n * @returns the current Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function subtractToRef(a: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "subtractToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.Teal:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a teal color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Teal(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Teal"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.toArray:function(1)",
              "docComment": "/**\n * Stores from the starting index in the given array the Color4 successive values\n *\n * @param array - defines the array where to store the r,g,b components\n *\n * @param index - defines an optional index in the target array to define where to start storing values\n *\n * @returns the current Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toArray(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", array: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ", index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "toArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.toGammaSpace:function(1)",
              "docComment": "/**\n * Computes a Color4 converted from the current one to gamma space\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toGammaSpace(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toGammaSpace"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.toGammaSpaceToRef:function(1)",
              "docComment": "/**\n * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\n *\n * @param convertedColor - defines the Color4 object where to store the gamma space version\n *\n * @returns the unmodified Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toGammaSpaceToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", convertedColor: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "convertedColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "toGammaSpaceToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.toHexString:function(1)",
              "docComment": "/**\n * Compute the Color4 hexadecimal code as a string\n *\n * @returns a string containing the hexadecimal representation of the Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toHexString(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toHexString"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.toLinearSpace:function(1)",
              "docComment": "/**\n * Computes a Color4 converted from the current one to linear space\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toLinearSpace(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toLinearSpace"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.toLinearSpaceToRef:function(1)",
              "docComment": "/**\n * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\n *\n * @param convertedColor - defines the Color4 object where to store the linear space version\n *\n * @returns the unmodified Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toLinearSpaceToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", ref: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "ref",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "toLinearSpaceToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.toString:function(1)",
              "docComment": "/**\n * Creates a string with the Color4 current values\n *\n * @returns the string representation of the Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toString(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toString"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.White:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a white color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function White(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "White"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Color4.Yellow:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a yellow color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Yellow(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/playground-assets!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Yellow"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Color4:type",
          "docComment": "/**\n * Color4 is a type and a namespace. - The namespace contains all types and functions to operates with Color4 - The type Color4 is an alias to Color4.ReadonlyColor4\n * ```\n *\n * // Namespace usage example\n * Color4.add(blue, red) // sum component by component resulting pink\n *\n * // Type usage example\n * const readonlyBlue: Color4 = Color4.Blue()\n * readonlyBlue.a = 0.1 // this FAILS\n *\n * // For mutable usage, use `Color4.Mutable`\n * const blue: Color4.Mutable = Color4.Blue()\n * blue.a = 0.1 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Color4 = "
            },
            {
              "kind": "Reference",
              "text": "Color4.ReadonlyColor4",
              "canonicalReference": "@dcl/playground-assets!Color4.ReadonlyColor4:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/Color4.d.ts",
          "releaseTag": "Public",
          "name": "Color4",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Color4Type:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Color4Type = "
            },
            {
              "kind": "Content",
              "text": "{\n    r: number;\n    g: number;\n    b: number;\n    a: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/custom/Color4.d.ts",
          "releaseTag": "Public",
          "name": "Color4Type",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!CommonProps:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CommonProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    key: "
            },
            {
              "kind": "Reference",
              "text": "Key",
              "canonicalReference": "@dcl/playground-assets!Key:type"
            },
            {
              "kind": "Content",
              "text": ";\n    children: "
            },
            {
              "kind": "Reference",
              "text": "Children",
              "canonicalReference": "@dcl/playground-assets!Children:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/components/types.d.ts",
          "releaseTag": "Public",
          "name": "CommonProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ComponentDefinition<T extends "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<ConstructorType>"
            },
            {
              "kind": "Content",
              "text": ", ConstructorType = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    _id: number;\n    default(): "
            },
            {
              "kind": "Reference",
              "text": "DeepReadonly",
              "canonicalReference": "@dcl/playground-assets!DeepReadonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ComponentType",
              "canonicalReference": "@dcl/playground-assets!ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<T>>;\n    has(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n    get(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DeepReadonly",
              "canonicalReference": "@dcl/playground-assets!DeepReadonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ComponentType",
              "canonicalReference": "@dcl/playground-assets!ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<T>>;\n    getOrNull(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DeepReadonly",
              "canonicalReference": "@dcl/playground-assets!DeepReadonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ComponentType",
              "canonicalReference": "@dcl/playground-assets!ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<T>> | null;\n    create(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ", val?: ConstructorType): "
            },
            {
              "kind": "Reference",
              "text": "ComponentType",
              "canonicalReference": "@dcl/playground-assets!ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<T>;\n    createOrReplace(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ", val?: ConstructorType): "
            },
            {
              "kind": "Reference",
              "text": "ComponentType",
              "canonicalReference": "@dcl/playground-assets!ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<T>;\n    deleteFrom(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ComponentType",
              "canonicalReference": "@dcl/playground-assets!ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<T> | null;\n    getMutable(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ComponentType",
              "canonicalReference": "@dcl/playground-assets!ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<T>;\n    getMutableOrNull(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ComponentType",
              "canonicalReference": "@dcl/playground-assets!ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<T> | null;\n    writeToByteBuffer(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ", buffer: "
            },
            {
              "kind": "Reference",
              "text": "ByteBuffer",
              "canonicalReference": "@dcl/playground-assets!ByteBuffer:type"
            },
            {
              "kind": "Content",
              "text": "): void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/component.d.ts",
          "releaseTag": "Public",
          "name": "ComponentDefinition",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ConstructorType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 6,
            "endIndex": 49
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!ComponentGetter:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ComponentGetter<T extends "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(engine: "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IEngine",
              "canonicalReference": "@dcl/playground-assets!IEngine:type"
            },
            {
              "kind": "Content",
              "text": ", 'defineComponentFromSchema'>) => T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/index.gen.d.ts",
          "releaseTag": "Public",
          "name": "ComponentGetter",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 4,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!ComponentSchema:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ComponentSchema<T extends "
            },
            {
              "kind": "Content",
              "text": "["
            },
            {
              "kind": "Reference",
              "text": "CompDef",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<any>, ..."
            },
            {
              "kind": "Reference",
              "text": "CompDef",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<any>[]]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [K in keyof T]: T[K] extends "
            },
            {
              "kind": "Reference",
              "text": "CompDef",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<any> ? "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<T[K]['getMutable']> : never;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/types.d.ts",
          "releaseTag": "Public",
          "name": "ComponentSchema",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!ComponentType:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ComponentType<T extends "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "EcsResult",
              "canonicalReference": "@dcl/playground-assets!EcsResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/component.d.ts",
          "releaseTag": "Public",
          "name": "ComponentType",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!Container:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function Container({ width, height, children }: "
            },
            {
              "kind": "Reference",
              "text": "ContainerPropTypes",
              "canonicalReference": "@dcl/playground-assets!ContainerPropTypes:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ReactEcs.JSX.Element",
              "canonicalReference": "@dcl/playground-assets!ReactEcs.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/components/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ width, height, children }",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "Container"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!ContainerPropTypes:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ContainerPropTypes = "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CommonProps",
              "canonicalReference": "@dcl/playground-assets!CommonProps:type"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "EntityPropTypes",
              "canonicalReference": "@dcl/playground-assets!EntityPropTypes:type"
            },
            {
              "kind": "Content",
              "text": "['uiTransform']"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/components/index.d.ts",
          "releaseTag": "Public",
          "name": "ContainerPropTypes",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!createInputSystem:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createInputSystem(engine: "
            },
            {
              "kind": "Reference",
              "text": "IEngine",
              "canonicalReference": "@dcl/playground-assets!IEngine:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IInputSystem",
              "canonicalReference": "@dcl/playground-assets!IInputSystem:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/input.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "engine",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "createInputSystem"
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!createPointerEventSystem:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createPointerEventSystem(engine: "
            },
            {
              "kind": "Reference",
              "text": "IEngine",
              "canonicalReference": "@dcl/playground-assets!IEngine:type"
            },
            {
              "kind": "Content",
              "text": ", inputSystem: "
            },
            {
              "kind": "Reference",
              "text": "IInputSystem",
              "canonicalReference": "@dcl/playground-assets!IInputSystem:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    removeOnClick(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": "): void;\n    removeOnPointerDown(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": "): void;\n    removeOnPointerUp(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": "): void;\n    onClick(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ", cb: "
            },
            {
              "kind": "Reference",
              "text": "EventSystemCallback",
              "canonicalReference": "@dcl/playground-assets!EventSystemCallback:type"
            },
            {
              "kind": "Content",
              "text": ", opts?: "
            },
            {
              "kind": "Reference",
              "text": "EventSystemOptions",
              "canonicalReference": "@dcl/playground-assets!EventSystemOptions:type"
            },
            {
              "kind": "Content",
              "text": "): void;\n    onPointerDown(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ", cb: "
            },
            {
              "kind": "Reference",
              "text": "EventSystemCallback",
              "canonicalReference": "@dcl/playground-assets!EventSystemCallback:type"
            },
            {
              "kind": "Content",
              "text": ", opts?: "
            },
            {
              "kind": "Reference",
              "text": "EventSystemOptions",
              "canonicalReference": "@dcl/playground-assets!EventSystemOptions:type"
            },
            {
              "kind": "Content",
              "text": "): void;\n    onPointerUp(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ", cb: "
            },
            {
              "kind": "Reference",
              "text": "EventSystemCallback",
              "canonicalReference": "@dcl/playground-assets!EventSystemCallback:type"
            },
            {
              "kind": "Content",
              "text": ", opts?: "
            },
            {
              "kind": "Reference",
              "text": "EventSystemOptions",
              "canonicalReference": "@dcl/playground-assets!EventSystemOptions:type"
            },
            {
              "kind": "Content",
              "text": "): void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/systems/events.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 30
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "engine",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "inputSystem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "createPointerEventSystem"
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!createReactBasedUiSystem:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createReactBasedUiSystem(engine: "
            },
            {
              "kind": "Reference",
              "text": "IEngine",
              "canonicalReference": "@dcl/playground-assets!IEngine:type"
            },
            {
              "kind": "Content",
              "text": ", pointerSystem: "
            },
            {
              "kind": "Reference",
              "text": "PointerEventsSystem",
              "canonicalReference": "@dcl/playground-assets!PointerEventsSystem:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ReactBasedUiSystem",
              "canonicalReference": "@dcl/playground-assets!ReactBasedUiSystem:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/system.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "engine",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "pointerSystem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "createReactBasedUiSystem"
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!createTaskSystem:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createTaskSystem(engine: "
            },
            {
              "kind": "Reference",
              "text": "IEngine",
              "canonicalReference": "@dcl/playground-assets!IEngine:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    executeTask(task: "
            },
            {
              "kind": "Reference",
              "text": "Task",
              "canonicalReference": "@dcl/playground-assets!Task:type"
            },
            {
              "kind": "Content",
              "text": "): void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/systems/async-task.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "engine",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "createTaskSystem"
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!cyclicParentingChecker:function(1)",
          "docComment": "/**\n * Transform parenting: cyclic dependency checker It checks only in modified Transforms\n *\n * Add this system with:\n * ```ts\n *  engine.addSystem(cyclicParentingChecker(engine))\n * ```\n *\n * ` And then it will check every tick the parenting.\n *\n * @params engine\n *\n * @returns a system\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cyclicParentingChecker(engine: "
            },
            {
              "kind": "Reference",
              "text": "IEngine",
              "canonicalReference": "@dcl/playground-assets!IEngine:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/systems/cyclicParentingChecker.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "engine",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "cyclicParentingChecker"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!DeepReadonly:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DeepReadonly<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyPrimitive",
              "canonicalReference": "@dcl/playground-assets!ReadonlyPrimitive:type"
            },
            {
              "kind": "Content",
              "text": " ? T : T extends "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<infer K, infer V> ? "
            },
            {
              "kind": "Reference",
              "text": "DeepReadonlyMap",
              "canonicalReference": "@dcl/playground-assets!DeepReadonlyMap:type"
            },
            {
              "kind": "Content",
              "text": "<K, V> : T extends "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<infer M> ? "
            },
            {
              "kind": "Reference",
              "text": "DeepReadonlySet",
              "canonicalReference": "@dcl/playground-assets!DeepReadonlySet:type"
            },
            {
              "kind": "Content",
              "text": "<M> : "
            },
            {
              "kind": "Reference",
              "text": "DeepReadonlyObject",
              "canonicalReference": "@dcl/playground-assets!DeepReadonlyObject:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/readonly.d.ts",
          "releaseTag": "Public",
          "name": "DeepReadonly",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!DeepReadonlyMap:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DeepReadonlyMap<K, V> = "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyMap",
              "canonicalReference": "!ReadonlyMap:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DeepReadonly",
              "canonicalReference": "@dcl/playground-assets!DeepReadonly:type"
            },
            {
              "kind": "Content",
              "text": "<K>, "
            },
            {
              "kind": "Reference",
              "text": "DeepReadonly",
              "canonicalReference": "@dcl/playground-assets!DeepReadonly:type"
            },
            {
              "kind": "Content",
              "text": "<V>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/readonly.d.ts",
          "releaseTag": "Public",
          "name": "DeepReadonlyMap",
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!DeepReadonlyObject:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DeepReadonlyObject<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly [K in keyof T]: "
            },
            {
              "kind": "Reference",
              "text": "DeepReadonly",
              "canonicalReference": "@dcl/playground-assets!DeepReadonly:type"
            },
            {
              "kind": "Content",
              "text": "<T[K]>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/readonly.d.ts",
          "releaseTag": "Public",
          "name": "DeepReadonlyObject",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!DeepReadonlySet:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DeepReadonlySet<T> = "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DeepReadonly",
              "canonicalReference": "@dcl/playground-assets!DeepReadonly:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/readonly.d.ts",
          "releaseTag": "Public",
          "name": "DeepReadonlySet",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!defineComponent:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function defineComponent<T extends "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": ", ConstructorType = "
            },
            {
              "kind": "Reference",
              "text": "ComponentType",
              "canonicalReference": "@dcl/playground-assets!ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ">(componentId: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", spec: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", constructorDefault?: "
            },
            {
              "kind": "Content",
              "text": "ConstructorType"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<T, ConstructorType>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/component.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "componentId",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            },
            {
              "parameterName": "spec",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "isOptional": false
            },
            {
              "parameterName": "constructorDefault",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ConstructorType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "name": "defineComponent"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!DEG2RAD:var",
          "docComment": "/**\n * Constant used to convert from Euler degrees to radians\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEG2RAD: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/types.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DEG2RAD",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!EcsElements:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EcsElements = "
            },
            {
              "kind": "Content",
              "text": "{\n    entity: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EntityComponents",
              "canonicalReference": "@dcl/playground-assets!EntityComponents:type"
            },
            {
              "kind": "Content",
              "text": ", 'onClick'> & "
            },
            {
              "kind": "Reference",
              "text": "CommonProps",
              "canonicalReference": "@dcl/playground-assets!CommonProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/react-ecs.d.ts",
          "releaseTag": "Public",
          "name": "EcsElements",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!EcsResult:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EcsResult<T extends "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": " ? "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<T['deserialize']> : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/component.d.ts",
          "releaseTag": "Public",
          "name": "EcsResult",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!Engine:function(1)",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function Engine(): "
            },
            {
              "kind": "Reference",
              "text": "IEngine",
              "canonicalReference": "@dcl/playground-assets!IEngine:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "Engine"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!engine:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "engine: "
            },
            {
              "kind": "Reference",
              "text": "IEngine",
              "canonicalReference": "@dcl/playground-assets!IEngine:type"
            }
          ],
          "fileUrlPath": "../ecs/dist/runtime/initialization/index.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "engine",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Entity:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Entity = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/entity.d.ts",
          "releaseTag": "Public",
          "name": "Entity",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!EntityComponents:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EntityComponents = "
            },
            {
              "kind": "Content",
              "text": "{\n    uiTransform: "
            },
            {
              "kind": "Reference",
              "text": "PBUiTransform",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    uiText: "
            },
            {
              "kind": "Reference",
              "text": "PBUiText",
              "canonicalReference": "@dcl/playground-assets!PBUiText:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    uiBackground: "
            },
            {
              "kind": "Reference",
              "text": "PBUiBackground",
              "canonicalReference": "@dcl/playground-assets!PBUiBackground:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    onClick: "
            },
            {
              "kind": "Reference",
              "text": "EventSystemCallback",
              "canonicalReference": "@dcl/playground-assets!EventSystemCallback:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/react-ecs.d.ts",
          "releaseTag": "Public",
          "name": "EntityComponents",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!EntityContainer:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function EntityContainer(): "
            },
            {
              "kind": "Content",
              "text": "{\n    generateEntity(dynamic?: boolean): "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    removeEntity(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n    entityExists(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n    getExistingEntities(): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/entity.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "EntityContainer"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!EntityPropTypes:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EntityPropTypes = "
            },
            {
              "kind": "Content",
              "text": "{\n    uiTransform?: "
            },
            {
              "kind": "Reference",
              "text": "UiTransformProps",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    uiText?: "
            },
            {
              "kind": "Reference",
              "text": "PBUiText",
              "canonicalReference": "@dcl/playground-assets!PBUiText:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    uiBackground?: "
            },
            {
              "kind": "Reference",
              "text": "PBUiBackground",
              "canonicalReference": "@dcl/playground-assets!PBUiBackground:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/components/types.d.ts",
          "releaseTag": "Public",
          "name": "EntityPropTypes",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!Epsilon:var",
          "docComment": "/**\n * Constant used to define the minimal number value in Babylon.js\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Epsilon = "
            },
            {
              "kind": "Content",
              "text": "0.000001"
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/types.d.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Epsilon",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!EventSystemCallback:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EventSystemCallback = "
            },
            {
              "kind": "Content",
              "text": "(event: "
            },
            {
              "kind": "Reference",
              "text": "PBPointerEventsResult_PointerCommand",
              "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult_PointerCommand:interface"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/systems/events.d.ts",
          "releaseTag": "Public",
          "name": "EventSystemCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!EventSystemOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EventSystemOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    button?: "
            },
            {
              "kind": "Reference",
              "text": "InputAction",
              "canonicalReference": "@dcl/playground-assets!InputAction:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    hoverText?: string;\n    maxDistance?: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/systems/events.d.ts",
          "releaseTag": "Public",
          "name": "EventSystemOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!ExcludeUndefined:type",
          "docComment": "/**\n * Excludes property keys from T where the property is assignable to U\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ExcludeUndefined<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [P in keyof T]: undefined extends T[P] ? never : P;\n}[keyof T]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/typing.d.ts",
          "releaseTag": "Public",
          "name": "ExcludeUndefined",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!executeTask:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "executeTask: "
            },
            {
              "kind": "Content",
              "text": "(task: "
            },
            {
              "kind": "Reference",
              "text": "Task",
              "canonicalReference": "@dcl/playground-assets!Task:type"
            },
            {
              "kind": "Content",
              "text": "<unknown>) => void"
            }
          ],
          "fileUrlPath": "../ecs/dist/runtime/initialization/index.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "executeTask",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!FloatArray:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FloatArray = "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/types.d.ts",
          "releaseTag": "Public",
          "name": "FloatArray",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!Font:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum Font "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/common/texts.gen.d.ts",
          "releaseTag": "Public",
          "name": "Font",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!Font.F_LIBERATION_SANS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "F_LIBERATION_SANS = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "F_LIBERATION_SANS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!Font.F_SANS_SERIF:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "F_SANS_SERIF = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "F_SANS_SERIF"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!GltfContainer:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "GltfContainer: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "GltfContainerSchema",
              "canonicalReference": "@dcl/playground-assets!GltfContainerSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "GltfContainer",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!GltfContainerSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "GltfContainerSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBGltfContainer",
              "canonicalReference": "@dcl/playground-assets!PBGltfContainer:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/GltfContainer.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "GltfContainerSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!IArray:function(1)",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function IArray<T>(type: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/Array.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "type",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IArray"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!IEngine:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IEngine = "
            },
            {
              "kind": "Content",
              "text": "{\n    addEntity(dynamic?: boolean): "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    addDynamicEntity(): "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    removeEntity(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": "): void;\n    removeEntityWithChildren(firstEntity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": "): void;\n    entityExists(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n    addSystem(system: "
            },
            {
              "kind": "Reference",
              "text": "SystemFn",
              "canonicalReference": "@dcl/playground-assets!SystemFn:type"
            },
            {
              "kind": "Content",
              "text": ", priority?: number, name?: string): void;\n    removeSystem(selector: string | "
            },
            {
              "kind": "Reference",
              "text": "SystemFn",
              "canonicalReference": "@dcl/playground-assets!SystemFn:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n    defineComponent<T extends "
            },
            {
              "kind": "Reference",
              "text": "Spec",
              "canonicalReference": "@dcl/playground-assets!Spec:interface"
            },
            {
              "kind": "Content",
              "text": ", ConstructorType = "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Result",
              "canonicalReference": "@dcl/playground-assets!Result:type"
            },
            {
              "kind": "Content",
              "text": "<T>>>(spec: T, componentId: number, constructorDefault?: ConstructorType): "
            },
            {
              "kind": "Reference",
              "text": "CompDef",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Result",
              "canonicalReference": "@dcl/playground-assets!Result:type"
            },
            {
              "kind": "Content",
              "text": "<T>>, "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Result",
              "canonicalReference": "@dcl/playground-assets!Result:type"
            },
            {
              "kind": "Content",
              "text": "<T>>>;\n    defineComponentFromSchema<T extends "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<ConstructorType>, ConstructorType>(spec: T, componentId: number, constructorDefault?: ConstructorType): "
            },
            {
              "kind": "Reference",
              "text": "CompDef",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<T, ConstructorType>;\n    getComponent<T extends "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": ">(componentId: number): "
            },
            {
              "kind": "Reference",
              "text": "CompDef",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<T>;\n    getEntitiesWith<T extends ["
            },
            {
              "kind": "Reference",
              "text": "CompDef",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<any>, ..."
            },
            {
              "kind": "Reference",
              "text": "CompDef",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<any>[]]>(...components: T): "
            },
            {
              "kind": "Reference",
              "text": "Iterable",
              "canonicalReference": "!Iterable:interface"
            },
            {
              "kind": "Content",
              "text": "<["
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ", ..."
            },
            {
              "kind": "Reference",
              "text": "ReadonlyComponentSchema",
              "canonicalReference": "@dcl/playground-assets!ReadonlyComponentSchema:type"
            },
            {
              "kind": "Content",
              "text": "<T>]>;\n    update(dt: number): void;\n    RootEntity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    PlayerEntity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    CameraEntity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    addTransport(transport: "
            },
            {
              "kind": "Reference",
              "text": "Transport",
              "canonicalReference": "@dcl/playground-assets!Transport:type"
            },
            {
              "kind": "Content",
              "text": "): void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/types.d.ts",
          "releaseTag": "Public",
          "name": "IEngine",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 58
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!IEnum:function(1)",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function IEnum<T>(type: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/basic/Enum.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "type",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IEnum"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!IInputSystem:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IInputSystem = "
            },
            {
              "kind": "Content",
              "text": "{\n    isTriggered: (inputAction: "
            },
            {
              "kind": "Reference",
              "text": "InputAction",
              "canonicalReference": "@dcl/playground-assets!InputAction:enum"
            },
            {
              "kind": "Content",
              "text": ", pointerEventType: "
            },
            {
              "kind": "Reference",
              "text": "PointerEventType",
              "canonicalReference": "@dcl/playground-assets!PointerEventType:enum"
            },
            {
              "kind": "Content",
              "text": ", entity?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n    isPressed: (inputAction: "
            },
            {
              "kind": "Reference",
              "text": "InputAction",
              "canonicalReference": "@dcl/playground-assets!InputAction:enum"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n    getInputCommand: (inputAction: "
            },
            {
              "kind": "Reference",
              "text": "InputAction",
              "canonicalReference": "@dcl/playground-assets!InputAction:enum"
            },
            {
              "kind": "Content",
              "text": ", pointerEventType: "
            },
            {
              "kind": "Reference",
              "text": "PointerEventType",
              "canonicalReference": "@dcl/playground-assets!PointerEventType:enum"
            },
            {
              "kind": "Content",
              "text": ", entity?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "PBPointerEventsResult_PointerCommand",
              "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult_PointerCommand:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/input.d.ts",
          "releaseTag": "Public",
          "name": "IInputSystem",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 18
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!IMap:function(1)",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function IMap<T extends "
            },
            {
              "kind": "Reference",
              "text": "Spec",
              "canonicalReference": "@dcl/playground-assets!Spec:interface"
            },
            {
              "kind": "Content",
              "text": ">(spec: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Result",
              "canonicalReference": "@dcl/playground-assets!Result:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/Map.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "spec",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IMap"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!IncludeUndefined:type",
          "docComment": "/**\n * Include property keys from T where the property is assignable to U\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IncludeUndefined<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [P in keyof T]: undefined extends T[P] ? P : never;\n}[keyof T]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/typing.d.ts",
          "releaseTag": "Public",
          "name": "IncludeUndefined",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!InputAction:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum InputAction "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/common/input_action.gen.d.ts",
          "releaseTag": "Public",
          "name": "InputAction",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!InputAction.IA_ACTION_3:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IA_ACTION_3 = "
                },
                {
                  "kind": "Content",
                  "text": "10"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IA_ACTION_3"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!InputAction.IA_ACTION_4:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IA_ACTION_4 = "
                },
                {
                  "kind": "Content",
                  "text": "11"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IA_ACTION_4"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!InputAction.IA_ACTION_5:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IA_ACTION_5 = "
                },
                {
                  "kind": "Content",
                  "text": "12"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IA_ACTION_5"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!InputAction.IA_ACTION_6:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IA_ACTION_6 = "
                },
                {
                  "kind": "Content",
                  "text": "13"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IA_ACTION_6"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!InputAction.IA_ANY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IA_ANY = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IA_ANY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!InputAction.IA_BACKWARD:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IA_BACKWARD = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IA_BACKWARD"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!InputAction.IA_FORWARD:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IA_FORWARD = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IA_FORWARD"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!InputAction.IA_JUMP:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IA_JUMP = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IA_JUMP"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!InputAction.IA_LEFT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IA_LEFT = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IA_LEFT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!InputAction.IA_POINTER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IA_POINTER = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IA_POINTER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!InputAction.IA_PRIMARY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IA_PRIMARY = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IA_PRIMARY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!InputAction.IA_RIGHT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IA_RIGHT = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IA_RIGHT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!InputAction.IA_SECONDARY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IA_SECONDARY = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IA_SECONDARY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!InputAction.IA_WALK:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IA_WALK = "
                },
                {
                  "kind": "Content",
                  "text": "9"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IA_WALK"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!inputSystem:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "inputSystem: "
            },
            {
              "kind": "Content",
              "text": "import(\"../../engine\")."
            },
            {
              "kind": "Reference",
              "text": "IInputSystem",
              "canonicalReference": "@dcl/playground-assets!IInputSystem:type"
            }
          ],
          "fileUrlPath": "../ecs/dist/runtime/initialization/index.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "inputSystem",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!IOptional:function(1)",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function IOptional<T>(spec: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<T | undefined>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/Optional.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "spec",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IOptional"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!ISchema:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ISchema<T = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    serialize(value: T, builder: "
            },
            {
              "kind": "Reference",
              "text": "ByteBuffer",
              "canonicalReference": "@dcl/playground-assets!ByteBuffer:type"
            },
            {
              "kind": "Content",
              "text": "): void;\n    deserialize(reader: "
            },
            {
              "kind": "Reference",
              "text": "ByteBuffer",
              "canonicalReference": "@dcl/playground-assets!ByteBuffer:type"
            },
            {
              "kind": "Content",
              "text": "): T;\n    create(): T;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/ISchema.d.ts",
          "releaseTag": "Public",
          "name": "ISchema",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!isListener:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isListener: "
            },
            {
              "kind": "Content",
              "text": "(key: string) => "
            },
            {
              "kind": "Reference",
              "text": "key",
              "canonicalReference": "@dcl/playground-assets!key"
            },
            {
              "kind": "Content",
              "text": " is \"onClick\""
            }
          ],
          "fileUrlPath": "../react-ecs/dist/components/listeners/types.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "isListener",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/playground-assets!JSX:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace JSX "
            }
          ],
          "fileUrlPath": "../react-ecs/dist/react-ecs.d.ts",
          "releaseTag": "Public",
          "name": "JSX",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Interface",
              "canonicalReference": "@dcl/playground-assets!JSX.Component:interface",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface Component "
                }
              ],
              "releaseTag": "Public",
              "name": "Component",
              "preserveMemberOrder": false,
              "members": [],
              "extendsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "@dcl/playground-assets!JSX.Element:interface",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface Element "
                }
              ],
              "releaseTag": "Public",
              "name": "Element",
              "preserveMemberOrder": false,
              "members": [],
              "extendsTokenRanges": []
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!JSX.IntrinsicElements:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type IntrinsicElements = "
                },
                {
                  "kind": "Reference",
                  "text": "EcsElements",
                  "canonicalReference": "@dcl/playground-assets!EcsElements:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "IntrinsicElements",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Key:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Key = "
            },
            {
              "kind": "Content",
              "text": "number | string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/components/types.d.ts",
          "releaseTag": "Public",
          "name": "Key",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Listeners:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Listeners = "
            },
            {
              "kind": "Content",
              "text": "{\n    onClick?: "
            },
            {
              "kind": "Reference",
              "text": "EventSystemCallback",
              "canonicalReference": "@dcl/playground-assets!EventSystemCallback:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/components/listeners/types.d.ts",
          "releaseTag": "Public",
          "name": "Listeners",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!Material:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Material: "
            },
            {
              "kind": "Content",
              "text": "import(\"./components/types\")."
            },
            {
              "kind": "Reference",
              "text": "MaterialComponentDefinitionExtended",
              "canonicalReference": "@dcl/playground-assets!MaterialComponentDefinitionExtended:interface"
            }
          ],
          "fileUrlPath": "../ecs/dist/index.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Material",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!MaterialComponentDefinition:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MaterialComponentDefinition = "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBMaterial",
              "canonicalReference": "@dcl/playground-assets!PBMaterial:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "PBMaterial",
              "canonicalReference": "@dcl/playground-assets!PBMaterial:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/extended/Material.d.ts",
          "releaseTag": "Public",
          "name": "MaterialComponentDefinition",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!MaterialComponentDefinitionExtended:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MaterialComponentDefinitionExtended extends "
            },
            {
              "kind": "Reference",
              "text": "MaterialComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!MaterialComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/extended/Material.d.ts",
          "releaseTag": "Public",
          "name": "MaterialComponentDefinitionExtended",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!MaterialComponentDefinitionExtended#setBasicMaterial:member",
              "docComment": "/**\n * Create or replace the component Material in the entity specified\n *\n * @param entity - the entity to link the component\n *\n * @param material - the Unlit data for this material\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setBasicMaterial: "
                },
                {
                  "kind": "Content",
                  "text": "(entity: "
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": ", material: "
                },
                {
                  "kind": "Reference",
                  "text": "PBMaterial_UnlitMaterial",
                  "canonicalReference": "@dcl/playground-assets!PBMaterial_UnlitMaterial:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setBasicMaterial",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!MaterialComponentDefinitionExtended#setPbrMaterial:member",
              "docComment": "/**\n * Create or replace the component Material in the entity specified\n *\n * @param entity - the entity to link the component\n *\n * @param material - the PBR data for this material\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setPbrMaterial: "
                },
                {
                  "kind": "Content",
                  "text": "(entity: "
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": ", material: "
                },
                {
                  "kind": "Reference",
                  "text": "PBMaterial_PbrMaterial",
                  "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setPbrMaterial",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!MaterialComponentDefinitionExtended#Texture:member",
              "docComment": "/**\n * Texture helpers with constructor\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Texture: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureHelper",
                  "canonicalReference": "@dcl/playground-assets!TextureHelper:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Texture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!MaterialSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MaterialSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBMaterial",
              "canonicalReference": "@dcl/playground-assets!PBMaterial:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/Material.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MaterialSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!MaterialTransparencyMode:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum MaterialTransparencyMode "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/material.gen.d.ts",
          "releaseTag": "Public",
          "name": "MaterialTransparencyMode",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!MaterialTransparencyMode.MTM_ALPHA_BLEND:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MTM_ALPHA_BLEND = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MTM_ALPHA_BLEND"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!MaterialTransparencyMode.MTM_ALPHA_TEST:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MTM_ALPHA_TEST = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MTM_ALPHA_TEST"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!MaterialTransparencyMode.MTM_ALPHA_TEST_AND_ALPHA_BLEND:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MTM_ALPHA_TEST_AND_ALPHA_BLEND = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MTM_ALPHA_TEST_AND_ALPHA_BLEND"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!MaterialTransparencyMode.MTM_AUTO:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MTM_AUTO = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MTM_AUTO"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!MaterialTransparencyMode.MTM_OPAQUE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MTM_OPAQUE = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MTM_OPAQUE"
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/playground-assets!Matrix:namespace",
          "docComment": "/**\n * Class used to store matrix data (4x4)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Matrix "
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/Matrix.d.ts",
          "releaseTag": "Public",
          "name": "Matrix",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.add:function(1)",
              "docComment": "/**\n * Adds the current matrix with a second one\n *\n * @param other - defines the matrix to add\n *\n * @returns a new matrix as the addition of the current matrix and the given one\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function add(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", other: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "add"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.addAtIndex:function(1)",
              "docComment": "/**\n * add a value at the specified position in the current Matrix\n *\n * @param index - the index of the value within the matrix. between 0 and 15.\n *\n * @param value - the value to be added\n *\n * @returns the current updated matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function addAtIndex(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "addAtIndex"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.addToRef:function(1)",
              "docComment": "/**\n * Sets the given matrix \"result\" to the addition of the current matrix and the given one\n *\n * @param other - defines the matrix to add\n *\n * @param result - defines the target matrix\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function addToRef(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", other: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "addToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.addToSelf:function(1)",
              "docComment": "/**\n * Adds in place the given matrix to the current matrix\n *\n * @param other - defines the second operand\n *\n * @returns the current updated matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function addToSelf(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", other: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "addToSelf"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.asArray:function(1)",
              "docComment": "/**\n * Returns the matrix as a FloatArray\n *\n * @returns the matrix underlying array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function asArray(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix4x4",
                  "canonicalReference": "@dcl/playground-assets!Matrix.Matrix4x4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "asArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.clone:function(1)",
              "docComment": "/**\n * Clone the current matrix\n *\n * @returns a new matrix from the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clone(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "clone"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.compose:function(1)",
              "docComment": "/**\n * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n *\n * @param scale - defines the scale vector3\n *\n * @param rotation - defines the rotation quaternion\n *\n * @param translation - defines the translation vector3\n *\n * @returns a new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function compose(scale: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", rotation: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion.ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", translation: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "rotation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "translation",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "compose"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.composeToRef:function(1)",
              "docComment": "/**\n * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n *\n * @param scale - defines the scale vector3\n *\n * @param rotation - defines the rotation quaternion\n *\n * @param translation - defines the translation vector3\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function composeToRef(scale: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", rotation: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion.ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", translation: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "rotation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "translation",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "composeToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.copy:function(1)",
              "docComment": "/**\n * Copy the current matrix from the given one\n *\n * @param other - defines the source matrix\n *\n * @returns the current updated matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function copy(from: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "from",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "copy"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.copyToArray:function(1)",
              "docComment": "/**\n * Populates the given array from the starting index with the current matrix values\n *\n * @param array - defines the target array\n *\n * @param offset - defines the offset in the target array where to start storing values\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function copyToArray(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", arrayDest: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/playground-assets!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offsetDest?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "arrayDest",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "offsetDest",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "copyToArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.create:function(1)",
              "docComment": "/**\n * Creates an empty matrix (filled with zeros)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function create(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "create"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.decompose:function(1)",
              "docComment": "/**\n * Decomposes the current Matrix into a translation, rotation and scaling components\n *\n * @param scale - defines the scale vector3 given as a reference to update\n *\n * @param rotation - defines the rotation quaternion given as a reference to update\n *\n * @param translation - defines the translation vector3 given as a reference to update\n *\n * @returns true if operation was successful\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function decompose(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", rotation?: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion.MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", translation?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "rotation",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "translation",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "name": "decompose"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.decomposeLerp:function(1)",
              "docComment": "/**\n * Builds a new matrix whose values are computed by: * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n *\n * @param startValue - defines the first matrix\n *\n * @param endValue - defines the second matrix\n *\n * @param gradient - defines the gradient between the two matrices\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function decomposeLerp(startValue: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", endValue: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", gradient: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "startValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "endValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "gradient",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "decomposeLerp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.decomposeLerpToRef:function(1)",
              "docComment": "/**\n * Update a matrix to values which are computed by: * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n *\n * @param startValue - defines the first matrix\n *\n * @param endValue - defines the second matrix\n *\n * @param gradient - defines the gradient between the two matrices\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function decomposeLerpToRef(startValue: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", endValue: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", gradient: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "startValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "endValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "gradient",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "decomposeLerpToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.determinant:function(1)",
              "docComment": "/**\n * Gets the determinant of the matrix\n *\n * @returns the matrix determinant\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function determinant(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "determinant"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.equals:function(1)",
              "docComment": "/**\n * Check equality between self matrix and a second one\n *\n * @param value - defines the second matrix to compare\n *\n * @returns true is the current matrix and the given one values are strictly equal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function equals(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.fromArray:function(1)",
              "docComment": "/**\n * Creates a matrix from an array\n *\n * @param array - defines the source array\n *\n * @param offset - defines an offset in the source array\n *\n * @returns a new Matrix set from the starting index of the given array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix4x4",
                  "canonicalReference": "@dcl/playground-assets!Matrix.Matrix4x4:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "fromArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.fromArrayToRef:function(1)",
              "docComment": "/**\n * Copy the content of an array into a given matrix\n *\n * @param array - defines the source array\n *\n * @param offset - defines an offset in the source array\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromArrayToRef(array: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix4x4",
                  "canonicalReference": "@dcl/playground-assets!Matrix.Matrix4x4:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "fromArrayToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.fromFloatArrayToRefScaled:function(1)",
              "docComment": "/**\n * Stores an array into a matrix after having multiplied each component by a given factor\n *\n * @param array - defines the source array\n *\n * @param offset - defines the offset in the source array\n *\n * @param scale - defines the scaling factor\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromFloatArrayToRefScaled(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/playground-assets!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "fromFloatArrayToRefScaled"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.fromQuaternionToRef:function(1)",
              "docComment": "/**\n * Creates a rotation matrix from a quaternion and stores it in a target matrix\n *\n * @param quat - defines the quaternion to use\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromQuaternionToRef(quat: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion.ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "quat",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "fromQuaternionToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.fromValues:function(1)",
              "docComment": "/**\n * Creates new matrix from a list of values (16)\n *\n * @param initialM11 - defines 1st value of 1st row\n *\n * @param initialM12 - defines 2nd value of 1st row\n *\n * @param initialM13 - defines 3rd value of 1st row\n *\n * @param initialM14 - defines 4th value of 1st row\n *\n * @param initialM21 - defines 1st value of 2nd row\n *\n * @param initialM22 - defines 2nd value of 2nd row\n *\n * @param initialM23 - defines 3rd value of 2nd row\n *\n * @param initialM24 - defines 4th value of 2nd row\n *\n * @param initialM31 - defines 1st value of 3rd row\n *\n * @param initialM32 - defines 2nd value of 3rd row\n *\n * @param initialM33 - defines 3rd value of 3rd row\n *\n * @param initialM34 - defines 4th value of 3rd row\n *\n * @param initialM41 - defines 1st value of 4th row\n *\n * @param initialM42 - defines 2nd value of 4th row\n *\n * @param initialM43 - defines 3rd value of 4th row\n *\n * @param initialM44 - defines 4th value of 4th row\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromValues(initialM11: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM12: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM13: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM14: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM21: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM22: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM23: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM24: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM31: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM32: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM33: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM34: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM41: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM42: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM43: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM44: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 33,
                "endIndex": 34
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "initialM11",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM12",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM13",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM14",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM21",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM22",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM23",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM24",
                  "parameterTypeTokenRange": {
                    "startIndex": 15,
                    "endIndex": 16
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM31",
                  "parameterTypeTokenRange": {
                    "startIndex": 17,
                    "endIndex": 18
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM32",
                  "parameterTypeTokenRange": {
                    "startIndex": 19,
                    "endIndex": 20
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM33",
                  "parameterTypeTokenRange": {
                    "startIndex": 21,
                    "endIndex": 22
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM34",
                  "parameterTypeTokenRange": {
                    "startIndex": 23,
                    "endIndex": 24
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM41",
                  "parameterTypeTokenRange": {
                    "startIndex": 25,
                    "endIndex": 26
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM42",
                  "parameterTypeTokenRange": {
                    "startIndex": 27,
                    "endIndex": 28
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM43",
                  "parameterTypeTokenRange": {
                    "startIndex": 29,
                    "endIndex": 30
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM44",
                  "parameterTypeTokenRange": {
                    "startIndex": 31,
                    "endIndex": 32
                  },
                  "isOptional": false
                }
              ],
              "name": "fromValues"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.fromValuesToRef:function(1)",
              "docComment": "/**\n * Stores a list of values (16) inside a given matrix\n *\n * @param initialM11 - defines 1st value of 1st row\n *\n * @param initialM12 - defines 2nd value of 1st row\n *\n * @param initialM13 - defines 3rd value of 1st row\n *\n * @param initialM14 - defines 4th value of 1st row\n *\n * @param initialM21 - defines 1st value of 2nd row\n *\n * @param initialM22 - defines 2nd value of 2nd row\n *\n * @param initialM23 - defines 3rd value of 2nd row\n *\n * @param initialM24 - defines 4th value of 2nd row\n *\n * @param initialM31 - defines 1st value of 3rd row\n *\n * @param initialM32 - defines 2nd value of 3rd row\n *\n * @param initialM33 - defines 3rd value of 3rd row\n *\n * @param initialM34 - defines 4th value of 3rd row\n *\n * @param initialM41 - defines 1st value of 4th row\n *\n * @param initialM42 - defines 2nd value of 4th row\n *\n * @param initialM43 - defines 3rd value of 4th row\n *\n * @param initialM44 - defines 4th value of 4th row\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromValuesToRef(initialM11: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM12: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM13: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM14: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM21: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM22: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM23: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM24: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM31: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM32: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM33: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM34: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM41: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM42: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM43: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM44: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 35,
                "endIndex": 36
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "initialM11",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM12",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM13",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM14",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM21",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM22",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM23",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM24",
                  "parameterTypeTokenRange": {
                    "startIndex": 15,
                    "endIndex": 16
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM31",
                  "parameterTypeTokenRange": {
                    "startIndex": 17,
                    "endIndex": 18
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM32",
                  "parameterTypeTokenRange": {
                    "startIndex": 19,
                    "endIndex": 20
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM33",
                  "parameterTypeTokenRange": {
                    "startIndex": 21,
                    "endIndex": 22
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM34",
                  "parameterTypeTokenRange": {
                    "startIndex": 23,
                    "endIndex": 24
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM41",
                  "parameterTypeTokenRange": {
                    "startIndex": 25,
                    "endIndex": 26
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM42",
                  "parameterTypeTokenRange": {
                    "startIndex": 27,
                    "endIndex": 28
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM43",
                  "parameterTypeTokenRange": {
                    "startIndex": 29,
                    "endIndex": 30
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialM44",
                  "parameterTypeTokenRange": {
                    "startIndex": 31,
                    "endIndex": 32
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 33,
                    "endIndex": 34
                  },
                  "isOptional": false
                }
              ],
              "name": "fromValuesToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.fromXYZAxesToRef:function(1)",
              "docComment": "/**\n * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\n *\n * @param xaxis - defines the value of the 1st axis\n *\n * @param yaxis - defines the value of the 2nd axis\n *\n * @param zaxis - defines the value of the 3rd axis\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromXYZAxesToRef(xaxis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", yaxis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", zaxis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "xaxis",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "yaxis",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "zaxis",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "fromXYZAxesToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.GetAsMatrix2x2:function(1)",
              "docComment": "/**\n * Extracts a 2x2 matrix from a given matrix and store the result in a FloatArray\n *\n * @param matrix - defines the matrix to use\n *\n * @returns a new FloatArray array with 4 elements : the 2x2 matrix extracted from the given matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function GetAsMatrix2x2(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/playground-assets!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "GetAsMatrix2x2"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.GetAsMatrix3x3:function(1)",
              "docComment": "/**\n * Extracts a 3x3 matrix from a given matrix and store the result in a FloatArray\n *\n * @param matrix - defines the matrix to use\n *\n * @returns a new FloatArray array with 9 elements : the 3x3 matrix extracted from the given matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function GetAsMatrix3x3(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/playground-assets!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "GetAsMatrix3x3"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.getHashCode:function(1)",
              "docComment": "/**\n * Gets the hash code of the current matrix\n *\n * @returns the hash code\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getHashCode(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getHashCode"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.getRotationMatrix:function(1)",
              "docComment": "/**\n * Gets only rotation part of the current matrix\n *\n * @returns a new matrix sets to the extracted rotation matrix from the current one\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getRotationMatrix(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getRotationMatrix"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.getRotationMatrixToRef:function(1)",
              "docComment": "/**\n * Extracts the rotation matrix from the current one and sets it as the given \"result\"\n *\n * @param result - defines the target matrix to store data to\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getRotationMatrixToRef(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "getRotationMatrixToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.getTranslation:function(1)",
              "docComment": "/**\n * Gets the translation value of the current matrix\n *\n * @returns a new Vector3 as the extracted translation from the matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getTranslation(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getTranslation"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.getTranslationToRef:function(1)",
              "docComment": "/**\n * Fill a Vector3 with the extracted translation from the matrix\n *\n * @param result - defines the Vector3 where to store the translation\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getTranslationToRef(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "getTranslationToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.Identity:function(1)",
              "docComment": "/**\n * Creates a new identity matrix\n *\n * @returns a new identity matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Identity(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Identity"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.IdentityReadonly:function(1)",
              "docComment": "/**\n * Gets an identity matrix that must not be updated\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function IdentityReadonly(): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "IdentityReadonly"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.IdentityToRef:function(1)",
              "docComment": "/**\n * Creates a new identity matrix and stores the result in a given matrix\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function IdentityToRef(result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "IdentityToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.invert:function(1)",
              "docComment": "/**\n * Creates a new matrix as the invert of a given matrix\n *\n * @param source - defines the source matrix\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function invert(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "invert"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.invertToRef:function(1)",
              "docComment": "/**\n * Sets the given matrix to the current inverted Matrix\n *\n * @param other - defines the target matrix\n *\n * @returns the unmodified current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function invertToRef(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "invertToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.isIdentityAs3x2Update:function(1)",
              "docComment": "/**\n * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\n *\n * @returns true is the matrix is the identity matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isIdentityAs3x2Update(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isIdentityAs3x2Update"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.isIdentityUpdate:function(1)",
              "docComment": "/**\n * Check if the current matrix is identity\n *\n * @returns true is the matrix is the identity matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isIdentityUpdate(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isIdentityUpdate"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.lerp:function(1)",
              "docComment": "/**\n * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n *\n * @param startValue - defines the start value\n *\n * @param endValue - defines the end value\n *\n * @param gradient - defines the gradient factor\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerp(startValue: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", endValue: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", gradient: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "startValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "endValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "gradient",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "lerp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.lerpToRef:function(1)",
              "docComment": "/**\n * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n *\n * @param startValue - defines the start value\n *\n * @param endValue - defines the end value\n *\n * @param gradient - defines the gradient factor\n *\n * @param result - defines the Matrix object where to store data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerpToRef(startValue: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", endValue: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", gradient: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "startValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "endValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "gradient",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "lerpToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.LookAtLH:function(1)",
              "docComment": "/**\n * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\" self function works in left handed mode\n *\n * @param eye - defines the final position of the entity\n *\n * @param target - defines where the entity should look at\n *\n * @param up - defines the up vector for the entity\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function LookAtLH(eye: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", up: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eye",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "LookAtLH"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.lookAtLHToRef:function(1)",
              "docComment": "/**\n * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\". self function works in left handed mode\n *\n * @param eye - defines the final position of the entity\n *\n * @param target - defines where the entity should look at\n *\n * @param up - defines the up vector for the entity\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lookAtLHToRef(eye: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", up: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eye",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "lookAtLHToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.lookAtRH:function(1)",
              "docComment": "/**\n * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\" self function works in right handed mode\n *\n * @param eye - defines the final position of the entity\n *\n * @param target - defines where the entity should look at\n *\n * @param up - defines the up vector for the entity\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lookAtRH(eye: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", up: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eye",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "lookAtRH"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.lookAtRHToRef:function(1)",
              "docComment": "/**\n * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\". self function works in right handed mode\n *\n * @param eye - defines the final position of the entity\n *\n * @param target - defines where the entity should look at\n *\n * @param up - defines the up vector for the entity\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lookAtRHToRef(eye: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", up: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eye",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "lookAtRHToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.m:function(1)",
              "docComment": "/**\n * Gets the internal data of the matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function m(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix4x4",
                  "canonicalReference": "@dcl/playground-assets!Matrix.Matrix4x4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "m"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Matrix.Matrix4x4:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Matrix4x4 = "
                },
                {
                  "kind": "Content",
                  "text": "[\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number\n    ]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Matrix4x4",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.multiply:function(1)",
              "docComment": "/**\n * Multiply two matrices\n *\n * @param other - defines the second operand\n *\n * @returns a new matrix set with the multiplication result of the current Matrix and the given one\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiply(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", other: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.multiplyAtIndex:function(1)",
              "docComment": "/**\n * mutiply the specified position in the current Matrix by a value\n *\n * @param index - the index of the value within the matrix. between 0 and 15.\n *\n * @param value - the value to be added\n *\n * @returns the current updated matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyAtIndex(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "multiplyAtIndex"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.multiplyToArray:function(1)",
              "docComment": "/**\n * Sets the FloatArray \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\n *\n * @param other - defines the second operand\n *\n * @param result - defines the array where to store the multiplication\n *\n * @param offset - defines the offset in the target array where to start storing values\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyToArray(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", other: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/playground-assets!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "multiplyToArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.multiplyToRef:function(1)",
              "docComment": "/**\n * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\n *\n * @param other - defines the second operand\n *\n * @param result - defines the matrix where to store the multiplication\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyToRef(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", other: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type MutableMatrix = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        updateFlag: number;\n        isIdentity: boolean;\n        isIdentity3x2: boolean;\n        _isIdentityDirty: boolean;\n        _isIdentity3x2Dirty: boolean;\n        _m: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix4x4",
                  "canonicalReference": "@dcl/playground-assets!Matrix.Matrix4x4:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MutableMatrix",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.normalMatrixToRef:function(1)",
              "docComment": "/**\n * Writes to the given matrix a normal matrix, computed from self one (using values from identity matrix for fourth row and column).\n *\n * @param ref - matrix to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalMatrixToRef(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", ref: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "ref",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "normalMatrixToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.orthoLH:function(1)",
              "docComment": "/**\n * Create a left-handed orthographic projection matrix\n *\n * @param width - defines the viewport width\n *\n * @param height - defines the viewport height\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @returns a new matrix as a left-handed orthographic projection matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function orthoLH(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "orthoLH"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.orthoLHToRef:function(1)",
              "docComment": "/**\n * Store a left-handed orthographic projection to a given matrix\n *\n * @param width - defines the viewport width\n *\n * @param height - defines the viewport height\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function orthoLHToRef(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "name": "orthoLHToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.OrthoOffCenterLH:function(1)",
              "docComment": "/**\n * Create a left-handed orthographic projection matrix\n *\n * @param left - defines the viewport left coordinate\n *\n * @param right - defines the viewport right coordinate\n *\n * @param bottom - defines the viewport bottom coordinate\n *\n * @param top - defines the viewport top coordinate\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @returns a new matrix as a left-handed orthographic projection matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function OrthoOffCenterLH(left: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", bottom: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", top: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "bottom",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "top",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  },
                  "isOptional": false
                }
              ],
              "name": "OrthoOffCenterLH"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.orthoOffCenterLHToRef:function(1)",
              "docComment": "/**\n * Stores a left-handed orthographic projection into a given matrix\n *\n * @param left - defines the viewport left coordinate\n *\n * @param right - defines the viewport right coordinate\n *\n * @param bottom - defines the viewport bottom coordinate\n *\n * @param top - defines the viewport top coordinate\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function orthoOffCenterLHToRef(left: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", bottom: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", top: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "bottom",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "top",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  },
                  "isOptional": false
                }
              ],
              "name": "orthoOffCenterLHToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.orthoOffCenterRH:function(1)",
              "docComment": "/**\n * Creates a right-handed orthographic projection matrix\n *\n * @param left - defines the viewport left coordinate\n *\n * @param right - defines the viewport right coordinate\n *\n * @param bottom - defines the viewport bottom coordinate\n *\n * @param top - defines the viewport top coordinate\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @returns a new matrix as a right-handed orthographic projection matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function orthoOffCenterRH(left: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", bottom: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", top: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "bottom",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "top",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  },
                  "isOptional": false
                }
              ],
              "name": "orthoOffCenterRH"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.orthoOffCenterRHToRef:function(1)",
              "docComment": "/**\n * Stores a right-handed orthographic projection into a given matrix\n *\n * @param left - defines the viewport left coordinate\n *\n * @param right - defines the viewport right coordinate\n *\n * @param bottom - defines the viewport bottom coordinate\n *\n * @param top - defines the viewport top coordinate\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function orthoOffCenterRHToRef(left: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", bottom: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", top: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "bottom",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "top",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  },
                  "isOptional": false
                }
              ],
              "name": "orthoOffCenterRHToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.perspectiveFovLH:function(1)",
              "docComment": "/**\n * Creates a left-handed perspective projection matrix\n *\n * @param fov - defines the horizontal field of view\n *\n * @param aspect - defines the aspect ratio\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @returns a new matrix as a left-handed perspective projection matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function perspectiveFovLH(fov: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", aspect: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "aspect",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "perspectiveFovLH"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.perspectiveFovLHToRef:function(1)",
              "docComment": "/**\n * Stores a left-handed perspective projection into a given matrix\n *\n * @param fov - defines the horizontal field of view\n *\n * @param aspect - defines the aspect ratio\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @param result - defines the target matrix\n *\n * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function perspectiveFovLHToRef(fov: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", aspect: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", isVerticalFovFixed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "aspect",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "isVerticalFovFixed",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  },
                  "isOptional": true
                }
              ],
              "name": "perspectiveFovLHToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.PerspectiveFovRH:function(1)",
              "docComment": "/**\n * Creates a right-handed perspective projection matrix\n *\n * @param fov - defines the horizontal field of view\n *\n * @param aspect - defines the aspect ratio\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @returns a new matrix as a right-handed perspective projection matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function PerspectiveFovRH(fov: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", aspect: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "aspect",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "PerspectiveFovRH"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.perspectiveFovRHToRef:function(1)",
              "docComment": "/**\n * Stores a right-handed perspective projection into a given matrix\n *\n * @param fov - defines the horizontal field of view\n *\n * @param aspect - defines the aspect ratio\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @param result - defines the target matrix\n *\n * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function perspectiveFovRHToRef(fov: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", aspect: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", isVerticalFovFixed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "aspect",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "isVerticalFovFixed",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  },
                  "isOptional": true
                }
              ],
              "name": "perspectiveFovRHToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.perspectiveFovWebVRToRef:function(1)",
              "docComment": "/**\n * Stores a perspective projection for WebVR info a given matrix\n *\n * @param fov - defines the field of view\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @param result - defines the target matrix\n *\n * @param rightHanded - defines if the matrix must be in right-handed mode (false by default)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function perspectiveFovWebVRToRef(fov: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        upDegrees: number;\n        downDegrees: number;\n        leftDegrees: number;\n        rightDegrees: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", rightHanded?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "rightHanded",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": true
                }
              ],
              "name": "perspectiveFovWebVRToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.perspectiveLH:function(1)",
              "docComment": "/**\n * Creates a left-handed perspective projection matrix\n *\n * @param width - defines the viewport width\n *\n * @param height - defines the viewport height\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @returns a new matrix as a left-handed perspective projection matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function perspectiveLH(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "perspectiveLH"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ReadonlyMatrix = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly updateFlag: number;\n        readonly isIdentity: boolean;\n        readonly isIdentity3x2: boolean;\n        readonly _isIdentityDirty: boolean;\n        readonly _isIdentity3x2Dirty: boolean;\n        readonly _m: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix4x4",
                  "canonicalReference": "@dcl/playground-assets!Matrix.Matrix4x4:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ReadonlyMatrix",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.reflection:function(1)",
              "docComment": "/**\n * Computes a reflection matrix from a plane\n *\n * @param plane - defines the reflection plane\n *\n * @returns a new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function reflection(plane: "
                },
                {
                  "kind": "Reference",
                  "text": "Plane.ReadonlyPlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.ReadonlyPlane:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "plane",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "reflection"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.reflectionToRef:function(1)",
              "docComment": "/**\n * Computes a reflection matrix from a plane\n *\n * @param plane - defines the reflection plane\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function reflectionToRef(_plane: "
                },
                {
                  "kind": "Reference",
                  "text": "Plane.ReadonlyPlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.ReadonlyPlane:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "_plane",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "reflectionToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.removeRotationAndScaling:function(1)",
              "docComment": "/**\n * Remove rotation and scaling part from the matrix\n *\n * @returns the updated matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function removeRotationAndScaling(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "removeRotationAndScaling"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.reset:function(1)",
              "docComment": "/**\n * Sets all the matrix elements to zero\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function reset(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "reset"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.rotationAxis:function(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the given axis\n *\n * @param axis - defines the axis to use\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotationAxis(axis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "rotationAxis"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.rotationAxisToRef:function(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\n *\n * @param axis - defines the axis to use\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotationAxisToRef(_axis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "_axis",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "rotationAxisToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.RotationX:function(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the X axis\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function RotationX(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "RotationX"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.rotationXToRef:function(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotationXToRef(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "rotationXToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.rotationY:function(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the Y axis\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotationY(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "rotationY"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.rotationYawPitchRoll:function(1)",
              "docComment": "/**\n * Creates a rotation matrix\n *\n * @param yaw - defines the yaw angle in radians (Y axis)\n *\n * @param pitch - defines the pitch angle in radians (X axis)\n *\n * @param roll - defines the roll angle in radians (X axis)\n *\n * @returns the new rotation matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotationYawPitchRoll(yaw: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitch: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roll: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "yaw",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "pitch",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roll",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "rotationYawPitchRoll"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.rotationYawPitchRollToRef:function(1)",
              "docComment": "/**\n * Creates a rotation matrix and stores it in a given matrix\n *\n * @param yaw - defines the yaw angle in radians (Y axis)\n *\n * @param pitch - defines the pitch angle in radians (X axis)\n *\n * @param roll - defines the roll angle in radians (X axis)\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotationYawPitchRollToRef(yaw: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitch: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roll: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "yaw",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "pitch",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roll",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "rotationYawPitchRollToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.rotationYToRef:function(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotationYToRef(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "rotationYToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.rotationZ:function(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the Z axis\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotationZ(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "rotationZ"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.rotationZToRef:function(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotationZToRef(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "rotationZToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.scale:function(1)",
              "docComment": "/**\n * Compute a new matrix set with the current matrix values multiplied by scale (float)\n *\n * @param scale - defines the scale factor\n *\n * @returns a new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scale(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "scale"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.scaleAndAddToRef:function(1)",
              "docComment": "/**\n * Scale the current matrix values by a factor and add the result to a given matrix\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines the Matrix to store the result\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scaleAndAddToRef(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "scaleAndAddToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.scaleToRef:function(1)",
              "docComment": "/**\n * Scale the current matrix values by a factor to a given result matrix\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines the matrix to store the result\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scaleToRef(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "scaleToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.scaling:function(1)",
              "docComment": "/**\n * Creates a scaling matrix\n *\n * @param x - defines the scale factor on X axis\n *\n * @param y - defines the scale factor on Y axis\n *\n * @param z - defines the scale factor on Z axis\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scaling(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "scaling"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.scalingToRef:function(1)",
              "docComment": "/**\n * Creates a scaling matrix and stores it in a given matrix\n *\n * @param x - defines the scale factor on X axis\n *\n * @param y - defines the scale factor on Y axis\n *\n * @param z - defines the scale factor on Z axis\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scalingToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "scalingToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.setRowFromFloats:function(1)",
              "docComment": "/**\n * Sets the index-th row of the current matrix with the given 4 x float values\n *\n * @param index - defines the row index\n *\n * @param x - defines the x component to set\n *\n * @param y - defines the y component to set\n *\n * @param z - defines the z component to set\n *\n * @param w - defines the w component to set\n *\n * @returns the updated current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function setRowFromFloats(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  },
                  "isOptional": false
                }
              ],
              "name": "setRowFromFloats"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.setTranslation:function(1)",
              "docComment": "/**\n * Inserts the translation vector in the current matrix\n *\n * @param vector3 - defines the translation to insert\n *\n * @returns the current updated matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function setTranslation(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "vector3",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "setTranslation"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.setTranslationFromFloats:function(1)",
              "docComment": "/**\n * Inserts the translation vector (using 3 floats) in the current matrix\n *\n * @param x - defines the 1st component of the translation\n *\n * @param y - defines the 2nd component of the translation\n *\n * @param z - defines the 3rd component of the translation\n *\n * @returns the current updated matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function setTranslationFromFloats(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "setTranslationFromFloats"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.toArray:function(1)",
              "docComment": "/**\n * Returns the matrix as a FloatArray\n *\n * @returns the matrix underlying array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toArray(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix4x4",
                  "canonicalReference": "@dcl/playground-assets!Matrix.Matrix4x4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.toggleModelMatrixHandInPlace:function(1)",
              "docComment": "/**\n * Toggles model matrix from being right handed to left handed in place and vice versa\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toggleModelMatrixHandInPlace(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toggleModelMatrixHandInPlace"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.toggleProjectionMatrixHandInPlace:function(1)",
              "docComment": "/**\n * Toggles projection matrix from being right handed to left handed in place and vice versa\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toggleProjectionMatrixHandInPlace(self: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toggleProjectionMatrixHandInPlace"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.translation:function(1)",
              "docComment": "/**\n * Creates a translation matrix\n *\n * @param x - defines the translation on X axis\n *\n * @param y - defines the translation on Y axis\n *\n * @param z - defines the translationon Z axis\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function translation(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "translation"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.translationToRef:function(1)",
              "docComment": "/**\n * Creates a translation matrix and stores it in a given matrix\n *\n * @param x - defines the translation on X axis\n *\n * @param y - defines the translation on Y axis\n *\n * @param z - defines the translationon Z axis\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function translationToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "translationToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.transpose:function(1)",
              "docComment": "/**\n * Compute the transpose of a given matrix\n *\n * @param matrix - defines the matrix to transpose\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transpose(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "transpose"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.transposeToRef:function(1)",
              "docComment": "/**\n * Compute the transpose of a matrix and store it in a target matrix\n *\n * @param matrix - defines the matrix to transpose\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transposeToRef(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "transposeToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Matrix.Zero:function(1)",
              "docComment": "/**\n * Creates a new zero matrix\n *\n * @returns a new zero matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Zero(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.MutableMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Zero"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!MeshCollider:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MeshCollider: "
            },
            {
              "kind": "Content",
              "text": "import(\"./components/types\")."
            },
            {
              "kind": "Reference",
              "text": "MeshColliderComponentDefinitionExtended",
              "canonicalReference": "@dcl/playground-assets!MeshColliderComponentDefinitionExtended:interface"
            }
          ],
          "fileUrlPath": "../ecs/dist/index.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MeshCollider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!MeshColliderComponentDefinition:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MeshColliderComponentDefinition = "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBMeshCollider",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "PBMeshCollider",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/extended/MeshCollider.d.ts",
          "releaseTag": "Public",
          "name": "MeshColliderComponentDefinition",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!MeshColliderComponentDefinitionExtended:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MeshColliderComponentDefinitionExtended extends "
            },
            {
              "kind": "Reference",
              "text": "MeshColliderComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!MeshColliderComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/extended/MeshCollider.d.ts",
          "releaseTag": "Public",
          "name": "MeshColliderComponentDefinitionExtended",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@dcl/playground-assets!MeshColliderComponentDefinitionExtended#setBox:member(1)",
              "docComment": "/**\n * Set a box in the MeshCollider component\n *\n * @param entity - entity to create or replace the MeshCollider component\n *\n * @param colliderMask - the set of layer where the collider reacts, default: Physics and Pointer\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setBox(entity: "
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": ", colliderLayers?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColliderLayer",
                  "canonicalReference": "@dcl/playground-assets!ColliderLayer:enum"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ColliderLayer",
                  "canonicalReference": "@dcl/playground-assets!ColliderLayer:enum"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "colliderLayers",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ],
              "name": "setBox"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@dcl/playground-assets!MeshColliderComponentDefinitionExtended#setCylinder:member(1)",
              "docComment": "/**\n * Set a cylinder in the MeshCollider component\n *\n * @param entity - entity to create or replace the MeshCollider component\n *\n * @param radiusBottom - radius of bottom of cylinder\n *\n * @param radiusTop - radius of top of cylinder\n *\n * @param colliderMask - the set of layer where the collider reacts, default: Physics and Pointer\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setCylinder(entity: "
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": ", radiusBottom?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", radiusTop?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", colliderLayers?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColliderLayer",
                  "canonicalReference": "@dcl/playground-assets!ColliderLayer:enum"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ColliderLayer",
                  "canonicalReference": "@dcl/playground-assets!ColliderLayer:enum"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "radiusBottom",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "radiusTop",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "colliderLayers",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 11
                  },
                  "isOptional": true
                }
              ],
              "name": "setCylinder"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@dcl/playground-assets!MeshColliderComponentDefinitionExtended#setPlane:member(1)",
              "docComment": "/**\n * Set a plane in the MeshCollider component\n *\n * @param entity - entity to create or replace the MeshCollider component\n *\n * @param colliderMask - the set of layer where the collider reacts, default: Physics and Pointer\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setPlane(entity: "
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": ", colliderLayers?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColliderLayer",
                  "canonicalReference": "@dcl/playground-assets!ColliderLayer:enum"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ColliderLayer",
                  "canonicalReference": "@dcl/playground-assets!ColliderLayer:enum"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "colliderLayers",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ],
              "name": "setPlane"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@dcl/playground-assets!MeshColliderComponentDefinitionExtended#setSphere:member(1)",
              "docComment": "/**\n * Set a sphere in the MeshCollider component\n *\n * @param entity - entity to create or replace the MeshCollider component\n *\n * @param colliderMask - the set of layer where the collider reacts, default: Physics and Pointer\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSphere(entity: "
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": ", colliderLayers?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColliderLayer",
                  "canonicalReference": "@dcl/playground-assets!ColliderLayer:enum"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ColliderLayer",
                  "canonicalReference": "@dcl/playground-assets!ColliderLayer:enum"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "colliderLayers",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ],
              "name": "setSphere"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!MeshColliderSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MeshColliderSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBMeshCollider",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/MeshCollider.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MeshColliderSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!MeshRenderer:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MeshRenderer: "
            },
            {
              "kind": "Content",
              "text": "import(\"./components/types\")."
            },
            {
              "kind": "Reference",
              "text": "MeshRendererComponentDefinitionExtended",
              "canonicalReference": "@dcl/playground-assets!MeshRendererComponentDefinitionExtended:interface"
            }
          ],
          "fileUrlPath": "../ecs/dist/index.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MeshRenderer",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!MeshRendererComponentDefinition:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MeshRendererComponentDefinition = "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBMeshRenderer",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "PBMeshRenderer",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/extended/MeshRenderer.d.ts",
          "releaseTag": "Public",
          "name": "MeshRendererComponentDefinition",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!MeshRendererComponentDefinitionExtended:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MeshRendererComponentDefinitionExtended extends "
            },
            {
              "kind": "Reference",
              "text": "MeshRendererComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!MeshRendererComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/extended/MeshRenderer.d.ts",
          "releaseTag": "Public",
          "name": "MeshRendererComponentDefinitionExtended",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@dcl/playground-assets!MeshRendererComponentDefinitionExtended#setBox:member(1)",
              "docComment": "/**\n * Set a box in the MeshRenderer component\n *\n * @param entity - entity to create or replace the MeshRenderer component\n *\n * @param uvs - uvs coord\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setBox(entity: "
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": ", uvs?: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "uvs",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "setBox"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@dcl/playground-assets!MeshRendererComponentDefinitionExtended#setCylinder:member(1)",
              "docComment": "/**\n * Set a cylinder in the MeshRenderer component\n *\n * @param entity - entity to create or replace the MeshRenderer component\n *\n * @param radiusBottom - \n *\n * @param radiusTop - \n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setCylinder(entity: "
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": ", radiusBottom?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", radiusTop?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "radiusBottom",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "radiusTop",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "setCylinder"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@dcl/playground-assets!MeshRendererComponentDefinitionExtended#setPlane:member(1)",
              "docComment": "/**\n * Set a plane in the MeshRenderer component\n *\n * @param entity - entity to create or replace the MeshRenderer component\n *\n * @param uvs - uvs coord\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setPlane(entity: "
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": ", uvs?: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "uvs",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "setPlane"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@dcl/playground-assets!MeshRendererComponentDefinitionExtended#setSphere:member(1)",
              "docComment": "/**\n * Set a sphere in the MeshRenderer component\n *\n * @param entity - entity to create or replace the MeshRenderer component\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSphere(entity: "
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "setSphere"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!MeshRendererSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MeshRendererSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBMeshRenderer",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/MeshRenderer.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MeshRendererSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!NftFrameType:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum NftFrameType "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/nft_shape.gen.d.ts",
          "releaseTag": "Public",
          "name": "NftFrameType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_BAROQUE_ORNAMENT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_BAROQUE_ORNAMENT = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_BAROQUE_ORNAMENT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_BLOCKY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_BLOCKY = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_BLOCKY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_CANVAS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_CANVAS = "
                },
                {
                  "kind": "Content",
                  "text": "21"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_CANVAS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_CLASSIC:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_CLASSIC = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_CLASSIC"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_DIAMOND_ORNAMENT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_DIAMOND_ORNAMENT = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_DIAMOND_ORNAMENT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_GOLD_CARVED:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_GOLD_CARVED = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_GOLD_CARVED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_GOLD_EDGES:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_GOLD_EDGES = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_GOLD_EDGES"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_GOLD_ROUNDED:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_GOLD_ROUNDED = "
                },
                {
                  "kind": "Content",
                  "text": "9"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_GOLD_ROUNDED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_GOLD_WIDE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_GOLD_WIDE = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_GOLD_WIDE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_METAL_MEDIUM:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_METAL_MEDIUM = "
                },
                {
                  "kind": "Content",
                  "text": "10"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_METAL_MEDIUM"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_METAL_ROUNDED:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_METAL_ROUNDED = "
                },
                {
                  "kind": "Content",
                  "text": "13"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_METAL_ROUNDED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_METAL_SLIM:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_METAL_SLIM = "
                },
                {
                  "kind": "Content",
                  "text": "12"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_METAL_SLIM"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_METAL_WIDE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_METAL_WIDE = "
                },
                {
                  "kind": "Content",
                  "text": "11"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_METAL_WIDE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_MINIMAL_BLACK:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_MINIMAL_BLACK = "
                },
                {
                  "kind": "Content",
                  "text": "15"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_MINIMAL_BLACK"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_MINIMAL_GREY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_MINIMAL_GREY = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_MINIMAL_GREY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_MINIMAL_WHITE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_MINIMAL_WHITE = "
                },
                {
                  "kind": "Content",
                  "text": "16"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_MINIMAL_WHITE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_MINIMAL_WIDE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_MINIMAL_WIDE = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_MINIMAL_WIDE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_NONE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_NONE = "
                },
                {
                  "kind": "Content",
                  "text": "22"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_NONE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_PINS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_PINS = "
                },
                {
                  "kind": "Content",
                  "text": "14"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_PINS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_TAPE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_TAPE = "
                },
                {
                  "kind": "Content",
                  "text": "17"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_TAPE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_WOOD_SLIM:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_WOOD_SLIM = "
                },
                {
                  "kind": "Content",
                  "text": "18"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_WOOD_SLIM"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_WOOD_TWIGS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_WOOD_TWIGS = "
                },
                {
                  "kind": "Content",
                  "text": "20"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_WOOD_TWIGS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!NftFrameType.NFT_WOOD_WIDE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NFT_WOOD_WIDE = "
                },
                {
                  "kind": "Content",
                  "text": "19"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NFT_WOOD_WIDE"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!NftShape:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NftShape: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "NftShapeSchema",
              "canonicalReference": "@dcl/playground-assets!NftShapeSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NftShape",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!NftShapeSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NftShapeSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBNftShape",
              "canonicalReference": "@dcl/playground-assets!PBNftShape:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/NftShape.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NftShapeSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!OnlyNonUndefinedTypes:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type OnlyNonUndefinedTypes<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [K in "
            },
            {
              "kind": "Reference",
              "text": "ExcludeUndefined",
              "canonicalReference": "@dcl/playground-assets!ExcludeUndefined:type"
            },
            {
              "kind": "Content",
              "text": "<T>]: T[K];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/typing.d.ts",
          "releaseTag": "Public",
          "name": "OnlyNonUndefinedTypes",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!OnlyOptionalUndefinedTypes:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type OnlyOptionalUndefinedTypes<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [K in "
            },
            {
              "kind": "Reference",
              "text": "IncludeUndefined",
              "canonicalReference": "@dcl/playground-assets!IncludeUndefined:type"
            },
            {
              "kind": "Content",
              "text": "<T>]?: T[K];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/typing.d.ts",
          "releaseTag": "Public",
          "name": "OnlyOptionalUndefinedTypes",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!onUpdate:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onUpdate(deltaTime: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../sdk/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "deltaTime",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "onUpdate"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBAnimationState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBAnimationState "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/animator.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBAnimationState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAnimationState#clip:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clip: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAnimationState#loop:member",
              "docComment": "/**\n * default=true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loop?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "loop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAnimationState#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAnimationState#playing:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "playing?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "playing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAnimationState#shouldReset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldReset?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "shouldReset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAnimationState#speed:member",
              "docComment": "/**\n * default=1.0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "speed?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "speed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAnimationState#weight:member",
              "docComment": "/**\n * default=1.0s\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "weight?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "weight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBAnimationState:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBAnimationState: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBAnimationState",
              "canonicalReference": "@dcl/playground-assets!PBAnimationState:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBAnimationState",
              "canonicalReference": "@dcl/playground-assets!PBAnimationState:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/animator.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBAnimationState",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBAnimator:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBAnimator "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/animator.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBAnimator",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAnimator#states:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "states: "
                },
                {
                  "kind": "Reference",
                  "text": "PBAnimationState",
                  "canonicalReference": "@dcl/playground-assets!PBAnimationState:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "states",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBAnimator:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBAnimator: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBAnimator",
              "canonicalReference": "@dcl/playground-assets!PBAnimator:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBAnimator",
              "canonicalReference": "@dcl/playground-assets!PBAnimator:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/animator.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBAnimator",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBAudioSource:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBAudioSource "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/audio_source.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBAudioSource",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAudioSource#audioClipUrl:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "audioClipUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "audioClipUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAudioSource#loop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loop?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "loop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAudioSource#pitch:member",
              "docComment": "/**\n * default=1.0f\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pitch?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pitch",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAudioSource#playing:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "playing?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "playing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAudioSource#volume:member",
              "docComment": "/**\n * default=1.0f\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "volume?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "volume",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBAudioSource:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBAudioSource: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBAudioSource",
              "canonicalReference": "@dcl/playground-assets!PBAudioSource:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBAudioSource",
              "canonicalReference": "@dcl/playground-assets!PBAudioSource:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/audio_source.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBAudioSource",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBAudioStream:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBAudioStream "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/audio_stream.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBAudioStream",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAudioStream#playing:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "playing?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "playing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAudioStream#url:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAudioStream#volume:member",
              "docComment": "/**\n * default=1.0f\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "volume?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "volume",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBAudioStream:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBAudioStream: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBAudioStream",
              "canonicalReference": "@dcl/playground-assets!PBAudioStream:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBAudioStream",
              "canonicalReference": "@dcl/playground-assets!PBAudioStream:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/audio_stream.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBAudioStream",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBAvatarAttach:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBAvatarAttach "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_attach.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBAvatarAttach",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarAttach#anchorPointId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "anchorPointId: "
                },
                {
                  "kind": "Reference",
                  "text": "AvatarAnchorPointType",
                  "canonicalReference": "@dcl/playground-assets!AvatarAnchorPointType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "anchorPointId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarAttach#avatarId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "avatarId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "avatarId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBAvatarAttach:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBAvatarAttach: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBAvatarAttach",
              "canonicalReference": "@dcl/playground-assets!PBAvatarAttach:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBAvatarAttach",
              "canonicalReference": "@dcl/playground-assets!PBAvatarAttach:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_attach.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBAvatarAttach",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBAvatarModifierArea:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBAvatarModifierArea "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_modifier_area.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBAvatarModifierArea",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarModifierArea#area:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "area: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/playground-assets!PBVector3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "area",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarModifierArea#excludeIds:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "excludeIds: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "excludeIds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarModifierArea#modifiers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "modifiers: "
                },
                {
                  "kind": "Reference",
                  "text": "AvatarModifierType",
                  "canonicalReference": "@dcl/playground-assets!AvatarModifierType:enum"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "modifiers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBAvatarModifierArea:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBAvatarModifierArea: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBAvatarModifierArea",
              "canonicalReference": "@dcl/playground-assets!PBAvatarModifierArea:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBAvatarModifierArea",
              "canonicalReference": "@dcl/playground-assets!PBAvatarModifierArea:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_modifier_area.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBAvatarModifierArea",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBAvatarShape:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBAvatarShape "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_shape.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBAvatarShape",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarShape#bodyShape:member",
              "docComment": "/**\n * default = urn:decentraland:off-chain:base-avatars:BaseFemale\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bodyShape?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "bodyShape",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarShape#emotes:member",
              "docComment": "/**\n * default = []\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emotes: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "emotes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarShape#expressionTriggerId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expressionTriggerId?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "expressionTriggerId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarShape#expressionTriggerTimestamp:member",
              "docComment": "/**\n * default = timestamp\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expressionTriggerTimestamp?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "expressionTriggerTimestamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarShape#eyeColor:member",
              "docComment": "/**\n * default = decentraland.common.Color3(R = 0.6f, G = 0.462f, B = 0.356f)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eyeColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/playground-assets!PBColor3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "eyeColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarShape#hairColor:member",
              "docComment": "/**\n * default = decentraland.common.Color3(R = 0.283f, G = 0.142f, B = 0f)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hairColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/playground-assets!PBColor3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hairColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarShape#id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarShape#name:member",
              "docComment": "/**\n * default = NPC\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarShape#skinColor:member",
              "docComment": "/**\n * default = decentraland.common.Color3(R = 0.6f, G = 0.462f, B = 0.356f)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "skinColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/playground-assets!PBColor3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "skinColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarShape#talking:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "talking?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "talking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBAvatarShape#wearables:member",
              "docComment": "/**\n * default = [\"urn:decentraland:off-chain:base-avatars:f_eyes_00\", \"urn:decentraland:off-chain:base-avatars:f_eyebrows_00\", \"urn:decentraland:off-chain:base-avatars:f_mouth_00\" \"urn:decentraland:off-chain:base-avatars:standard_hair\", \"urn:decentraland:off-chain:base-avatars:f_simple_yellow_tshirt\", \"urn:decentraland:off-chain:base-avatars:f_brown_trousers\", \"urn:decentraland:off-chain:base-avatars:bun_shoes\"]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wearables: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "wearables",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBAvatarShape:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBAvatarShape: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBAvatarShape",
              "canonicalReference": "@dcl/playground-assets!PBAvatarShape:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBAvatarShape",
              "canonicalReference": "@dcl/playground-assets!PBAvatarShape:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_shape.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBAvatarShape",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBBillboard:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBBillboard "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/billboard.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBBillboard",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBBillboard#billboardMode:member",
              "docComment": "/**\n * default=BM_ALL_AXES\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "billboardMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "BillboardMode",
                  "canonicalReference": "@dcl/playground-assets!BillboardMode:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "billboardMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBBillboard#oppositeDirection:member",
              "docComment": "/**\n * default=false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "oppositeDirection?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "oppositeDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBBillboard:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBBillboard: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBBillboard",
              "canonicalReference": "@dcl/playground-assets!PBBillboard:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBBillboard",
              "canonicalReference": "@dcl/playground-assets!PBBillboard:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/billboard.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBBillboard",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBCameraMode:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBCameraMode "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/camera_mode.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBCameraMode",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBCameraMode#mode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mode: "
                },
                {
                  "kind": "Reference",
                  "text": "CameraType",
                  "canonicalReference": "@dcl/playground-assets!CameraType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "mode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBCameraMode:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBCameraMode: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBCameraMode",
              "canonicalReference": "@dcl/playground-assets!PBCameraMode:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBCameraMode",
              "canonicalReference": "@dcl/playground-assets!PBCameraMode:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/camera_mode.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBCameraMode",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBCameraModeArea:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBCameraModeArea "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/camera_mode_area.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBCameraModeArea",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBCameraModeArea#area:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "area: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/playground-assets!PBVector3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "area",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBCameraModeArea#mode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mode: "
                },
                {
                  "kind": "Reference",
                  "text": "CameraType",
                  "canonicalReference": "@dcl/playground-assets!CameraType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "mode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBCameraModeArea:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBCameraModeArea: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBCameraModeArea",
              "canonicalReference": "@dcl/playground-assets!PBCameraModeArea:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBCameraModeArea",
              "canonicalReference": "@dcl/playground-assets!PBCameraModeArea:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/camera_mode_area.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBCameraModeArea",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBColor3:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Color3 "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/colors.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBColor3",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBColor3#b:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "b",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBColor3#g:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "g",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBColor3#r:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "r",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBColor3:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Color3: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "Color3",
              "canonicalReference": "@dcl/playground-assets!PBColor3:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "Color3",
              "canonicalReference": "@dcl/playground-assets!PBColor3:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/colors.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBColor3",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBColor4:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Color4 "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/colors.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBColor4",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBColor4#a:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "a",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBColor4#b:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "b",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBColor4#g:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "g",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBColor4#r:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "r",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBColor4:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Color4: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "Color4",
              "canonicalReference": "@dcl/playground-assets!PBColor4:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "Color4",
              "canonicalReference": "@dcl/playground-assets!PBColor4:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/colors.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBColor4",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBGltfContainer:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBGltfContainer "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/gltf_container.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBGltfContainer",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBGltfContainer#src:member",
              "docComment": "/**\n * which file to load\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "src: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "src",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBGltfContainer:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBGltfContainer: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBGltfContainer",
              "canonicalReference": "@dcl/playground-assets!PBGltfContainer:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBGltfContainer",
              "canonicalReference": "@dcl/playground-assets!PBGltfContainer:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/gltf_container.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBGltfContainer",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBMaterial_PbrMaterial "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/material.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBMaterial_PbrMaterial",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#albedoColor:member",
              "docComment": "/**\n * default = white;\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "albedoColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/playground-assets!PBColor3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "albedoColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#alphaTest:member",
              "docComment": "/**\n * default = 0.5. range value: from 0 to 1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alphaTest?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alphaTest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#alphaTexture:member",
              "docComment": "/**\n * default = null\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alphaTexture?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureUnion",
                  "canonicalReference": "@dcl/playground-assets!TextureUnion:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alphaTexture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#bumpTexture:member",
              "docComment": "/**\n * default = null\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bumpTexture?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureUnion",
                  "canonicalReference": "@dcl/playground-assets!TextureUnion:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "bumpTexture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#castShadows:member",
              "docComment": "/**\n * default = true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "castShadows?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "castShadows",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#directIntensity:member",
              "docComment": "/**\n * default = 1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directIntensity?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "directIntensity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#emissiveColor:member",
              "docComment": "/**\n * default = black;\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emissiveColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/playground-assets!PBColor3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "emissiveColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#emissiveIntensity:member",
              "docComment": "/**\n * default = 2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emissiveIntensity?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "emissiveIntensity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#emissiveTexture:member",
              "docComment": "/**\n * default = null\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emissiveTexture?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureUnion",
                  "canonicalReference": "@dcl/playground-assets!TextureUnion:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "emissiveTexture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#glossiness:member",
              "docComment": "/**\n * default = 1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "glossiness?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "glossiness",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#metallic:member",
              "docComment": "/**\n * default = 0.5\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metallic?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "metallic",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#reflectivityColor:member",
              "docComment": "/**\n * default = white;\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reflectivityColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/playground-assets!PBColor3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "reflectivityColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#roughness:member",
              "docComment": "/**\n * default = 0.5\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roughness?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "roughness",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#specularIntensity:member",
              "docComment": "/**\n * default = 1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "specularIntensity?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "specularIntensity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#texture:member",
              "docComment": "/**\n * default = null\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "texture?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureUnion",
                  "canonicalReference": "@dcl/playground-assets!TextureUnion:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "texture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial#transparencyMode:member",
              "docComment": "/**\n * default = TransparencyMode.Auto\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transparencyMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "MaterialTransparencyMode",
                  "canonicalReference": "@dcl/playground-assets!MaterialTransparencyMode:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "transparencyMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBMaterial_PbrMaterial: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBMaterial_PbrMaterial",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBMaterial_PbrMaterial",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/material.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBMaterial_PbrMaterial",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBMaterial_UnlitMaterial:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBMaterial_UnlitMaterial "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/material.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBMaterial_UnlitMaterial",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_UnlitMaterial#alphaTest:member",
              "docComment": "/**\n * default = 0.5. range value: from 0 to 1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alphaTest?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alphaTest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_UnlitMaterial#castShadows:member",
              "docComment": "/**\n * default = true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "castShadows?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "castShadows",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_UnlitMaterial#texture:member",
              "docComment": "/**\n * default = null\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "texture?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureUnion",
                  "canonicalReference": "@dcl/playground-assets!TextureUnion:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "texture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBMaterial_UnlitMaterial:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBMaterial_UnlitMaterial: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBMaterial_UnlitMaterial",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_UnlitMaterial:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBMaterial_UnlitMaterial",
              "canonicalReference": "@dcl/playground-assets!PBMaterial_UnlitMaterial:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/material.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBMaterial_UnlitMaterial",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBMaterial:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBMaterial "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/material.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBMaterial",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMaterial#material:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "material?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        $case: 'unlit';\n        unlit: "
                },
                {
                  "kind": "Reference",
                  "text": "PBMaterial_UnlitMaterial",
                  "canonicalReference": "@dcl/playground-assets!PBMaterial_UnlitMaterial:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    } | {\n        $case: 'pbr';\n        pbr: "
                },
                {
                  "kind": "Reference",
                  "text": "PBMaterial_PbrMaterial",
                  "canonicalReference": "@dcl/playground-assets!PBMaterial_PbrMaterial:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "material",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBMaterial:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBMaterial: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBMaterial",
              "canonicalReference": "@dcl/playground-assets!PBMaterial:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBMaterial",
              "canonicalReference": "@dcl/playground-assets!PBMaterial:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/material.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBMaterial",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBMeshCollider_BoxMesh:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBMeshCollider_BoxMesh "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_collider.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBMeshCollider_BoxMesh",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBMeshCollider_BoxMesh:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBMeshCollider_BoxMesh: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(_: "
            },
            {
              "kind": "Reference",
              "text": "PBMeshCollider_BoxMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider_BoxMesh:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBMeshCollider_BoxMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider_BoxMesh:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_collider.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBMeshCollider_BoxMesh",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBMeshCollider_CylinderMesh:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBMeshCollider_CylinderMesh "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_collider.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBMeshCollider_CylinderMesh",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider_CylinderMesh#radiusBottom:member",
              "docComment": "/**\n * default=1.0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "radiusBottom?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "radiusBottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider_CylinderMesh#radiusTop:member",
              "docComment": "/**\n * default=1.0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "radiusTop?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "radiusTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBMeshCollider_CylinderMesh:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBMeshCollider_CylinderMesh: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBMeshCollider_CylinderMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider_CylinderMesh:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBMeshCollider_CylinderMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider_CylinderMesh:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_collider.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBMeshCollider_CylinderMesh",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBMeshCollider_PlaneMesh:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBMeshCollider_PlaneMesh "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_collider.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBMeshCollider_PlaneMesh",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBMeshCollider_PlaneMesh:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBMeshCollider_PlaneMesh: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(_: "
            },
            {
              "kind": "Reference",
              "text": "PBMeshCollider_PlaneMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider_PlaneMesh:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBMeshCollider_PlaneMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider_PlaneMesh:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_collider.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBMeshCollider_PlaneMesh",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBMeshCollider_SphereMesh:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBMeshCollider_SphereMesh "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_collider.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBMeshCollider_SphereMesh",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBMeshCollider_SphereMesh:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBMeshCollider_SphereMesh: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(_: "
            },
            {
              "kind": "Reference",
              "text": "PBMeshCollider_SphereMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider_SphereMesh:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBMeshCollider_SphereMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider_SphereMesh:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_collider.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBMeshCollider_SphereMesh",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBMeshCollider:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBMeshCollider "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_collider.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBMeshCollider",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider#collisionMask:member",
              "docComment": "/**\n * default = ColliderLayer.Physics | ColliderLayer.Pointer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collisionMask?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "collisionMask",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider#mesh:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mesh?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        $case: 'box';\n        box: "
                },
                {
                  "kind": "Reference",
                  "text": "PBMeshCollider_BoxMesh",
                  "canonicalReference": "@dcl/playground-assets!PBMeshCollider_BoxMesh:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    } | {\n        $case: 'sphere';\n        sphere: "
                },
                {
                  "kind": "Reference",
                  "text": "PBMeshCollider_SphereMesh",
                  "canonicalReference": "@dcl/playground-assets!PBMeshCollider_SphereMesh:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    } | {\n        $case: 'cylinder';\n        cylinder: "
                },
                {
                  "kind": "Reference",
                  "text": "PBMeshCollider_CylinderMesh",
                  "canonicalReference": "@dcl/playground-assets!PBMeshCollider_CylinderMesh:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    } | {\n        $case: 'plane';\n        plane: "
                },
                {
                  "kind": "Reference",
                  "text": "PBMeshCollider_PlaneMesh",
                  "canonicalReference": "@dcl/playground-assets!PBMeshCollider_PlaneMesh:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "mesh",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBMeshCollider:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBMeshCollider: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBMeshCollider",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBMeshCollider",
              "canonicalReference": "@dcl/playground-assets!PBMeshCollider:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_collider.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBMeshCollider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_BoxMesh:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBMeshRenderer_BoxMesh "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_renderer.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBMeshRenderer_BoxMesh",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_BoxMesh#uvs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uvs: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "uvs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_BoxMesh:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBMeshRenderer_BoxMesh: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBMeshRenderer_BoxMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_BoxMesh:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBMeshRenderer_BoxMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_BoxMesh:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_renderer.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBMeshRenderer_BoxMesh",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_CylinderMesh:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBMeshRenderer_CylinderMesh "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_renderer.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBMeshRenderer_CylinderMesh",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_CylinderMesh#radiusBottom:member",
              "docComment": "/**\n * default=1.0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "radiusBottom?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "radiusBottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_CylinderMesh#radiusTop:member",
              "docComment": "/**\n * default=1.0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "radiusTop?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "radiusTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_CylinderMesh:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBMeshRenderer_CylinderMesh: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBMeshRenderer_CylinderMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_CylinderMesh:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBMeshRenderer_CylinderMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_CylinderMesh:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_renderer.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBMeshRenderer_CylinderMesh",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_PlaneMesh:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBMeshRenderer_PlaneMesh "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_renderer.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBMeshRenderer_PlaneMesh",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_PlaneMesh#uvs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uvs: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "uvs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_PlaneMesh:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBMeshRenderer_PlaneMesh: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBMeshRenderer_PlaneMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_PlaneMesh:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBMeshRenderer_PlaneMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_PlaneMesh:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_renderer.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBMeshRenderer_PlaneMesh",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_SphereMesh:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBMeshRenderer_SphereMesh "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_renderer.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBMeshRenderer_SphereMesh",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_SphereMesh:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBMeshRenderer_SphereMesh: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(_: "
            },
            {
              "kind": "Reference",
              "text": "PBMeshRenderer_SphereMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_SphereMesh:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBMeshRenderer_SphereMesh",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_SphereMesh:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_renderer.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBMeshRenderer_SphereMesh",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBMeshRenderer:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBMeshRenderer "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_renderer.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBMeshRenderer",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer#mesh:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mesh?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        $case: 'box';\n        box: "
                },
                {
                  "kind": "Reference",
                  "text": "PBMeshRenderer_BoxMesh",
                  "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_BoxMesh:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    } | {\n        $case: 'sphere';\n        sphere: "
                },
                {
                  "kind": "Reference",
                  "text": "PBMeshRenderer_SphereMesh",
                  "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_SphereMesh:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    } | {\n        $case: 'cylinder';\n        cylinder: "
                },
                {
                  "kind": "Reference",
                  "text": "PBMeshRenderer_CylinderMesh",
                  "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_CylinderMesh:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    } | {\n        $case: 'plane';\n        plane: "
                },
                {
                  "kind": "Reference",
                  "text": "PBMeshRenderer_PlaneMesh",
                  "canonicalReference": "@dcl/playground-assets!PBMeshRenderer_PlaneMesh:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "mesh",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBMeshRenderer:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBMeshRenderer: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBMeshRenderer",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBMeshRenderer",
              "canonicalReference": "@dcl/playground-assets!PBMeshRenderer:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_renderer.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBMeshRenderer",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBNftShape:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBNftShape "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/nft_shape.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBNftShape",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBNftShape#color:member",
              "docComment": "/**\n * default = decentraland.common.Color3(0.6404918, 0.611472, 0.8584906)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/playground-assets!PBColor3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBNftShape#src:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "src: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "src",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBNftShape#style:member",
              "docComment": "/**\n * default = PictureFrameStyle.Classic\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "NftFrameType",
                  "canonicalReference": "@dcl/playground-assets!NftFrameType:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBNftShape:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBNftShape: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBNftShape",
              "canonicalReference": "@dcl/playground-assets!PBNftShape:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBNftShape",
              "canonicalReference": "@dcl/playground-assets!PBNftShape:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/nft_shape.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBNftShape",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult_PointerCommand:interface",
          "docComment": "/**\n * this message represents a pointer event, used both for UP and DOWN actions\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBPointerEventsResult_PointerCommand "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_events_result.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBPointerEventsResult_PointerCommand",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult_PointerCommand#analog:member",
              "docComment": "/**\n * if the input is analog then we store it here\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "analog?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "analog",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult_PointerCommand#button:member",
              "docComment": "/**\n * identifier of the input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "button: "
                },
                {
                  "kind": "Reference",
                  "text": "InputAction",
                  "canonicalReference": "@dcl/playground-assets!InputAction:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "button",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult_PointerCommand#hit:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hit: "
                },
                {
                  "kind": "Reference",
                  "text": "RaycastHit",
                  "canonicalReference": "@dcl/playground-assets!RaycastHit:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult_PointerCommand#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state: "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEventType",
                  "canonicalReference": "@dcl/playground-assets!PointerEventType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult_PointerCommand#timestamp:member",
              "docComment": "/**\n * could be a Lamport timestamp\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timestamp: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timestamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult_PointerCommand:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBPointerEventsResult_PointerCommand: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBPointerEventsResult_PointerCommand",
              "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult_PointerCommand:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBPointerEventsResult_PointerCommand",
              "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult_PointerCommand:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_events_result.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBPointerEventsResult_PointerCommand",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult:interface",
          "docComment": "/**\n * the renderer will set this component to the root entity once per frame with all the events\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBPointerEventsResult "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_events_result.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBPointerEventsResult",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult#commands:member",
              "docComment": "/**\n * a list of the last N pointer commands (from the engine)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "commands: "
                },
                {
                  "kind": "Reference",
                  "text": "PBPointerEventsResult_PointerCommand",
                  "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult_PointerCommand:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "commands",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBPointerEventsResult: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBPointerEventsResult",
              "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBPointerEventsResult",
              "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_events_result.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBPointerEventsResult",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Entry:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBPointerHoverFeedback_Entry "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_hover_feedback.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBPointerHoverFeedback_Entry",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Entry#eventInfo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eventInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "PBPointerHoverFeedback_Info",
                  "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Info:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eventInfo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Entry#eventType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eventType: "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEventType",
                  "canonicalReference": "@dcl/playground-assets!PointerEventType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eventType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Entry:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBPointerHoverFeedback_Entry: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBPointerHoverFeedback_Entry",
              "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Entry:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBPointerHoverFeedback_Entry",
              "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Entry:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_hover_feedback.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBPointerHoverFeedback_Entry",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Info:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBPointerHoverFeedback_Info "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_hover_feedback.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBPointerHoverFeedback_Info",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Info#button:member",
              "docComment": "/**\n * default=InputAction.ANY\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "button?: "
                },
                {
                  "kind": "Reference",
                  "text": "InputAction",
                  "canonicalReference": "@dcl/playground-assets!InputAction:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "button",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Info#hoverText:member",
              "docComment": "/**\n * default='Interact'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hoverText?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hoverText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Info#maxDistance:member",
              "docComment": "/**\n * default=10\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxDistance?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxDistance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Info#showFeedback:member",
              "docComment": "/**\n * default=true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showFeedback?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "showFeedback",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Info:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBPointerHoverFeedback_Info: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBPointerHoverFeedback_Info",
              "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Info:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBPointerHoverFeedback_Info",
              "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Info:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_hover_feedback.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBPointerHoverFeedback_Info",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBPointerHoverFeedback "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_hover_feedback.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBPointerHoverFeedback",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback#pointerEvents:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pointerEvents: "
                },
                {
                  "kind": "Reference",
                  "text": "PBPointerHoverFeedback_Entry",
                  "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback_Entry:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pointerEvents",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBPointerHoverFeedback: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBPointerHoverFeedback",
              "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBPointerHoverFeedback",
              "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_hover_feedback.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBPointerHoverFeedback",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBPointerLock:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBPointerLock "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_lock.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBPointerLock",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPointerLock#isPointerLocked:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isPointerLocked: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isPointerLocked",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBPointerLock:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBPointerLock: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBPointerLock",
              "canonicalReference": "@dcl/playground-assets!PBPointerLock:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBPointerLock",
              "canonicalReference": "@dcl/playground-assets!PBPointerLock:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_lock.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBPointerLock",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBPosition:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Position "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/vectors.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBPosition",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPosition#x:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPosition#y:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBPosition#z:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "z",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBPosition:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Position: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "Position",
              "canonicalReference": "@dcl/playground-assets!PBPosition:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "Position",
              "canonicalReference": "@dcl/playground-assets!PBPosition:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/vectors.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBPosition",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBRaycast:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBRaycast "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/raycast.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBRaycast",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBRaycast#direction:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "direction: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/playground-assets!PBVector3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "direction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBRaycast#maxDistance:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxDistance: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "maxDistance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBRaycast#origin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "origin: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/playground-assets!PBVector3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "origin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBRaycast#queryType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "queryType: "
                },
                {
                  "kind": "Reference",
                  "text": "RaycastQueryType",
                  "canonicalReference": "@dcl/playground-assets!RaycastQueryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "queryType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBRaycast:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBRaycast: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBRaycast",
              "canonicalReference": "@dcl/playground-assets!PBRaycast:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBRaycast",
              "canonicalReference": "@dcl/playground-assets!PBRaycast:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/raycast.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBRaycast",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBRaycastResult:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBRaycastResult "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/raycast_result.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBRaycastResult",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBRaycastResult#direction:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "direction: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/playground-assets!PBVector3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "direction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBRaycastResult#hits:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hits: "
                },
                {
                  "kind": "Reference",
                  "text": "RaycastHit",
                  "canonicalReference": "@dcl/playground-assets!RaycastHit:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hits",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBRaycastResult#origin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "origin: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/playground-assets!PBVector3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "origin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBRaycastResult#timestamp:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timestamp: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timestamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBRaycastResult:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBRaycastResult: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBRaycastResult",
              "canonicalReference": "@dcl/playground-assets!PBRaycastResult:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBRaycastResult",
              "canonicalReference": "@dcl/playground-assets!PBRaycastResult:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/raycast_result.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBRaycastResult",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBTextShape:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBTextShape "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/text_shape.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBTextShape",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#font:member",
              "docComment": "/**\n * default=F_SANS_SERIF\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "font?: "
                },
                {
                  "kind": "Reference",
                  "text": "Font",
                  "canonicalReference": "@dcl/playground-assets!Font:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "font",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#fontAutoSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontAutoSize?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fontAutoSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#fontSize:member",
              "docComment": "/**\n * default=10\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fontSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#height:member",
              "docComment": "/**\n * default=1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#lineCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lineCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#lineSpacing:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineSpacing?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lineSpacing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#outlineColor:member",
              "docComment": "/**\n * default=(1.0,1.0,1.0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outlineColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/playground-assets!PBColor3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "outlineColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#outlineWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outlineWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "outlineWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#paddingBottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingBottom?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "paddingBottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#paddingLeft:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingLeft?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "paddingLeft",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#paddingRight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingRight?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "paddingRight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#paddingTop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingTop?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "paddingTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#shadowBlur:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shadowBlur?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "shadowBlur",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#shadowColor:member",
              "docComment": "/**\n * default=(1.0,1.0,1.0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shadowColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/playground-assets!PBColor3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "shadowColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#shadowOffsetX:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shadowOffsetX?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "shadowOffsetX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#shadowOffsetY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shadowOffsetY?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "shadowOffsetY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#textAlign:member",
              "docComment": "/**\n * default=TAM_CENTER_CENTER\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textAlign?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextAlignMode",
                  "canonicalReference": "@dcl/playground-assets!TextAlignMode:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textAlign",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#textColor:member",
              "docComment": "/**\n * default=(1.0,1.0,1.0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/playground-assets!PBColor4:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#textWrapping:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textWrapping?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textWrapping",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBTextShape#width:member",
              "docComment": "/**\n * default=1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBTextShape:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBTextShape: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBTextShape",
              "canonicalReference": "@dcl/playground-assets!PBTextShape:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBTextShape",
              "canonicalReference": "@dcl/playground-assets!PBTextShape:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/text_shape.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBTextShape",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBUiBackground:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBUiBackground "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_background.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBUiBackground",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiBackground#backgroundColor:member",
              "docComment": "/**\n * default=(0.0, 0.0, 0.0, 0.0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/playground-assets!PBColor4:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "backgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBUiBackground:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBUiBackground: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBUiBackground",
              "canonicalReference": "@dcl/playground-assets!PBUiBackground:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBUiBackground",
              "canonicalReference": "@dcl/playground-assets!PBUiBackground:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_background.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBUiBackground",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBUiText:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBUiText "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_text.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBUiText",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiText#color:member",
              "docComment": "/**\n * default=(1.0,1.0,1.0,1.0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/playground-assets!PBColor4:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiText#font:member",
              "docComment": "/**\n * default=0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "font?: "
                },
                {
                  "kind": "Reference",
                  "text": "Font",
                  "canonicalReference": "@dcl/playground-assets!Font:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "font",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiText#fontSize:member",
              "docComment": "/**\n * default=10\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fontSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiText#textAlign:member",
              "docComment": "/**\n * default='center'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textAlign?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextAlignMode",
                  "canonicalReference": "@dcl/playground-assets!TextAlignMode:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textAlign",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiText#value:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBUiText:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBUiText: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBUiText",
              "canonicalReference": "@dcl/playground-assets!PBUiText:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBUiText",
              "canonicalReference": "@dcl/playground-assets!PBUiText:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_text.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBUiText",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBUiTransform:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBUiTransform "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_transform.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBUiTransform",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#alignContent:member",
              "docComment": "/**\n * default: YGAlign.YGA_FLEX_START\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignContent?: "
                },
                {
                  "kind": "Reference",
                  "text": "YGAlign",
                  "canonicalReference": "@dcl/playground-assets!YGAlign:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alignContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#alignItems:member",
              "docComment": "/**\n * default: YGAlign.YGA_STRETCH\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignItems?: "
                },
                {
                  "kind": "Reference",
                  "text": "YGAlign",
                  "canonicalReference": "@dcl/playground-assets!YGAlign:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alignItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#alignSelf:member",
              "docComment": "/**\n * YGAlign.YGA_AUTO\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignSelf: "
                },
                {
                  "kind": "Reference",
                  "text": "YGAlign",
                  "canonicalReference": "@dcl/playground-assets!YGAlign:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "alignSelf",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#display:member",
              "docComment": "/**\n * YGDisplay.YGD_FLEX\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "display: "
                },
                {
                  "kind": "Reference",
                  "text": "YGDisplay",
                  "canonicalReference": "@dcl/playground-assets!YGDisplay:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "display",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#flexBasis:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexBasis: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "flexBasis",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#flexBasisUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexBasisUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "flexBasisUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#flexDirection:member",
              "docComment": "/**\n * YGFlexDirection.YGFD_ROW\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexDirection: "
                },
                {
                  "kind": "Reference",
                  "text": "YGFlexDirection",
                  "canonicalReference": "@dcl/playground-assets!YGFlexDirection:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "flexDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#flexGrow:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexGrow: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "flexGrow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#flexShrink:member",
              "docComment": "/**\n * default: 1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexShrink?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "flexShrink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#flexWrap:member",
              "docComment": "/**\n * default: YGWrap.YGW_WRAP\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexWrap?: "
                },
                {
                  "kind": "Reference",
                  "text": "YGWrap",
                  "canonicalReference": "@dcl/playground-assets!YGWrap:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "flexWrap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#heightUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "heightUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "heightUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#justifyContent:member",
              "docComment": "/**\n * YGJustify.YGJ_FLEX_START\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "justifyContent: "
                },
                {
                  "kind": "Reference",
                  "text": "YGJustify",
                  "canonicalReference": "@dcl/playground-assets!YGJustify:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "justifyContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#marginBottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginBottom: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "marginBottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#marginBottomUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginBottomUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "marginBottomUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#marginLeft:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginLeft: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "marginLeft",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#marginLeftUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginLeftUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "marginLeftUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#marginRight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginRight: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "marginRight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#marginRightUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginRightUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "marginRightUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#marginTop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginTop: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "marginTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#marginTopUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginTopUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "marginTopUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#maxHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxHeight: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "maxHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#maxHeightUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxHeightUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "maxHeightUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#maxWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxWidth: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "maxWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#maxWidthUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxWidthUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "maxWidthUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#minHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minHeight: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "minHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#minHeightUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minHeightUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "minHeightUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#minWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minWidth: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "minWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#minWidthUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minWidthUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "minWidthUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#overflow:member",
              "docComment": "/**\n * YGOverflow.YGO_VISIBLE\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflow: "
                },
                {
                  "kind": "Reference",
                  "text": "YGOverflow",
                  "canonicalReference": "@dcl/playground-assets!YGOverflow:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "overflow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#paddingBottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingBottom: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paddingBottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#paddingBottomUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingBottomUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paddingBottomUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#paddingLeft:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingLeft: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paddingLeft",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#paddingLeftUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingLeftUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paddingLeftUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#paddingRight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingRight: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paddingRight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#paddingRightUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingRightUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paddingRightUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#paddingTop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingTop: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paddingTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#paddingTopUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingTopUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paddingTopUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#parent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "parent: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "parent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#positionBottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positionBottom: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "positionBottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#positionBottomUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positionBottomUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "positionBottomUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#positionLeft:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positionLeft: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "positionLeft",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#positionLeftUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positionLeftUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "positionLeftUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#positionRight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positionRight: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "positionRight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#positionRightUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positionRightUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "positionRightUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#positionTop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positionTop: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "positionTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#positionTopUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positionTopUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "positionTopUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#positionType:member",
              "docComment": "/**\n * YGPositionType.YGPT_RELATIVE\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positionType: "
                },
                {
                  "kind": "Reference",
                  "text": "YGPositionType",
                  "canonicalReference": "@dcl/playground-assets!YGPositionType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "positionType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#rightOf:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rightOf: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rightOf",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform#widthUnit:member",
              "docComment": "/**\n * YGUnit.YGU_UNDEFINED\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "widthUnit: "
                },
                {
                  "kind": "Reference",
                  "text": "YGUnit",
                  "canonicalReference": "@dcl/playground-assets!YGUnit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "widthUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBUiTransform:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBUiTransform: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBUiTransform",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBUiTransform",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_transform.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBUiTransform",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBVector2:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Vector2 "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/vectors.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBVector2",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBVector2#x:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBVector2#y:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBVector2:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Vector2: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "Vector2",
              "canonicalReference": "@dcl/playground-assets!PBVector2:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "Vector2",
              "canonicalReference": "@dcl/playground-assets!PBVector2:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/vectors.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBVector2",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBVector3:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Vector3 "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/vectors.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBVector3",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBVector3#x:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBVector3#y:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBVector3#z:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "z",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBVector3:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Vector3: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "Vector3",
              "canonicalReference": "@dcl/playground-assets!PBVector3:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "Vector3",
              "canonicalReference": "@dcl/playground-assets!PBVector3:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/vectors.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBVector3",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!PBVisibilityComponent:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PBVisibilityComponent "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/visibility_component.gen.d.ts",
          "releaseTag": "Public",
          "name": "PBVisibilityComponent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!PBVisibilityComponent#visible:member",
              "docComment": "/**\n * default=true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "visible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PBVisibilityComponent:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PBVisibilityComponent: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "PBVisibilityComponent",
              "canonicalReference": "@dcl/playground-assets!PBVisibilityComponent:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "PBVisibilityComponent",
              "canonicalReference": "@dcl/playground-assets!PBVisibilityComponent:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/visibility_component.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PBVisibilityComponent",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/playground-assets!Plane:namespace",
          "docComment": "/**\n * Represens a plane by the equation ax + by + cz + d = 0\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Plane "
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/Plane.d.ts",
          "releaseTag": "Public",
          "name": "Plane",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Plane.asArray:function(1)",
              "docComment": "/**\n * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function asArray(plane: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyPlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.ReadonlyPlane:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "plane",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "asArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Plane.clone:function(1)",
              "docComment": "/**\n * @returns a new plane copied from the current Plane.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clone(plane: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyPlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.ReadonlyPlane:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutablePlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.MutablePlane:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "plane",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "clone"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Plane.copyFromPoints:function(1)",
              "docComment": "/**\n * Updates the current Plane from the plane defined by the three given points.\n *\n * @param point1 - one of the points used to contruct the plane\n *\n * @param point2 - one of the points used to contruct the plane\n *\n * @param point3 - one of the points used to contruct the plane\n *\n * @returns the updated Plane.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function copyFromPoints(point1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", point2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", point3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutablePlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.MutablePlane:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "point1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "point2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "point3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "copyFromPoints"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Plane.create:function(1)",
              "docComment": "/**\n * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\n *\n * @param a - a component of the plane\n *\n * @param b - b component of the plane\n *\n * @param c - c component of the plane\n *\n * @param d - d component of the plane\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function create(a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", c: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", d: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        normal: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        d: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "c",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "d",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "create"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Plane.dotCoordinate:function(1)",
              "docComment": "/**\n * Calcualtte the dot product between the point and the plane normal\n *\n * @param point - point to calculate the dot product with\n *\n * @returns the dot product (float) of the point coordinates and the plane normal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function dotCoordinate(plane: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyPlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.ReadonlyPlane:type"
                },
                {
                  "kind": "Content",
                  "text": ", point: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "plane",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "dotCoordinate"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Plane.fromArray:function(1)",
              "docComment": "/**\n * Creates a plane from an array\n *\n * @param array - the array to create a plane from\n *\n * @returns a new Plane from the given array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromArray(array: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutablePlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.MutablePlane:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "fromArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Plane.fromPoints:function(1)",
              "docComment": "/**\n * Creates a plane from three points\n *\n * @param point1 - point used to create the plane\n *\n * @param point2 - point used to create the plane\n *\n * @param point3 - point used to create the plane\n *\n * @returns a new Plane defined by the three given points.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromPoints(_point1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", _point2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", _point3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutablePlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.MutablePlane:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "_point1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "_point2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "_point3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "fromPoints"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Plane.getHashCode:function(1)",
              "docComment": "/**\n * @returns the Plane hash code.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getHashCode(_plane: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyPlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.ReadonlyPlane:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "_plane",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getHashCode"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Plane.isFrontFacingTo:function(1)",
              "docComment": "/**\n * Checks if the plane is facing a given direction\n *\n * @param direction - the direction to check if the plane is facing\n *\n * @param epsilon - value the dot product is compared against (returns true if dot &lt;= epsilon)\n *\n * @returns True is the vector \"direction\" is the same side than the plane normal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isFrontFacingTo(plane: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyPlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.ReadonlyPlane:type"
                },
                {
                  "kind": "Content",
                  "text": ", direction: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", epsilon: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "plane",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "direction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "epsilon",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "isFrontFacingTo"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Plane.MutablePlane:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type MutablePlane = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        normal: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        d: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MutablePlane",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Plane.normalize:function(1)",
              "docComment": "/**\n * Normalize the current Plane in place.\n *\n * @returns the updated Plane.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalize(plane: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyPlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.ReadonlyPlane:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutablePlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.MutablePlane:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "plane",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "normalize"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Plane.ReadonlyPlane:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ReadonlyPlane = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        normal: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        d: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ReadonlyPlane",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Plane.romPositionAndNormal:function(1)",
              "docComment": "/**\n * Creates a plane from an origin point and a normal\n *\n * @param origin - origin of the plane to be constructed\n *\n * @param normal - normal of the plane to be constructed\n *\n * @returns a new Plane the normal vector to this plane at the given origin point. Note : the vector \"normal\" is updated because normalized.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function romPositionAndNormal(origin: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", normal: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutablePlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.MutablePlane:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "origin",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "normal",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "romPositionAndNormal"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Plane.signedDistanceTo:function(1)",
              "docComment": "/**\n * Calculates the distance to a point\n *\n * @param point - point to calculate distance to\n *\n * @returns the signed distance (float) from the given point to the Plane.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function signedDistanceTo(plane: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyPlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.ReadonlyPlane:type"
                },
                {
                  "kind": "Content",
                  "text": ", point: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "plane",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "signedDistanceTo"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Plane.signedDistanceToPlaneFromPositionAndNormal:function(1)",
              "docComment": "/**\n * Calculates the distance from a plane and a point\n *\n * @param origin - origin of the plane to be constructed\n *\n * @param normal - normal of the plane to be constructed\n *\n * @param point - point to calculate distance to\n *\n * @returns the signed distance between the plane defined by the normal vector at the \"origin\"\" point and the given other point.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function signedDistanceToPlaneFromPositionAndNormal(origin: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", normal: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", point: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "origin",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "normal",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "signedDistanceToPlaneFromPositionAndNormal"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Plane.transform:function(1)",
              "docComment": "/**\n * Applies a transformation the plane and returns the result\n *\n * @param transformation - the transformation matrix to be applied to the plane\n *\n * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transform(plane: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyPlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.ReadonlyPlane:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutablePlane",
                  "canonicalReference": "@dcl/playground-assets!Plane.MutablePlane:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "plane",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "transform"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PointerEventsResult:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PointerEventsResult: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "PointerEventsResultSchema",
              "canonicalReference": "@dcl/playground-assets!PointerEventsResultSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PointerEventsResult",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PointerEventsResultSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PointerEventsResultSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBPointerEventsResult",
              "canonicalReference": "@dcl/playground-assets!PBPointerEventsResult:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/PointerEventsResult.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PointerEventsResultSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!PointerEventsSystem:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PointerEventsSystem = "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "createPointerEventSystem",
              "canonicalReference": "@dcl/playground-assets!createPointerEventSystem:function"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/systems/events.d.ts",
          "releaseTag": "Public",
          "name": "PointerEventsSystem",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!pointerEventsSystem:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "pointerEventsSystem: "
            },
            {
              "kind": "Content",
              "text": "{\n    removeOnClick(entity: unknown): void;\n    removeOnPointerDown(entity: unknown): void;\n    removeOnPointerUp(entity: unknown): void;\n    onClick(entity: unknown, cb: import(\"../../systems/events\")."
            },
            {
              "kind": "Reference",
              "text": "EventSystemCallback",
              "canonicalReference": "@dcl/playground-assets!EventSystemCallback:type"
            },
            {
              "kind": "Content",
              "text": ", opts?: import(\"../../systems/events\")."
            },
            {
              "kind": "Reference",
              "text": "EventSystemOptions",
              "canonicalReference": "@dcl/playground-assets!EventSystemOptions:type"
            },
            {
              "kind": "Content",
              "text": " | undefined): void;\n    onPointerDown(entity: unknown, cb: import(\"../../systems/events\")."
            },
            {
              "kind": "Reference",
              "text": "EventSystemCallback",
              "canonicalReference": "@dcl/playground-assets!EventSystemCallback:type"
            },
            {
              "kind": "Content",
              "text": ", opts?: import(\"../../systems/events\")."
            },
            {
              "kind": "Reference",
              "text": "EventSystemOptions",
              "canonicalReference": "@dcl/playground-assets!EventSystemOptions:type"
            },
            {
              "kind": "Content",
              "text": " | undefined): void;\n    onPointerUp(entity: unknown, cb: import(\"../../systems/events\")."
            },
            {
              "kind": "Reference",
              "text": "EventSystemCallback",
              "canonicalReference": "@dcl/playground-assets!EventSystemCallback:type"
            },
            {
              "kind": "Content",
              "text": ", opts?: import(\"../../systems/events\")."
            },
            {
              "kind": "Reference",
              "text": "EventSystemOptions",
              "canonicalReference": "@dcl/playground-assets!EventSystemOptions:type"
            },
            {
              "kind": "Content",
              "text": " | undefined): void;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/runtime/initialization/index.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "pointerEventsSystem",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!PointerEventType:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum PointerEventType "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_hover_feedback.gen.d.ts",
          "releaseTag": "Public",
          "name": "PointerEventType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!PointerEventType.PET_DOWN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PET_DOWN = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "PET_DOWN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!PointerEventType.PET_HOVER_ENTER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PET_HOVER_ENTER = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "PET_HOVER_ENTER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!PointerEventType.PET_HOVER_LEAVE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PET_HOVER_LEAVE = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "PET_HOVER_LEAVE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!PointerEventType.PET_UP:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PET_UP = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "PET_UP"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PointerHoverFeedback:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PointerHoverFeedback: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "PointerHoverFeedbackSchema",
              "canonicalReference": "@dcl/playground-assets!PointerHoverFeedbackSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PointerHoverFeedback",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PointerHoverFeedbackSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PointerHoverFeedbackSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBPointerHoverFeedback",
              "canonicalReference": "@dcl/playground-assets!PBPointerHoverFeedback:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/PointerHoverFeedback.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PointerHoverFeedbackSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PointerLock:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PointerLock: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "PointerLockSchema",
              "canonicalReference": "@dcl/playground-assets!PointerLockSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PointerLock",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!PointerLockSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PointerLockSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBPointerLock",
              "canonicalReference": "@dcl/playground-assets!PBPointerLock:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/PointerLock.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PointerLockSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Position:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Position = "
            },
            {
              "kind": "Content",
              "text": "{\n    top: "
            },
            {
              "kind": "Reference",
              "text": "PositionUnit",
              "canonicalReference": "@dcl/playground-assets!PositionUnit:type"
            },
            {
              "kind": "Content",
              "text": ";\n    right: "
            },
            {
              "kind": "Reference",
              "text": "PositionUnit",
              "canonicalReference": "@dcl/playground-assets!PositionUnit:type"
            },
            {
              "kind": "Content",
              "text": ";\n    bottom: "
            },
            {
              "kind": "Reference",
              "text": "PositionUnit",
              "canonicalReference": "@dcl/playground-assets!PositionUnit:type"
            },
            {
              "kind": "Content",
              "text": ";\n    left: "
            },
            {
              "kind": "Reference",
              "text": "PositionUnit",
              "canonicalReference": "@dcl/playground-assets!PositionUnit:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/components/uiTransform/types.d.ts",
          "releaseTag": "Public",
          "name": "Position",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!PositionUnit:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PositionUnit = "
            },
            {
              "kind": "Content",
              "text": "`${number}px` | `${number}%` | number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/components/uiTransform/types.d.ts",
          "releaseTag": "Public",
          "name": "PositionUnit",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/playground-assets!Quaternion:namespace",
          "docComment": "/**\n * Quaternion is a type and a namespace.\n * ```\n * // The namespace contains all types and functions to operates with Quaternion\n * const next = Quaternion.add(pointA, velocityA)\n * // The type Quaternion is an alias to Quaternion.ReadonlyQuaternion\n * const readonlyRotation: Quaternion = Quaternion.Zero()\n * readonlyRotation.x = 0.1 // this FAILS\n *\n * // For mutable usage, use `Quaternion.Mutable`\n * const rotation: Quaternion.Mutable = Quaternion.Identity()\n * rotation.x = 3.0 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Quaternion "
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/Quaternion.d.ts",
          "releaseTag": "Public",
          "name": "Quaternion",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.add:function(1)",
              "docComment": "/**\n * Returns a new Quaternion as the result of the addition of the two given quaternions.\n *\n * @param q1 - the first quaternion\n *\n * @param q2 - the second quaternion\n *\n * @returns the resulting quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function add(q1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", q2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "q2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "add"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.angle:function(1)",
              "docComment": "/**\n * Returns the angle in degrees between two rotations a and b.\n *\n * @param quat1 - defines the first quaternion\n *\n * @param quat2 - defines the second quaternion\n *\n * @returns the degrees angle\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function angle(quat1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", quat2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "quat1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "quat2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "angle"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.create:function(1)",
              "docComment": "/**\n * Creates a new Quaternion from the given floats\n *\n * @param x - defines the first component (0 by default)\n *\n * @param y - defines the second component (0 by default)\n *\n * @param z - defines the third component (0 by default)\n *\n * @param w - defines the fourth component (1.0 by default)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function create(\n    x?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    y?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    z?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    w?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "name": "create"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.dot:function(1)",
              "docComment": "/**\n * Returns the dot product (float) between the quaternions \"left\" and \"right\"\n *\n * @param left - defines the left operand\n *\n * @param right - defines the right operand\n *\n * @returns the dot product\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function dot(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "dot"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.fromAngleAxis:function(1)",
              "docComment": "/**\n * @param degrees - the angle degrees\n *\n * @param axis - vector3\n *\n * @returns a new Quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromAngleAxis(degrees: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", axis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "degrees",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "axis",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "fromAngleAxis"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.fromAxisToRotationQuaternion:function(1)",
              "docComment": "/**\n * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\n *\n * @param axis1 - defines the first axis\n *\n * @param axis2 - defines the second axis\n *\n * @param axis3 - defines the third axis\n *\n * @returns the new quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromAxisToRotationQuaternion(axis1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "axis2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "axis3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "fromAxisToRotationQuaternion"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.fromAxisToRotationQuaternionToRef:function(1)",
              "docComment": "/**\n * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\n *\n * @param axis1 - defines the first axis\n *\n * @param axis2 - defines the second axis\n *\n * @param axis3 - defines the third axis\n *\n * @param ref - defines the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromAxisToRotationQuaternionToRef(axis1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", ref: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "axis2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "axis3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "ref",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "fromAxisToRotationQuaternionToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.fromEulerDegrees:function(1)",
              "docComment": "/**\n * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.\n *\n * @param x - the rotation on the x axis in euler degrees\n *\n * @param y - the rotation on the y axis in euler degrees\n *\n * @param z - the rotation on the z axis in euler degrees\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromEulerDegrees(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "fromEulerDegrees"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.fromLookAt:function(1)",
              "docComment": "/**\n * Rotates the transform so the forward vector points at target's current position.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromLookAt(position: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", worldUp?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "position",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "worldUp",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "fromLookAt"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.fromLookAtToRef:function(1)",
              "docComment": "/**\n * Rotates the transform so the forward vector points at target's current position.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromLookAtToRef(position: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", worldUp: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "position",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "worldUp",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ],
              "name": "fromLookAtToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.fromRotationMatrixToRef:function(1)",
              "docComment": "/**\n * Updates the given quaternion with the given rotation matrix values\n *\n * @param matrix - defines the source matrix\n *\n * @param result - defines the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromRotationMatrixToRef(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion.MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "fromRotationMatrixToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.fromRotationYawPitchRoll:function(1)",
              "docComment": "/**\n * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n *\n * @param yaw - defines the rotation around Y axis (radians)\n *\n * @param pitch - defines the rotation around X axis (radians)\n *\n * @param roll - defines the rotation around Z axis (radians)\n *\n * @returns result quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromRotationYawPitchRoll(yaw: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitch: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roll: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "yaw",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "pitch",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roll",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "fromRotationYawPitchRoll"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.fromRotationYawPitchRollToRef:function(1)",
              "docComment": "/**\n * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n *\n * @param yaw - defines the rotation around Y axis (radians)\n *\n * @param pitch - defines the rotation around X axis (radians)\n *\n * @param roll - defines the rotation around Z axis (radians)\n *\n * @param result - defines the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromRotationYawPitchRollToRef(yaw: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitch: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roll: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion.MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "yaw",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "pitch",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roll",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "fromRotationYawPitchRollToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.fromToRotation:function(1)",
              "docComment": "/**\n * Creates a rotation which rotates from fromDirection to toDirection.\n *\n * @param from - defines the first direction Vector\n *\n * @param to - defines the target direction Vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromToRotation(from: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", to: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", up?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "from",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "fromToRotation"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.Identity:function(1)",
              "docComment": "/**\n * Creates an identity quaternion\n *\n * @returns - the identity quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Identity(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Identity"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.length:function(1)",
              "docComment": "/**\n * Gets length of current quaternion\n *\n * @returns the quaternion length (float)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function length(q: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "length"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.lengthSquared:function(1)",
              "docComment": "/**\n * Gets length of current quaternion\n *\n * @returns the quaternion length (float)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lengthSquared(q: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "lengthSquared"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.lookRotation:function(1)",
              "docComment": "/**\n * Creates a rotation with the specified forward and upwards directions.\n *\n * @param forward - the direction to look in\n *\n * @param up - the vector that defines in which direction up is\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lookRotation(forward: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", up?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "forward",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "lookRotation"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.multiply:function(1)",
              "docComment": "/**\n * Multiplies two quaternions\n *\n * @param self - defines the first operand\n *\n * @param q1 - defines the second operand\n *\n * @returns a new quaternion set as the multiplication result of the self one with the given one \"q1\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiply(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", q1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "q1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.multiplyToRef:function(1)",
              "docComment": "/**\n * Sets the given \"result\" as the the multiplication result of the self one with the given one \"q1\"\n *\n * @param self - defines the first operand\n *\n * @param q1 - defines the second operand\n *\n * @param result - defines the target quaternion\n *\n * @returns the current quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyToRef(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", q1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "q1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Quaternion.Mutable:type",
              "docComment": "/**\n * Type with `Quaternion` for readonly usage, e.g. `const zeroRotation: Quaternion = Quaternion.Zero()`. For mutable, use `Quaternion.Mutable`, e.g. `const identityQuaternion: Quaternion.Mutable = Quaternion.Identity()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Mutable = "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Mutable",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type",
              "docComment": "/**\n * For external usage, type with `Quaternion`, e.g. `const zeroRotation: Quaternion = Quaternion.Zero()`. For mutable typing, use `Quaternion.Mutable`, e.g. `const identityQuaternion: Quaternion.Mutable = Quaternion.Identity()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type MutableQuaternion = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        x: number;\n        y: number;\n        z: number;\n        w: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MutableQuaternion",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.normalize:function(1)",
              "docComment": "/**\n * Normalize in place the current quaternion\n *\n * @returns the current updated quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalize(q: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "normalize"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type",
              "docComment": "/**\n * For external use, type with `Quaternion`, e.g. `const zeroRotation: Quaternion = Quaternion.Zero()`. For mutable typing, use `Quaternion.Mutable`, e.g. `const identityQuaternion: Quaternion.Mutable = Quaternion.Identity()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ReadonlyQuaternion = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly x: number;\n        readonly y: number;\n        readonly z: number;\n        readonly w: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ReadonlyQuaternion",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.rotateTowards:function(1)",
              "docComment": "/**\n * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.\n *\n * @param from - defines the first quaternion\n *\n * @param to - defines the second quaternion\n *\n * @param maxDegreesDelta - the interval step\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotateTowards(from: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", to: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", maxDegreesDelta: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "from",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "maxDegreesDelta",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "rotateTowards"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.slerp:function(1)",
              "docComment": "/**\n * Interpolates between two quaternions\n *\n * @param left - defines first quaternion\n *\n * @param right - defines second quaternion\n *\n * @param amount - defines the gradient to use\n *\n * @returns the new interpolated quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function slerp(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "slerp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.slerpToRef:function(1)",
              "docComment": "/**\n * Interpolates between two quaternions and stores it into a target quaternion\n *\n * @param left - defines first quaternion\n *\n * @param right - defines second quaternion\n *\n * @param amount - defines the gradient to use\n *\n * @param result - defines the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function slerpToRef(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "slerpToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.toEulerAngles:function(1)",
              "docComment": "/**\n * Gets or sets the euler angle representation of the rotation. Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n *\n * @returns a new Vector3 with euler angles degrees\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toEulerAngles(q: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.Mutable",
                  "canonicalReference": "@dcl/playground-assets!Vector3.Mutable:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toEulerAngles"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Quaternion.Zero:function(1)",
              "docComment": "/**\n * Returns a zero filled quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Zero(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Zero"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Quaternion:type",
          "docComment": "/**\n * Quaternion is a type and a namespace. - The namespace contains all types and functions to operates with Quaternion - The type Quaternion is an alias to Quaternion.ReadonlyQuaternion\n * ```\n *\n * // Namespace usage example\n * const next = Quaternion.add(pointA, velocityA)\n *\n * // Type usage example\n * const readonlyRotation: Quaternion = Quaternion.Zero()\n * readonlyRotation.x = 0.1 // this FAILS\n *\n * // For mutable usage, use `Quaternion.Mutable`\n * const rotation: Quaternion.Mutable = Quaternion.Identity()\n * rotation.x = 3.0 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Quaternion = "
            },
            {
              "kind": "Reference",
              "text": "Quaternion.ReadonlyQuaternion",
              "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/Quaternion.d.ts",
          "releaseTag": "Public",
          "name": "Quaternion",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!QuaternionType:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type QuaternionType = "
            },
            {
              "kind": "Content",
              "text": "{\n    x: number;\n    y: number;\n    z: number;\n    w: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/custom/Quaternion.d.ts",
          "releaseTag": "Public",
          "name": "QuaternionType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!RAD2DEG:var",
          "docComment": "/**\n * Constant used to convert from radians to Euler degrees\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RAD2DEG: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/types.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "RAD2DEG",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!Raycast:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Raycast: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "RaycastSchema",
              "canonicalReference": "@dcl/playground-assets!RaycastSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Raycast",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!RaycastHit:interface",
          "docComment": "/**\n * Position will be relative to the scene\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RaycastHit "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/raycast_result.gen.d.ts",
          "releaseTag": "Public",
          "name": "RaycastHit",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!RaycastHit#direction:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "direction: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/playground-assets!PBVector3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "direction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!RaycastHit#entityId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "entityId?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "entityId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!RaycastHit#length:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "length: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "length",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!RaycastHit#meshName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "meshName?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "meshName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!RaycastHit#normalHit:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalHit: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/playground-assets!PBVector3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "normalHit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!RaycastHit#origin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "origin: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/playground-assets!PBVector3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "origin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!RaycastHit#position:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "position: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/playground-assets!PBVector3:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "position",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!RaycastHit:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RaycastHit: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "RaycastHit",
              "canonicalReference": "@dcl/playground-assets!RaycastHit:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "RaycastHit",
              "canonicalReference": "@dcl/playground-assets!RaycastHit:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/raycast_result.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "RaycastHit",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!RaycastQueryType:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum RaycastQueryType "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/raycast.gen.d.ts",
          "releaseTag": "Public",
          "name": "RaycastQueryType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!RaycastQueryType.RQT_HIT_FIRST:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RQT_HIT_FIRST = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "RQT_HIT_FIRST"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!RaycastQueryType.RQT_QUERY_ALL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RQT_QUERY_ALL = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "RQT_QUERY_ALL"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!RaycastResult:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RaycastResult: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "RaycastResultSchema",
              "canonicalReference": "@dcl/playground-assets!RaycastResultSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "RaycastResult",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!RaycastResultSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RaycastResultSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBRaycastResult",
              "canonicalReference": "@dcl/playground-assets!PBRaycastResult:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/RaycastResult.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "RaycastResultSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!RaycastSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RaycastSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBRaycast",
              "canonicalReference": "@dcl/playground-assets!PBRaycast:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/Raycast.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "RaycastSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!ReactBasedUiSystem:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ReactBasedUiSystem = "
            },
            {
              "kind": "Content",
              "text": "{\n    destroy(): void;\n    setUiRenderer(ui: "
            },
            {
              "kind": "Reference",
              "text": "UiComponent",
              "canonicalReference": "@dcl/playground-assets!UiComponent:type"
            },
            {
              "kind": "Content",
              "text": "): void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/system.d.ts",
          "releaseTag": "Public",
          "name": "ReactBasedUiSystem",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/playground-assets!ReactEcs:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace ReactEcs "
            }
          ],
          "fileUrlPath": "../react-ecs/dist/react-ecs.d.ts",
          "releaseTag": "Public",
          "name": "ReactEcs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!ReactEcs.createElement:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createElement: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "createElement",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Namespace",
              "canonicalReference": "@dcl/playground-assets!ReactEcs.JSX:namespace",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace JSX "
                }
              ],
              "releaseTag": "Public",
              "name": "JSX",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Interface",
                  "canonicalReference": "@dcl/playground-assets!ReactEcs.JSX.Component:interface",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "interface Component "
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "Component",
                  "preserveMemberOrder": false,
                  "members": [],
                  "extendsTokenRanges": []
                },
                {
                  "kind": "Interface",
                  "canonicalReference": "@dcl/playground-assets!ReactEcs.JSX.Element:interface",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "interface Element "
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "Element",
                  "preserveMemberOrder": false,
                  "members": [],
                  "extendsTokenRanges": []
                },
                {
                  "kind": "TypeAlias",
                  "canonicalReference": "@dcl/playground-assets!ReactEcs.JSX.IntrinsicElements:type",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type IntrinsicElements = "
                    },
                    {
                      "kind": "Reference",
                      "text": "EcsElements",
                      "canonicalReference": "@dcl/playground-assets!EcsElements:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "IntrinsicElements",
                  "typeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!ReactEcsRenderer:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ReactEcsRenderer: "
            },
            {
              "kind": "Content",
              "text": "import(\"./system\")."
            },
            {
              "kind": "Reference",
              "text": "ReactBasedUiSystem",
              "canonicalReference": "@dcl/playground-assets!ReactBasedUiSystem:type"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/index.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ReactEcsRenderer",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!ReadonlyComponentSchema:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ReadonlyComponentSchema<T extends "
            },
            {
              "kind": "Content",
              "text": "["
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<any, any>, ..."
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<any, any>[]]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [K in keyof T]: T[K] extends "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<any, any> ? "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<T[K]['get']> : never;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/readonly.d.ts",
          "releaseTag": "Public",
          "name": "ReadonlyComponentSchema",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!ReadonlyPrimitive:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ReadonlyPrimitive = "
            },
            {
              "kind": "Content",
              "text": "number | string | number[] | string[] | boolean | boolean[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/readonly.d.ts",
          "releaseTag": "Public",
          "name": "ReadonlyPrimitive",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!ReceiveMessage:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ReceiveMessage = "
            },
            {
              "kind": "Content",
              "text": "{\n    type: "
            },
            {
              "kind": "Reference",
              "text": "WireMessage.Enum",
              "canonicalReference": "@dcl/playground-assets!WireMessage.Enum:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    componentId: number;\n    timestamp: number;\n    transportType?: string;\n    data?: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    messageBuffer: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/systems/crdt/types.d.ts",
          "releaseTag": "Public",
          "name": "ReceiveMessage",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Result:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Result<T extends "
            },
            {
              "kind": "Reference",
              "text": "Spec",
              "canonicalReference": "@dcl/playground-assets!Spec:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ToOptional",
              "canonicalReference": "@dcl/playground-assets!ToOptional:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    [K in keyof T]: T[K] extends "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": " ? "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<T[K]['deserialize']> : T[K] extends "
            },
            {
              "kind": "Reference",
              "text": "Spec",
              "canonicalReference": "@dcl/playground-assets!Spec:interface"
            },
            {
              "kind": "Content",
              "text": " ? "
            },
            {
              "kind": "Reference",
              "text": "Result",
              "canonicalReference": "@dcl/playground-assets!Result:type"
            },
            {
              "kind": "Content",
              "text": "<T[K]> : never;\n}>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/Map.d.ts",
          "releaseTag": "Public",
          "name": "Result",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 13
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/playground-assets!Scalar:namespace",
          "docComment": "/**\n * Scalar computation library\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Scalar "
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/Scalar.d.ts",
          "releaseTag": "Public",
          "name": "Scalar",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.clamp:function(1)",
              "docComment": "/**\n * Returns the value itself if it's between min and max. Returns min if the value is lower than min. Returns max if the value is greater than max.\n *\n * @param value - the value to clmap\n *\n * @param min - the min value to clamp to (default: 0)\n *\n * @param max - the max value to clamp to (default: 1)\n *\n * @returns the clamped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clamp(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "clamp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.deltaAngle:function(1)",
              "docComment": "/**\n * Calculates the shortest difference between two given angles given in degrees.\n *\n * @param current - current angle in degrees\n *\n * @param target - target angle in degrees\n *\n * @returns the delta\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function deltaAngle(current: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "current",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "deltaAngle"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.denormalize:function(1)",
              "docComment": "/**\n * Denormalize the value from 0.0 and 1.0 using min and max values\n *\n * @param normalized - value to denormalize\n *\n * @param min - max to denormalize between\n *\n * @param max - min to denormalize between\n *\n * @returns the denormalized value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function denormalize(normalized: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "normalized",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "denormalize"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.hermite:function(1)",
              "docComment": "/**\n * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\". {@link http://mathworld.wolfram.com/HermitePolynomial.html}\n *\n * @param value1 - spline value\n *\n * @param tangent1 - spline value\n *\n * @param value2 - spline value\n *\n * @param tangent2 - spline value\n *\n * @param amount - input value\n *\n * @returns hermite result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function hermite(value1: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tangent1: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tangent2: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "tangent1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "tangent2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "name": "hermite"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.inverseLerp:function(1)",
              "docComment": "/**\n * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\n *\n * @param a - start value\n *\n * @param b - target value\n *\n * @param value - value between a and b\n *\n * @returns the inverseLerp value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function inverseLerp(a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "inverseLerp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.lerp:function(1)",
              "docComment": "/**\n * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar\n *\n * @param start - start value\n *\n * @param end - target value\n *\n * @param amount - amount to lerp between\n *\n * @returns the lerped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerp(start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "lerp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.lerpAngle:function(1)",
              "docComment": "/**\n * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees. The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\n *\n * @param start - start value\n *\n * @param end - target value\n *\n * @param amount - amount to lerp between\n *\n * @returns the lerped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerpAngle(start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "lerpAngle"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.log2:function(1)",
              "docComment": "/**\n * the log2 of value.\n *\n * @param value - the value to compute log2 of\n *\n * @returns the log2 of value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function log2(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "log2"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.moveTowards:function(1)",
              "docComment": "/**\n * Moves a value current towards target.\n *\n * This is essentially the same as Mathf.Lerp but instead the export function will ensure that the speed never exceeds maxDelta. Negative values of maxDelta pushes the value away from target.\n *\n * @param current - current value\n *\n * @param target - target value\n *\n * @param maxDelta - max distance to move\n *\n * @returns resulting value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function moveTowards(current: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", maxDelta: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "current",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "maxDelta",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "moveTowards"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.moveTowardsAngle:function(1)",
              "docComment": "/**\n * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\n *\n * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\n *\n * @param current - current value\n *\n * @param target - target value\n *\n * @param maxDelta - max distance to move\n *\n * @returns resulting angle\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function moveTowardsAngle(current: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", maxDelta: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "current",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "maxDelta",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "moveTowardsAngle"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.normalize:function(1)",
              "docComment": "/**\n * Normalize the value between 0.0 and 1.0 using min and max values\n *\n * @param value - value to normalize\n *\n * @param min - max to normalize between\n *\n * @param max - min to normalize between\n *\n * @returns the normalized value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalize(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "normalize"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.normalizeRadians:function(1)",
              "docComment": "/**\n * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\n *\n * @param angle - The angle to normalize in radian.\n *\n * @returns The converted angle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalizeRadians(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "normalizeRadians"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.percentToRange:function(1)",
              "docComment": "/**\n * This export function returns number that corresponds to the percentage in a given range.\n *\n * PercentToRange(0.34,0,100) will return 34.\n *\n * @param percent - to convert to number\n *\n * @param min - min range\n *\n * @param max - max range\n *\n * @returns the number\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function percentToRange(percent: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "percent",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "percentToRange"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.pingPong:function(1)",
              "docComment": "/**\n * PingPongs the value t, so that it is never larger than length and never smaller than 0.\n *\n * @param tx - value\n *\n * @param length - length\n *\n * @returns The returned value will move back and forth between 0 and length\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function pingPong(tx: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", length: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tx",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "length",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "pingPong"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.randomRange:function(1)",
              "docComment": "/**\n * Returns a random float number between and min and max values\n *\n * @param min - min value of random\n *\n * @param max - max value of random\n *\n * @returns random value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function randomRange(min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "randomRange"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.rangeToPercent:function(1)",
              "docComment": "/**\n * This export function returns percentage of a number in a given range.\n *\n * RangeToPercent(40,20,60) will return 0.5 (50%) RangeToPercent(34,0,100) will return 0.34 (34%)\n *\n * @param num - to convert to percentage\n *\n * @param min - min range\n *\n * @param max - max range\n *\n * @returns the percentage\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rangeToPercent(num: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "rangeToPercent"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.repeat:function(1)",
              "docComment": "/**\n * Loops the value, so that it is never larger than length and never smaller than 0.\n *\n * This is similar to the modulo operator but it works with floating point numbers. For example, using 3.0 for t and 2.5 for length, the result would be 0.5. With t = 5 and length = 2.5, the result would be 0.0. Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\n *\n * @param value - the value\n *\n * @param length - the length\n *\n * @returns the looped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function repeat(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", length: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "length",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "repeat"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.sign:function(1)",
              "docComment": "/**\n * Returns -1 if value is negative and +1 is value is positive.\n *\n * @param _value - the value\n *\n * @returns the value itself if it's equal to zero.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function sign(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "sign"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.smoothStep:function(1)",
              "docComment": "/**\n * Interpolates between min and max with smoothing at the limits.\n *\n * This export function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\n *\n * @param from - from\n *\n * @param to - to\n *\n * @param tx - value\n *\n * @returns the smooth stepped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function smoothStep(from: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", to: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tx: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "from",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "tx",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "smoothStep"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.toHex:function(1)",
              "docComment": "/**\n * Returns a string : the upper case translation of the number i to hexadecimal.\n *\n * @param i - number\n *\n * @returns the upper case translation of the number i to hexadecimal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toHex(i: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "i",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toHex"
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Scalar.TwoPi:var",
              "docComment": "/**\n * Two pi constants convenient for computation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TwoPi: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "TwoPi",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Scalar.withinEpsilon:function(1)",
              "docComment": "/**\n * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n *\n * @param a - number\n *\n * @param b - number\n *\n * @param epsilon - (default = 1.401298E-45)\n *\n * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function withinEpsilon(a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", epsilon?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "epsilon",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "withinEpsilon"
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/playground-assets!Schemas:namespace",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Schemas "
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/index.d.ts",
          "releaseTag": "Public",
          "name": "Schemas",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Array:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Array: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "IArray",
                  "canonicalReference": "@dcl/playground-assets!IArray:function"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Array",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Boolean:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Boolean: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Boolean",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Byte:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Byte: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Byte",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Color3:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Color3: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Color3Type",
                  "canonicalReference": "@dcl/playground-assets!Color3Type:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Color3",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Color4:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Color4: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Color4Type",
                  "canonicalReference": "@dcl/playground-assets!Color4Type:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Color4",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Double:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Double: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Double",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Entity:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Entity: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Entity",
                  "canonicalReference": "@dcl/playground-assets!Entity:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Entity",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Enum:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Enum: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "IEnum",
                  "canonicalReference": "@dcl/playground-assets!IEnum:function"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Enum",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Float:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Float: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Float",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Int:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Int: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Int",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Int64:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Int64: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Int64",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Map:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Map: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "IMap",
                  "canonicalReference": "@dcl/playground-assets!IMap:function"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Map",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Number:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Number: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Number",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Optional:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Optional: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "IOptional",
                  "canonicalReference": "@dcl/playground-assets!IOptional:function"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Optional",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Quaternion:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Quaternion: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "QuaternionType",
                  "canonicalReference": "@dcl/playground-assets!QuaternionType:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Quaternion",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Schemas.SchemaType:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type SchemaType = "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "SchemaType",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Short:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Short: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Short",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.String:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "String: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "String",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!Schemas.Vector3:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Vector3: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Type",
                  "canonicalReference": "@dcl/playground-assets!Vector3Type:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Vector3",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!Spec:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Spec "
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/Map.d.ts",
          "releaseTag": "Public",
          "name": "Spec",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@dcl/playground-assets!Spec:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "ISchema",
                  "canonicalReference": "@dcl/playground-assets!ISchema:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!SystemFn:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SystemFn = "
            },
            {
              "kind": "Content",
              "text": "(dt: number) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/systems.d.ts",
          "releaseTag": "Public",
          "name": "SystemFn",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Task:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Task<T = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/systems/async-task.d.ts",
          "releaseTag": "Public",
          "name": "Task",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!TextAlignMode:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum TextAlignMode "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/common/texts.gen.d.ts",
          "releaseTag": "Public",
          "name": "TextAlignMode",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextAlignMode.TAM_BOTTOM_CENTER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TAM_BOTTOM_CENTER = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TAM_BOTTOM_CENTER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextAlignMode.TAM_BOTTOM_LEFT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TAM_BOTTOM_LEFT = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TAM_BOTTOM_LEFT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextAlignMode.TAM_BOTTOM_RIGHT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TAM_BOTTOM_RIGHT = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TAM_BOTTOM_RIGHT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextAlignMode.TAM_MIDDLE_CENTER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TAM_MIDDLE_CENTER = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TAM_MIDDLE_CENTER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextAlignMode.TAM_MIDDLE_LEFT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TAM_MIDDLE_LEFT = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TAM_MIDDLE_LEFT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextAlignMode.TAM_MIDDLE_RIGHT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TAM_MIDDLE_RIGHT = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TAM_MIDDLE_RIGHT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextAlignMode.TAM_TOP_CENTER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TAM_TOP_CENTER = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TAM_TOP_CENTER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextAlignMode.TAM_TOP_LEFT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TAM_TOP_LEFT = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TAM_TOP_LEFT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextAlignMode.TAM_TOP_RIGHT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TAM_TOP_RIGHT = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TAM_TOP_RIGHT"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!TextShape:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TextShape: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "TextShapeSchema",
              "canonicalReference": "@dcl/playground-assets!TextShapeSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TextShape",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!TextShapeSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TextShapeSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBTextShape",
              "canonicalReference": "@dcl/playground-assets!PBTextShape:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/TextShape.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TextShapeSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!Texture:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Texture "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/texture.gen.d.ts",
          "releaseTag": "Public",
          "name": "Texture",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!Texture#filterMode:member",
              "docComment": "/**\n * default = FilterMode.Bilinear\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filterMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureFilterMode",
                  "canonicalReference": "@dcl/playground-assets!TextureFilterMode:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "filterMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!Texture#src:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "src: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "src",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!Texture#wrapMode:member",
              "docComment": "/**\n * default = TextureWrapMode.Clamp\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wrapMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureWrapMode",
                  "canonicalReference": "@dcl/playground-assets!TextureWrapMode:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "wrapMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!Texture:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Texture: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "Texture",
              "canonicalReference": "@dcl/playground-assets!Texture:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "Texture",
              "canonicalReference": "@dcl/playground-assets!Texture:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/texture.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Texture",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!TextureFilterMode:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum TextureFilterMode "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/texture.gen.d.ts",
          "releaseTag": "Public",
          "name": "TextureFilterMode",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextureFilterMode.TFM_BILINEAR:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TFM_BILINEAR = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TFM_BILINEAR"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextureFilterMode.TFM_POINT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TFM_POINT = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TFM_POINT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextureFilterMode.TFM_TRILINEAR:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TFM_TRILINEAR = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TFM_TRILINEAR"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!TextureHelper:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TextureHelper = "
            },
            {
              "kind": "Content",
              "text": "{\n    Common: (texture: "
            },
            {
              "kind": "Reference",
              "text": "Texture",
              "canonicalReference": "@dcl/playground-assets!Texture:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "TextureUnion",
              "canonicalReference": "@dcl/playground-assets!TextureUnion:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    Avatar: (avatarTexture: "
            },
            {
              "kind": "Reference",
              "text": "AvatarTexture",
              "canonicalReference": "@dcl/playground-assets!AvatarTexture:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "TextureUnion",
              "canonicalReference": "@dcl/playground-assets!TextureUnion:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/extended/Material.d.ts",
          "releaseTag": "Public",
          "name": "TextureHelper",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!TextureUnion:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextureUnion "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/texture.gen.d.ts",
          "releaseTag": "Public",
          "name": "TextureUnion",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!TextureUnion#tex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tex?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        $case: 'texture';\n        texture: "
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "@dcl/playground-assets!Texture:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    } | {\n        $case: 'avatarTexture';\n        avatarTexture: "
                },
                {
                  "kind": "Reference",
                  "text": "AvatarTexture",
                  "canonicalReference": "@dcl/playground-assets!AvatarTexture:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!TextureUnion:var",
          "docComment": "/**\n * Internal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TextureUnion: "
            },
            {
              "kind": "Content",
              "text": "{\n    encode(message: "
            },
            {
              "kind": "Reference",
              "text": "TextureUnion",
              "canonicalReference": "@dcl/playground-assets!TextureUnion:interface"
            },
            {
              "kind": "Content",
              "text": ", writer?: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "_m0.Writer",
              "canonicalReference": "protobufjs!Writer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    decode(input: "
            },
            {
              "kind": "Reference",
              "text": "_m0.Reader",
              "canonicalReference": "protobufjs!Reader:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", length?: number): "
            },
            {
              "kind": "Reference",
              "text": "TextureUnion",
              "canonicalReference": "@dcl/playground-assets!TextureUnion:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/texture.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TextureUnion",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!TextureWrapMode:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum TextureWrapMode "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/common/texture.gen.d.ts",
          "releaseTag": "Public",
          "name": "TextureWrapMode",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextureWrapMode.TWM_CLAMP:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TWM_CLAMP = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TWM_CLAMP"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextureWrapMode.TWM_MIRROR:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TWM_MIRROR = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TWM_MIRROR"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextureWrapMode.TWM_MIRROR_ONCE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TWM_MIRROR_ONCE = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TWM_MIRROR_ONCE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!TextureWrapMode.TWM_REPEAT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TWM_REPEAT = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TWM_REPEAT"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!ToGammaSpace:var",
          "docComment": "/**\n * Constant used to convert a value to gamma space\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ToGammaSpace: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/types.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ToGammaSpace",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!ToLinearSpace:var",
          "docComment": "/**\n * Constant used to convert a value to linear space\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ToLinearSpace = "
            },
            {
              "kind": "Content",
              "text": "2.2"
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/types.d.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ToLinearSpace",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!ToOptional:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ToOptional<T> = "
            },
            {
              "kind": "Reference",
              "text": "OnlyOptionalUndefinedTypes",
              "canonicalReference": "@dcl/playground-assets!OnlyOptionalUndefinedTypes:type"
            },
            {
              "kind": "Content",
              "text": "<T> & "
            },
            {
              "kind": "Reference",
              "text": "OnlyNonUndefinedTypes",
              "canonicalReference": "@dcl/playground-assets!OnlyNonUndefinedTypes:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/typing.d.ts",
          "releaseTag": "Public",
          "name": "ToOptional",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!Transform:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Transform: "
            },
            {
              "kind": "Content",
              "text": "import(\"./runtime/types\")."
            },
            {
              "kind": "Reference",
              "text": "TransformComponent",
              "canonicalReference": "@dcl/playground-assets!TransformComponent:type"
            }
          ],
          "fileUrlPath": "../ecs/dist/index.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Transform",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!TransformComponent:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TransformComponent = "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TransformType",
              "canonicalReference": "@dcl/playground-assets!TransformType:type"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TransformType",
              "canonicalReference": "@dcl/playground-assets!TransformType:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/legacy/Transform.d.ts",
          "releaseTag": "Public",
          "name": "TransformComponent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!TransformType:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TransformType = "
            },
            {
              "kind": "Content",
              "text": "{\n    position: {\n        x: number;\n        y: number;\n        z: number;\n    };\n    rotation: {\n        x: number;\n        y: number;\n        z: number;\n        w: number;\n    };\n    scale: {\n        x: number;\n        y: number;\n        z: number;\n    };\n    parent?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "@dcl/playground-assets!Entity:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/legacy/Transform.d.ts",
          "releaseTag": "Public",
          "name": "TransformType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Transport:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Transport = "
            },
            {
              "kind": "Content",
              "text": "{\n    type: string;\n    send(message: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": "): void;\n    onmessage?(message: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": "): void;\n    filter(message: "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TransportMessage",
              "canonicalReference": "@dcl/playground-assets!TransportMessage:type"
            },
            {
              "kind": "Content",
              "text": ", 'messageBuffer'>): boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/systems/crdt/types.d.ts",
          "releaseTag": "Public",
          "name": "Transport",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!TransportMessage:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TransportMessage = "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ReceiveMessage",
              "canonicalReference": "@dcl/playground-assets!ReceiveMessage:type"
            },
            {
              "kind": "Content",
              "text": ", 'data'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/systems/crdt/types.d.ts",
          "releaseTag": "Public",
          "name": "TransportMessage",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!UiBackground:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "UiBackground: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "UiBackgroundSchema",
              "canonicalReference": "@dcl/playground-assets!UiBackgroundSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "UiBackground",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!UiBackgroundSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "UiBackgroundSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBUiBackground",
              "canonicalReference": "@dcl/playground-assets!PBUiBackground:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/UiBackground.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "UiBackgroundSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!UiComponent:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type UiComponent = "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@dcl/playground-assets!JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/system.d.ts",
          "releaseTag": "Public",
          "name": "UiComponent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/playground-assets!UiEntity:function(1)",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function UiEntity(props: "
            },
            {
              "kind": "Reference",
              "text": "EntityPropTypes",
              "canonicalReference": "@dcl/playground-assets!EntityPropTypes:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CommonProps",
              "canonicalReference": "@dcl/playground-assets!CommonProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ReactEcs.JSX.Element",
              "canonicalReference": "@dcl/playground-assets!ReactEcs.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../react-ecs/dist/components/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "UiEntity"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!UiText:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "UiText: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "UiTextSchema",
              "canonicalReference": "@dcl/playground-assets!UiTextSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "UiText",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!UiTextSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "UiTextSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBUiText",
              "canonicalReference": "@dcl/playground-assets!PBUiText:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/UiText.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "UiTextSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!UiTransform:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "UiTransform: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "UiTransformSchema",
              "canonicalReference": "@dcl/playground-assets!UiTransformSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "UiTransform",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/playground-assets!UiTransformProps:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UiTransformProps "
            }
          ],
          "fileUrlPath": "../react-ecs/dist/components/uiTransform/types.d.ts",
          "releaseTag": "Public",
          "name": "UiTransformProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#alignContent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignContent?: "
                },
                {
                  "kind": "Reference",
                  "text": "YGAlign",
                  "canonicalReference": "@dcl/playground-assets!YGAlign:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alignContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#alignItems:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignItems?: "
                },
                {
                  "kind": "Reference",
                  "text": "YGAlign",
                  "canonicalReference": "@dcl/playground-assets!YGAlign:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alignItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#alignSelf:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignSelf?: "
                },
                {
                  "kind": "Reference",
                  "text": "YGAlign",
                  "canonicalReference": "@dcl/playground-assets!YGAlign:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alignSelf",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#display:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "display?: "
                },
                {
                  "kind": "Reference",
                  "text": "YGDisplay",
                  "canonicalReference": "@dcl/playground-assets!YGDisplay:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "display",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#flex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flex?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "flex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#flexBasis:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexBasis?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "flexBasis",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#flexDirection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexDirection?: "
                },
                {
                  "kind": "Reference",
                  "text": "YGFlexDirection",
                  "canonicalReference": "@dcl/playground-assets!YGFlexDirection:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "flexDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#flexGrow:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexGrow?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "flexGrow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#flexShrink:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexShrink?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "flexShrink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#flexWrap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexWrap?: "
                },
                {
                  "kind": "Reference",
                  "text": "YGWrap",
                  "canonicalReference": "@dcl/playground-assets!YGWrap:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "flexWrap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Reference",
                  "text": "PositionUnit",
                  "canonicalReference": "@dcl/playground-assets!PositionUnit:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#justifyContent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "justifyContent?: "
                },
                {
                  "kind": "Reference",
                  "text": "YGJustify",
                  "canonicalReference": "@dcl/playground-assets!YGJustify:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "justifyContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#margin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "margin?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Position",
                  "canonicalReference": "@dcl/playground-assets!Position:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "margin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#maxHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxHeight?: "
                },
                {
                  "kind": "Reference",
                  "text": "PositionUnit",
                  "canonicalReference": "@dcl/playground-assets!PositionUnit:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#maxWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxWidth?: "
                },
                {
                  "kind": "Reference",
                  "text": "PositionUnit",
                  "canonicalReference": "@dcl/playground-assets!PositionUnit:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#minHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minHeight?: "
                },
                {
                  "kind": "Reference",
                  "text": "PositionUnit",
                  "canonicalReference": "@dcl/playground-assets!PositionUnit:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "minHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#minWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minWidth?: "
                },
                {
                  "kind": "Reference",
                  "text": "PositionUnit",
                  "canonicalReference": "@dcl/playground-assets!PositionUnit:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "minWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#overflow:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflow?: "
                },
                {
                  "kind": "Reference",
                  "text": "YGOverflow",
                  "canonicalReference": "@dcl/playground-assets!YGOverflow:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "overflow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#padding:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "padding?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Position",
                  "canonicalReference": "@dcl/playground-assets!Position:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "padding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#position:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "position?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Position",
                  "canonicalReference": "@dcl/playground-assets!Position:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "position",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#positionType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positionType?: "
                },
                {
                  "kind": "Reference",
                  "text": "YGPositionType",
                  "canonicalReference": "@dcl/playground-assets!YGPositionType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "positionType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/playground-assets!UiTransformProps#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Reference",
                  "text": "PositionUnit",
                  "canonicalReference": "@dcl/playground-assets!PositionUnit:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!UiTransformSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "UiTransformSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBUiTransform",
              "canonicalReference": "@dcl/playground-assets!PBUiTransform:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/UiTransform.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "UiTransformSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Unpacked:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Unpacked<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends (infer U)[] ? U : T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/engine/types.d.ts",
          "releaseTag": "Public",
          "name": "Unpacked",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/playground-assets!Vector3:namespace",
          "docComment": "/**\n * Vector3 is a type and a namespace.\n * ```\n * // The namespace contains all types and functions to operates with Vector3\n * const next = Vector3.add(pointA, velocityA)\n * // The type Vector3 is an alias to Vector3.ReadonlyVector3\n * const readonlyPosition: Vector3 = Vector3.Zero()\n * readonlyPosition.x = 0.1 // this FAILS\n *\n * // For mutable usage, use `Vector3.Mutable`\n * const position: Vector3.Mutable = Vector3.One()\n * position.x = 3.0 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Vector3 "
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/Vector3.d.ts",
          "releaseTag": "Public",
          "name": "Vector3",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.add:function(1)",
              "docComment": "/**\n * Returns a new Vector3 as the result of the addition of the two given vectors.\n *\n * @param vector1 - the first vector\n *\n * @param vector2 - the second vector\n *\n * @returns the resulting vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function add(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "add"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.addToRef:function(1)",
              "docComment": "/**\n * Add component by component the vector2 into dest\n *\n * @param dest - the first vector and destination of addition\n *\n * @param vector2 - the second vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function addToRef(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "addToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.applyMatrix4:function(1)",
              "docComment": "/**\n * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective\n *\n * @param matrix - The transformation matrix\n *\n * @returns result Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function applyMatrix4(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "applyMatrix4"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.applyMatrix4ToRef:function(1)",
              "docComment": "/**\n * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the given vector \"result\" with this result\n *\n * @param matrix - The transformation matrix\n *\n * @param result - defines the Vector3 object where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function applyMatrix4ToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "applyMatrix4ToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.Backward:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (0.0, 0.0, -1.0)\n *\n * @returns a new forward Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Backward(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Backward"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.catmullRom:function(1)",
              "docComment": "/**\n * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\n *\n * @param value1 - defines the first control point\n *\n * @param value2 - defines the second control point\n *\n * @param value3 - defines the third control point\n *\n * @param value4 - defines the fourth control point\n *\n * @param amount - defines the amount on the spline to use\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function catmullRom(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value3: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value4: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value4",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "name": "catmullRom"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.center:function(1)",
              "docComment": "/**\n * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\n *\n * @param value1 - defines the first operand\n *\n * @param value2 - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function center(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "center"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.clamp:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\" If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n *\n * @param value - defines the current value\n *\n * @param min - defines the lower range value\n *\n * @param max - defines the upper range value\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clamp(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "clamp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.clampToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\" If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n *\n * @param value - defines the current value\n *\n * @param min - defines the lower range value\n *\n * @param max - defines the upper range value\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clampToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "clampToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.clone:function(1)",
              "docComment": "/**\n * Returns a new Vector3 with the same value\n *\n * @returns the resulting vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clone(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "clone"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.copyFrom:function(1)",
              "docComment": "/**\n * Copy source into dest\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function copyFrom(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "copyFrom"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.copyFromFloats:function(1)",
              "docComment": "/**\n * Sets the given vector \"dest\" with the given floats.\n *\n * @param x - defines the x coordinate of the source\n *\n * @param y - defines the y coordinate of the source\n *\n * @param z - defines the z coordinate of the source\n *\n * @param dest - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function copyFromFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "copyFromFloats"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.create:function(1)",
              "docComment": "/**\n * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\n *\n * @param x - defines the first coordinates (on X axis)\n *\n * @param y - defines the second coordinates (on Y axis)\n *\n * @param z - defines the third coordinates (on Z axis)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function create(\n    x?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    y?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    z?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "create"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.cross:function(1)",
              "docComment": "/**\n * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\" The cross product is then orthogonal to both \"left\" and \"right\"\n *\n * @param left - defines the left operand\n *\n * @param right - defines the right operand\n *\n * @returns the cross product\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function cross(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "cross"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.crossToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the cross product of \"left\" and \"right\" The cross product is then orthogonal to both \"left\" and \"right\"\n *\n * @param left - defines the left operand\n *\n * @param right - defines the right operand\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function crossToRef(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "crossToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.distance:function(1)",
              "docComment": "/**\n * Returns the distance between the vectors \"value1\" and \"value2\"\n *\n * @param value1 - defines the first operand\n *\n * @param value2 - defines the second operand\n *\n * @returns the distance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function distance(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "distance"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.distanceSquared:function(1)",
              "docComment": "/**\n * Returns the squared distance between the vectors \"value1\" and \"value2\"\n *\n * @param value1 - defines the first operand\n *\n * @param value2 - defines the second operand\n *\n * @returns the squared distance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function distanceSquared(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "distanceSquared"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.divide:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\n *\n * @param otherVector - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function divide(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "divide"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.divideToRef:function(1)",
              "docComment": "/**\n * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\n *\n * @param otherVector - defines the second operand\n *\n * @param result - defines the Vector3 object where to store the result\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function divideToRef(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "divideToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.dot:function(1)",
              "docComment": "/**\n * Returns the dot product (float) between the vectors \"left\" and \"right\"\n *\n * @param left - defines the left operand\n *\n * @param right - defines the right operand\n *\n * @returns the dot product\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function dot(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "dot"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.Down:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (0.0, -1.0, 0.0)\n *\n * @returns a new down Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Down(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Down"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.equals:function(1)",
              "docComment": "/**\n * Returns true if the vector1 and the vector2 coordinates are strictly equal\n *\n * @param vector1 - defines the first operand\n *\n * @param vector2 - defines the second operand\n *\n * @returns true if both vectors are equals\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function equals(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.equalsToFloats:function(1)",
              "docComment": "/**\n * Returns true if the current Vector3 coordinates equals the given floats\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @returns true if both vectors are equals\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function equalsToFloats(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "equalsToFloats"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.equalsWithEpsilon:function(1)",
              "docComment": "/**\n * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\n *\n * @param otherVector - defines the second operand\n *\n * @param epsilon - defines the minimal distance to define values as equals\n *\n * @returns true if both vectors are distant less than epsilon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function equalsWithEpsilon(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", epsilon?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "epsilon",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "equalsWithEpsilon"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.floor:function(1)",
              "docComment": "/**\n * Gets a new Vector3 from vector1 floored values\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function floor(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "floor"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.Forward:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (0.0, 0.0, 1.0)\n *\n * @returns a new forward Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Forward(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Forward"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.fract:function(1)",
              "docComment": "/**\n * Gets a new Vector3 from vector1 floored values\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fract(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "fract"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.fromArray:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set from the index \"offset\" of the given array\n *\n * @param array - defines the source array\n *\n * @param offset - defines the offset in the source array\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/playground-assets!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "fromArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.fromArrayToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\n *\n * @param array - defines the source array\n *\n * @param offset - defines the offset in the source array\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromArrayToRef(array: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "fromArrayToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.fromFloatArray:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set from the index \"offset\" of the given FloatArray This function is deprecated. Use FromArray instead\n *\n * @param array - defines the source array\n *\n * @param offset - defines the offset in the source array\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromFloatArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/playground-assets!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "fromFloatArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.fromFloatArrayToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the element values from the index \"offset\" of the given FloatArray This function is deprecated. Use FromArrayToRef instead.\n *\n * @param array - defines the source array\n *\n * @param offset - defines the offset in the source array\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromFloatArrayToRef(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/playground-assets!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "fromFloatArrayToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.getAngleBetweenVectors:function(1)",
              "docComment": "/**\n * Get angle between two vectors\n *\n * @param vector0 - angle between vector0 and vector1\n *\n * @param vector1 - angle between vector0 and vector1\n *\n * @param normal - direction of the normal\n *\n * @returns the angle between vector0 and vector1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getAngleBetweenVectors(vector0: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", normal: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector0",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "normal",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "getAngleBetweenVectors"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.getClipFactor:function(1)",
              "docComment": "/**\n * Get the clip factor between two vectors\n *\n * @param vector0 - defines the first operand\n *\n * @param vector1 - defines the second operand\n *\n * @param axis - defines the axis to use\n *\n * @param size - defines the size along the axis\n *\n * @returns the clip factor\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getClipFactor(vector0: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", size: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector0",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "axis",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "size",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "getClipFactor"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.getHashCode:function(1)",
              "docComment": "/**\n * Creates the Vector3 hash code\n *\n * @returns a number which tends to be unique between Vector3 instances\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getHashCode(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getHashCode"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.hermite:function(1)",
              "docComment": "/**\n * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\n *\n * @param value1 - defines the first control point\n *\n * @param tangent1 - defines the first tangent vector\n *\n * @param value2 - defines the second control point\n *\n * @param tangent2 - defines the second tangent vector\n *\n * @param amount - defines the amount on the interpolation spline (between 0 and 1)\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function hermite(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", tangent1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", tangent2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "tangent1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "tangent2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "name": "hermite"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.isNonUniform:function(1)",
              "docComment": "/**\n * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\n *\n * @param vector - vector to check\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isNonUniform(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isNonUniform"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.Left:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\n *\n * @returns a new left Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Left(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Left"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.length:function(1)",
              "docComment": "/**\n * Gets the length of the Vector3\n *\n * @returns the length of the Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function length(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "length"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.lengthSquared:function(1)",
              "docComment": "/**\n * Gets the squared length of the Vector3\n *\n * @returns squared length of the Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lengthSquared(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "lengthSquared"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.lerp:function(1)",
              "docComment": "/**\n * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\n *\n * @param start - defines the start value\n *\n * @param end - defines the end value\n *\n * @param amount - max defines amount between both (between 0 and 1)\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerp(start: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "lerp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.lerpToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\n *\n * @param start - defines the start value\n *\n * @param end - defines the end value\n *\n * @param amount - max defines amount between both (between 0 and 1)\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerpToRef(start: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "lerpToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.maximize:function(1)",
              "docComment": "/**\n * Gets the maximal coordinate values between two Vector3\n *\n * @param left - defines the first operand\n *\n * @param right - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function maximize(left: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "maximize"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.maximizeInPlaceFromFloatsToRef:function(1)",
              "docComment": "/**\n * Set result Vector3 with the maximal coordinate values between vector1 and the given coordinates\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @param result - the set Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function maximizeInPlaceFromFloatsToRef(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "name": "maximizeInPlaceFromFloatsToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.minimize:function(1)",
              "docComment": "/**\n * Gets the minimal coordinate values between two Vector3\n *\n * @param left - defines the first operand\n *\n * @param right - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function minimize(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "minimize"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.minimizeInPlaceFromFloatsToRef:function(1)",
              "docComment": "/**\n * Set result Vector3 with the minimal coordinate values between vector1 and the given coordinates\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @param result - the set Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function minimizeInPlaceFromFloatsToRef(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "name": "minimizeInPlaceFromFloatsToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.multiply:function(1)",
              "docComment": "/**\n * Returns a new Vector3, result of the multiplication of vector1 by the vector2\n *\n * @param vector1 - defines the first operand\n *\n * @param vector2 - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiply(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.multiplyByFloats:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyByFloats(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "multiplyByFloats"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.multiplyByFloatsToRef:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyByFloatsToRef(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "name": "multiplyByFloatsToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.multiplyToRef:function(1)",
              "docComment": "/**\n * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\n *\n * @param otherVector - defines the second operand\n *\n * @param result - defines the Vector3 object where to store the result\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyToRef(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Vector3.Mutable:type",
              "docComment": "/**\n * Type with `Vector3` for readonly usage, e.g. `const zeroPosition: Vector3 = Vector3.Zero()`. For mutable, use `Vector3.Mutable`, e.g. `const upVector: Vector3.Mutable = Vector3.Up()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Mutable = "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Mutable",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type",
              "docComment": "/**\n * For external usage, type with `Vector3`, e.g. `const zeroPosition: Vector3 = Vector3.Zero()`. For mutable typing, use `Vector3.Mutable`, e.g. `const upVector: Vector3.Mutable = Vector3.Up()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type MutableVector3 = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        x: number;\n        y: number;\n        z: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MutableVector3",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.negate:function(1)",
              "docComment": "/**\n * Returns a new Vector3 with the other sign\n *\n * @returns the resulting vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function negate(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "negate"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.normalize:function(1)",
              "docComment": "/**\n * Normalize the current Vector3. Please note that this is an in place operation.\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalize(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "normalize"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.normalizeFromLength:function(1)",
              "docComment": "/**\n * Normalize the current Vector3 with the given input length. Please note that this is an in place operation.\n *\n * @param len - the length of the vector\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalizeFromLength(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", len: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "len",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "normalizeFromLength"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.normalizeFromLengthToRef:function(1)",
              "docComment": "/**\n * Normalize the current Vector3 with the given input length. Please note that this is an in place operation.\n *\n * @param len - the length of the vector\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalizeFromLengthToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", len: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "len",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "normalizeFromLengthToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.normalizeToRef:function(1)",
              "docComment": "/**\n * Normalize the current Vector3. Please note that this is an in place operation.\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalizeToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "normalizeToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.One:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (1.0, 1.0, 1.0)\n *\n * @returns a new unit Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function One(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "One"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.Random:function(1)",
              "docComment": "/**\n * Returns a new random Vector3\n *\n * @returns a random Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Random(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Random"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type",
              "docComment": "/**\n * For external use, type with `Vector3`, e.g. `const zeroPosition: Vector3 = Vector3.Zero()`. For mutable typing, use `Vector3.Mutable`, e.g. `const upVector: Vector3.Mutable = Vector3.Up()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ReadonlyVector3 = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly x: number;\n        readonly y: number;\n        readonly z: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ReadonlyVector3",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.Right:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (1.0, 0.0, 0.0)\n *\n * @returns a new right Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Right(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Right"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.rotate:function(1)",
              "docComment": "/**\n * Rotates the current Vector3 based on the given quaternion\n *\n * @param q - defines the Quaternion\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotate(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", q: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion.ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "rotate"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.rotateToRef:function(1)",
              "docComment": "/**\n * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.\n *\n * @param q - defines the Quaternion\n *\n * @param result - defines the target Vector3\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotateToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", q: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion.ReadonlyQuaternion",
                  "canonicalReference": "@dcl/playground-assets!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "rotateToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.rotationFromAxis:function(1)",
              "docComment": "/**\n * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system), RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply to something in order to rotate it from its local system to the given target system Note: axis1, axis2 and axis3 are normalized during this operation\n *\n * @param axis1 - defines the first axis\n *\n * @param axis2 - defines the second axis\n *\n * @param axis3 - defines the third axis\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotationFromAxis(axis1: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis2: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis3: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "axis2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "axis3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "rotationFromAxis"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.rotationFromAxisToRef:function(1)",
              "docComment": "/**\n * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\n *\n * @param axis1 - defines the first axis\n *\n * @param axis2 - defines the second axis\n *\n * @param axis3 - defines the third axis\n *\n * @param ref - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotationFromAxisToRef(axis1: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis2: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis3: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "axis2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "axis3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "rotationFromAxisToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.scale:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n *\n * @param scale - defines the multiplier factor\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scale(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "scale"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.scaleToRef:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n *\n * @param scale - defines the multiplier factor\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scaleToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "scaleToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.subtract:function(1)",
              "docComment": "/**\n * Returns a new Vector3 as the result of the substraction of the two given vectors.\n *\n * @returns the resulting vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function subtract(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.subtractFromFloatsToRef:function(1)",
              "docComment": "/**\n * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @param result - defines the Vector3 object where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function subtractFromFloatsToRef(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "name": "subtractFromFloatsToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.subtractToRef:function(1)",
              "docComment": "/**\n * Returns a new Vector3 as the result of the substraction of the two given vectors.\n *\n * @returns the resulting vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function subtractToRef(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "subtractToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.toString:function(1)",
              "docComment": "/**\n * Creates a string representation of the Vector3\n *\n * @returns a string with the Vector3 coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toString(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toString"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.transformCoordinates:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector. This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n *\n * @param vector - defines the Vector3 to transform\n *\n * @param transformation - defines the transformation matrix\n *\n * @returns the transformed Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transformCoordinates(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "transformCoordinates"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.transformCoordinatesFromFloatsToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z) This method computes tranformed coordinates only, not transformed direction vectors\n *\n * @param x - define the x coordinate of the source vector\n *\n * @param y - define the y coordinate of the source vector\n *\n * @param z - define the z coordinate of the source vector\n *\n * @param transformation - defines the transformation matrix\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transformCoordinatesFromFloatsToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "name": "transformCoordinatesFromFloatsToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.transformCoordinatesToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n *\n * @param vector - defines the Vector3 to transform\n *\n * @param transformation - defines the transformation matrix\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transformCoordinatesToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "transformCoordinatesToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.transformNormal:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n *\n * @param vector - defines the Vector3 to transform\n *\n * @param transformation - defines the transformation matrix\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transformNormal(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "transformNormal"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.transformNormalFromFloatsToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z) This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n *\n * @param x - define the x coordinate of the source vector\n *\n * @param y - define the y coordinate of the source vector\n *\n * @param z - define the z coordinate of the source vector\n *\n * @param transformation - defines the transformation matrix\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transformNormalFromFloatsToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "name": "transformNormalFromFloatsToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.transformNormalToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n *\n * @param vector - defines the Vector3 to transform\n *\n * @param transformation - defines the transformation matrix\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transformNormalToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/playground-assets!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "transformNormalToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.Up:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set tolengthSquared (0.0, 1.0, 0.0)\n *\n * @returns a new up Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Up(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Up"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!Vector3.Zero:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (0.0, 0.0, 0.0)\n *\n * @returns a new empty Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Zero(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/playground-assets!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Zero"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Vector3:type",
          "docComment": "/**\n * Vector3 is a type and a namespace. - The namespace contains all types and functions to operates with Vector3 - The type Vector3 is an alias to Vector3.ReadonlyVector3\n * ```\n *\n * // Namespace usage example\n * const next = Vector3.add(pointA, velocityA)\n *\n * // Type usage example\n * const readonlyPosition: Vector3 = Vector3.Zero()\n * readonlyPosition.x = 0.1 // this FAILS\n *\n * // For mutable usage, use `Vector3.Mutable`\n * const position: Vector3.Mutable = Vector3.One()\n * position.x = 3.0 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Vector3 = "
            },
            {
              "kind": "Reference",
              "text": "Vector3.ReadonlyVector3",
              "canonicalReference": "@dcl/playground-assets!Vector3.ReadonlyVector3:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../sdk/node_modules/@dcl/ecs-math/dist/Vector3.d.ts",
          "releaseTag": "Public",
          "name": "Vector3",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/playground-assets!Vector3Type:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Vector3Type = "
            },
            {
              "kind": "Content",
              "text": "{\n    x: number;\n    y: number;\n    z: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../ecs/dist/schemas/custom/Vector3.d.ts",
          "releaseTag": "Public",
          "name": "Vector3Type",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!VisibilityComponent:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "VisibilityComponent: "
            },
            {
              "kind": "Reference",
              "text": "ComponentDefinition",
              "canonicalReference": "@dcl/playground-assets!ComponentDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "VisibilityComponentSchema",
              "canonicalReference": "@dcl/playground-assets!VisibilityComponentSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/global.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "VisibilityComponent",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/playground-assets!VisibilityComponentSchema:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "VisibilityComponentSchema: "
            },
            {
              "kind": "Reference",
              "text": "ISchema",
              "canonicalReference": "@dcl/playground-assets!ISchema:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PBVisibilityComponent",
              "canonicalReference": "@dcl/playground-assets!PBVisibilityComponent:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    COMPONENT_ID: number;\n}"
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/VisibilityComponent.gen.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "VisibilityComponentSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/playground-assets!WireMessage:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace WireMessage "
            }
          ],
          "fileUrlPath": "../ecs/dist/serialization/wireMessage.d.ts",
          "releaseTag": "Public",
          "name": "WireMessage",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Enum",
              "canonicalReference": "@dcl/playground-assets!WireMessage.Enum:enum",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enum Enum "
                }
              ],
              "releaseTag": "Public",
              "name": "Enum",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@dcl/playground-assets!WireMessage.Enum.DELETE_COMPONENT:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "DELETE_COMPONENT = "
                    },
                    {
                      "kind": "Content",
                      "text": "2"
                    }
                  ],
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "name": "DELETE_COMPONENT"
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@dcl/playground-assets!WireMessage.Enum.MAX_MESSAGE_TYPE:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "MAX_MESSAGE_TYPE = "
                    },
                    {
                      "kind": "Content",
                      "text": "3"
                    }
                  ],
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "name": "MAX_MESSAGE_TYPE"
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@dcl/playground-assets!WireMessage.Enum.PUT_COMPONENT:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "PUT_COMPONENT = "
                    },
                    {
                      "kind": "Content",
                      "text": "1"
                    }
                  ],
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "name": "PUT_COMPONENT"
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@dcl/playground-assets!WireMessage.Enum.RESERVED:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "RESERVED = "
                    },
                    {
                      "kind": "Content",
                      "text": "0"
                    }
                  ],
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "name": "RESERVED"
                }
              ]
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/playground-assets!WireMessage.HEADER_LENGTH:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "HEADER_LENGTH = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "HEADER_LENGTH",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!WireMessage.Header:type",
              "docComment": "/**\n * @param length - Uint32 the length of all message (including the header)\n *\n * @param type - define the function which handles the data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Header = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        length: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint32",
                  "canonicalReference": "@dcl/playground-assets!WireMessage.Uint32:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        type: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint32",
                  "canonicalReference": "@dcl/playground-assets!WireMessage.Uint32:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Header",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!WireMessage.readHeader:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function readHeader(buf: "
                },
                {
                  "kind": "Reference",
                  "text": "ByteBuffer",
                  "canonicalReference": "@dcl/playground-assets!ByteBuffer:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Header",
                  "canonicalReference": "@dcl/playground-assets!WireMessage.Header:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buf",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "readHeader"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/playground-assets!WireMessage.Uint32:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Uint32 = "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Uint32",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/playground-assets!WireMessage.validate:function(1)",
              "docComment": "/**\n * Validate if the message incoming is completed\n *\n * @param buf - ByteBuffer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function validate(buf: "
                },
                {
                  "kind": "Reference",
                  "text": "ByteBuffer",
                  "canonicalReference": "@dcl/playground-assets!ByteBuffer:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buf",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validate"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!YGAlign:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum YGAlign "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_transform.gen.d.ts",
          "releaseTag": "Public",
          "name": "YGAlign",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGAlign.YGA_AUTO:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGA_AUTO = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGA_AUTO"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGAlign.YGA_BASELINE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGA_BASELINE = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGA_BASELINE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGAlign.YGA_CENTER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGA_CENTER = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGA_CENTER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGAlign.YGA_FLEX_END:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGA_FLEX_END = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGA_FLEX_END"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGAlign.YGA_FLEX_START:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGA_FLEX_START = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGA_FLEX_START"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGAlign.YGA_SPACE_AROUND:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGA_SPACE_AROUND = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGA_SPACE_AROUND"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGAlign.YGA_SPACE_BETWEEN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGA_SPACE_BETWEEN = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGA_SPACE_BETWEEN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGAlign.YGA_STRETCH:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGA_STRETCH = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGA_STRETCH"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!YGDisplay:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum YGDisplay "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_transform.gen.d.ts",
          "releaseTag": "Public",
          "name": "YGDisplay",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGDisplay.YGD_FLEX:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGD_FLEX = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGD_FLEX"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGDisplay.YGD_NONE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGD_NONE = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGD_NONE"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!YGEdge:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum YGEdge "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_transform.gen.d.ts",
          "releaseTag": "Public",
          "name": "YGEdge",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGEdge.YGE_ALL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGE_ALL = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGE_ALL"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGEdge.YGE_BOTTOM:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGE_BOTTOM = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGE_BOTTOM"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGEdge.YGE_END:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGE_END = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGE_END"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGEdge.YGE_HORIZONTAL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGE_HORIZONTAL = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGE_HORIZONTAL"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGEdge.YGE_LEFT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGE_LEFT = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGE_LEFT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGEdge.YGE_RIGHT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGE_RIGHT = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGE_RIGHT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGEdge.YGE_START:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGE_START = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGE_START"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGEdge.YGE_TOP:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGE_TOP = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGE_TOP"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGEdge.YGE_VERTICAL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGE_VERTICAL = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGE_VERTICAL"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!YGFlexDirection:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum YGFlexDirection "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_transform.gen.d.ts",
          "releaseTag": "Public",
          "name": "YGFlexDirection",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGFlexDirection.YGFD_COLUMN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGFD_COLUMN = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGFD_COLUMN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGFlexDirection.YGFD_COLUMN_REVERSE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGFD_COLUMN_REVERSE = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGFD_COLUMN_REVERSE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGFlexDirection.YGFD_ROW:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGFD_ROW = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGFD_ROW"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGFlexDirection.YGFD_ROW_REVERSE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGFD_ROW_REVERSE = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGFD_ROW_REVERSE"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!YGJustify:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum YGJustify "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_transform.gen.d.ts",
          "releaseTag": "Public",
          "name": "YGJustify",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGJustify.YGJ_CENTER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGJ_CENTER = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGJ_CENTER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGJustify.YGJ_FLEX_END:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGJ_FLEX_END = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGJ_FLEX_END"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGJustify.YGJ_FLEX_START:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGJ_FLEX_START = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGJ_FLEX_START"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGJustify.YGJ_SPACE_AROUND:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGJ_SPACE_AROUND = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGJ_SPACE_AROUND"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGJustify.YGJ_SPACE_BETWEEN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGJ_SPACE_BETWEEN = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGJ_SPACE_BETWEEN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGJustify.YGJ_SPACE_EVENLY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGJ_SPACE_EVENLY = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGJ_SPACE_EVENLY"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!YGOverflow:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum YGOverflow "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_transform.gen.d.ts",
          "releaseTag": "Public",
          "name": "YGOverflow",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGOverflow.YGO_HIDDEN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGO_HIDDEN = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGO_HIDDEN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGOverflow.YGO_SCROLL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGO_SCROLL = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGO_SCROLL"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGOverflow.YGO_VISIBLE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGO_VISIBLE = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGO_VISIBLE"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!YGPositionType:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum YGPositionType "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_transform.gen.d.ts",
          "releaseTag": "Public",
          "name": "YGPositionType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGPositionType.YGPT_ABSOLUTE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGPT_ABSOLUTE = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGPT_ABSOLUTE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGPositionType.YGPT_RELATIVE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGPT_RELATIVE = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGPT_RELATIVE"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!YGUnit:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum YGUnit "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_transform.gen.d.ts",
          "releaseTag": "Public",
          "name": "YGUnit",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGUnit.YGU_AUTO:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGU_AUTO = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGU_AUTO"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGUnit.YGU_PERCENT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGU_PERCENT = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGU_PERCENT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGUnit.YGU_POINT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGU_POINT = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGU_POINT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGUnit.YGU_UNDEFINED:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGU_UNDEFINED = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGU_UNDEFINED"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/playground-assets!YGWrap:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum YGWrap "
            }
          ],
          "fileUrlPath": "../ecs/dist/components/generated/pb/decentraland/sdk/components/ui_transform.gen.d.ts",
          "releaseTag": "Public",
          "name": "YGWrap",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGWrap.YGW_NO_WRAP:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGW_NO_WRAP = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGW_NO_WRAP"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGWrap.YGW_WRAP:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGW_WRAP = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGW_WRAP"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/playground-assets!YGWrap.YGW_WRAP_REVERSE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "YGW_WRAP_REVERSE = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "YGW_WRAP_REVERSE"
            }
          ]
        }
      ]
    }
  ]
}
