export type CliErrorName =
  // Command errors
  | 'COMMAND_NOT_VALID'
  | 'COMMAND_NOT_FOUND'
  // Deployment errors
  | 'DEPLOY_WORKSPACE_NOT_SUPPORTED'
  | 'DEPLOY_INVALID_PROJECT_TYPE'
  | 'DEPLOY_INVALID_ARGUMENTS'
  | 'DEPLOY_UPLOAD_FAILED'
  // Export static errors
  | 'EXPORT_STATIC_BASE_URL_REQUIRED'
  | 'EXPORT_STATIC_INVALID_REALM_NAME'
  | 'EXPORT_STATIC_INVALID_OUTPUT_DIRECTORY'
  // Init errors
  | 'INIT_DIR_NOT_EMPTY'
  | 'INIT_INVALID_ARGUMENTS'
  | 'INIT_INVALID_PROJECT'
  | 'INIT_INVALID_TEMPLATE_ZIP_URL'
  // Quests errors
  | 'QUESTS_INVALID_TARGET'
  | 'QUESTS_INVALID_JSON'
  | 'QUESTS_INVALID_QUEST_JSON'
  | 'QUESTS_FILE_DOES_NOT_EXIST'
  | 'QUESTS_CREATION_CANCELLED'
  | 'QUESTS_INVALID_ADDRESS'
  | 'QUESTS_INVALID_UUID'
  // Components errors
  | 'CONFIG_NOT_PROVIDED'
  // General errors
  | 'ACCOUNT_INVALID_PRIVATE_KEY'
  | 'ARGS_ARG_ERROR'
  | 'COMMANDS_INVALID_FOLDER'
  | 'COMMANDS_INVALID_INDEX_FILE'
  | 'PROJECT_FILES_DUPLICATE_FILE'
  | 'PROJECT_FILES_INVALID_PACKAGE_JSON'
  | 'PROJECT_VALIDATIONS_PACKAGE_JSON_REQUIRED'
  | 'PROJECT_VALIDATIONS_INVALID_PROJECT_KIND'
  // Bundle errors
  | 'BUNDLE_SCENE_MAIN_REQUIRED'
  | 'BUNDLE_SCENE_RUNTIME_VERSION_REQUIRED'
  | 'BUNDLE_TSCONFIG_REQUIRED'
  | 'BUNDLE_NO_INPUT_FILES'
  | 'BUNDLE_REBUILD_FAILED'
  | 'BUNDLE_TYPE_CHECKER_FAILED'
  // Portable experience errors
  | 'PORTABLE_EXPERIENCE_SW_INVALID_SCENE_JSON'
  | 'PORTABLE_EXPERIENCE_SW_INVALID_WEARABLE_JSON'
  // Scene validations errors
  | 'SCENE_VALIDATIONS_INVALID_SCENE_JSON'
  | 'SCENE_VALIDATIONS_DUPLICATE_PARCELS'
  | 'SCENE_VALIDATIONS_BASE_PARCEL_REQUIRED'
  | 'SCENE_VALIDATIONS_COORDINATES_OUTSIDE_LIMITS'
  | 'SCENE_VALIDATIONS_PARCELS_NOT_CONNECTED'
  | 'SCENE_VALIDATIONS_INVALID_MAIN_FORMAT'
  | 'SCENE_VALIDATIONS_MAX_FILE_SIZE_EXCEEDED'
  // Workspace validations errors
  | 'WORKSPACE_VALIDATIONS_INVALID_WORKSPACE_JSON'
  | 'WORKSPACE_VALIDATIONS_INVALID_WORKSPACE_JSON_READ'

export class CliError<T extends CliErrorName> extends Error {
  constructor(public name: T = 'CliError' as T, public message: string = '', public stack?: string) {
    super()
  }
}
